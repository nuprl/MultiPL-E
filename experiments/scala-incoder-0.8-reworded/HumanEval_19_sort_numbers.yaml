name: HumanEval_19_sort_numbers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
  \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
  \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
  one three five\")\n    def sortNumbers(numbers : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\"\
  )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
  \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
  \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four\
  \ five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two\
  \ one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"
completions: ["        //Write code here\n        var temp : String = \"\"\n     \
    \   var count : Int = numbers.length\n        var sortedNumbers : ListBuffer[String]\
    \ = ListBuffer()\n        var currentString = \"\"\n\n        for(i<-1 to count\
    \ -1) {\n            if(numbers.charAt(i) == \" \") {\n                sortedNumbers\
    \ += currentString\n                currentString = \"\"\n            } else {\n\
    \                currentString += numbers.charAt(i)\n            }\n        }\n\
    \        sortedNumbers += currentString\n        sortedNumbers.foreach(x => temp\
    \ = temp + x)\n        temp = temp + \" \"\n        return temp", "        var\
    \ sorted = numbers.split(' ').filter(_.nonEmpty).sorted\n        sorted.reverse.mkString(\"\
    \ \")", '        numbers.split(" ").map (x => x.toInt).sortBy(_.toInt).map (x
    => x.toString).mkString(" ")', "        val ns = numbers.split(\" \").toArray\n\
    \        val nList = ListBuffer(ns)\n        nList.sortWith(_.compareTo(_) > 0)\n\
    \        nList.mkString(\" \")", "        val array = numbers.split(\" \")\n \
    \       val numArray = array.map(_.toInt).toList\n        val numMap = numArray.map(_.toString.toInt).toList.zipWithIndex.toMap\n\
    \        numMap.map{case (k, v) => (k, v)}.sortBy(_._1).map(_._2).mkString(\"\
    \ \")", "        val list = numbers.split(\" \").toList.map(_.toInt)\n       \
    \ val numList = list.map(x => x.toString)\n        val numSort = numList.sorted\n\
    \        val newString = (numSort(0) + \" \" + numSort(1) + \" \" + numSort(2))\n\
    \        newString", "        val numberArray = numbers.split(\" \").toList\n\
    \        // For every number in the list, remove the 'zero' choice and sort it\n\
    \        numberArray.map { number =>\n            if (number.length() > 3) {\n\
    \                if (number.substring(0, 3) == \"zero\") {\n                 \
    \   numberArray.remove(number)\n                }\n            }\n           \
    \ val array = number.split(\" \").sorted\n            array.mkString(\" \")\n\
    \        }.mkString(\" \")", "        def numberSort(n : String, sorted : mutable.Buffer[String],\
    \ i : Int) : Unit = {\n            if (n == \"\") return\n            val split\
    \ = n.split(\" \")\n            if (split.length == 1) {\n                sorted.add(n)\n\
    \                numberSort(n, sorted, 0)\n            } else if (split.length\
    \ == 2) {\n                numberSort(split(0), sorted, 0)\n                if\
    \ (split(1) = \"one\" || split(1) = \"two\" || split(1) = \"three\" || split(1)\
    \ = \"four\" || split(1) = \"five\" || split(1) = \"six\" || split(1) = \"seven\"\
    \ || split(1) = \"eight\" || split(1) = \"nine\") {\n                    numberSort(split(0),\
    \ sorted, 1)\n                }\n            }\n        }\n        val sorted\
    \ = mutable.Buffer[String]()\n        for (n <- numbers.split(\" \")) {\n    \
    \        numberSort(n, sorted, 0)\n        }\n        sorted.toList.toString",
  "        var nums = numbers.toString.split(\" \").map(_.toInt).toList\n        nums\
    \ = nums.sortWith((x,y) => x < y)\n        strings.mkString(\" \")", "       \
    \ // We are going to use mutable collections to sort our numbers\n        val\
    \ nums = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        while(i <\
    \ numbers.length){\n            // We get rid of the punctuation and split the\
    \ string by the space delimiter\n            val items = numbers.substring(i,\
    \ i+1).split(\" \").filter(_.nonEmpty)\n            // We convert our strings\
    \ to integers using the map/filter combo\n            val numStrs = items.map(_.toInt)\n\
    \            val numStr = numStrs.toList\n            // We add our number to\
    \ the buffer if it exists and if not we add a new empty one\n            nums.append(numStr.headOption.getOrElse(0))\n\
    \            numStr.tail.foreach(i => nums.append(i))\n            i = i + items.length\n\
    \        }\n        // Now we sort the numbers and convert the buffer to a string\n\
    \        nums.toList.sortWith((x,y) => x < y)\n            .map(_.toString)\n\
    \            .toString", "        var numberList = numbers.split(\"\\\\s+\")\n\
    \        numberList = numberList.sortBy(n => n.toInt)\n        numberList.toArray.mkString(\"\
    \ \")", "        // Initialize an empty array to hold the sorted numbers\n   \
    \     var numbers = mutable.Array[String]()\n        val splitNumber = numbers.split(\"\
    \ \")\n        // Loop through all the numbers and add them to the array\n   \
    \     splitNumber foreach { number =>\n            numbers += number\n       \
    \ }\n        // Sort the array\n        val sortedNumbers = scala.util.Sorting.quickSort(numbers)\n\
    \        // Return string with sorted numbers\n        sortedNumbers.mkString(\"\
    \ \")", "        var result = \"\"\n        val list = numbers.split(\" \").toList\n\
    \        val numList = list.map(_.toInt)\n        val sorted = numList.sort\n\
    \        result = sorted.mkString(\" \")\n        result", "        val sortedNumbers\
    \ = numbers.trim().split(\" \").map(_.toInt)\n        val sorted = sortedNumbers.sortWith(_\
    \ > _)\n        val reordered = sorted.mkString(\" \")\n        reordered", " \
    \       def isValidNumber (n : String) : Boolean = {\n            var isValid\
    \ : Boolean = true\n            if (n.toInt>9) isValid =  false\n            else\
    \ isValid = true\n            isValid\n        }\n        val numberArray = numbers.split(\"\
    \ \").toArray\n        var sortedArray = Array.empty[Int]\n        sortedArray\
    \ = numberArray.filterNot(isValidNumber).toArray\n        sortedArray = sortedArray.sortWith(math.Ordering[Int].reverse).map(_.toInt).toArray\n\
    \        val sortedString : String = sortedArray.mkString(\" \")\n        sortedString",
  "        // Initialize an Array[String] to hold the numbers in order.\n        var\
    \ nums = Array.ofDim[String](numbers.split(\" \").size)\n        // Iterate over\
    \ the input string, splitting each element on whitespace,\n        // and inserting\
    \ them into our Array[String].\n        numbers.split(\" \").foreach(x => nums(nums.length-1)\
    \ = x) // Last one doesn't need splitting\n        nums.sort\n        // Return\
    \ nums as a space-delimited string.\n        nums.mkString(\" \")", "        val\
    \ zero = numbers(0)\n        val one = numbers(1)\n        val two = numbers(2)\n\
    \        val three = numbers(3)\n        val four = numbers(4)\n        val five\
    \ = numbers(5)\n        val six = numbers(6)\n        val seven = numbers(7)\n\
    \        val eight = numbers(8)\n        val nine = numbers(9)\n        val zeroToNine\
    \ = numbers(0)..numbers(9)\n        val zeroToFour = numbers(0)..numbers(4)\n\
    \        val zeroToThree = numbers(0)..numbers(3)\n        val zeroToTwo = numbers(0)..numbers(2)\n\
    \        val oneToFour = numbers(1)..numbers(4)\n        val oneToThree = numbers(1)..numbers(3)\n\
    \        val oneToTwo = numbers(1)..numbers(2)\n        val twoToFour = numbers(2)..numbers(4)\n\
    \        val twoToThree = numbers(2)..numbers(3)\n        val twoToOne = numbers(2)..numbers(1)\n\
    \        val threeToFour = numbers(3)..numbers(4)\n        val threeToTwo = numbers(3)..numbers(2)\n\
    \        val threeToOne = numbers(3)..numbers(1)\n        val fourToTwo = numbers(4)..numbers(2)\n\
    \        val fourToOne = numbers(4)..numbers(1)\n        val fiveToTwo = numbers(5)..numbers(2)\n\
    \        val fiveToOne = numbers(5)..numbers(1)\n        val sixToTwo = numbers(6)..numbers(2)\n\
    \        val sixToOne = numbers(6)..numbers(1)\n        val sevenToTwo = numbers(7)..numbers(2)\n\
    \        val sevenToOne = numbers(7)..numbers(1)\n        val eightToTwo = numbers(8)..numbers(2)\n\
    \        val eightToOne = numbers(8)..numbers(1)\n        val nineToTwo = numbers(9)..numbers(2)\n\
    \        val nineToOne = numbers(9)..numbers(1)\n        val zeroToNineWithMinusOne\
    \ = zero..nine\n        val zeroToFourWithMinusOne = zero..four\n        val zeroToThreeWithMinusOne\
    \ = zero..three\n        val zeroToTwoWithMinusOne = zero..two\n        val oneToFourWithMinusOne\
    \ = one", "        val parts = numbers.split(\" \").map(_.toInt)\n        val\
    \ sortedParts = parts.sortWith(_ < _)\n        parts.map(x => x.toString).mkString(\"\
    \ \")", "      val numberList = numbers.split(\" \").map(_.toInt).toList\n   \
    \   val minNum = numberList.min\n      val maxNum = numberList.max\n      numberList.zipWithIndex.sortBy(_._1).map(_._2).foldLeft(\"\
    \")((acc, n) => acc + (if (n < minNum) \" zero\" else if (n < minNum) \" one\"\
    \ else if (n < minNum) \" two\" else if (n < minNum) \" three\" else if (n < minNum)\
    \ \" four\" else if (n < minNum) \" five\" else if (n < minNum) \" six\" else\
    \ if (n < minNum) \" seven\" else if (n < minNum) \" eight\" else if (n < minNum)\
    \ \" nine\" else \" zero \" + n)).trim", "        // Create a mutable list of\
    \ strings to hold the results\n        val ret = new mutable.MutableList[String]()\n\
    \        // Split the string into space-delimited tokens\n        val tokens =\
    \ numbers.split(\" \").map(_.toInt)\n        // Add the sorted tokens to our mutable\
    \ list\n        tokens foreach (x => ret.add(x sortBy (_ < x) mkString \" \"))\n\
    \        // Convert the mutable list back into a single string\n        ret.toList.reverse.mkString(\"\
    \ \")", "        def isValid(num: String) : Boolean = num.length > 2 && num.toString.toIntValue\
    \ >= 0 && num.toString.toIntValue <= 9\n\n        var stringBuilder = StringBuilder()\n\
    \        var temp = \"\"\n        numbers.split(\" \").foreach(n => {\n      \
    \      if (isValid(n)) {\n                temp = temp + n\n            }\n   \
    \     })\n        stringBuilder.append(temp)\n        stringBuilder.toString",
  "      val numberArray = numbers.split(\" \").toArray\n      val sortedArray = numberArray.sortWith((x,y)\
    \ => x.compareTo(y))\n      sortedArray.toString", "        val words = numbers.split(\"\
    \ \").map(_.toInt)\n        val counts = words.groupBy(_._1).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val sortedCount = counts.map(c =>\
    \ maxCount - c).toList.sortBy(_._1).reverse\n        val result = sortedCount.map\
    \ { case (c, x) => s\"$x $c\" }.mkString(\" \")\n        result", "        def\
    \ swap(x : Int, y : Int) : Unit = {\n            val temp = x\n            x =\
    \ y\n            y = temp\n        }\n        val numberArray = numbers.split(\"\
    \ \").map(_.toInt)\n        val orderedArray = numberArray.sortWith((x, y) =>\
    \ x < y)\n        val stringBuilder = new StringBuilder\n        for (i <- 0 until\
    \ orderedArray.length - 1) {\n            stringBuilder += orderedArray(i) + \"\
    \ \"\n        }\n        stringBuilder += orderedArray(orderedArray.length - 1)\n\
    \        return stringBuilder.toString()", "        def insertToList(x: String,\
    \ list: List[String]): List[String] = {\n            list match {\n          \
    \      case Nil => List(x)\n                case _ => list ++ List(x)\n      \
    \      }\n        }\n        val list = numbers.split(\"\\\\s+\").map(_.trim).toList\n\
    \        val sortedList = list.sortWith(_ < _)\n        val result = list.map(x\
    \ => insertToList(x, sortedList)).mkString(\" \")\n        result", "        var\
    \ newNumbers = \"\"\n        var currentNumbers = \"\"\n        var currentIndex\
    \ = 0\n        numbers.split(\" \").foreach(x => {\n            currentNumbers\
    \ += \" \" + x\n            if (currentIndex < 9) {\n                if (x.toInt()\
    \ < 9) {\n                    newNumbers += \" \" + x.toInt\n                }\n\
    \                else {\n                    newNumbers += \" \" + x.toInt\n \
    \                   currentIndex += 1\n                }\n            }\n    \
    \        else {\n                currentNumbers = \"\"\n                currentIndex\
    \ = 1\n            }\n        })\n        newNumbers.split(\" \").sortWith(x =>\
    \ x.toInt < 9).mkString(\" \")", "        val stringList = numbers.split(\"\\\\\
    s+\").toList\n        val stringList = stringList.map(number => if(number.toString.equals(\"\
    0\") || number.toString.equals(\"1\")) number else number.toString.toInt)\n  \
    \      stringList.sortBy(x => (-x.toInt))\n        stringList.mkString(\" \")",
  "        def digits(number: String) : List[String] = {\n            val regex =\
    \ \"\"\"\\d+\"\"\".r\n            val match = regex.findAllIn(number).map(_.toInt)\n\
    \            match.toList\n        }\n        val split = numbers.split(\" \"\
    )\n        val numbers = split.map{x => digits(x)}.toList.sorted\n        val\
    \ res = split.filter(_ => numbers.contains(_)).mkString(\" \")\n        res",
  "        val zero = numbers(0)\n        val n = numbers.length\n        val numberList\
    \ = numbers.split(' ').toList\n        val numberArray = numberList.toArray\n\
    \        val result = numberArray.sorted\n        val result = numberList.mkString(\"\
    \ \")\n        numberList.filter(x => x != zero).mkString(\" \")", "        var\
    \ result : String = \"\";\n        var numberArray: Array[String] = numbers.trim().split(\"\
    \ \");\n        var numberArraySorted: Array[String] = numberArray.sort(\n   \
    \         (x,y) => (Integer.parseInt(x)-Integer.parseInt(y)) * (-1)\n        );\n\
    \        var numsStr : String = \"\";\n        var numsArr : Array[String] = numberArraySorted.toList;\n\
    \        for (i <- 0 until numsArr.length) {\n            numsStr += numsArr(i)\
    \ + \" \";\n        }\n        for (i <- 0 until numsArr.length) {\n         \
    \   result += numsArr(i) + \" \"\n        }\n        result", "        val numberList\
    \ = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers = numberList.sorted\n\
    \        val result = sortedNumbers.mkString(\" \")\n        result", "      \
    \  var result = \"\"\n        numbers.split(\"\\\\s\").foreach(x => {\n      \
    \      val str = x.trim\n            if (str.equals(\"zero\")) result += str\n\
    \            else if (str.equals(\"one\")) result += str\n            else if\
    \ (str.equals(\"two\")) result += str\n            else if (str.equals(\"three\"\
    )) result += str\n            else if (str.equals(\"four\")) result += str\n \
    \           else if (str.equals(\"five\")) result += str\n            else if\
    \ (str.equals(\"six\")) result += str\n            else if (str.equals(\"seven\"\
    )) result += str\n            else if (str.equals(\"eight\")) result += str\n\
    \            else if (str.equals(\"nine\")) result += str\n            else result\
    \ += \" \" + str\n        })\n        result.trim", "        val sortedNumbers\
    \ = numbers.toList.sort\n        val sortedNumbersString = sortedNumbers.mkString(\"\
    \ \")\n        sortedNumbersString", "        def sort(i : Int) : Option[Int]\
    \ = if (numbers(i) == \"nine\") Some(i) else Some(numbers.indexOf(\"one two three\
    \ four five six seven eight nine\") + 1)\n        def makeList(i : Int) : List[Int]\
    \ = if (i == 9) Nil else sort(i).toList ::: makeList(i + 1)\n        if (numbers.length\
    \ == 0) return \"\"\n        makeList(0)", "        val numberList = numbers.toList\n\
    \        val map = (0 to 9).map(i => (i, numberList(i))).toMap\n        val sortedList\
    \ = numberList.sortWith(_.toInt > _.toInt)\n        val sortedString = sortedList.map(i\
    \ => map(i._2)).mkString(\" \")\n        println(sortedString)", "        // Your\
    \ code here\n        numbers.split(\" \").sortWith(_.toInt < _.toInt).mkString(\"\
    \ \")", "        def sortInPlace (list : List[String]) = { list match {\n    \
    \        case Nil => Nil\n            case h :: t =>\n                val r =\
    \ t.zipWithIndex.sortWith {\n                    (x, y) => x._1 < y._1\n     \
    \           }\n                list updated (x._2, x._1) r\n        }\n      \
    \  val values = numbers.split(\" \").toList\n        val sorted = sortInPlace(values)\n\
    \        sorted.mkString(\" \")", "        val nStrs = numbers.split(\" \").map(_.toInt)\n\
    \        nStrs.toSeq.sortWith(_ < _).mkString(\" \")", "        val s      = numbers.split(\"\
    \ \").toList\n        val nums   = s.map(_.toInt).toList\n        nums.sortBy(x\
    \ => x).mkString(\" \")", "        val nums = numbers.split(\" \").filter(_.nonEmpty).toList\n\
    \        nums.sortWith(_.compareTo(_) == 0)\n        nums.mkString(\" \")", " \
    \       val numArray = numbers.toList.map(_.toInt).toArray\n        val list =\
    \ numArray.sortBy(n => n)\n        val result = list.mkString(\" \")\n       \
    \ return result", "        val stringList = numbers.split(\"\\\\s+\")\n      \
    \  stringList.map(_.toInt).sorted", "        val nums = numbers.split(\" \").map(\
    \ x => x.toInt ).toList\n        var smallest = Integer.MIN_VALUE\n        var\
    \ largest = Integer.MAX_VALUE\n        for (x <- nums) {\n            smallest\
    \ = smallest > x ? smallest : x\n            largest = largest < x ? largest :\
    \ x\n        }\n        val result = nums.sortBy( x => x - smallest ).sortBy(\
    \ x => largest - x )\n        \" \".concat(result.toString)", "        var output\
    \ = new StringBuilder()\n        var i = 0\n        while (i < numbers.length)\
    \ {\n            var str = numbers.substring(i)\n            val numberList =\
    \ str.split(\" \").toList\n            val sortedList: Seq[String] = numberList.sortWith(compareNumbers)\n\
    \            output.append(sortedList(0) +\" \")\n            for (i <- 1 until\
    \ sortedList.length)\n                output.append(sortedList(i) + \" \")\n \
    \           i = i + sortedList.length\n        }\n        output.toString()",
  "        // Initialize result to an empty string\n        var result = \"\"\n  \
    \      // Split string on spaces and convert each space-delimited word into a\
    \ number\n        val numbers_array = numbers.split(\" \").map(x => x.toInt)\n\
    \        // Sort numbers ascending\n        numbers_array.sortBy(x => x).foreach(x\
    \ => result += x + \" \")\n        // Remove last space added from result\n  \
    \      result = result.substring(0, result.length - 1)\n        result", "   \
    \     var result = \"\"\n        val numbers = numbers.split(\" \").filter(_.nonEmpty).map(_.toInt)\n\
    \        numbers.sortWith(_ < _).foreach(number => result += number+\" \")\n \
    \       result", "        // Parse input string to array of ints\n        val\
    \ numberArray = numbers.split(' ').map(_.toInt)\n        // Return array of ints\
    \ sorted from smallest to largest\n        numberArray.sortBy(_).reverse", " \
    \       val n = numbers.split(\" \").map(_.toInt).toList\n        val zero = n.count(_.toString\
    \ == \"0\")\n        val nine = n.count(_.toString == \"9\")\n        val smallestNumbers\
    \ = n.filter(_ < 0) // negative numbers\n        val largestNumbers = n.filter(_\
    \ > 0) // positive numbers\n        // sort smallest numbers from smallest to\
    \ largest\n        val sortedSmallest = smallestNumbers.sorted\n        // add\
    \ zero, add nine\n        val sortedNumbers = sortedSmallest :+ zero :+ nine\n\
    \        // sort largest numbers from smallest to largest\n        val sortedLargest\
    \ = largestNumbers.sorted\n        // add zero, add nine\n        val sortedNumbersPlusZero\
    \ = sortedLargest :+ zero :+ nine\n        // sort numbers\n        val sortedNumbersPlusZeroSorted\
    \ = sortedNumbersPlusZero.sorted\n        // return the numbers\n        sortedNumbersPlusZeroSorted.mkString(\"\
    \ \")", "        var result = \"\";\n        for (i <- numbers.split(\"\\\\s+\"\
    ).filter(_ => _ != \"\").sortWith(a => a.toInt < b.toInt)) {\n            result\
    \ += i + \" \";\n        }\n        return result", "        var output : String\
    \ = \"\"\n        var numberMap : mutable.Map[String, Int] = mutable.Map[String,\
    \ Int]()\n\n        // Split string into individual numbers\n        var numbers\
    \ : (Array[String]) = numbers.split(\" \").map( _.trim() )\n\n        // Iterate\
    \ through the individual numbers\n        var j : Int = 0\n        while(j < numbers.length)\
    \ {\n            val inputNumber = numbers(j)\n            val intValue : Int\
    \ = inputNumber match {\n                // Handle the special case for \"zero\"\
    \n                case x if x.equals(\"zero\") => 0\n\n                // Handle\
    \ the special case for \"one\"\n                case x if x.equals(\"one\") =>\
    \ 1\n\n                // Handle the special case for \"two\"\n              \
    \  case x if x.equals(\"two\") => 2\n\n                // Handle the special case\
    \ for \"three\"\n                case x if x.equals(\"three\") => 3\n\n      \
    \          // Handle the special case for \"four\"\n                case x if\
    \ x.equals(\"four\") => 4\n\n                // Handle the special case for \"\
    five\"\n                case x if x.equals(\"five\") => 5\n\n                //\
    \ Handle the special case for \"six\"\n                case x if x.equals(\"six\"\
    ) => 6\n\n                // Handle the special case for \"seven\"\n         \
    \       case x if x.equals(\"seven\") => 7\n\n                // Handle the special\
    \ case for \"eight\"\n                case x if x.equals(\"eight\") => 8\n\n \
    \               // Handle the special case for \"nine\"\n                case\
    \ x if x.equals(\"nine\") => 9\n\n                // Handle the case for numbers\
    \ other than \"zero\" or \"one\", \"two\", \"three\", ... \"nine\"\n         \
    \       case _ => inputNumber.toInt\n            }\n\n            // Increment\
    \ the map entry with the current number\n            numberMap.put(inputNumber,\
    \ intValue)\n            j += 1\n        }\n\n        // Sort the map entries\
    \ by the value\n        numberMap = numberMap.sortBy(_._2)\n\n        // Return\
    \ the resulting string\n        numberMap.foreach { case (key, value) => output\
    \ += key + \" \" + value + \" \" }\n        output", "        val zeros = numbers.split(\"\
    \ \")\n        val zeroCount = zeros.map(_.toInt).reduceLeft((x, y) => x + y)\n\
    \        val oneCount = zeros.map(_.toInt).reduceRight((x, y) => x + y)\n    \
    \    val twoCount = oneCount + zeros.map(_.toInt).reduceRight((x, y) => x + y)\n\
    \        val threeCount = twoCount + zeros.map(_.toInt).reduceRight((x, y) =>\
    \ x + y)\n        val fourCount = threeCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val fiveCount = fourCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val sixCount = fiveCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val sevenCount = sixCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val eightCount = sevenCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val nineCount = eightCount + zeros.map(_.toInt).reduceRight((x,\
    \ y) => x + y)\n        val sorted = zeros.sortBy(_.toInt)\n        val sortedString\
    \ = (zeros.toList ++ sorted.toList).mkString(\" \")\n        sortedString + ((oneCount\
    \ - sortedString.toString.toInt).toString) + \" \" + ((twoCount - sortedString.toString.toInt).toString)\
    \ + \" \" + ((threeCount - sortedString.toString.toInt).toString) + \" \" + ((fourCount\
    \ - sortedString.toString.toInt).toString) + \" \" + ((fiveCount - sortedString.toString.toInt).toString)\
    \ + \" \" + ((sixCount - sortedString.toString.toInt).toString) + \" \" + ((sevenCount\
    \ - sortedString.toString.toInt).toString) + \" \" + ((eightCount - sortedString.toString.toInt).toString)\
    \ + \" \" + ((nineCount - sortedString.toString.toInt).toString))", "        var\
    \ sorted = ListBuffer[String]()\n        numbers match {\n            case \"\"\
    \ => sorted\n            case \" \" => sorted\n            case xs => xs foreach\
    \ {\n                case x => sorted += \" \" + x\n            }\n        }\n\
    \        sorted.reverse.map { x => if (x.startsWith(\"!\")) x.drop(1) else x }",
  "        var result : String = \"\"\n        // Add each number to the result string\
    \ without duplication\n        for(n <- numbers.split(\" \")){\n            result\
    \ += n\n        }\n        // Sort the resulting string and append it to the result\
    \ string.\n        result +=\" \"+numbers.split(\"\\\\s+\".toRegex).sortWith((x,\
    \ y) => x.compareTo(y) > 0).mkString(\" \")", "        var result : String = \"\
    \"\n        for (n <- numbers.split(\" \")) {\n            var isNumeric = n.matches(\"\
    \\\\d+\")\n            var numbers = n.split(\" \").filterNot(_.isEmpty)\n   \
    \         var sortedNumbers = numbers.sortBy(_.toInt)\n            val first =\
    \ sortedNumbers.head\n            val last = sortedNumbers.last\n            if\
    \ (isNumeric) {\n                result = result + first + \" \" + last + \"\\\
    n\"\n            }\n        }\n        return result", "        val words = numbers.trim.split(\"\
    \\\\s+\").toList\n        val list = words.map(word => word -> \"zero\".toInt\
    \ :: \"one\".toInt :: \"two\".toInt :: \"three\".toInt :: \"four\".toInt :: \"\
    five\".toInt :: \"six\".toInt :: \"seven\".toInt :: \"eight\".toInt :: \"nine\"\
    .toInt).sortBy(_._2).map(_._1).toList\n        val resultString = list.map { case\
    \ (word, number) => number + word}.mkString(\" \")\n        resultString", " \
    \       // Create an empty list to hold the sorted values\n        var values\
    \ = new mutable.ListBuffer[String]()\n        val list = numbers.split(\" \").toList\n\
    \        // Sort the values from the list\n        list.sortWith( (x: Int, y:\
    \ Int) => x < y )\n        // Populate the list with the sorted values\n     \
    \   list foreach { value => values += value }\n        // Return the sorted string\n\
    \        values.mkString(\" \")", "        // Use a mutable variable to hold our\
    \ result\n        var res = \"\"\n        var numberList = numbers.split(\" \"\
    ).toList.map(_.toInt)\n        var largest = numberList(0)\n        // Find the\
    \ first number that is greater than the largest.\n        var largestIndex = 0\n\
    \        for (i <- 0 to numberList.size - 1) {\n            if (numberList(i)\
    \ > largest) {\n                largest = numberList(i)\n                largestIndex\
    \ = i\n            }\n        }\n        // Sort the numbers in descending order.\n\
    \        for (i <- 0 to numberList.size - 1) {\n            if (i != largestIndex)\
    \ {\n                res += numberList(i)\n                res += \" \"\n    \
    \        }\n        }\n        res", "        // Sort the numbers starting from\
    \ the smallest one and working towards the largest\n        // >>> sortedNumbersList((\"\
    five one two\"))\n        // (\"one two five\")\n        val numberList = numbers.trim().split(\"\
    \ \").toList\n        val sortedNumbersList = numberList.sortBy(_.toInt).reverse\n\
    \        sortedNumbersList.getOrElse(\"\")", "        val numbers = numbers.toUpperCase.split(\"\
    \\\\s+\").toList\n        val result = new mutable.ArrayBuffer[String]()\n   \
    \     for (i <- 0 until numbers.size) {\n            val key = numbers(i)\n  \
    \          if (key == \"ZERO\") result.append(\"0\")\n            if (key == \"\
    ONE\") result.append(\"1\")\n            if (key == \"TWO\") result.append(\"\
    2\")\n            if (key == \"THREE\") result.append(\"3\")\n            if (key\
    \ == \"FOUR\") result.append(\"4\")\n            if (key == \"FIVE\") result.append(\"\
    5\")\n            if (key == \"SIX\") result.append(\"6\")\n            if (key\
    \ == \"SEVEN\") result.append(\"7\")\n            if (key == \"EIGHT\") result.append(\"\
    8\")\n            if (key == \"NINE\") result.append(\"9\")\n            if (key\
    \ == \"THREE\") result.append(\"4\")\n            if (key == \"FOUR\") result.append(\"\
    5\")\n            if (key == \"FIVE\") result.append(\"6\")\n            if (key\
    \ == \"SIX\") result.append(\"7\")\n            if (key == \"SEVEN\") result.append(\"\
    8\")\n            if (key == \"EIGHT\") result.append(\"9\")\n            if (key\
    \ == \"NINE\") result.append(\"0\")\n        }\n        result.mkString(\" \")",
  "        val numArray = numbers.split(\" \").toList\n        var sortedNumArray\
    \ = numArray.toArray.sortWith(compare)\n        sortedNumArray = sortedNumArray.reverse\n\
    \        var numArrayString = sortedNumArray.mkString(\" \")\n        return numArrayString",
  "        val numArray = numbers.split(\"\\\\s+\")\n        val sortedArray = numArray.toArray.sortWith(_\
    \ < _)\n        sortedArray.mkString(\" \")", "        def swap(numbers : String)\
    \ : String = {\n            val m = numbers.indexOf(\"one\")\n            val\
    \ n = numbers.indexOf(\"three\")\n            val o = numbers.indexOf(\"five\"\
    )\n            numbers.replaceRange(n+1, n+2, numbers.replaceRange(m, n+2, \"\"\
    ))\n            numbers.replaceRange(o, o+1, numbers.replaceRange(m, o+1, \"\"\
    ))\n        }\n        val words = numbers.split(\" \").toList\n        val numbersSorted:\
    \ ListBuffer[String] = ListBuffer.empty[String]\n        val numWords = words(0)\n\
    \        if (numWords.equals(\"zero\")) numbersSorted += numWords\n        else\
    \ if (numWords.equals(\"one\")) numbersSorted += numWords\n        else if (numWords.equals(\"\
    two\")) numbersSorted += numWords\n        else if (numWords.equals(\"three\"\
    )) numbersSorted += numWords\n        else if (numWords.equals(\"four\")) numbersSorted\
    \ += numWords\n        else if (numWords.equals(\"five\")) numbersSorted += numWords\n\
    \        else if (numWords.equals(\"six\")) numbersSorted += numWords\n      \
    \  else if (numWords.equals(\"seven\")) numbersSorted += numWords\n        else\
    \ if (numWords.equals(\"eight\")) numbersSorted += numWords\n        else if (numWords.equals(\"\
    nine\")) numbersSorted += numWords\n        else {\n            val numbersList\
    \ = numWords.split(\" \").toList\n            numbersSorted += numbersList(numbers.indexOf(numWords))\n\
    \        }\n        var i = numbersList.length\n        val j = 1\n        while\
    \ (i < numbersList.length && j < numbersList.length) {\n            if (numbersList(numbers.indexOf(numbersList(j)))\
    \ < numbersList(numbers.indexOf(numbersList(j+1))))\n                i -= 1\n\
    \            j += 1\n        }\n        while (i < numbersList.length)\n     \
    \       numbersSorted += numbersList(numbers.indexOf(numbersList(j)))\n      \
    \  numbersSorted.toList\n            .foreach(x => numbersSorted += numbers.replaceAll(x\
    \ + \" \", \"\"))\n        numbersSorted.toList\n            .foreach(x => numbersSorted\
    \ += swap(numbers.replaceAll(x + \" \", \"\")))\n        numbersSorted.toList",
  "        // Split string\n        val splitString = numbers.split(\" \")\n\n   \
    \     // Store numbers in an array\n        val arrayNum = splitString.map(_.toInt)\n\
    \n        // Create a list of numbers to sort\n        val listNum = arrayNum.toList\n\
    \n        // Sort the list from smallest to largest\n        listNum.sort\n\n\
    \        // Join list to string\n        listNum.mkString(\" \")", "        val\
    \ numberList = numbers.split(\" \").map{_.toInt}\n        val sorted = numberList.toArray.sort((x,y)=>x-y)\n\
    \        val stringNum = sorted.mkString(\" \")\n        stringNum", "       \
    \ val list = numbers.trim().split(\" \").map(_.toInt).toList\n        val sorted\
    \ = list.sortWith(_ < _)\n        val result = sorted.mkString(\" \")\n      \
    \  result", "        def buildString(n : Int) : String = {\n            val n\
    \ = n + 1\n            val result = new StringBuilder\n            while (n >\
    \ 0) {\n                result.append(numbers(n % 10))\n                result.append(\"\
    \ \")\n                n = n / 10\n            }\n            result.toString\n\
    \        }\n        var length : Int = 0\n        val numbers = numbers.split('\
    \ ')\n        var num = 0\n        while (numbers.length >= num) {\n         \
    \   length = numbers(num).length\n            num += 1\n        }\n        val\
    \ numbers = mutable.ArrayBuffer(numbers.toList)\n        for (i <- 0 until numbers.size\
    \ - 1) {\n            numbers(i) = numbers(i).toInt\n        }\n        var result\
    \ : String = buildString(numbers(0))\n        val nums = mutable.ArrayBuffer(numbers.toList)\n\
    \        while (length > 0) {\n            val max = numbers(nums.size)\n    \
    \        if (nums.size < 9) {\n                val x = numbers(nums.size).toString\n\
    \                val y = numbers(nums.size+1).toString\n                numbers(nums.size)\
    \ = x\n                numbers(nums.size+1) = y\n            }\n            nums.size\
    \ += 1\n            if (numbers.size < 9) length -= 1\n            val num = numbers(nums.size)\n\
    \            if (numbers.size == 9) result = (num + \" \" + result).toString +\
    \ \" \" + result\n            else result = num.toString() + \" \" + result\n\
    \            nums.remove(num)\n        }\n        result", "        var list =\
    \ numbers.split(\" \").toList\n        list.sortWith(compare)\n        list.mkString(\"\
    \ \")", "        var string = \"\"\n        var largest = 0\n        var smallest\
    \ = 0\n        var length : Int = numbers.length\n        for ( i = 0; i < length;\
    \ i += 1 ){\n            var num : Int = numbers.toInt\n            if( num >\
    \ largest ){\n                largest = num\n            }\n            if( num\
    \ < smallest ){\n                smallest = num\n            }\n        }\n  \
    \      for ( i = 0; i < length; i += 1 ){\n            var num : Int = numbers.toInt\n\
    \            if( num > largest ){\n                string += num.toString\n  \
    \          }\n            if( num < smallest ){\n                string += num.toString\n\
    \            }\n        }\n        return string", '        numbers.split("\\s+").sortWith((x,
    y) => x.toInt <= y.toInt).mkString', "      val nums = numbers.split(\" \").toList\n\
    \      val sortedNums = nums.sortWith(math.Ordering[Int].reverse).mkString(\"\
    \ \")\n      sortedNums", "        val digits = numbers.split(\"\\\\s+\")\n  \
    \      var sortedNumbers = mutable.LinkedListBuffer.empty[String]\n        var\
    \ sorted = mutable.LinkedListBuffer.empty[String]\n\n        for (number <- digits)\
    \ {\n            number match {\n                case (\"zero\") => sortedNumbers\
    \ += (\"0\")\n                case (\"one\") => sortedNumbers += (\"1\")\n   \
    \             case (\"two\") => sortedNumbers += (\"2\")\n                case\
    \ (\"three\") => sortedNumbers += (\"3\")\n                case (\"four\") =>\
    \ sortedNumbers += (\"4\")\n                case (\"five\") => sortedNumbers +=\
    \ (\"5\")\n                case (\"six\") => sortedNumbers += (\"6\")\n      \
    \          case (\"seven\") => sortedNumbers += (\"7\")\n                case\
    \ (\"eight\") => sortedNumbers += (\"8\")\n                case (\"nine\") =>\
    \ sortedNumbers += (\"9\")\n                case _ => sorted.append(number);\n\
    \            }\n        }\n\n        // If the digits are in order then return\
    \ the sorted string with the digits in order.\n        if (sortedNumbers == digits)\n\
    \            return sorted.reverse.toList.reverse\n        else\n            return\
    \ sortedNumbers.toList.toList.sortWith(_ > _).reverse.mkString(\" \")", "    \
    \    val words = numbers.split(\"\\\\s+\")\n        val result = words.foldLeft(\"\
    \")( (acc, x) => acc + \" \" + x)\n        result.split(\"\\\\s+\").sortWith((x,\
    \ y) => x.toInt>y.toInt).mkString(\" \")", "        val numberList = numbers.split(\"\
    \ \").map(_.toInt)\n        val sortedList = numberList.sortWith(_.compareTo(_)\
    \ < 0)\n        val sortedString = sortedList.mkString(\" \")\n        sortedString",
  "        val list = numbers.split(\" \").map(_.toInt)\n        val sorted = list.sorted\n\
    \        val str = sorted.mkString(\" \")\n        return str", "        var sorted\
    \ = numbers.split(\"\\\\s+\")\n        sorted.sortWith(n => {\n            if(n.equals(\"\
    zero\")) -1\n            else if(n.equals(\"one\")) 0\n            else if(n.equals(\"\
    two\")) 1\n            else if(n.equals(\"three\")) 2\n            else if(n.equals(\"\
    four\")) 3\n            else if(n.equals(\"five\")) 4\n            else if(n.equals(\"\
    six\")) 5\n            else if(n.equals(\"seven\")) 6\n            else if(n.equals(\"\
    eight\")) 7\n            else if(n.equals(\"nine\")) 8\n            else n.compareTo(\"\
    zero\")\n        })\n        sorted.mkString(\" \")", "        var output : String\
    \ = \"\"\n        var digits = new mutable.LinkedHashMap[Int, String]()\n    \
    \    numbers.split(\" \").foreach { x =>\n            if(x.toString.length() >\
    \ 2)\n            {\n                digits.put(x.toString.toInt, x)\n       \
    \     }\n        }\n        digits.foreach { x =>\n            output += x.getValue\n\
    \        }\n        output", "        val listOfNumbers = numbers.split(\" \"\
    ).map(_.toInt).toList\n        val sortedNumbers = listOfNumbers.sorted\n    \
    \    val result = sortedNumbers.mkString(\" \")\n        result", "        var\
    \ result = \"\"\n        for (n <- numbers.split(\" \") ; n != \"\")\n       \
    \     result += (n match {\n                case s if s.toString.length == 1 else\
    \ s.toString : s\n            }).sorted\n        result", "        val sortedNumbers\
    \ = numbers.split(\" \").sorted\n        sortedNumbers.mkString(\" \")", "   \
    \     val nums = numbers.split(\" \").map(_.toInt)\n        val numbers = nums.sortWith((x,\
    \ y) => x.toLong <=> y.toLong)\n        val sortedNumbers = nums.map(_.toString()).mkString(\"\
    \ \")\n        sortedNumbers", "        var nums = numbers.toList.map(_.toInt).sorted\n\
    \        var res = \"\"\n        for(i <- 0 until nums.size) {\n            res\
    \ ++= numbers(i) + \"-\"\n        }\n        nums.clear()\n        for(i <- 0\
    \ until nums.size) {\n            res ++= numbers(nums(i)) + \"-\"\n        }\n\
    \        res", "        val numbers = numbers.toUpperCase.split(\" \").toList.sortWith((a,b)\
    \ => a.toInt - b.toInt)\n        val result = numbers.mkString(\" \")\n      \
    \  result match {\n            case s if s.size == 0 => result\n            case\
    \ s if s.size > 0 => sortNumbers(s\"${s(0)} ${s(1)} ${s(2)}\")\n        }", " \
    \       val strArray = numbers.split(\" \").map(x => x.toInt)\n        val sortedArray\
    \ = strArray.sort\n        val sortedString = new collection.mutable.StringBuilder\n\
    \        for( elem <- sortedArray) {\n          sortedString += elem.toString\n\
    \        }\n        return sortedString.toString", "        val numberSet = numbers.trim().split(\"\
    \ \").map(_.toInt)\n        val min = numberSet.min\n        val max = numberSet.max\n\
    \        val sorted = numberSet.sorted\n        val sortedString = sorted.mkString(\"\
    \ \")\n        val newNumbers = sortedString.substring(sorted.length - min.length,\
    \ sorted.length)\n        newNumbers", "        // Convert each space-separated\
    \ string to a list of strings.\n        val numbersList = numbers.split(' ').toList\n\
    \n        // Sort the list from smallest to largest\n        numbersList.sortBy(n\
    \ => n.toInt)\n\n        // Return the concatenation of the sorted list as a space-delimited\
    \ string.\n        numbersList.mkString(' ')", "        // Write your code here\n\
    \        val numbers_array = numbers.split(\" \").filter(_.matches(\"\\\\d+\"\
    )).toArray\n        val sorted_numbers = numbers_array.sorted\n        val output\
    \ = sorted_numbers.mkString(\" \")\n        output", "        var nums = \"\"\n\
    \        var i = 0\n        var j = 0\n        while (i < numbers.length) {\n\
    \            if (numbers(i) == \" \") {\n                nums += \" \"\n     \
    \       }\n            else {\n                nums += numbers(i)\n          \
    \      i += 1\n            }\n        }\n        while (nums.length != 0) {\n\
    \            if (nums(0) == \" \") {\n                nums = nums.drop(1)\n  \
    \          }\n            else {\n                nums = nums.dropRight(1)\n \
    \           }\n        }\n        return nums", "        val nums = numbers.split(\"\
    \ \")\n        nums.sortBy(n => Integer.parseInt(n.toUpperCase().dropWhile(_.isDigit).takeWhile(_\
    \ => _.isDigit).mkString))", "        var result = \"\"\n        for (x <- numbers.split(\"\
    \ \")) {\n            if (x != \"nine\") {\n                result += x\n    \
    \        }\n        }\n        for (i <- 0 until 9) {\n            if (result.startsWith(i.toString))\
    \ {\n                result += i.toString\n            }\n        }\n        return\
    \ result", "        // Initialize a mutable list to keep track of the numbers\n\
    \        var numberList = mutable.ListBuffer[String]()\n        numbers = numbers.replaceAll(\"\
    \\\\s\", \"\")\n        var intVal: Int = 0\n\n        // Split the string into\
    \ separate numbers by a space\n        numbers.split(\" \").foreach{num => \n\
    \            intVal = num.toInt\n            intVal = math.max(intVal, 0)\n  \
    \          numberList += intVal.toString\n        }\n\n        // Sort the list\
    \ from smallest to largest\n        numberList.sort\n\n        // Return the numberList\
    \ as a space-delimited string\n        numberList.toList", "        val map =\
    \ new collection.mutable.HashMap[String, Int]()\n        var nextValue = 0\n \
    \       var nextKey = \"\"\n        numbers.split(\"\\\\s\").foreach{n => {\n\
    \            n = n.trim()\n            val l = n.toInt\n            if(map.contains(n)\
    \ && map.get(n) > l) {\n                map.put(nextKey, nextValue)\n        \
    \    } else {\n                nextKey = n\n                nextValue = l\n  \
    \          }\n        }}\n        val result = new collection.mutable.ListBuffer[String]()\n\
    \        map.foreach(m => result += m._1 + \" \" + m._2)\n        result.sorted.mkString(\"\
    \ \")", "        // Initialize a mutable array of chars and add the numbers as\
    \ chars.\n        // Then sort the array of chars in reverse order and return\
    \ the resulting string.\n        var numberChars = mutable.Buffer.empty[Char]\n\
    \        numbers foreach (numChar => numberChars += numChar)\n        numberChars.reverse.toArray.toString",
  "        val values = numbers.toString.split(\" \")\n        val list = mutable.MutableList[String]()\n\
    \        val max = values.map(x=> x.toInt).max\n        values.foreach{ i =>\n\
    \            if(i < max) list += i\n        }\n        val sorted = list.sortBy(_.toInt)\n\
    \        sorted.mkString(\" \")", "        val numberList = numbers.split(\" \"\
    ).map(_.toInt)\n        val sortedNumbers = numberList.sortWith((num1, num2) =>\
    \ num1 < num2)\n        val sortedString = sortedNumbers.mkString(\" \")\n   \
    \     sortedString", "        val list = numbers.split(\"\\\\s+\").toList\n  \
    \      val list = list.sortWith(_ > _)\n        val listString = list.mkString(\"\
    \ \")\n        listString", "        val nums = numbers.toIntArray\n        val\
    \ numLen = nums.length\n        var sorted = nums\n        for ( i <- numLen -\
    \ 1 ) sorted = sorted.sortWith(_ < _)\n        sorted.toString.trim.replaceAll(\"\
    \\\\s+\", \" \")", "        val nums = numbers.split(\"\\\\s+\").toList\n    \
    \    val numsSorted = nums sortBy { _.toInt }\n        numsSorted.mkString(\"\
    \ \")", "        val numbers = numbers.toList.sorted\n        val string = \"\"\
    \n        val index = 0\n        while(index != numbers.size) {\n            if(numbers(index)\
    \ == numbers(index - 1) ) {\n                string += numbers(index) + \"   \"\
    \n            }\n            else {\n                string += numbers(index)\
    \ + \"   \"\n            }\n            index++\n        }\n        string", " \
    \       def sortInner(l : List[String]) : List[String] = {\n            val sortedList\
    \ = l.sortWith(_ > _)\n            if (l.size != sortedList.size)\n          \
    \      sortInner(sortedList)\n            else\n                sortedList\n \
    \       }\n        val numbersList = numbers.split(\"\\\\s+\").toList\n      \
    \  numbersList\n            .map(_.toInt)\n            .map(Integer.toString(_))\n\
    \            .foldLeft(\"\") { (s, v) => s + \" \" + v}\n            .toLowerCase\n\
    \            .foldRight(\"\")((s, v) => s + \" \" + v)\n            .split(\"\\\
    \\s\")\n            .sortWith(_.compareTo(_) > 0)\n            .toList\n     \
    \       .map(_.toString + \" \")\n            .toList\n            .foldLeft(\"\
    \")((s, v) => s + v)\n            .replace(\" \", \"\")", "        var list =\
    \ numbers.split(' ')\n        list.sort((a, b) => a.toInt compareTo b.toInt)\n\
    \        list.toString()", "        val nums = numbers.split(\" \").filter(_.nonEmpty).map(_.toInt)\n\
    \        val maxN = math.max(nums)\n        val minN = math.min(nums)\n      \
    \  val strNums = nums.map(i => if(i < minN) String.valueOf(i) else String.valueOf(i+9))\n\
    \        strNums.sortWith(i => math.abs(i-minN))\n        strNums.mkString(\"\
    \ \")", "        val numbersList = numbers.split(\" \").toList\n        val sortedNumbers\
    \ = numbersList sortBy {_.toInt}\n        val output = sortedNumbers.mkString(\"\
    \ \")\n        output", "        def recurse(n : String, m : Int) : String = {\n\
    \            val nn = n.toUpperCase\n            if (nn <= 'N' || nn >= '9') \"\
    0\"\n            else {\n                if (m == 0) nn else recurse(nn, m - 1)\n\
    \            }\n        }\n        recurse(numbers.trim, 9)", "        val list\
    \ = numbers.split(\" \").toList.sortWith(_ < _)\n        list.reverse.mkString(\"\
    \ \")", "        var result = \"\"\n        var temp = \"\"\n        var index\
    \ = 0\n        while (index < numbers.length) {\n            if (numbers.substring(index,\
    \ index + 1) == \"zero\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"zero\") {\n              \
    \      result = temp + result\n                } else {\n                    if\
    \ (index > 0) {\n                        result = result + \" \" + temp\n    \
    \                }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"one\") {\n                temp = numbers.substring(index + 2,\
    \ numbers.length)\n                if (temp == \"one\") {\n                  \
    \  result = temp + result\n                } else {\n                    if (index\
    \ > 0) {\n                        result = result + \" \" + temp\n           \
    \         }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"two\") {\n                temp = numbers.substring(index + 2,\
    \ numbers.length)\n                if (temp == \"two\") {\n                  \
    \  result = temp + result\n                } else {\n                    if (index\
    \ > 0) {\n                        result = result + \" \" + temp\n           \
    \         }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"three\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"three\") {\n             \
    \       result = temp + result\n                } else {\n                   \
    \ if (index > 0) {\n                        result = result + \" \" + temp\n \
    \                   }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"four\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"four\") {\n              \
    \      result = temp + result\n                } else {\n                    if\
    \ (index > 0) {\n                        result = result + \" \" + temp\n    \
    \                }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"five\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"five\") {\n              \
    \      result = temp + result\n                } else {\n                    if\
    \ (index > 0) {\n                        result = result + \" \" + temp\n    \
    \                }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"six\") {\n                temp = numbers.substring(index + 2,\
    \ numbers.length)\n                if (temp == \"six\") {\n                  \
    \  result = temp + result\n                } else {\n                    if (index\
    \ > 0) {\n                        result = result + \" \" + temp\n           \
    \         }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"seven\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"seven\") {\n             \
    \       result = temp + result\n                } else {\n                   \
    \ if (index > 0) {\n                        result = result + \" \" + temp\n \
    \                   }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"eight\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"eight\") {\n             \
    \       result = temp + result\n                } else {\n                   \
    \ if (index > 0) {\n                        result = result + \" \" + temp\n \
    \                   }\n                }\n            } else if (numbers.substring(index,\
    \ index + 1) == \"nine\") {\n                temp = numbers.substring(index +\
    \ 2, numbers.length)\n                if (temp == \"nine\") {\n              \
    \      result = temp + result\n                } else {\n                    if\
    \ (index > ", "        val nums = numbers.split(\"\\\\s+\")\n        nums.sortWith(n\
    \ => n < \"eight\" || n > \"nine\")", "        var list = numbers.split(\" \"\
    ).toList.sortWith(_ < _)\n        val builder = new StringBuilder()\n        for\
    \ (item <- list) {\n            builder.append(item)\n        }\n        builder.toString()",
  "        val nums = numbers.split(\" \").toList\n        nums.sortWith((x,y) =>\
    \ (x.toInt - y.toInt).abs)\n        numbers.trim.mkString(\" \")", "        val\
    \ nums = numbers.split(\" \").map( _.toInt )\n        // Create an array containing\
    \ all of the numbers from smallest to largest\n        val array = (0 to 9).sorted.map(i\
    \ => nums(i));\n        // Convert that array into a string\n        val sortedNumbers\
    \ = array.mkString(\" \")\n        sortedNumbers", "        def swap(arr : Array[Int],\
    \ i : Int, j : Int) {\n            val tmp = arr(i)\n            arr(i) = arr(j)\n\
    \            arr(j) = tmp\n        }\n        val len = numbers.split(\" \").length\n\
    \        if (len < 4) {\n            return numbers\n        }\n        val arr\
    \ = numbers.split(\" \").map(x => x.toInt)\n        val len = arr.length\n   \
    \     val min = arr.min\n        val max = arr.max\n        val mid = (min + max)\
    \ / 2\n        var i = 0\n        var j = 0\n        var count = 0\n        val\
    \ result = new mutable.StringBuilder\n        while (i < len) {\n            while\
    \ (j < len && arr(j) < mid) {\n                j += 1\n            }\n       \
    \     if (j == len) {\n                swap(arr, i, j)\n                count\
    \ += 1\n                j += 1\n            } else {\n                swap(arr,\
    \ i, j)\n                i += 1\n                j += 1\n            }\n     \
    \   }\n        while (j < len) {\n            if (arr(j) > mid) {\n          \
    \      result.append((mid).toString)\n                count += 1\n           \
    \     mid = (mid + arr[mid]).max\n                j += 1\n            } else {\n\
    \                result.append((arr(j).toString))\n                i += 1\n  \
    \              j += 1\n            }\n        }\n        result.toString()", " \
    \       val arr = numbers.split(\" \").map(_.toInt).sortWith(_ < _)\n        arr.mkString(\"\
    \ \")", "        val numberList = numbers.split(\" \").toList\n        var i =\
    \ 0\n        while(i < numberList.length){\n            if(numberList(i).toInt\
    \ < 10 && numberList(i).toInt > 0){\n                numberList.insert(i, numberList(i).toInt.toString)\n\
    \                i+=1\n            }\n        }\n        numberList.sort\n   \
    \     val stringBuilder = new StringBuilder\n        var i = 0\n        while(i\
    \ < numberList.length){\n            stringBuilder.append(numberList(i))\n   \
    \         i += 1\n        }\n        stringBuilder", "        val numberSet =\
    \ numbers.split(\" \").map(_.toInt)\n        val numberList = numberSet.toList\n\
    \        numberList.sort((a, b) => a - b)\n        numberList.mkString(\" \")",
  "        def digit(number : String) : Int = number match {\n            case x if\
    \ x.toString.toInt >= 0 => x.toString.toInt\n            case x if x.toString.toInt\
    \ == 0 => 10\n            case x => 10 + digit(x.substring(1))\n        }\n  \
    \      def swap(list : mutable.Seq[Int], index1 : Int, index2 : Int) : Unit =\
    \ {\n            val temp = list(index1)\n            list(index1) = list(index2)\n\
    \            list(index2) = temp\n        }\n        def swapHelper(list : mutable.Seq[Int],\
    \ index1 : Int, index2 : Int) : Int = {\n            val temp = list(index1)\n\
    \            val swap = swapHelper(list, index2, index1)\n            swap\n \
    \       }\n\n        var list = numbers.split(\" \").toList.map(digit).toList\n\
    \        list.sortWith(x => (x, swapHelper(list, 0, list.length - 1)))\n     \
    \   list.map(_.toString).mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(_.toInt)\n        val numsSorted = nums.sortWith((a, b) => a < b)\n\
    \        val stringSorted = numsSorted.mkString(\" \")\n        return stringSorted",
  "        // Read all numbers from the string and add them to a list called \"nums\"\
    \n        val nums = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   numbers.split(\"\\\\s\").foreach { n => nums += n }\n\n        // Sort that\
    \ list ascending\n        val numsSorted = nums.sortWith(_ < _)\n\n        //\
    \ Return the string with the sorted numbers in it\n        numsSorted.mkString(\"\
    \ \")", "        val words = numbers.split(\" \").map(_.toInt).toList\n      \
    \  val sorted = words.sortWith(_ > _)\n        val result = sorted.mkString(\"\
    \ \")\n        result", "        val numberStrings = numbers.split(\" \").map(_.toInt)\n\
    \        val sorted = numberStrings.sortBy(x => x)\n        sorted.map(_.toString\
    \ + \" \").mkString(\" \")", "        val nums  = numbers.split(\" \")\n     \
    \   val numsT = nums.toList.sortBy(_.toInt).toList\n        val resultString =\
    \ numsT.mkString(\" \")\n        resultString", "        val numberList = numbers.split(\"\
    \\\\s+\")\n        val numberMap : scala.collection.mutable.Map[Int,String] =\
    \ numberList.map(x => x -> x).toMap\n        numberMap.sortBy(x => x._1).map {\
    \ x => x._2 }.mkString(\" \")", "        var nums = numbers.split(\" \").toList\n\
    \        var sortedNums = nums.sorted\n        var output = \"\"\n        sortedNums.foreach(x\
    \ => {\n            output += x + \" \"\n        })\n        output += nums.reverse\n\
    \        output", "        val nums = new mutable.Stack[Int]()\n        for (n\
    \ <- numbers) {\n            val num = n.toInt\n            if (num < \"zero\"\
    ) {\n                nums.push(num)\n            } else if (num < \"nine\") {\n\
    \                nums.push(num - \"zero\")\n            } else {\n           \
    \     nums.push(num - \"zero\" * 10)\n            }\n        }\n        var result\
    \ = \"\"\n        while (nums.nonEmpty) {\n            result = nums.dequeue()\
    \ + \" \" + result\n        }\n        result", "        val numberSet = numbers.toSet.map(_.toInt)\n\
    \        if (numberSet.isEmpty) \"\" else \n            numberSet.sorted.toList.map(_.toString).mkString(\"\
    \ \")", "        var list = numbers.split(\" \").toList\n        list.sortBy(x\
    \ => x match {\n            case \"one\"   => 1\n            case \"two\"   =>\
    \ 2\n            case \"three\" => 3\n            case \"four\"  => 4\n      \
    \      case \"five\"  => 5\n            case \"six\"   => 6\n            case\
    \ \"seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" \
    \ => 9\n            case _      => 0\n        })\n        list.mkString(\" \")",
  "        val tokens = numbers.split(\" \")\n        val sortedTokens = tokens.map\
    \ { token =>\n            val tokens = token.split(\"-\")\n            val min\
    \ = tokens(0)\n            val max = tokens(1)\n            val tokenValue = min\
    \ to max\n            val stringValues = tokenValue.map { value =>\n         \
    \       value.toString\n            }\n            stringValues.mkString(\" \"\
    )\n        }.sortWith(_ < _)\n        sortedTokens.mkString(\" \")", "       \
    \ val numberList = numbers.split(\" \").map(_.toInt)\n        val sortedNumbers\
    \ = numberList.sortBy(_.toDouble).toList\n        val sortedString = sortedNumbers.map(i\
    \ => i.toString).mkString(\" \")\n        sortedString", "        var sorted :\
    \ MutableList[String] = List()\n        var currentNumber = 0\n        for (number\
    \ <- numbers.split(\" \")){\n            if (number == \"zero\") {\n         \
    \       currentNumber = 0\n            } else if (number == \"one\") {\n     \
    \           currentNumber = 1\n            } else if (number == \"two\") {\n \
    \               currentNumber = 2\n            } else if (number == \"three\"\
    ) {\n                currentNumber = 3\n            } else if (number == \"four\"\
    ) {\n                currentNumber = 4\n            } else if (number == \"five\"\
    ) {\n                currentNumber = 5\n            } else if (number == \"six\"\
    ) {\n                currentNumber = 6\n            } else if (number == \"seven\"\
    ) {\n                currentNumber = 7\n            } else if (number == \"eight\"\
    ) {\n                currentNumber = 8\n            } else if (number == \"nine\"\
    ) {\n                currentNumber = 9\n            } else {\n               \
    \ println(\"Invalid input. Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\")\n            }\n            if\
    \ (currentNumber < sorted.last){\n                sorted += currentNumber\n  \
    \          } else if (currentNumber > sorted.last){\n                sorted +=\
    \ currentNumber.toString\n            }\n        }\n        sorted.toList.toString",
  "        val nums = numbers.split(' ').map(n => n.toInt)\n        val largest =\
    \ nums.max\n        val smallest = nums.min\n        val sorted = (smallest).zip(nums).sortBy(_._1).map(_._2)\n\
    \        nums.zip(sorted).map{ case (n, s) => s + \" \" + n }.join(\" \")", " \
    \       val numberList = numbers.split(\" \").map(_.toInt).toList\n        val\
    \ sortedList = numberList.sortWith(_ < _)\n        val result = sortedList.mkString(\"\
    \ \")\n        result", "        val input = numbers.toList\n        var outList\
    \ = new mutable.Buffer[String]\n        var i = 0\n        while (i < input.length)\
    \ {\n            val current = input(i)\n            if (current == \"zero\")\
    \ {\n                outList += \"zero\"\n            }\n            else if (current\
    \ == \"one\") {\n                outList += \"one\"\n            }\n         \
    \   else if (current == \"two\") {\n                outList += \"two\"\n     \
    \       }\n            else if (current == \"three\") {\n                outList\
    \ += \"three\"\n            }\n            else if (current == \"four\") {\n \
    \               outList += \"four\"\n            }\n            else if (current\
    \ == \"five\") {\n                outList += \"five\"\n            }\n       \
    \     else if (current == \"six\") {\n                outList += \"six\"\n   \
    \         }\n            else if (current == \"seven\") {\n                outList\
    \ += \"seven\"\n            }\n            else if (current == \"eight\") {\n\
    \                outList += \"eight\"\n            }\n            else if (current\
    \ == \"nine\") {\n                outList += \"nine\"\n            }\n       \
    \     else {\n                outList += current\n            }\n            i\
    \ += 1\n        }\n        outList.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(_.toInt).toList\n        val maxIndex = nums.max\n        val maxNum\
    \ = nums(maxIndex)\n        nums.foldLeft(\"\")( (str, num) => str + num.toString\
    \ + (if (num > maxNum) \" \" + maxNum.toString else \"\"))", "        val nums\
    \ = numbers.toArray.map(_.toInt)\n        val result = nums.sortWith(_ < _)\n\
    \        result.toString.trim", "        val splitted = numbers.split(\" \").toList\n\
    \        val list = new mutable.ListBuffer[String]()\n        for(i <- 0 to splitted.size\
    \ - 1) {\n            if(splitted(i).startsWith(\"zero\")) {\n               \
    \ list.add(\"zero\")\n            } else {\n                list.add(\"nine\"\
    )\n            }\n        }\n        for(i <- 0 to splitted.size - 1) {\n    \
    \        list.add(splitted(i))\n        }\n        val list = list.sortBy(x =>\
    \ x.toInt).reverse\n        list.foreach(x => numbers = numbers ++ \" \" + x)\n\
    \        numbers", "      val numberList = numbers.split(\" \").toList\n     \
    \ numberList.sortWith(_ < _)\n      numbers.split(\" \").mkString(\" \")", " \
    \       // The tricky part is making it work for negative numbers as well\n  \
    \      val strings = numbers.split(\" \").map(_.toInt)\n        val sorted = strings.sortBy(_\
    \ => -_)\n        return strings.mkString(\" \") + (if (strings.last.isPositive)\
    \ \" \" + sorted.last else \"\")", "        val arr = numbers.split(\" \").toList\n\
    \        arr.sortBy(_.toInt)\n        .mkString(\" \")", "        var list = numbers.split(\"\
    \ \").toList\n        list.sortWith( new Comparator[Int]( {\n            override\
    \ def compare(x: Int, y: Int) : Int = {\n                if (x < y) -1 else if\
    \ (x > y) 1 else 0\n            }\n        } ) )\n        list.toString", "  \
    \      val numbersList = numbers.split(\" \").map(x => x.toInt)\n        val numbers\
    \ = numbersList.toList\n        val listOrder = new mutable.ListBuffer[Int]\n\
    \        numbers.foreach { x => listOrder += x }\n        numbersList.toList.sortBy(x\
    \ => x).reverse.foreach(x => listOrder += x)\n        listOrder.toList.mkString(\"\
    \ \")", "        var largest = Nil\n        var smallest = Nil\n        var list\
    \ = numbers.split(\" \").map(_.toInt)\n        list foreach (num => {\n      \
    \      if (num < smallest) {\n                smallest = num\n            }\n\
    \            if (num > largest) {\n                largest = num\n           \
    \ }\n        })\n        val newList = (smallest to largest).toList\n        newList\
    \ map (_.toString) mkString(\" \")", "        var ret = \"\"\n        var numberList\
    \ = numbers.toString.split(\" \").toList.map(_.toInt)\n        var numberSet =\
    \ mutable.Set.empty[Int]\n        for (number <- numberList) {\n            if\
    \ (numberSet.contains(number)) {\n                numberList.remove(number)\n\
    \            } else {\n                numberSet += number\n            }\n  \
    \      }\n        numberList foreach { number =>\n            ret += number\n\
    \        }\n        return ret", "      val numberList = numbers.split(\" \").toList.sortBy(_.toInt)\n\
    \      val result = numberList.foldLeft(\"\"){ (s, t) =>\n        s + \" \" +\
    \ t\n      }\n      result", "        var numbers = numbers.split(\" \")\n   \
    \     val sortedNumbers = numbers.sortBy(_.toInt)\n        val result = sortedNumbers.mkString(\"\
    \ \")\n        result", "        val nums = numbers.split(\" \").map(_.toInt)\n\
    \        nums.sortWith((a, b) => a > b)\n        nums.mkString(\" \")", "    \
    \    var result : String = \"\"\n        var i = 0\n        \n        for (i <-\
    \ 0 until numbers.size) {\n            var j = i\n            \n            var\
    \ lower = numbers(i)\n            var higher = numbers(i)\n            \n    \
    \        while (j < numbers.size - 1) {\n                if (j == numbers.size\
    \ - 1) {\n                    if (lower < numbers(j)) {\n                    \
    \    lower = numbers(j)\n                    }\n                    else {\n \
    \                       higher = numbers(j)\n                    }\n         \
    \       }\n                else if (numbers(j) < lower) {\n                  \
    \  lower = numbers(j)\n                }\n                else {\n           \
    \         higher = numbers(j)\n                }\n                j += 1;\n  \
    \          }\n            result += lower\n            result += higher\n    \
    \    }\n        result", "        def sortNumbersHelper(numbers : String) : String\
    \ = {\n            var temp : String = \"nine\"\n            val numberArray =\
    \ numbers.split(\" \")\n            val length = numberArray.length\n        \
    \    if(numberArray.length <= 1) {\n                return numbers\n         \
    \   }\n            var i = length - 1\n            while(i >= 0) {\n         \
    \       if(numberArray(i) < temp) {\n                    temp = numberArray(i)\n\
    \                }\n                i -= 1\n            }\n            if(numberArray(i)\
    \ < temp) {\n                temp = numberArray(i)\n            }\n          \
    \  if(temp != \"nine\") {\n                numberArray(i) = temp\n           \
    \     numberArray(i + 1) = \"nine\"\n                numberArray(i + 2) = \"nine\"\
    \n                return sortNumbersHelper(numberArray(i).trim + \" \" + numberArray(i\
    \ + 1).trim + \" \" + numberArray(i + 2).trim)\n            }\n            numberArray(i)\
    \ = temp\n            return sortNumbersHelper(numberArray(i).trim + \" \" + numberArray(i\
    \ + 1).trim + \" \" + numberArray(i + 2).trim)\n        }\n        return sortNumbersHelper(numbers.trim)",
  "        val numberArray = numbers.split(\" \").map(_.toInt)\n        val numberArraySorted\
    \ = numberArray.sortWith(_ > _)\n        numberArraySorted.mkString(\" \")", " \
    \       val numberArray = numbers.split(\" \").map(_.toInt).toArray\n        var\
    \ i = numberArray.length - 1\n        numberArray.sortWith((a,b) => a < b)\n \
    \       numberArray.toString", "      val n = numbers.split(' ').map(_.toInt)\n\
    \      val sorted = n.sortWith(_ > _)\n      val spacedSorted = sorted.mkString(\"\
    \ \")\n      spacedSorted", "        // Write your code here\n        var result\
    \ = \"\"\n        var arr = numbers.split(\" \")\n        var size = arr.length\n\
    \        val arr = arr.map(_.toInt)\n        arr.sort\n        arr.foreach(x =>\
    \ {\n            result += (x).toString\n        })\n        result", '        numbers.toLowerCase().split("
    ").sorted', "        val nums = numbers.split(\" \").map(_.toInt).toList\n   \
    \     nums.sortWith((n1, n2) => n1 < n2)\n        nums.mkString(\" \")", "   \
    \     var numArr = numbers.split(\" \").map(_.toInt)\n        numArr.sortWith(_\
    \ < _)\n        numArr.map(_.toString).mkString(\" \")", "        val sortedNumbers\
    \ = new mutable.ListBuffer[String]()\n        var index = 0\n        for (i <-\
    \ numbers.split(\" \").toList){\n            if (i != \"zero\"){\n           \
    \     if (i.toInt == 9){\n                    sortedNumbers += \"nine\"\n    \
    \            }\n                else{\n                    sortedNumbers += i\n\
    \                }\n            }\n        }\n        sortedNumbers.sorted", " \
    \       val list = numbers.split(\" \").toList\n        val list = list.sortWith((a,\
    \ b) => b < a).toList\n        val result = list.mkString(\" \")\n        result",
  "        var numbersList = numbers.split(\"\\\\s+\").map(_.replaceAll(\" \", \"\"\
    ).toInt)\n        numbersList = numbersList.sortWith((a, b) => a - b)\n      \
    \  var output = new StringBuilder()\n        numbersList.foreach { number =>\n\
    \            output.append(\"one \").append(number).append(\" \")\n        }\n\
    \        output.toString", "        val nums = numbers.split(\" \").map(_.toInt).toList\n\
    \        val sorted = nums.sortBy(_)\n        val output = sorted.mkString(\"\
    \ \")\n        output", "        // Create a mutable list of numbers read from\
    \ input, convert to a sorted list.\n        val nums =  (numbers split \" \").map(n\
    \ => n.toInt)\n        val numList : mutable.List[Int] = nums.sortWith(_ < _)\n\
    \        // Convert to a space-delimited string.\n        val numString = numList.toArray.mkString(\"\
    \ \")\n        numString", "        // Split string\n        val numbers = numbers.split(\"\
    \ \").toList\n        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ result = sortedNumbers.mkString(\" \")\n        println(result)\n        return\
    \ result", "        val numbersAndLetters = numbers.split(\" \")\n        val\
    \ numbersAsInts = for (number <- numbersAndLetters if number.toInt != 0) yield\
    \ number.toInt\n        val sortedNumbers = numbersAsInts.sorted\n        numbersAndLetters.zip(sortedNumbers).map{case(number,letter)\
    \ => letter+\" \"+number}.mkString(\" \")", "        var result = \"\"\n     \
    \   for (x <- numbers.toList)\n            result = result.concat(\" \" + x.toInt)\n\
    \        result = result.substring(0,result.length-1)\n        return result.trim",
  "        var nums = List.empty[Int]\n        for (n <- numbers.split(' ')) {\n \
    \           nums = nums.::(n)\n        }\n        nums = nums.sortBy(-_)\n   \
    \     nums.mkString(\" \")", "        val list = numbers.split(\" \").toList\n\
    \        val result = list.sortWith((x,y) => x > y)\n        \" \" + result.mkString(\"\
    \ \")", "        val digits = numbers.toString.split(\" \").toList\n        val\
    \ result = new mutable.ArrayBuffer[String]()\n        val tempMap = new mutable.HashMap[Int,\
    \ String]()\n\n        // For every digit, create a new entry in the map and add\
    \ to result\n        for(i <- 0 until digits.length) {\n            val number\
    \ = digits(i).toInt\n            val temp = tempMap.getOrElseUpdate(number, numbers)\n\
    \            result += temp\n            tempMap += number -> temp\n        }\n\
    \n        // sort the result from smallest to largest\n        result.sortWith(_.compareTo(_.toInt)\
    \ < 0)\n\n        // Return a string with numbers in sorted order\n        result.toString",
  "        val array = new mutable.MutableList[Int]\n        val array = numbers.split(\"\
    \ \").toList.map{x => if (x.isEmpty) 0 else Integer.parseInt(x)}.toList\n    \
    \    array.sortWith(x => x >= 0 || y => y >= 0)\n        array.foreach{x => array\
    \ += x}\n        array.mkString(\" \")", '        numbers.split(" ").toList.sortWith((a,
    b) => Integer.parseInt(a) < Integer.parseInt(b)).toList.mkString(" ")', "    \
    \    val numberList : mutable.ListBuffer[String] = ListBuffer()\n        val numberList\
    \ : mutable.ListBuffer[String] = numbers.split(\" \").map(_.trim).map(n => n.toInt)\n\
    \        numberList.sortWith(n => n < n)\n        numberList.toString()", "  \
    \      //Convert String into Array\n        val numbers_arr = numbers.split(\"\
    \ \").toArray\n        //Convert Array to List\n        val numbers_list_arr =\
    \ numbers_arr.toList\n        numbers_list_arr.sortWith(_ < _)", "        val\
    \ values = numbers.split(\"\\\\s\").map(_.toInt)\n        val sorted = values.sort\n\
    \        val sortedString = sorted.mkString(\" \")\n        val sortedStringWithoutSpace\
    \ = sortedString.replaceAll(\" \", \"\")", "        val numberArray = numbers.split(\"\
    \ \").map(_.toInt).toArray\n        val sortedArray = numberArray.sortWith(_.compareTo(_)\
    \ < 0)\n        sortedArray.mkString(\" \")", "        val numbersList = numbers.split(\"\
    \ \").toList\n        numbersList.toList.sortWith(_ < _)\n        .mkString(\"\
    \ \")", "        // Read in each number as a string\n        val nums = numbers.split(\"\
    \ \").toList\n        // Convert to Int to compare them properly\n        val\
    \ ints = nums.map(_.toInt)\n        // Sort and convert to string\n        ints.sortWith(_\
    \ < _).mkString(\" \")", "        var numList = numbers.split(\" \").toList\n\
    \        numList = numList.sortWith(_ < _)\n        numList.mkString(\" \")",
  "        val nums = numbers.split(\"\\\\s+\").filter(_.nonEmpty).toArray\n     \
    \   val max = new mutable.ListBuffer.Max[Int](nums.map(_.toInt))\n        var\
    \ index = 0\n        for (a <- 0 until nums.length; b <- 0 until nums.length;\
    \ c <- 0 until nums.length; d <- 0 until nums.length; e <- 0 until nums.length;\
    \ f <- 0 until nums.length) {\n            val a = nums(index)\n            val\
    \ b = nums(b)\n            val c = nums(c)\n            val d = nums(d)\n    \
    \        val e = nums(e)\n            val f = nums(f)\n            if (a < b &&\
    \ a < c && a < d && a < e && a < f) {\n                max.index += a\n      \
    \          max.bIndex += b\n                max.cIndex += c\n                max.dIndex\
    \ += d\n                max.eIndex += e\n                max.fIndex += f\n   \
    \             index += 1\n            } else if (b < a && b < c && b < d && b\
    \ < e && b < f) {\n                max.index += b\n                max.aIndex\
    \ += a\n                max.cIndex += c\n                max.dIndex += d\n   \
    \             max.eIndex += e\n                max.fIndex += f\n             \
    \   index += 1\n            } else if (c < a && c < b && c < d && c < e && c <\
    \ f) {\n                max.index += c\n                max.aIndex += a\n    \
    \            max.bIndex += b\n                max.dIndex += d\n              \
    \  max.eIndex += e\n                max.fIndex += f\n                index +=\
    \ 1\n            } else if (d < a && d < b && d < c && d < e && d < f) {\n   \
    \             max.index += d\n                max.aIndex += a\n              \
    \  max.bIndex += b\n                max.cIndex += c\n                max.eIndex\
    \ += e\n                max.fIndex += f\n                index += 1\n        \
    \    } else if (e < a && e < b && e < c && e < d && e < f) {\n               \
    \ max.index += e\n                max.aIndex += a\n                max.bIndex\
    \ += b\n                max.cIndex += c\n                max.dIndex += d\n   \
    \             max.fIndex += f\n                index += 1\n            } else\
    \ if (f < a && f < b && f < c && f < d && f < e) {\n                max.index\
    \ += f\n                max.aIndex += a\n                max.bIndex += b\n   \
    \             max.cIndex += c\n                max.dIndex", '        numbers.replaceAll("""^\s*(\d+)\s*$""",
    "").trim().split(" ").sortWith(_.toInt > _.toInt).mkString(" ")', "        val\
    \ sortedNumbers = numbers.split(\"\\\\s+\").sorted\n        val sortedString =\
    \ sortedNumbers.mkString(\" \")\n        sortedString", "        // Convert our\
    \ string to a list of numbers\n        val nums: List[String] = numbers.split(\"\
    \ \").map(_.trim).toList\n        // Convert our list to a map of numbers to counts\n\
    \        val numberCounts = nums.foldLeft(Map[String,Int]())((map, num) => {\n\
    \            val numArray = num.split(\" \").map(_.trim).toList\n            num\
    \ match {\n                case \"zero\" => map + (num -> 0)\n               \
    \ case \"one\"  => map + (num -> 1)\n                case \"two\"  => map + (num\
    \ -> 2)\n                case \"three\" => map + (num -> 3)\n                case\
    \ \"four\" => map + (num -> 4)\n                case \"five\" => map + (num ->\
    \ 5)\n                case \"six\"  => map + (num -> 6)\n                case\
    \ \"seven\" => map + (num -> 7)\n                case \"eight\" => map + (num\
    \ -> 8)\n                case \"nine\" => map + (num -> 9)\n                case\
    \ \"nine\" => map + (num -> 0)\n                case _      => map + (numArray.toSet\
    \ -> numArray.toSet.size)\n            }\n        })\n        // Now sort the\
    \ map using the values associated with each key\n        val sortedNumberCounts\
    \ = numberCounts.sortBy(_._2).reverse\n        // Create a list from our sorted\
    \ map\n        val sortedKeys = sortedNumberCounts.keySet\n        val sortedVals\
    \ = sortedNumberCounts.values\n        // Join our sorted keys and values together,\
    \ separated by a space\n        sortedKeys.map(_ + \" \" + sortedVals.map(_).mkString(\"\
    \ \")).mkString(\" \")", "        val numberList = numbers.split(\" \").map(_.toInt)\n\
    \        val numList = numberList.sortWith(_ < _)\n        val ret = \"(\"\n \
    \       val numSize = numList.size\n        var i = 0\n        while (i < numSize)\
    \ {\n            if (i != 0) {\n                ret += \" \"\n            }\n\
    \            ret += numList(i).toString\n            i += 1\n        }\n     \
    \   ret += \")\"\n        return ret", "        var output = new StringBuilder\n\
    \        var current = \"\"\n        for (number <- numbers.split(\" \")) {\n\
    \            if (number == \"zero\") current = \"0\"\n            if (number ==\
    \ \"one\") current = \"1\"\n            if (number == \"two\") current = \"2\"\
    \n            if (number == \"three\") current = \"3\"\n            if (number\
    \ == \"four\") current = \"4\"\n            if (number == \"five\") current =\
    \ \"5\"\n            if (number == \"six\") current = \"6\"\n            if (number\
    \ == \"seven\") current = \"7\"\n            if (number == \"eight\") current\
    \ = \"8\"\n            if (number == \"nine\") current = \"9\"\n            if\
    \ (current.compareTo(number) < 0) output.append(current); output.append(\", \"\
    ); output.append(number)\n            else output.append(number)\n           \
    \ current = \"\"\n        }\n        output.toString", "        // Split the string\
    \ into an Array[String] of String words\n        val numberWords = numbers.split(\"\
    \\\\s+\")\n        // Create an Array[String] of String words to store sorted\
    \ numbers in\n        val sortedNumbers = Array[String]()\n        // Create a\
    \ mutable HashMap from Strings to Strings and set the sorted\n        // numbers\
    \ in the HashMap to those Strings\n        numberWords.map(n => {\n          \
    \  val oldString: String = sortedNumbers(0)\n            val newString: String\
    \ = (if (n == oldString) \"one\" else n)\n            sortedNumbers = sortedNumbers\
    \ :+ newString\n        })\n        // Convert the Array[String] of String words\
    \ to a single String\n        sortedNumbers.mkString(\" \")", "        val numberList\
    \ = numbers.split(\" \").map(_.toInt)\n        numberList.sortBy(_ < numberList.max)\n\
    \        val numberString = numberList.toList.mkString(\" \")\n        if (numberString.length\
    \ == 1) numberString + \" \" else numberString", "        var numberList : mutable.MutableList[String]\
    \ = mutable.MutableList.empty\n        var count : Int = 0\n        var temp :\
    \ String = \"\"\n        numbers.split(\" \").foreach { s =>\n            if (count%2==0)\
    \ {\n                if (numberList.contains(s)) {\n                    temp =\
    \ temp + s + \" \"\n                } else {\n                    temp = temp\
    \ + s + \" \"\n                    numberList = numberList + s + \" \"\n     \
    \           }\n                count = count + 1\n            } else {\n     \
    \           if (numberList.contains(s)) {\n                    numberList = numberList\
    \ + s + \" \"\n                } else {\n                    temp = temp + s +\
    \ \" \"\n                    count = count + 1\n                }\n          \
    \  }\n        }\n        return temp.trim()", "        // Split the input string\
    \ into an array delimited by spaces\n        var numbers = numbers.split(\" \"\
    )\n        // Transform the numbers into integers and add them to a List\n   \
    \     var ints = numbers.map(_.toInt)\n        // Sort the array using scala.math.Ordering\n\
    \        ints = ints.sortWith(Ordering.fromLessThan(_ > _))\n        // Create\
    \ a String from our sorted integers\n        var sortedStrings = ints.map(_.toString)\n\
    \        // Return the sorted string\n        sortedStrings.mkString(\" \")",
  "        val numberList = numbers.split(\" \").filter(_.nonEmpty).toList\n     \
    \   val nums = numberList.map(_.toInt).toList\n        val m = nums.min\n    \
    \    val n = nums.max\n        val l = nums.length\n        val numsSorted = nums.sortWith((x,\
    \ y) => y > x)\n        val stringBuilder = new StringBuilder\n        for ( i\
    \ <- 0 until l)\n          stringBuilder.append(numsSorted(i)).append(' ')\n \
    \       stringBuilder.append(m)\n        stringBuilder.toString()", "        //\
    \ Split the string into individual numbers. Split the numbers on\n        // whitespace\
    \ into individual words and then map them back into strings.\n        val numberStrings\
    \ = numbers split \" \"\n        val numberStringsAsNumbers = numberStrings.map(x\
    \ => x.toInt)\n        numberStringsAsNumbers.sortWith(_ < _).mkString(\" \")",
  "        val numsArray = numbers.split(\"\\\\s+\")\n        numsArray.sortWith((n1,\
    \ n2) => n1.toInt - n2.toInt)\n        val sortedStr = \"(\" + numsArray.mkString(\"\
    , \") + \")\"\n        val intArray = sortedStr.substring(1,sortedStr.length-1).split(\"\
    \\\\D+\")\n        val outputStr = \"\"\n        for (i <- 0 until intArray.length)\n\
    \            if (intArray(i).equals(\"one\"))\n                outputStr += \"\
    \ \" + intArray(i+1) + \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"\
    two\"))\n                outputStr += \" \" + intArray(i-1) + \" \" + intArray(i+2)\n\
    \            else if (intArray(i).equals(\"three\"))\n                outputStr\
    \ += \" \" + intArray(i-2) + \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"\
    four\"))\n                outputStr += \" \" + intArray(i-2) + \" \" + intArray(i+1)\
    \ + \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"five\"))\n\
    \                outputStr += \" \" + intArray(i-2) + \" \" + intArray(i-1) +\
    \ \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"six\"))\n \
    \               outputStr += \" \" + intArray(i-2) + \" \" + intArray(i-1) + \"\
    \ \" + intArray(i+1) + \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"\
    seven\"))\n                outputStr += \" \" + intArray(i-2) + \" \" + intArray(i-1)\
    \ + \" \" + intArray(i+1) + \" \" + intArray(i+2) + \" \" + intArray(i+3)\n  \
    \          else if (intArray(i).equals(\"eight\"))\n                outputStr\
    \ += \" \" + intArray(i-3) + \" \" + intArray(i-2) + \" \" + intArray(i-1) + \"\
    \ \" + intArray(i+1) + \" \" + intArray(i+2)\n            else if (intArray(i).equals(\"\
    nine\"))\n                outputStr += \" \" + intArray(i-3) + \" \" + intArray(i-2)\
    \ + \" \" + intArray(i-1) + \" \" + intArray(i+1) + \" \" + intArray(i+2) + \"\
    \ \" + intArray(i+3) + \" \" + intArray(i+4)\n            else\n             \
    \   outputStr += \" \" + intArray(i) + \"\"\n        return outputStr", "    \
    \    val tokens = numbers.split(\" \").toList\n        val sorted = tokens.sortWith((a,\
    \ b) => a.toInt - b.toInt)\n        sorted.mkString(\" \")", "        val numberList\
    \ = numbers.split(\"\\\\s\").map(_.toInt)\n        // Sort smallest to largest\n\
    \        numberList.sortWith(_ < _)\n            .foldLeft(\"\"){ (result, num)\
    \ => result + num + \", \" }", "        var sortedNumbers = \"\"\n        for\
    \ (ix <- numbers.split(\" \").indices) {\n            val number = numbers.split(\"\
    \ \") (ix)\n            if (number.toIntMinValue.toInt == number.toIntMaxValue)\
    \ {\n                sortedNumbers = sortedNumbers + \" \" + number\n        \
    \    }\n            else {\n                val minInt = number.toIntMinValue\n\
    \                val maxInt = number.toIntMaxValue\n                val minString\
    \ = minInt.toString\n                val maxString = maxInt.toString\n       \
    \         val minStringIndex = minString.indexOf(' ')\n                val maxStringIndex\
    \ = maxString.indexOf(' ')\n                val minIndex = (minStringIndex !=\
    \ -1) ? minStringIndex : 0\n                val maxIndex = (maxStringIndex !=\
    \ -1) ? maxStringIndex : 0\n                val min = (minIndex != -1) ? (minInt.toIntMinValue)\
    \ : (minInt)\n                val max = (maxIndex != -1) ? (maxInt.toIntMaxValue)\
    \ : (maxInt)\n                val stringPart1 = (minIndex != -1) ? (minString.substring(0,\
    \ minIndex)) : (minString)\n                val stringPart2 = (minIndex != -1)\
    \ ? (minString.substring(minIndex + 1, minStringIndex)) : (minString)\n      \
    \          val stringPart3 = (minIndex != -1) ? (minString.substring(minStringIndex\
    \ + 1, maxStringIndex)) : (minString)\n                val stringPart4 = (maxIndex\
    \ != -1) ? (maxString.substring(0, maxIndex)) : (maxString)\n                val\
    \ stringPart5 = (maxIndex != -1) ? (maxString.substring(maxIndex + 1, maxStringIndex))\
    \ : (maxString)\n                val stringPart6 = (maxIndex != -1) ? (maxString.substring(maxStringIndex\
    \ + 1, minStringIndex)) : (maxString)\n                val stringPart7 = (minIndex\
    \ != -1) ? (minString.substring(0, minIndex)) : (minString)\n                val\
    \ stringPart8 = (minIndex != -1) ? (minString.substring(minIndex + 1, minStringIndex))\
    \ : (minString)\n                val stringPart9 = (minIndex != -1) ? (minString.substring(minStringIndex\
    \ + 1, maxStringIndex)) : (minString)\n                val stringPart10 = (maxIndex\
    \ != -1) ? (maxString.substring(0, maxIndex)) : (maxString)\n                val\
    \ stringPart11 = (maxIndex != -1) ? (maxString.substring(maxIndex + 1, maxStringIndex))\
    \ : (maxString)\n                val stringPart12 = (maxIndex != -1) ? (maxString.substring(maxStringIndex\
    \ + 1, minStringIndex)) : (maxString)\n                val stringPart13 = (minIndex\
    \ != -1) ? (minString.substring(0, minIndex)) : (minString)\n                val\
    \ stringPart14 = (minIndex != -1) ? (minString.", "        val nums = numbers.split(\"\
    \ \").toList\n        val sorted = nums.sortBy(x => x.toInt).toList\n        sorted.mkString(\"\
    \ \")", "        var list = numbers.split(\" \").toList\n        list.sortWith(_\
    \ < _)\n        list.toString + \" \" + list.reverse", "        val array = numbers.split(\"\
    \ \").toList\n        val map = array.map(_.toInt).toMap\n        val keys = map.keys\n\
    \        val values = map.values\n        val sorted = keys.zip(values).sortWith(_._1\
    \ < _._1)\n        sorted.map(x => x._1 + \" \" + x._2).mkString(\" \")", "  \
    \      val arr = numbers.split(\" \").toList\n        val max = arr.foldLeft(0)(_+_)\n\
    \        arr.sortWith(_ < _)\n            .map(_.toString).mkString(\" \") +\n\
    \            \" \" +\n            arr.foldLeft(\"\")((str, n) => str + \" \" +\
    \ max-n).trim()", "        val input = numbers.split(\" \")\n        val sortedInput\
    \ = input.map(_.toInt).sort\n        val result = sortedInput.map(i => s\"$i\"\
    ).mkString(\" \")\n        result", "        // Add all numbers in numbers to\
    \ an immutable list\n        val numberList = numbers.split(\" \").map(_.toInt)\n\
    \        // Sort that list\n        val sortedNumbers = numberList.sort\n    \
    \    // Concatenate the sorted list to a string\n        val sortedString = sortedNumbers.mkString(\"\
    \ \")\n        // Return the concatenated string\n        return sortedString",
  '        numbers.split(" ").toList.sortWith(_ < _).toList.mkString(" ")', "    \
    \    var newNumbers = \"\"\n        val nums = numbers.split(\"\\\\s+\")\n   \
    \     nums.foreach(num => num.split(\" \").foreach(n => newNumbers += \" \"+n+\"\
    \\n\") )\n        newNumbers ++ \"\\n\" ", "        val numberSet = numbers.trim.split(\"\
    \ \").toList.map(_.toInt)\n        val numberSortedSet = numberSet.sortWith(_\
    \ < _)\n        numberSortedSet.toList.mkString(\" \")", "        var numberList\
    \ = numbers.split(\"\\\\s+\")\n        numberList\n            .map { number =>\n\
    \                numberList.sortWith(a => (a contains number).getOrElse(false))\n\
    \            }\n            .flatten\n            .toList\n            .join(\"\
    , \")", "        var listOfStrings = numbers.split(\" \").map(_.toInt)\n     \
    \   listOfStrings.sortWith(_ < _)\n        listOfStrings.map(_.toString).mkString(\"\
    \ \")", "        val words = numbers.split(' ')\n        val result: List[String]\
    \ = Nil\n        for (i<-0 to words.length-1){\n            val word = words(i)\n\
    \            val num = parseInt(word)\n            if (!num.isEmpty){\n      \
    \          result.add(num)\n            }\n        }\n        val sortedList =\
    \ result.sort\n        val str = sortedList.mkString(\" \")\n        str.trim.split(\"\
    \\\\s+\").mkString(\" \")"]
stop_tokens:
- "\n    }\n"
