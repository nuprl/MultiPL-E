language: scala
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  var numSquares = 0\n        lst.foreach(x => {\n            if (x % 3 == 0)\
    \ {\n                numSquares += 1\n                sum += x * x\n         \
    \   }\n            else if (x % 4 == 0) {\n                numSquares += 1\n \
    \               sum += x * x\n            }\n            else {\n            \
    \    sum += x\n            }\n        })\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps16kzbgn.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += x * x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps16kzbgn.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                sum += x * x\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps16kzbgn.scala:28:20\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                sum += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        lst.foldLeft(0L) { (sum, entry) =>\n            val num : Long = if (entry\
    \ % 3 == 0) (entry*entry) else (entry*entry)\n            val n2 : Long = if (entry\
    \ % 4 == 0) (entry*entry) else (entry*entry)\n            val n3 : Long = if (entry\
    \ % 4 == 0) (entry*entry) else (entry*entry)\n            val n4 : Long = if (entry\
    \ % 3 == 0) (entry*entry) else (entry*entry)\n            val sum2 : Long = if\
    \ (entry % 2 == 0) (entry*entry) else (entry*entry)\n            val sum3 : Long\
    \ = if (entry % 3 == 0) (entry*entry) else (entry*entry)\n            val sum4\
    \ : Long = if (entry % 4 == 0) (entry*entry) else (entry*entry)\n            val\
    \ sum5 : Long = if (entry % 5 == 0) (entry*entry) else (entry*entry)\n       \
    \     sum + num + n2 + n3 + n4 + sum2 + sum3 + sum4 + sum5\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgusxp6h.scala:30)\n\tat Problem.main(tmpfgusxp6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sum = 0\n      \
    \  lst.foreach { elem =>\n            if (elem.toInt % 3 == 0) {\n           \
    \     sum += elem\n            }\n            if (elem.toInt % 4 == 0) {\n   \
    \             sum += elem\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxw70qv_k.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += elem\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxw70qv_k.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                sum += elem\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val res = new mutable.ListBuffer[Long]()\n\
    \        lst.foreach{i =>\n            if(i%3 != 0) res += i*i\n            else\
    \ if(i%4 != 0) res += i*i*i\n            else res += i\n        }\n        res.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhuqp3cj.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \        val indexMap = mutable.Map[Int, Int]()\n        var sum = 0L\n      \
    \  lst.foreach( x => \n            if(indexMap.getOrElse(x,0) == 0) sum = sum\
    \ + x\n            else {\n                val index = indexMap.getOrElse(x, 0)\
    \ % 3 //get the index \n                val newIndex = index + (x - index) //the\
    \ new index\n                val newIndex = newIndex % 4 //get the new index\n\
    \                indexMap(newIndex) = indexMap.getOrElse(newIndex, 0) + 1\n  \
    \              sum = Math.pow(sum, 2) + x\n            })\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1kj_ojbm.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindexMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1kj_ojbm.scala:26:22 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum = Math.pow(sum, \e[31m2\e[0m) + x\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    Double\n\e[31m   |\e[0m             \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val m = mutable.ListBuffer[Long]()\n\
    \        lst.foreach((index: Long) => {\n            if (index % 3 == 0) {\n \
    \               m += index\n            } else if (index % 4 == 0) {\n       \
    \         m += index\n            } else if (index % 3 != 0 && index % 4 != 0)\
    \ {\n                m += index\n            }\n        })\n        m.sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcu4nw2wm.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var ans = 0.0\n    \
    \    for ( x <- lst ) \n        ans = ans + x * x\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyqd60o78.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ans\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (ans : Double)\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // your code here\n\
    \        var ans = 0\n        var i = 0\n        while (i < lst.size) {\n    \
    \        ans = ans + lst.get (i) * lst.get (i) * lst.get (i) + lst.get (i) * lst.get\
    \ (i) * lst.get (i) * lst.get (i) \n            i = i + 1\n        }\n       \
    \ return ans\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvn1emoej.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            ans = ans + lst.get (i) * lst.get (i) * lst.get\
    \ (i) + lst.get (i) * lst.get (i) * lst.get (i) * lst.get (i) \n\e[31m\e[31m \
    \  |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m         value get\
    \ is not a member of List[Long] - did you mean lst.seq?\n1 error found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val s = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- lst.indices) s += lst(i).toLong * lst(i).toLong * lst(i).toLong\n\
    \        s.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzcoy1a3.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // 1\n        val res\
    \ : MutableList[Long] = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if (x % 3 == 0) res +=\
    \ x * x\n            if (x % 4 == 0) res += x * x\n            if (x % 4 != 0\
    \ && x % 3 != 0) res += x * x\n        }\n        res.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_lx722a.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1_lx722a.scala:17:38 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mres\e[0m : \e[35mMutableList\e[0m[\e[35mLong\e\
    [0m] = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010216
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var list2 = lst.filter(_\
    \ % 3 == 0)\n        var list3 = lst.filter(_ % 4 == 0)\n        var sum = 0l\n\
    \        if(list2.isEmpty) list2.foreach(x => sum += x)\n        if(list3.isEmpty)\
    \ list3.foreach(x => sum += x)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4jv1y_8.scala:24)\n\tat Problem.main(tmpb4jv1y_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i<- 0 until (lst.length)) {\n            val square = lst(i).toLong\n\
    \            sum += if (isMultipleOfThree(i) && isMultipleOfFour(i)) square *\
    \ square else square\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxchkw3rc.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += \e[33mif\e[0m (isMultipleOfThree(i)\
    \ && isMultipleOfFour(i)) square * square \e[33melse\e[0m square\n\e[31m\e[31m\
    \   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxchkw3rc.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            sum += \e[33mif\e[0m (isMultipleOfThree(i) && isMultipleOfFour(i))\
    \ square * square \e[33melse\e[0m square\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lstCopy = lst.copy()\n\
    \        lstCopy.foreach(x => if (x % 3 == 0 || x % 4 == 0)\n            lstCopy.updated(x,\
    \ x * x * x)\n        else lstCopy.updated(x, x * x * x)) \n        lstCopy.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaaxuhlc0.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlstCopy\e[0m = lst.copy()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \   value copy is not a member of List[Long] - did you mean lst.coll?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val l2 = lst.filter(\
    \ i => i % 3 == 0 ).map( i => i * i )\n        val l3 = lst.filter( i => i % 4\
    \ == 0 ).map( i => i * i )\n        l2.addAll(l3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplk3rgcfo.scala:18:11 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        l2.addAll(l3)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value addAll is not a member of List[Long] - did you mean\
    \ l2.zipAll?\n1 error found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst\n            .map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n            .filter(x => x % 4 !=\
    \ 0)\n            .sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qlwqq34.scala:22)\n\tat Problem.main(tmp1qlwqq34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // 1\n        def isMultipleOf3(x:\
    \ Long) : Boolean = x%3==0\n        // 2\n        def isMultipleOf4(x: Long) :\
    \ Boolean = x%4==0\n        \n        val list = mutable.ListBuffer(0)\n     \
    \   lst.foreach(x => {\n            // 3\n            if(isMultipleOf3(x) && lst.isDefinedAt(x){\n\
    \                // 4\n                if(isMultipleOf4(x) && lst.isDefinedAt(x+3){\n\
    \                    list += x*x\n                }\n                else{\n \
    \                   list += x*x*x\n                }\n            }\n        \
    \    else{\n                list += x*x*x\n            }\n        })\n       \
    \ list.toList.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp567s3ua1.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33melse\e[0m{\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                ')' expected, but\
    \ 'else' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp567s3ua1.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33melse\e\
    [0m{\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            ')'\
    \ expected, but 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp567s3ua1.scala:21:19\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp567s3ua1.scala:24:51\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(isMultipleOf3(x)\
    \ && lst.isDefinedAt(x){\n\e[31m\e[31m   |\e[0m                              \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp567s3ua1.scala:26:55 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m(isMultipleOf4(x) && lst.isDefinedAt(x+\e\
    [31m3\e[0m){\n\e[31m\e[31m   |\e[0m                                          \
    \             ^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmp567s3ua1.scala:32:12 ----------------\e[0m\e\
    [0m\n\e[33m31 |\e[0m                }\n\e[33m32 |\e[0m            }\n\e[33m\e\
    [33m   |\e["
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var listOfSquares :\
    \ List[Long] = List()\n        var listOfCubes : List[Long] = List()\n       \
    \ for (i <- 0 until lst.size) {\n            if (i%3 == 0) listOfSquares += lst(i)\n\
    \            if (i%4 == 0) listOfCubes += lst(i)\n        }\n        lst.map {x\
    \ =>\n            if (x%4 == 0) x*x else x*x*x\n        }.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_1ek3sdw.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (i%\e[31m3\e[0m == \e[31m0\e\
    [0m) listOfSquares += lst(i)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_1ek3sdw.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (i%\e[31m4\e[0m == \e[31m0\e[0m) listOfCubes += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is\
    \ not a member of List[Long] - did you mean List[Long].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Create an empty list\
    \ and add the first element to the list\n        var sum = 0l\n        sum +=\
    \ lst.head \n        // Loop through the list and add all the other elements to\
    \ the list\n        for ( i <- 1 until lst.length ) {\n            sum += lst(i)\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.sumSquares(tmpiifuyk_v.scala:18)\n\
    \tat Problem$.main(tmpiifuyk_v.scala:28)\n\tat Problem.main(tmpiifuyk_v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i <- lst) {\n            if (i % 3 == 0) sum += i\n            if (i %\
    \ 4 == 0) sum += i * i\n            else sum = sum + i\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptpi8rted.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i % \e[31m3\e[0m == \e[31m0\e\
    [0m) sum += i\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptpi8rted.scala:19:32\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m\
    \ (i % \e[31m4\e[0m == \e[31m0\e[0m) sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptpi8rted.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33melse\e[0m sum = sum + i\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        def isMultipleOf3(i:\
    \ Long) : Boolean = i % 3 == 0\n        def isMultipleOf4(i: Long) : Boolean =\
    \ i % 4 == 0\n        lst.foreach{ x => if(isMultipleOf4(x) || isMultipleOf3(x))\
    \ x *= 2 else x *= 3 }\n        lst.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1vla7gfq.scala:18:69 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.foreach{ \e[36mx\e[0m => \e[33mif\e[0m(isMultipleOf4(x)\
    \ || isMultipleOf3(x)) x *= \e[31m2\e[0m \e[33melse\e[0m x *= \e[31m3\e[0m }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                   value *= is not a member\
    \ of Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1vla7gfq.scala:18:81\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.foreach{ \e[36mx\e\
    [0m => \e[33mif\e[0m(isMultipleOf4(x) || isMultipleOf3(x)) x *= \e[31m2\e[0m \e\
    [33melse\e[0m x *= \e[31m3\e[0m }\n\e[31m\e[31m   |\e[0m                     \
    \                                                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                   value *= is not a member of Long - did you mean x.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Code goes here\n\
    \        def addTo(i: Int, acc: Long) : Long = {\n            if (i%3 == 0 ||\
    \ i%4 == 0) acc\n            else addTo(i, acc * i)\n        }\n        val result:\
    \ mutable.Long = mutable.Long(0)\n        lst.foreach(x => result = addTo(x.toInt,\
    \ result))\n        result.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzx9bct4.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.Long\
    \ = mutable.Long(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzx9bct4.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.Long\
    \ = mutable.Long(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnzx9bct4.scala:22:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst.foreach(\e\
    [36mx\e[0m => result = addTo(x.toInt, result))\n\e[31m\e[31m   |\e[0m        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        // use forall to return false if an element is not even\n        lst.forall\
    \ { n =>\n            if (n % 3 == 0) nums += n\n            if (n % 4 == 0) nums\
    \ += n * n\n            nums.sum\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpksvbdeqg.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpksvbdeqg.scala:18:19 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.forall { \e[36mn\e[0m =>\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m19 |\e[0m            \e[33mif\e[0m (n % \e[31m3\e\
    [0m == \e[31m0\e[0m) nums += n\n\e[31m20 |\e[0m            \e[33mif\e[0m (n %\
    \ \e[31m4\e[0m == \e[31m0\e[0m) nums += n * n\n\e[31m21 |\e[0m            nums.sum\n\
    \e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lists = lst groupBy\
    \ { _ % 3 }\n        val list4 = lists map { case (idx, items) =>\n          \
    \  if(idx%4==0) items.map(x => x*x) else items\n        }\n        val list3 =\
    \ lists map { case (idx, items) =>\n            if(idx%3==0) items.map(x => x*x)\
    \ \n            else items\n        }\n        list3.reduce(_+_) + list4.reduce(_+_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp067mm8nu.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        list3.reduce(_+_) + list4.reduce(_+_)\n\e[31m\e\
    [31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp067mm8nu.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        list3.reduce(_+_) + list4.reduce(_+_)\n\e[31m\e\
    [31m   |\e[0m                                         ^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i<-lst.indices) {\n            sum += lst(i) * lst(i)\n            if\
    \ (i%3 != 0) {\n                sum += lst(i) * lst(i)\n            }\n      \
    \      sum += lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz15nm52_.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += lst(i) * lst(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz15nm52_.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum += lst(i)\
    \ * lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpz15nm52_.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += lst(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010237
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   for (i <- 0 until lst.size) {\n            val index = i / 3\n           \
    \ val mult = i % 3\n            if (mult == 0 || (mult != 0 && index == 1 || index\
    \ == 2)) {\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kz7drzj.scala:27)\n\tat Problem.main(tmp_kz7drzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val numOfInside = 3\
    \ :: 4 :: 0 :: Nil\n        val numOfOutside = lst.filter( i => numOfInside.contains(i))\n\
    \        numOfOutside.foldLeft(0l) {\n            (acc,x) => acc + (if (x % 3\
    \ == 0) x * x else x * x * x)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmoroo93s.scala:23)\n\tat Problem.main(tmpmoroo93s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0l\n     \
    \   for (i <- 0 until lst.size) {\n            if (i%3==0 || i%4==0) {\n     \
    \           sum = sum + lst(i)\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi199_h4i.scala:25)\n\tat Problem.main(tmpi199_h4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  // TODO: Write your logic here\n        for (i <- lst.indices) {\n        \
    \    if (lst(i) % 3 == 0 || lst(i) % 4 == 0) {\n                lst(i) = lst(i)\
    \ * lst(i)\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2hd0i9o.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                lst(i) = lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member\
    \ of List[Long] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg2hd0i9o.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \        var sum = 0\n        var count = 0\n        var newList = []\n      \
    \  for (i<- 0 until lst.size) {\n            if (i % 3 == 0 || i % 4 == 0) {\n\
    \                sum += lst(i)\n                count += 1\n            } else\
    \ {\n                newList += lst(i)\n            }\n        }\n        if (count\
    \ != 0) {\n            sum = sum + newList.sum\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx_th2irn.scala:19:23 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mnewList\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpx_th2irn.scala:20:0 ----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until lst.size) {\n\e[31m\e[31m\
    \   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_th2irn.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx_th2irn.scala:25:24 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                newList += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.dictionary\
    \ AsScalaMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] No"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        if (lst.forall(i => i % 3 == 0 && i % 4 == 0))\n            lst map (i\
    \ => i * i)\n        else\n            lst map (i => i * i) filter (i => i % 3\
    \ != 0 || i % 4 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppirnb8rq.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            lst map (\e[36mi\e\
    [0m => i * i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppirnb8rq.scala:20:12 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lst map (\e[36mi\e[0m => i * i) filter (\e\
    [36mi\e[0m => i % \e[31m3\e[0m != \e[31m0\e[0m || i % \e[31m4\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val count = lst.size\n\
    \        var sum = 0L\n        var n = 1L\n        for (n in 1 to count) {\n \
    \           if (n % 4 == 0 && !(n % 3 == 0))\n                sum += n * n\n \
    \           else if (n % 3 == 0)\n                sum += n * n * n\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv1l7v6ty.scala:19:30 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (n in \e[31m1\e[0m to count) {\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           '<-' expected, but '{' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpv1l7v6ty.scala:26:4 ----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv1l7v6ty.scala:24:9\
    \ -------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foreach{\n     \
    \       case i if (i % 3 == 0 || i % 4 == 0) => lst(i) = i * i\n            case\
    \ i if (i % 3 == 0) => lst(i) = i * i\n            case i if (i % 4 == 0) => lst(i)\
    \ = i * i\n            case i => lst(i) = i * i\n        }\n        lst.reduceLeftOption(_\
    \ + _).getOrElse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqjw9ipo.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m (i % \e[31m3\e\
    [0m == \e[31m0\e[0m || i % \e[31m4\e[0m == \e[31m0\e[0m) => lst(i) = i * i\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^\e[0m\n\
    \e[31m   |\e[0m  value update is not a member of List[Long] - did you mean lst.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqjw9ipo.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m (i % \e[31m3\e\
    [0m == \e[31m0\e[0m) => lst(i) = i * i\n\e[31m\e[31m   |\e[0m                \
    \                      ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member\
    \ of List[Long] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmqjw9ipo.scala:19:38 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mcase\e[0m i \e[33mif\e[0m (i % \e[31m4\e[0m == \e[31m0\e\
    [0m) => lst(i) = i * i\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long] -\
    \ did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmqjw9ipo.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m i => lst(i) = i * i\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\
    \e[31m   |\e[0m  value update is not a member of List[Long] - did you mean lst.updated?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \        var sum = lst.foldLeft(0L){case (sum, curr) => sum + curr*curr}\n   \
    \     val listWith3and4 = (0 until lst.size).filter(_ % 3 == 0 || _ % 4 == 0)\n\
    \        listWith3and4.foreach(x => sum = sum + lst.apply(x))\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpaip9ipfj.scala:18:54 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlistWith3and4\e[0m = (\e\
    [31m0\e[0m until lst.size).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m || _ % \e[31m4\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // This map function\
    \ will return all entries in the list whose index are multiples of 3\n       \
    \ // We start off with a mutable list to store our entries in\n        val entries\
    \ = mutable.MutableList[Long]()\n        // This map function will return all\
    \ entries in the list whose index are multiples of 4\n        val entries2 = mutable.MutableList[Long]()\n\
    \        // This map function will square the integer entries and add them to\
    \ the mutable list\n        lst.foreach(x => {\n            if(x % 3 == 0) {\n\
    \                entries.add(x)\n            } else if(x % 4 == 0) {\n       \
    \         entries2.add(x)\n            }\n        })\n        // This is our return\
    \ variable\n        var returnSum = 0L\n        // We go through all our entries\
    \ and add them all together to the return variable\n        entries.foreach(x\
    \ => {\n            returnSum = returnSum + x\n        })\n        // We go through\
    \ all our entries and add them all together to the return variable\n        entries2.foreach(x\
    \ => {\n            returnSum = returnSum + x\n        })\n        // We return\
    \ the return sum\n        returnSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpom_a6aou.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mentries\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpom_a6aou.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mentries2\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i<-lst;i!=lst.length-1) {\n            if (i%4==0) {\n               \
    \ sum = sum + i*i\n            } else if (i%3==0) {\n                sum = sum\
    \ + i*i*i\n            } else {\n                sum = sum + i*i*i*i\n       \
    \     }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgd61fmo6.scala:17:35 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i<-lst;i!=lst.length-\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   '<-' expected, but ')' found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  val numOfElements = lst.size\n        lst.foreach(element => {\n          \
    \  if (element % 3 == 0 && element % 4 == 0)\n                sum = sum + element\n\
    \            if (element % 3 == 0)\n                sum = sum + element * element\n\
    \            if (element % 4 == 0)\n                sum = sum + element * element\
    \ * element\n        })\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgepo3kr.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum = sum + element\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgepo3kr.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                sum = sum + element\
    \ * element\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdgepo3kr.scala:24:22 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                sum = sum + element * element * element\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newlst = lst.filterNot(_%4==0)\
    \ // remove multiples of 4\n        newlst.map(_*_)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqy1xyamd.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        newlst.map(_*_)\n\e[31m\e[31m   |\e[0m      \
    \             ^^^\e[0m\n\e[31m   |\e[0m                   Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val squares = mutable.Map[Long,\
    \ Long]()\n        // use mutable map to store all squared entries and sum of\
    \ squares \n        for(i <- 0 until lst.size) {\n            val curSquare =\
    \ (lst(i)*lst(i)).toLong\n            squares += (lst(i) -> curSquare)\n     \
    \   }\n        // sum all squared entries and store in result\n        val sums\
    \ = squares.values.sum\n        squares.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2ovm62y.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msquares\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.map { x =>\n   \
    \         if (x % 3 == 0 || x % 4 == 0) \n                x * x\n            else\
    \ if (x % 3 == 0 || x % 4 == 1)\n                x * x * x\n            else if\
    \ (x % 3 == 1)\n                x * x * x * x\n            else\n            \
    \    x * x * x * x * x\n        }.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mqwexf0.scala:28)\n\tat Problem.main(tmp_mqwexf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (l: Long <- lst)\n            if ((l % 3 == 0) || (l % 4 == 0)) result\
    \ += l\n        lst.toList ++ result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4u3upe8q.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u3upe8q.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst.toList ++ result.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0l\n     \
    \   for (x <- lst) {\n            if (x % 3 == 0 || x % 4 == 0) {\n          \
    \      sum += 1l\n            }\n            else {\n                sum += x\
    \ * x\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdo6t9nid.scala:29)\n\tat Problem.main(tmpdo6t9nid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val mutableList = mutable.ListBuffer[Long]()\n\
    \        lst.map{\n            x => if(x % 3 == 0) mutableList += x*x\n      \
    \      else if(x % 4 == 0) mutableList += x*x*x\n            else mutableList\
    \ += x*x*x*x\n        }.sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrsl5ds7.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmutableList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var i = 0\n        var\
    \ total = 0l\n        while(i < lst.size) {\n            if(lst(i).isMultipleOfFour)\
    \ {\n                lst(i) = lst(i) * lst(i)\n            } else if(lst(i).isMultipleOfThree)\
    \ {\n                lst(i) = lst(i) * lst(i)\n            } else {\n        \
    \        total += lst(i)\n            }\n            i += 1\n        }\n     \
    \   total\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7k_rb79y.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(lst(i).isMultipleOfFour) {\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value isMultipleOfFour is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7k_rb79y.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                lst(i) = lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member\
    \ of List[Long] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7k_rb79y.scala:21:29 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            } \e[33melse\e[0m \e[33mif\e[0m(lst(i).isMultipleOfThree) {\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value isMultipleOfThree is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7k_rb79y.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                lst(i) = lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member\
    \ of List[Long] - did you mean lst.updated?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val numIndexes = lst.zipWithIndex.filter{\
    \ case (i: Long, idx: Int) => idx % 3 != 0 && idx % 4 != 0}.length\n        val\
    \ numEven = lst.zipWithIndex.filter{ case (i: Long, idx: Int) => idx % 3 == 0\
    \ && idx % 4 != 0}.length\n        val numOdd = lst.zipWithIndex.filter{ case\
    \ (i: Long, idx: Int) => idx % 3 == 1 && idx % 4 != 0}.length\n        numIndexes\
    \ match {\n            case 0 => lst.length\n            case 1 => lst(0) + (lst(0)\
    \ * (lst(0) * (lst(0) * lst(0))))\n            case 2 => lst(0) + (lst(0) * (lst(0)\
    \ * (lst(0) * (lst(0) * lst(0)))))\n            case _ => lst(0) + (lst(0) * (lst(0)\
    \ * (lst(0) * (lst(0) * lst(0) * (lst(0) * lst(0))))))\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpchbw1rkh.scala:27)\n\tat Problem.main(tmpchbw1rkh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sq = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{x => \n            val m3 = if (x%3==0) x^2 else x\n    \
    \        val m4 = if (x%4==0) x^2 else x\n            sq += m3\n            sq\
    \ += m4\n        }\n        sq.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohuq8e1f.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msq\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        var sum = 0\n        lst.foreach{ \n            x => \n             \
    \   if(x%3==0){\n                    x =x*x\n                    sum += x\n  \
    \              }else if(x%4==0){\n                    x =x*x\n               \
    \     sum += x\n                }else{\n                    sum += x\n       \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpi_orhsiu.scala:21:22 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    x =x*x\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_orhsiu.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    sum +=\
    \ x\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpi_orhsiu.scala:24:22 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    x =x*x\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_orhsiu.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    sum +=\
    \ x\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi_orhsiu.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    sum += x\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val res = lst.foldLeft(0l)\
    \ { (acc, elem) => acc.updated(elem*elem+elem) }\n        res.sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv0c14frm.scala:16:56 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = lst.foldLeft(\e\
    [31m0l\e[0m) { (\e[36macc\e[0m, \e[36melem\e[0m) => acc.updated(elem*elem+elem)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value updated\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv0c14frm.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        res.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        value sum is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        lst.foldLeft(0l) { (a, b) => b + b + a }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptxzf9s6p.scala:20)\n\tat Problem.main(tmptxzf9s6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2h4wa5.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m17 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l) {\n\
    \            ((sum: Long, elem: Long) => sum + (elem * elem))\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vxg6q75.scala:21)\n\tat Problem.main(tmp7vxg6q75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // First we create a\
    \ mutable list of Ints, we will use it to store our results, and we initialize\
    \ it by putting in \n        // zeroes\n        val res = mutable.ListBuffer[Int]()\n\
    \        // We will keep track of the running total using the sums var which we\
    \ will add to each time we square or cube an element\n        val sums = mutable.ListBuffer[Int]()\n\
    \        // We will use the for loop to go through every element in the list\n\
    \        for(i <- 0 until lst.length)\n            // If the element is a multiple\
    \ of 3 or 4\n            if((i % 3) == 0 || i % 4 == 0)\n                // We\
    \ square the element\n                res += (i * i)\n            // Otherwise,\
    \ if the element is a multiple of 3\n            else if(i % 3 == 0)\n       \
    \         // We cube the element\n                res += (i * i * i)\n       \
    \     // Otherwise, if the element is a multiple of 4\n            else if(i %\
    \ 4 == 0)\n                // We square the element\n                res += (i\
    \ * i)\n            // Otherwise, we put a zero since we cannot do anything to\
    \ this element\n            else\n                res += 0\n            // We\
    \ want to add every number to the running total\n            sums += res\n\n \
    \       // We will then add every number in the sums list to the sum of all running\
    \ totals\n        sums.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppm_v5ptz.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppm_v5ptz.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l) {(sum,\
    \ entry) =>\n            if (sum == 0) entry\n            else (entry * entry)\
    \ + (sum * sum)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspw4qz8r.scala:22)\n\tat Problem.main(tmpspw4qz8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val squaresMap = mutable.Map[Long,\
    \ Int]()\n        val cubesMap = mutable.Map[Long, Int]()\n        lst.foreach{\n\
    \            (i, cnt) =>\n                cnt match {\n                    case\
    \ 3 => squaresMap += i -> cnt\n                    case 4 => cubesMap += i ->\
    \ cnt\n                    case _ => ()\n                }\n        }\n      \
    \  val sum = (squaresMap.values.sum + cubesMap.values.sum) + squaresMap.keySet.sum\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19tn_3hb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msquaresMap\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19tn_3hb.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesMap\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp19tn_3hb.scala:19:21 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            (\e[36mi\e[0m, \e[36mcnt\e[0m) =>\n\e[31m\e[31m   |\e[0m \
    \           ^\e[0m\n\e[31m   |\e[0m            Wrong number of parameters, expected:\
    \ 1\n\e[31m20 |\e[0m                cnt \e[33mmatch\e[0m {\n\e[31m21 |\e[0m  \
    \                  \e[33mcase\e[0m \e[31m3\e[0m => squaresMap += i -> cnt\n\e\
    [31m22 |\e[0m                    \e[33mcase\e[0m \e[31m4\e[0m => cubesMap += i\
    \ -> cnt\n\e[31m23 |\e[0m                    \e[33mcase\e[0m _ => ()\n\e[31m24\
    \ |\e[0m                }\n3 errors found\n"
  stdout: ''
  timestamp: 1660010254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Initialize a mutable\
    \ sum, initialized to 0.\n        var sum = 0L\n\n        // Declare an iterator\
    \ on the list\n        val it = lst.iterator\n\n        // Iterate through the\
    \ list, squaring and summing if the index is a multiple of 3\n        for (i <-\
    \ 0 to lst.length - 1) {\n            val cur = it(i)\n            if (i % 3 ==\
    \ 0)\n                sum += cur * cur\n            if (i % 4 == 0)\n        \
    \        sum += cur * cur\n        }\n        // Return the sum\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpvctscu2q.scala:24:22 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcur\e[0m = it(i)\n\e\
    [31m\e[31m   |\e[0m                      ^^\e[0m\n\e[31m   |\e[0m            \
    \          \e[33mvalue\e[0m \e[35mit\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  lst.foreach(x => {\n            if(x % 3 == 0) {\n                sum *= x\n\
    \            }\n            if(x % 4 == 0) {\n                sum += x * x\n \
    \           }\n        })\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4thh7z55.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum *= x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4thh7z55.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                sum += x\
    \ * x\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lst2 = lst.map(x\
    \ => if(x % 3 == 0 && x % 4 == 0) x * x * x else x * x * x * x)\n        lst.foldLeft(0L)((a,\
    \ b) => a + b + lst2(a % lst2.length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqj__yi20.scala:17:48\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        lst.foldLeft(\e[31m0L\e\
    [0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b + lst2(a % lst2.length))\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Long\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        lst.foreach{ i =>\n            if(i % 3 == 0){\n                result\
    \ += i.toLong * i.toLong\n            }else if(i % 4 == 0){\n                result\
    \ += i.toLong * i.toLong\n            }else{\n                result += i.toLong\n\
    \            }\n        }\n        result.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6o3djb1r.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Complete the function\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqwdd24t.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Complete the function\e[0m\n\e[31m17 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum : Long = 0\n\
    \        var count = 0\n        lst.foreach { entry =>\n            if (count\
    \ % 4 == 0) sum += entry\n            else if (count % 3 == 0) if (entry % 3 ==\
    \ 0) sum += entry * entry\n            else if (entry % 4 == 0) sum += entry *\
    \ entry * entry\n            else sum += entry * entry * entry\n            count\
    \ += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpshgtb5wh.scala:28)\n\tat Problem.main(tmpshgtb5wh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n       //Function to do squares\n\
    \       def square(x :Long): Long = x*x\n       //Function to do cubes\n     \
    \  def cube(x :Long): Long = x*x*x\n       //Function to do even numbers\n   \
    \    def evens(x :Long): Long = if(x%2==0) x else 0\n       //Function to do odd\
    \ numbers\n       def odds(x :Long): Long = if(x%2==1) x else 0\n       //Function\
    \ to do sum of squares\n       def sumSquare(a: List[Long]) : Long = a.reduce(0L){_\
    \ + _}\n       //Function to do sum of cubes\n       def sumCube(a: List[Long])\
    \ : Long = a.reduce(0L){_ + _ + _}\n       //Function to do sum of even numbers\n\
    \       def sumEven(a: List[Long]) : Long = a.reduce(0L){_ + _}\n       //Function\
    \ to do sum of odd numbers\n       def sumOdd(a: List[Long]) : Long = a.reduce(0L){_\
    \ + _}\n       //Function to do sum over odd numbers\n       def sumOddOverOdd(a:\
    \ List[Long]) : Long = a.reduce(0L){_ + _ + _}\n       //Function to do sum over\
    \ even numbers\n       def sumEvenOverEven(a: List[Long]) : Long = a.reduce(0L){_\
    \ + _}\n       //Function to do sum over even numbers\n       def sumEvenOverOdd(a:\
    \ List[Long]) : Long = a.reduce(0L){_ + _ + _}\n       //Function to do sum over\
    \ odd numbers\n       def sumOddOverEven(a: List[Long]) : Long = a.reduce(0L){_\
    \ + _}\n       //Function to do sum over even numbers\n       def sumOddOverOdd(a:\
    \ List[Long]) : Long = a.reduce(0L){_ + _ + _}\n       //Function to do sum over\
    \ even numbers\n       def sumEvenOverEven(a: List[Long]) : Long = a.reduce(0L){_\
    \ + _}\n       //Function to do sum over odd numbers\n       def sumOddOverEven(a:\
    \ List[Long]) : Long = a.reduce(0L){_ + _}\n       //Function to do sum over even\
    \ numbers\n       def sumOddOverOdd(a: List[Long]) : Long = a.reduce(0L){_ + _\
    \ + _}\n       //Function to do sum over \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprywv0kw1.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m       \e[33mdef\e[0m \e[36msumOddOverOdd\e[0m(\e[36ma\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = a.reduce(\e[31m0L\e\
    [0m){_ + _ + _}\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOddOverOdd is already defined as \e[33mmethod\e[0m \e[35msumOddOverOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprywv0kw1.scala:43:11 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m       \e[33mdef\e[0m \e[36msumEvenOverEven\e[0m(\e[36ma\e[0m: \e\
    [35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = a.reduce(\e[31m0L\e[0m){_\
    \ + _}\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvenOverEven is already defined as \e[33mmethod\e[0m \e\
    [35msumEvenOverEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprywv0kw1.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m       \e[33mdef\e[0m \e[36msumOddOverEven\e[0m(\e[36ma\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = a.reduce(\e[31m0L\e\
    [0m){_ + _}\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOddOverEven is already defined as \e[33mmethod\e[0m \e\
    [35msumOddOverEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprywv0kw1.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m       \e[33mdef\e[0m \e[36msumOddOverOdd\e[0m(\e[36ma\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = a.reduce(\e[31m0L\e\
    [0m){_ + _ + _}\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOddOverOdd is already defined as \e[33mmethod\e["
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq4s07bfr.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val retVal = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 0 until lst.length){ // iterate through list\n            if((lst(i)\
    \ % 3 == 0) || (lst(i) % 4 == 0)){ // condition for squaring number if its multiple\
    \ of 3 and cube number if its multiple of 4\n                retVal += lst(i)\
    \ * lst(i)\n            }\n        }\n        retVal.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0l5_cvy.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mretVal\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val res: mutable.Set[Long]\
    \ = mutable.Set()\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0) res += lst(i)\n            else if (i % 4 == 0) res += lst(i)\n    \
    \        else res += lst(i)^2\n        }\n        res.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwd7ftpmj.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwd7ftpmj.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum : Long = 0\n\
    \        var lst1 = lst\n        for(i <- 0 until lst1.length) {\n           \
    \ if((i % 3) == 0 && i != 0) sum+=lst1(i)\n            if((i % 4) == 0 && i !=\
    \ 0) sum+=lst1(i)\n            if((i % 4) == 0 && i != 1) sum+=lst1(i)\n     \
    \       if((i % 4) == 1 && i != 2) sum+=lst1(i)\n            if((i % 4) == 1 &&\
    \ i != 3) sum+=lst1(i)\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwk7sycl.scala:28)\n\tat Problem.main(tmpjwk7sycl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lstCopy = lst.clone\n\
    \        lstCopy.foreach {\n        case x => \n            if(x.toInt % 3 ==\
    \ 0) x * x else x * x * x\n        case _ => \n        }\n        lstCopy.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp56tndnfg.scala:16:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlstCopy\e[0m = lst.clone\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (lst : List[Long]) from module class Problem$.\n\e[31m   |\e\
    [0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because\
    \ prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e[0m\
    \ \e[35mProblem\e[0m where the access takes place\n1 error found\n"
  stdout: ''
  timestamp: 1660010259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        def isEven(i : Long)\
    \ : Boolean = {\n            if (i % 2 == 0) \n                true\n        \
    \    else\n                false\n        }\n        val evens : List[Long] =\
    \ lst.filter { i => isEven(i.toInt) }\n        val unEvens : List[Long] = lst.filter\
    \ { i => !isEven(i.toInt) }\n        val sq : List[Long] = evens.map { i => i\
    \ * i }\n        val cube : List[Long] = unEvens.map { i => i * i * i }\n    \
    \    val sumOfEvens : Long = evens.sum\n        val sumOfUnEvens : Long = unEvens.sum\n\
    \        val sumOfCubes : Long = cube.sum\n        val sumOfSums : Long = sq.sum\
    \ + cube.sum\n        val sumOfCubesOfSums : Long = cube.sum + sumOfSums\n   \
    \     val sumOfSumsOfCubes : Long = sumOfSums + sumOfCubes\n        val sumOfCubesOfSumsOfCubes\
    \ : Long = sumOfCubes + sumOfSumsOfCubes\n        sumOfCubesOfSumsOfCubes\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2vtsh3g.scala:36)\n\tat Problem.main(tmpa2vtsh3g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        var sum = 0\n        for (i <- lst) {\n            if (i.toLong % 3 ==\
    \ 0) {\n                sum+=i\n            }\n            else if (i.toLong %\
    \ 4 == 0) {\n                sum+=i*i\n            }\n            else {\n   \
    \             sum+=i*i*i\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy1dj0wjj.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum+=i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy1dj0wjj.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                sum+=i*i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy1dj0wjj.scala:26:19 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                sum+=i*i*i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0l\n     \
    \   var sq = 0l\n        for(i <- lst.indices) {\n            sum += lst(i)\n\
    \            sq = lst(i) * lst(i)\n            if(sq % 4 == 0 && sq % 3 == 0)\n\
    \                sum -= lst(i)\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0v76a2ve.scala:31)\n\tat Problem.main(tmp0v76a2ve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   var isMultipleOfThree = false\n        var isMultipleOfFour = false\n    \
    \    var isMultipleOfNine = false\n        var isMultipleOfEleven = false\n  \
    \      var count = 0\n        for(i <- 0 until lst.size) {\n            val elem\
    \ = lst(i)\n            if(elem % 3 == 0) {\n                if(isMultipleOfThree)\
    \ {\n                    sum += elem\n                    count += 1\n       \
    \         }\n                else {\n                    sum += elem\n       \
    \             isMultipleOfThree = true\n                }\n            }\n   \
    \         else if(elem % 4 == 0) {\n                if(isMultipleOfFour) {\n \
    \                   sum += elem\n                    count += 1\n            \
    \    }\n                else {\n                    sum += elem\n            \
    \        isMultipleOfFour = true\n                }\n            }\n         \
    \   else {\n                if(isMultipleOfNine) {\n                    sum +=\
    \ elem\n                    count += 1\n                }\n                else\
    \ {\n                    if(isMultipleOfEleven) {\n                        sum\
    \ += elem\n                        count += 1\n                    }\n       \
    \             else {\n                        sum += elem\n                  \
    \      isMultipleOfNine = true\n                    }\n                }\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kmtgf9n.scala:68)\n\tat Problem.main(tmp_kmtgf9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i <- lst)\n            if (i % 3 == 0 || i % 4 == 0)\n               \
    \ sum = sum + i\n            else\n                sum = sum * i\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbyhsy1f2.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                sum = sum + i\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbyhsy1f2.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum = sum * i\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        \n        \n       \
    \ val squared = lst.filter { _ % 3 == 0 } \n        val cubed = lst.filter { _\
    \ % 4 == 0 } \n        val summedSquares = squared.sum\n        val summedCubes\
    \ = cubed.sum\n        summedSquares + summedCubes\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4p0geo_.scala:26)\n\tat Problem.main(tmpo4p0geo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  lst.foreach { n =>\n            if (n.toInt % 3 == 0) sum = sum + n.toInt *\
    \ n\n            else if (n.toInt % 4 == 0) sum = sum + n.toInt * n\n        \
    \    else sum = sum + n.toInt * n\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpemkt1cmu.scala:18:40\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (n.toInt\
    \ % \e[31m3\e[0m == \e[31m0\e[0m) sum = sum + n.toInt * n\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    Long\n\e[31m   |\e[0m   \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpemkt1cmu.scala:19:45 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (n.toInt %\
    \ \e[31m4\e[0m == \e[31m0\e[0m) sum = sum + n.toInt * n\n\e[31m\e[31m   |\e[0m\
    \                                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Found:    Long\n\e[31m \
    \  |\e[0m                                             Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpemkt1cmu.scala:20:23 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m sum = sum + n.toInt * n\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Long\n\e[31m   |\e[0m                    \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   val squared = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubed  = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squared.foreach(sum ++= _)\n        cubed.foreach(sum\
    \ ++= _)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpewpyavcu.scala:17:49 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msquared\e[0m = lst.filter(_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m).map(_ * _)\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpewpyavcu.scala:18:48 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcubed\e[0m  = lst.filter(_\
    \ % \e[31m4\e[0m == \e[31m0\e[0m).map(_ * _)\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpewpyavcu.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        squared.foreach(sum ++= _)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   value ++= is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpewpyavcu.scala:20:26 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        cubed.foreach(sum ++= _)\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      value ++= is not a member\
    \ of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        if (lst.isEmpty) {\n\
    \            return 0\n        }\n        val lst2 = lst.filter { x => x % 3 ==\
    \ 0 || x % 4 == 0 }\n        var sum : Long = 0\n        for (i <- 0 until lst2.size)\
    \ {\n            sum = sum + lst2(i).toLong * lst2(i).toLong\n        }\n    \
    \    return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0rwlu5x.scala:27)\n\tat Problem.main(tmpl0rwlu5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  var count = 0\n        for(i <- 0 until lst.size) {\n            sum += (lst(i)\
    \ % 3 == 0l) ? lst(i) * lst(i) : lst(i) * lst(i)\n            count += 1\n   \
    \     }\n        sum * sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvyf4iawa.scala:19:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += (lst(i) % \e[31m3\e[0m == \e[31m0l\e\
    [0m) ? lst(i) * lst(i) : \e[35mlst\e[0m(i) * lst(i)\n\e[31m\e[31m   |\e[0m   \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '(' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyf4iawa.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += (lst(i) % \e[31m3\e[0m == \e[31m0l\e\
    [0m) ? lst(i) * lst(i) : \e[35mlst\e[0m(i) * lst(i)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyf4iawa.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum += (lst(i)\
    \ % \e[31m3\e[0m == \e[31m0l\e[0m) ? lst(i) * lst(i) : \e[35mlst\e[0m(i) * lst(i)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value ? is not a member of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l){\n\
    \            (total, e) => {\n                total += (if (e.toLong rem 3 ==\
    \ 0L) e * e else (e.toLong rem 4 == 0L) ? e * e * e : e).toLong\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaf2xsbef.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                total += (\e[33mif\e[0m (e.toLong rem\
    \ \e[31m3\e[0m == \e[31m0L\e[0m) e * e \e[33melse\e[0m (e.toLong rem \e[31m4\e\
    [0m == \e[31m0L\e[0m) ? e * e * e : \e[35me\e[0m).toLong\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not\
    \ a member of Long - did you mean total.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpaf2xsbef.scala:18:39 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                total += (\e[33mif\e[0m (e.toLong rem \e[31m3\e[0m == \e[31m0L\e\
    [0m) e * e \e[33melse\e[0m (e.toLong rem \e[31m4\e[0m == \e[31m0L\e[0m) ? e *\
    \ e * e : \e[35me\e[0m).toLong\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value rem\
    \ is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaf2xsbef.scala:18:100\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m                total += (\e\
    [33mif\e[0m (e.toLong rem \e[31m3\e[0m == \e[31m0L\e[0m) e * e \e[33melse\e[0m\
    \ (e.toLong rem \e[31m4\e[0m == \e[31m0L\e[0m) ? e * e * e : \e[35me\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                              Not found: type e\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaf2xsbef.scala:18:73 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                total += (\e[33mif\e[0m (e.toLong rem\
    \ \e[31m3\e[0m == \e[31m0L\e[0m) e * e \e[33melse\e[0m (e.toLong rem \e[31m4\e\
    [0m == \e[31m0L\e[0m) ? e * e * e : \e[35me\e[0m).toLong\n\e[31m\e[31m   |\e[0m\
    \                                                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value rem is not a\
    \ member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val count = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach {x => if (x%3 == 0 || x%4 == 0) count += 1 }\n        count.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwpaszceu.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val res: List[Long]\
    \ = lst.map{ i =>\n            if((i % 3) == 0) {\n                i * i\n   \
    \         }\n            else if((i % 4) == 0){\n                i * i\n     \
    \       }\n            else {\n                i * (i * i)\n            }\n  \
    \      }.sum\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0cddcllh.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = lst.map{ \e[36mi\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m              \
    \                Found:    Long\n\e[31m   |\e[0m                             \
    \ Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m((i % \e[31m3\e[0m) == \e[31m0\e[0m) {\n\e[31m18\
    \ |\e[0m                i * i\n\e[31m19 |\e[0m            }\n\e[31m20 |\e[0m \
    \           \e[33melse\e[0m \e[33mif\e[0m((i % \e[31m4\e[0m) == \e[31m0\e[0m){\n\
    \e[31m21 |\e[0m                i * i\n\e[31m22 |\e[0m            }\n\e[31m23 |\e\
    [0m            \e[33melse\e[0m {\n\e[31m24 |\e[0m                i * (i * i)\n\
    \e[31m25 |\e[0m            }\n\e[31m26 |\e[0m        }.sum\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0cddcllh.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : List[Long])\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newList : mutable.Buffer[Long]\
    \ = mutable.Buffer()\n        lst.foreach{e => \n            if(e%3 == 0 && e%4\
    \ == 0) newList += e * e\n            if(e%4 != 0) newList += e * e\n        \
    \    if(e%3 != 0) newList += e * e\n        }\n        newList.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgcr1bb0.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgcr1bb0.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer()\n\e[31m\e[31m   |\e[0m                     \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val squares = mutable.ArrayBuffer[Long]()\n\
    \        val cubes = mutable.ArrayBuffer[Long]()\n        var sum = 0l\n     \
    \   for (i<-lst; j <- 0 until lst.length)\n            if ((i mod 3) == 0) squares.append(lst(i)\
    \ * lst(i))\n            else if ((i mod 4) == 0) cubes.append(lst(i) * lst(i))\n\
    \            else sum+=lst(i)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpns9ixrbo.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msquares\e[0m = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpns9ixrbo.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpns9ixrbo.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m ((i mod \e[31m3\e[0m) == \e\
    [31m0\e[0m) squares.append(lst(i) * lst(i))\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import\
    \ math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpns9ixrbo.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m ((i mod \e[31m4\e[0m) == \e[31m0\e\
    [0m) cubes.append(lst(i) * lst(i))\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Long, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import\
    \ math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpns9ixrbo.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33melse\e[0m sum+=lst(i)\n\e[31m\e[31m   |\e[0m            \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        //TODO: write your code\
    \ here\n        lst.foldLeft(0l) { (sum, elem) => \n            if(elem % 3 ==\
    \ 0){\n                sum + elem * elem \n            } else if(elem % 4 == 0){\n\
    \                sum + elem * elem * elem\n            } else {\n            \
    \    sum\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl6ha6zgj.scala:28)\n\tat Problem.main(tmpl6ha6zgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n      lst.map(x => if (x % 3\
    \ == 0 || (x % 4 == 0 && x % 3 == 0)) x * x else x * x * x).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpasw47ugj.scala:19)\n\tat Problem.main(tmpasw47ugj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here.\n\
    \        var sum = 0\n        for (i <- lst) {\n            if (i % 3 == 0) {\n\
    \                sum = sum + i\n            } else if (i % 4 == 0) {\n       \
    \         sum = sum + i\n            } else {\n                sum = sum * i\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyg_wrv1o.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum = sum + i\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyg_wrv1o.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                sum = sum + i\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyg_wrv1o.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum = sum * i\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  lst.foreach{ x =>\n            val mod3 = x % 3\n            val mod4 = x %\
    \ 4\n            if (mod3 != 0 || mod4 != 0)\n                sum += x * x\n \
    \       }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpibhpk8ql.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += x * x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val counts = lst.map(x\
    \ => if (x % 3 == 0) 3*x else 4*x).zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n\
    \        val sums = counts.sum\n        sums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9oumwmr0.scala:21)\n\tat Problem.main(tmp9oumwmr0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        val counts = mutable.Map[Long, Int]()\n        lst.foreach{x => {\n \
    \           if ((x % 3) == 0) counts(x+1) = 1\n            else if ((x % 4) ==\
    \ 0) counts(x+1) = 2\n            else counts(x+1) = 0\n        }}\n        lst.map{x\
    \ => ((counts(x) + 1) * x)}.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_bvp6a5.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newList : mutable.ListBuffer[Long]\
    \ = mutable.ListBuffer()\n        for (v <- lst) {\n            if (v % 3 == 0\
    \ || v % 4 == 0) {\n                newList += v\n            }\n        }\n \
    \       val sum = 0\n        for (i <- newList) {\n            sum += i\n    \
    \    }\n        sum.toLong\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp27gynvra.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m : mutable.ListBuffer[\e\
    [35mLong\e[0m] = mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp27gynvra.scala:16:49\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m : mutable.ListBuffer[\e[35mLong\e[0m] = mutable.ListBuffer()\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sum = 0\n      \
    \  for (i <- lst) {\n            if (i % 3 == 0) {\n                val square\
    \ = i * i\n                if (i % 4 == 0) {\n                    val cube = i\
    \ * i * i\n                    sum += square\n                    sum += cube\n\
    \                } else {\n                    sum += square\n               \
    \ }\n            } else sum += i * i\n        }\n        return sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl1c81ypo.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    sum += square\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpl1c81ypo.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                    sum += cube\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl1c81ypo.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    sum +=\
    \ square\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean sum.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpl1c81ypo.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e[0m sum += i * i\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value += is not a member of Int - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0l\n     \
    \   // If it is a list of Long then we will use the map method of lists. \n  \
    \      // For all other data structures, use the foreach method. \n        lst.map(i\
    \ => {\n            // If it is a multiple of 3 then we square it and add it to\
    \ sum. \n            if (i % 3 == 0) {\n                sum += i * i\n       \
    \     }\n            // If it is a multiple of 4 then we cube it and add it to\
    \ sum. \n            else if (i % 4 == 0) {\n                sum += i * i\n  \
    \          }\n            // If it is anything else then we ignore it and do not\
    \ add it to sum.\n            else {\n                // Do nothing\n        \
    \    }\n        }).foldLeft(0l) { (a, v) => a + v }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8dko8ndv.scala:32:38 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        }).foldLeft(\e[31m0l\e[0m) { (a, v) => a + v\
    \ }\n\e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String):\
    \ String\n\e[31m   |\e[0mmatch arguments ((v : Unit))\n1 error found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val square = lst.map(\
    \ (n) =>  if (n % 3 == 0 || n % 4 == 0) n * n  else n * n * n )\n        val cube\
    \ = lst.map( (n) =>  if (n % 3 == 0 || n % 4 == 0) n * n * n else n * n * n *\
    \ n )\n        lst.zip(square, cube).map {\n            case (x,y,z) => x + y\
    \ + z\n        }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tf_kb2g.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.zip(square, cube).map\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Found:    (List[Long], List[Long])\n\e[31m   |\e[0m          \
    \      Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2tf_kb2g.scala:19:30 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mcase\e[0m (x,y,z) => x + y + z\n\e[31m\e[31m   |\e[0m   \
    \                         ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n       val lstCopy = lst.clone()\n\
    \       val sum = 0l\n       for(x <- lstCopy){\n         if(x % 3 == 0) lstCopy.filter(_\
    \ % 3 != 0).map(_ * _).sum\n         else if(x % 4 == 0) lstCopy.filter(_ % 4\
    \ != 0).map(_ * _).sum\n         else sum += x\n        }\n       sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx3_x2e9w.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m       \e[33mval\e[0m \e[36mlstCopy\e[0m = lst.clone()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (lst : List[Long]) from module class Problem$.\n\e[31m   |\e\
    [0m Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because\
    \ prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e[0m\
    \ \e[35mProblem\e[0m where the access takes place\n1 error found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        require(lst != Nil,\
    \ \n            \"The function requires at least one element\")\n        val total\
    \ = 0L\n        var i = 0\n        while(i < lst.size) {\n            if(lst(i)\
    \ % 3 == 0 || lst(i) % 4 == 0)\n            {\n                total += lst(i)\n\
    \            }\n            else if(lst(i) % 3 == 0 && lst(i) % 4 != 0)\n    \
    \        {\n                total += lst(i)*lst(i)\n            }\n          \
    \  else if(lst(i) % 4 == 0 && lst(i) % 3 == 0)\n            {\n              \
    \  total += lst(i)*lst(i)*lst(i)\n            }\n            i += 1\n        }\n\
    \        return total\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq6_c7g5q.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                total += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not\
    \ a member of Long - did you mean total.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq6_c7g5q.scala:27:22 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                total += lst(i)*lst(i)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member of Long\
    \ - did you mean total.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq6_c7g5q.scala:31:22\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                total +=\
    \ lst(i)*lst(i)*lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               value += is not a member of Long - did you mean total.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newLst = lst.filter(_\
    \ % 3 == 0).map(_ * _)\n        val newLst2 = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        newLst.sum + newLst2.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7t4q7brs.scala:16:48 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewLst\e[0m = lst.filter(_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m).map(_ * _)\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp7t4q7brs.scala:17:49 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewLst2\e[0m = lst.filter(_\
    \ % \e[31m4\e[0m == \e[31m0\e[0m).map(_ * _)\n\e[31m\e[31m   |\e[0m          \
    \                                       ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ Error: /tmp/tmp7t4q7brs.scala:18:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        newLst.sum + newLst2.sum\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mDoubleIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your logic\
    \ here\n        val len = lst.size\n        var sum = 0\n        for (i <- 0 until\
    \ len) {\n            val x = lst(i)\n            if (i % 3 == 0) {\n        \
    \        val y = x * x\n                sum += y\n            } else if (i % 4\
    \ == 0) {\n                val y = x * x * x\n                sum += y\n     \
    \       } else {\n                sum += x\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqjw8z05k.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sum += y\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqjw8z05k.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                sum += y\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqjw8z05k.scala:28:20 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var total = 0L\n   \
    \     var count = 0L\n        for(i <- lst) {\n            if(i%3 != 0 && i%4\
    \ != 0) {\n                total = total + i\n                count = count +\
    \ 1\n            }\n        }\n        total.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsihs9psy.scala:27)\n\tat Problem.main(tmpsihs9psy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0l\n     \
    \   for (i<-lst.indices) sum += lst(i)\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaboduhcv.scala:25)\n\tat Problem.main(tmpaboduhcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val list2 = lst map\
    \ (e => if(e.mod(3) == 0) e*e else e*e)\n        val list3 = list2.filter (e =>\
    \ e.mod(4) == 0)\n        list3.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6libc1wl.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = lst map (\e\
    [36me\e[0m => \e[33mif\e[0m(e.mod(\e[31m3\e[0m) == \e[31m0\e[0m) e*e \e[33melse\e\
    [0m e*e)\n\e[31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6libc1wl.scala:17:41\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mlist3\e[0m = list2.filter (\e[36me\e[0m => e.mod(\e[31m4\e[0m) == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk_rgs2nx.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// TODO\e[0m\n\e[31m17 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        if(lst.isEmpty) 0\n\
    \        else if(lst.exists(_ % 3 == 0)) lst.sum * lst.sum\n        else if(lst.exists(_\
    \ % 4 == 0)) lst.sum * lst.sum\n        else lst.sumSquares(lst.toList)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi37e7s7i.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m lst.sumSquares(lst.toList)\n\e\
    [31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    value sumSquares is not a member of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var newList: mutable.WrappedArray[Long]\
    \ = mutable.WrappedArray.empty[Long]\n        for (i <- 0 until lst.size) {\n\
    \            if (i%3 != 0 && i%4 != 0) {\n                newList = newList :+\
    \ lst(i)\n            }\n        }\n        val sum = newList.sum\n        if\
    \ (sum > 0)\n            sum\n        else\n            sum + sumSquares(newList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1gw0x6q.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mnewList\e[0m: mutable.WrappedArray[\e\
    [35mLong\e[0m] = mutable.WrappedArray.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1gw0x6q.scala:16:50\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e\
    [36mnewList\e[0m: mutable.WrappedArray[\e[35mLong\e[0m] = mutable.WrappedArray.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        if (lst.isEmpty) 0\n\
    \        else {\n            var list = new mutable.ArrayBuffer[Long]()\n    \
    \        var total = 0\n            var index = 0\n            while (index <\
    \ lst.size) {\n                if (index % 3 == 0 || index % 4 == 0) {\n     \
    \               list += lst(index).toLong\n                    total += lst(index).toLong\
    \ * lst(index).toLong\n                    index += 1\n                } else\n\
    \                    if (index % 3 == 1) {\n                        list += lst(index).toLong\n\
    \                        total += lst(index).toLong * lst(index).toLong\n    \
    \                    index += 1\n                    } else if (index % 3 == 2)\
    \ {\n                        list += lst(index).toLong\n                     \
    \   total += lst(index).toLong * lst(index).toLong\n                        index\
    \ += 1\n                    } else if (index % 4 == 1) {\n                   \
    \     list += lst(index).toLong\n                        total += lst(index).toLong\
    \ * lst(index).toLong\n                        index += 1\n                  \
    \  } else if (index % 4 == 2) {\n                        list += lst(index).toLong\n\
    \                        total += lst(index).toLong * lst(index).toLong\n    \
    \                    index += 1\n                    }\n            }\n      \
    \      list.sum\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyik903rd.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyik903rd.scala:24:26\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    total\
    \ += lst(index).toLong * lst(index).toLong\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyik903rd.scala:29:30\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        total\
    \ += lst(index).toLong * lst(index).toLong\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyik903rd.scala:33:30 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m                        total += lst(index).toLong * lst(index).toLong\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyik903rd.scala:37:30 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        total += lst(index).toLong *\
    \ lst(index).toLong\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyik903rd.scala:41:30\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                        total\
    \ += lst(index).toLong * lst(index).toLong\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a\
    \ member of Int - did you mean Int.!=?\n6 errors found\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lst2 = lst.filter(_%4==0)\n\
    \        val lst3 = lst.filter(_%4==1)\n        val lst4 = lst.filter(_%4==2)\n\
    \        val sum = lst2.reduce(_+_) + lst3.reduce(_+_) + lst4.reduce(_+_)\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.sumSquares(tmpeey3t7jk.scala:19)\n\tat Problem$.main(tmpeey3t7jk.scala:23)\n\
    \tat Problem.main(tmpeey3t7jk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foreach {\n    \
    \        case i if (i % 3 == 0 || i % 4 == 0) => lst(i) = i * i\n            case\
    \ i => lst(i) = i * i * i\n        }\n        lst.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbiznsx5.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m (i % \e[31m3\e\
    [0m == \e[31m0\e[0m || i % \e[31m4\e[0m == \e[31m0\e[0m) => lst(i) = i * i\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^\e[0m\n\
    \e[31m   |\e[0m  value update is not a member of List[Long] - did you mean lst.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbiznsx5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m i => lst(i) = i * i * i\n\
    \e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m  value update\
    \ is not a member of List[Long] - did you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val result = 0\n   \
    \     for ( i <- lst) {\n            if(i % 3 == 0) result += (i % 3) * (i % 3)\
    \ \n            if(i % 4 == 0) result += (i % 3) * (i % 3) * (i % 3) \n      \
    \      result += i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpomq1yal6.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(i % \e[31m3\e[0m == \e[31m0\e\
    [0m) result += (i % \e[31m3\e[0m) * (i % \e[31m3\e[0m) \n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpomq1yal6.scala:19:34 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mif\e[0m(i % \e[31m4\e[0m == \e[31m0\e[0m) result\
    \ += (i % \e[31m3\e[0m) * (i % \e[31m3\e[0m) * (i % \e[31m3\e[0m) \n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpomq1yal6.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += i\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO Auto-generated\
    \ method stub\n        var sum = 0l\n        for(i <- 0 until lst.size) {\n  \
    \          if(i % 3 == 0) {\n                sum *= lst(i)\n            } else\
    \ if(i % 4 == 0) {\n                sum *= lst(i)\n            } else {\n    \
    \            sum += lst(i)\n            }\n        }\n        sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbm4lzlz6.scala:30)\n\tat Problem.main(tmpbm4lzlz6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val squares = mutable.HashSet[Long]()\n\
    \        val cubes = mutable.HashSet[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        for (entry <- lst) {\n            if (entry % 3 == 0 || entry % 4 ==\
    \ 0) squares += entry\n            if (entry % 3 == 0) cubes += entry\n      \
    \  }\n        squares.foreach { sq => result += sq * sq }\n        cubes.foreach\
    \ { cu => result += cu * cu }\n        lst.length.toLong + result.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzneb95b8.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msquares\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzneb95b8.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzneb95b8.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   for(i <- 0 until lst.size) {\n            sum += if((i%3L==0L || i%4L==0L\
    \ || i%3L==0L || i%4L==0L)) lst(i) else lst(i) * lst(i)\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpae5ah_p6.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += \e[33mif\e[0m((i%\e[31m3L\e[0m==\e\
    [31m0L\e[0m || i%\e[31m4L\e[0m==\e[31m0L\e[0m || i%\e[31m3L\e[0m==\e[31m0L\e[0m\
    \ || i%\e[31m4L\e[0m==\e[31m0L\e[0m)) lst(i) \e[33melse\e[0m lst(i) * lst(i)\n\
    \e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m             \
    \      expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpae5ah_p6.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += \e[33mif\e[0m((i%\e[31m3L\e[0m==\e\
    [31m0L\e[0m || i%\e[31m4L\e[0m==\e[31m0L\e[0m || i%\e[31m3L\e[0m==\e[31m0L\e[0m\
    \ || i%\e[31m4L\e[0m==\e[31m0L\e[0m)) lst(i) \e[33melse\e[0m lst(i) * lst(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   for(i <- 0 until lst.length) sum += lst(i) * lst(i)\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpricu_gm5.scala:21)\n\tat Problem.main(tmpricu_gm5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code goes here\n\
    \        var sum = 0\n        var count = 0\n        var lastIndex = lst.length\
    \ - 1\n        lst.foreach { x => \n            if ( x % 3 == 0 ) { \n       \
    \         val square = x * x \n                sum += square \n              \
    \  count += 1\n            } else if ( x % 4 == 0 ) {\n                val cube\
    \ = x * x\n                sum += cube \n                count += 1\n        \
    \    } else if ( (x % 3 != 0) & (x % 4 != 0) ) {\n                val diff = x\
    \ - lastIndex \n                sum += diff * diff \n                count +=\
    \ 1\n            }\n            lastIndex = x \n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprqa3h0vs.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sum += square \n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprqa3h0vs.scala:27:20 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                sum += cube \n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprqa3h0vs.scala:31:20\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                sum += diff\
    \ * diff \n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprqa3h0vs.scala:34:24 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            lastIndex = x \n\e[31m\e[31m   |\e[0m   \
    \                     ^\e[0m\n\e[31m   |\e[0m                        Found:  \
    \  (x : Long)\n\e[31m   |\e[0m                        Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum : Long = 0\n\
    \        var i = 0\n        while (i < lst.size) {\n            if (lst(i) % 3\
    \ == 0) {\n                sum+ = lst(i) * lst(i)\n                i += 1\n  \
    \          } else if (lst(i) % 4 == 0) {\n                sum+ = lst(i) * lst(i)\n\
    \                i += 1\n            } else {\n                sum += lst(i)\n\
    \                i += 1\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmponzoh23c.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum+ = lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     expression\
    \ expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmponzoh23c.scala:23:21 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                sum+ = lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sum = 0\n      \
    \  lst.foreach { entry =>\n            if (entry % 3 == 0)\n                sum\
    \ + entry * entry\n            if (entry % 4 == 0)\n                sum + entry\
    \ * entry\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0xygirb.scala:26)\n\tat Problem.main(tmpa0xygirb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: Complete this\
    \ function\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa6jp78b.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// TODO: Complete this function\e[0m\n\e[31m17 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        require(!lst.isEmpty)\n\
    \        require(!lst.contains(-1) && lst.contains(-5))\n        val sum = 0L\n\
    \        for (i <- lst.indices) {\n            if (i % 3 == 0) {\n           \
    \     sum += lst(i)\n            }\n            if (i % 4 == 0) {\n          \
    \      sum += lst(i)\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tq9k83q.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4tq9k83q.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sqm = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        lst.map(x => \n            if (x % 3 == 0) sqm += x*x \n            else\
    \ if ((x % 4 == 0) || (x % 3 == 0)) sqm += x*x*x \n            else sqm += x*x*x*x\
    \ )\n        sqm.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoz416edl.scala:24)\n\tat Problem.main(tmpoz416edl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val m = lst.take(3).foldLeft(0)((x,y)\
    \ => (x*x+y*y))\n        lst.takeWhile(_%3 != 0).map(x => (x*x*x)).sum + lst.takeWhile(_%4\
    \ != 0).map(x => (x*x*x)).sum + m\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfc4k9u0.scala:16:50\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = lst.take(\e[31m3\e[0m).foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m,\e[36my\e[0m)\
    \ => (x*x+y*y))\n\e[31m\e[31m   |\e[0m                                       \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var result = 1l.toLong\n\
    \        lst.foreach{\n            x => {\n                if(x%4 == 0)\n    \
    \                result = result * x\n                else if(x%4 == 1)\n    \
    \                result = result * x*x\n                else\n               \
    \     result = result * x*x*x\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxdznhy3.scala:30)\n\tat Problem.main(tmpxxdznhy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        if (lst == Nil)\n  \
    \          return 0L\n        val n = lst.size\n        val ls = lst.takeWhile{i\
    \ => i % 3 == 0}\n        val ln = lst.dropWhile{i => i % 3 == 0}\n        val\
    \ ls2 = ls.takeWhile{i => i % 4 == 0}\n        val ln2 = ln.dropWhile{i => i %\
    \ 4 == 0}\n        val final = ls2.map(_ * _) + ln2.map(_ * _)\n        lst.zip(final).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnhyfovsw.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[33mfinal\e[0m = ls2.map(_ *\
    \ _) + ln2.map(_ * _)\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e\
    [0m            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpnhyfovsw.scala:24:16 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        lst.zip(\e[33mfinal\e[0m).sum\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                expression expected but \e\
    [31mfinal\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnhyfovsw.scala:24:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ lst.zip(\e[33mfinal\e[0m).sum\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m       No implicit Ordering defined for B\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m       where:    B is a type variable with constraint\
    \ >: (Long, Nothing)\n\e[31m   |\e[0m       .\n3 errors found\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2h4wa5.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m17 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val res = mutable.ListBuffer.empty[Long]\n\
    \        for {\n            i <- lst\n            mod = i % 3\n        } yield\
    \ {\n            if (mod != 0) {\n                res += i * i * i\n         \
    \   } else if (mod != 1) {\n                res += i * i\n            } else if\
    \ (mod != 2) {\n                res += i\n            }\n        }\n        res.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2o1s8rox.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newList : mutable.Set[Long]\
    \ = mutable.Set.empty[Long]\n        lst.foreach {\n            i => if (i.toLong\
    \ % 3 == 0) newList += i * i.toLong else if (i.toLong % 4 == 0) newList += i *\
    \ i.toLong else newList += i.toLong }\n        newList.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qe2i4ty.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qe2i4ty.scala:16:42\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lstInt = lst.map\
    \ {\n        case i if i % 3 == 0 || i % 4 == 0 => i\n        case i => i.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8pk8w_wg.scala:35:0 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pk8w_wg.scala:34:1\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp8pk8w_wg.scala:20:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m20 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        \n        // Your code\
    \ goes here\n        lst.foreach { i => if (i % 3 == 0 || i % 4 == 0) i = i *\
    \ i else i = i * i * i }\n        lst.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfc9nb2c7.scala:18:59 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.foreach { \e[36mi\e[0m => \e[33mif\e[0m (i\
    \ % \e[31m3\e[0m == \e[31m0\e[0m || i % \e[31m4\e[0m == \e[31m0\e[0m) i = i *\
    \ i \e[33melse\e[0m i = i * i * i }\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                            Reassignment to val i\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpfc9nb2c7.scala:18:74 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.foreach { \e[36mi\e[0m => \e[33mif\e[0m (i\
    \ % \e[31m3\e[0m == \e[31m0\e[0m || i % \e[31m4\e[0m == \e[31m0\e[0m) i = i *\
    \ i \e[33melse\e[0m i = i * i * i }\n\e[31m\e[31m   |\e[0m                   \
    \                                                     ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                   Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum : Long = 0\n\
    \        var count3 : Int = 0\n        var count4 : Int = 0\n        var square\
    \ = lst.map(x => if(x % 3 == 0) x*x else x*x*x)\n        square = square.filter(x\
    \ => x % 4 != 0)\n        square = square.filter(x => x % 3 != 0)\n        for(i\
    \ <- 0 until square.length) sum = sum + square(i)\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphgr28cgy.scala:26)\n\tat Problem.main(tmphgr28cgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val numOfMultiple3 =\
    \ (0 until lst.size).filter(x => (x % 3) == 0).sum\n        val numOfMultiple4\
    \ = (0 until lst.size).filter(x => (x % 4) == 0).sum\n        val sum = (0 until\
    \ lst.size).sum\n        lst.foreach { x =>\n            val isMultiple3 = x %\
    \ 3 == 0\n            val isMultiple4 = x % 4 == 0\n            if(isMultiple3\
    \ && isMultiple4)\n                sum + x // this isn't needed since this would\
    \ just be multiplied by 4\n            else if(isMultiple3)\n                sum\
    \ + x * x\n            else if(isMultiple4)\n                sum + x * x * x\n\
    \            else\n                sum\n        }\n        sum + numOfMultiple3\
    \ * numOfMultiple4\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp510wr6_6.scala:34)\n\tat Problem.main(tmp510wr6_6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code goes here\n\
    \        val sums = mutable.Map[Long, Long]()\n        lst.foreach {\n       \
    \   i =>\n            val index = i / 3\n            if (index.toInt == 0 && i\
    \ % 3 != 0) {\n              sums += i -> i * i\n            } else {\n      \
    \        if (index.toInt % 4 == 0) {\n                sums += i -> i * i * i\n\
    \              } else {\n                sums += i -> i * i * i\n            \
    \  }\n            }\n        }\n        sums.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr2mi_rd5.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   for ( i <- lst; if (i % 3 == 0 || i % 4 == 0) ) sum += i\n        sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz8q2jd1.scala:21)\n\tat Problem.main(tmptz8q2jd1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        def isMultiple(i : Long,\
    \ mul : Long) : Boolean = {\n            val div = i % mul\n            return\
    \ div != 0\n        }\n        val sqr = lst.map(x => x * x)\n        val mod\
    \ = lst.filter(x => isMultiple(x, 3)).map(x => x * x)\n        val mod4 = lst.filter(x\
    \ => isMultiple(x, 4)).map(x => x * x)\n        val sum = lst.map(x => x * x).sum\n\
    \        sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum + sum\
    \ + sum + sum + sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:259)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform$$anonfun$1(Trees.scala:1494)\n\
    \tat scala.collection.immutable.List.mapConserve(List.scala:472)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1494)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.app1$1(PostTyper.scala:305)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:319)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.transform.MacroTransform$Transformer.transform(MacroTransform.scala:49)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transformSelect(PostTyper.scala:203)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:285)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.app1$1(PostTyper.scala:306)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:319)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.transform.MacroTransform$Transformer.transform(MacroTransform.scala:49)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transformSelect(PostTyper.scala:203)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:285)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.app1$1(PostTyper.scala:306)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:319)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.transform.MacroTransform$Transformer.transform(MacroTransform.scala:49)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transformSelect(PostTyper.scala:203)\n\
    \tat dotty.tools.dotc.transform.PostTyper$PostTyperTransformer.transform(PostTyper.scala:285)\n\
    \tat dotty.tools.dotc.transform.PostTyper"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpe270_nhu.scala

    '
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i <- lst)\n            if (i % 3 == 0 || i % 4 == 0)\n               \
    \ sum += i\n            else\n                sum += i * i\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpag7qigvo.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpag7qigvo.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum += i\
    \ * i\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n      lst match {\n        case\
    \ Nil => 0\n        case x :: xs =>\n            val sum: Long = x.toLong match\
    \ {\n              case i if i % 3 == 0 => i * i\n              case i if i %\
    \ 4 == 0 => i * i\n              case _ => 0\n            }\n            lst.filter(_\
    \ % 3 == 0 || _ % 4 == 0).foreach(x => sum += x)\n            sum\n      }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkelk3nnb.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lst.filter(_ % \e[31m3\e[0m == \e[31m0\e\
    [0m || _ % \e[31m4\e[0m == \e[31m0\e[0m).foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkelk3nnb.scala:24:66 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lst.filter(_ % \e[31m3\e[0m == \e[31m0\e\
    [0m || _ % \e[31m4\e[0m == \e[31m0\e[0m).foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                 value += is not a member of\
    \ Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your solution\
    \ here\n        lst.filter(_ % 3 == 0 || _ % 4 == 0).map(x => (x * x)).sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpormrkcbi.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.filter(_ % \e[31m3\e[0m == \e[31m0\e[0m ||\
    \ _ % \e[31m4\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => (x * x)).sum\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val result = (0l).asInstanceOf[Long]\n\
    \        lst.foreach(i => if(i%4==0) result += i*i else result += i*i*i)\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwy65trp9.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mi\e[0m => \e[33mif\e[0m(i%\e\
    [31m4\e[0m==\e[31m0\e[0m) result += i*i \e[33melse\e[0m result += i*i*i)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value += is not a member of Long - did you mean result.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwy65trp9.scala:17:62 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mi\e[0m => \e[33mif\e[0m(i%\e\
    [31m4\e[0m==\e[31m0\e[0m) result += i*i \e[33melse\e[0m result += i*i*i)\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value += is not a member of Long - did you mean\
    \ result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Complete the function\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkbf0ma06.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Complete the function here\e[0m\n\e[31m17 |\e[0m\
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val n = lst.size\n \
    \       lst.foldLeft(0.0) { case (sum, a) =>\n            if (a % 3 == 0 && a\
    \ % 4 == 0) (sum + a * a)\n            else if (a % 3 == 0) (sum + a * a * a)\n\
    \            else if (a % 4 == 0) (sum + a * a * a * a)\n            else sum\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpykdbbv3p.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        lst.foldLeft(\e[31m0.0\e\
    [0m) { \e[33mcase\e[0m (sum, a) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m18 |\e[0m            \e[33mif\e[0m (a % \e[31m3\e[0m == \e[31m0\e[0m && a\
    \ % \e[31m4\e[0m == \e[31m0\e[0m) (sum + a * a)\n\e[31m19 |\e[0m            \e\
    [33melse\e[0m \e[33mif\e[0m (a % \e[31m3\e[0m == \e[31m0\e[0m) (sum + a * a *\
    \ a)\n\e[31m20 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (a % \e[31m4\e\
    [0m == \e[31m0\e[0m) (sum + a * a * a * a)\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m sum\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n       lst match {\n       \
    \   case Nil => 0L\n          case _ => {\n             val map = mutable.HashMap()\n\
    \             for (i <- lst) \n                if (i%3==0L) map(3L) = map(3L)\
    \ + i\n                else map(i%4L) = map(i%4L) + i\n             map.values.sum\n\
    \          }\n       }\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3h4fgyb.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m             \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.zipWithIndex.flatMap\
    \ {\n        case (value, index) if (index % 3 == 0 || index % 4 == 0) =>\n  \
    \          value + value * value\n        case value => List()\n        }.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9k6ktzz.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            value + value * value\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.map(x => {\n   \
    \         if(x % 3 == 0 && x % 4 == 0) x * x\n            else if(x % 3 == 0)\
    \ x * x * x\n            else x * x * x * x\n        }).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptdsb0r75.scala:23)\n\tat Problem.main(tmptdsb0r75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val squares = lst.map(i\
    \ => if (i % 3 == 0) i*i else i*i*i)\n        val cubes = lst.map(i => if (i %\
    \ 4 == 0) i*i*i else i*i*i*i)\n        squares.sum + cubes.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpzipoxz.scala:21)\n\tat Problem.main(tmpxpzipoxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: \n        val\
    \ res = mutable.ListBuffer.empty[Long]()\n        lst.foreach(x => {\n       \
    \     val mult = if (x % 3 == 0) 3 else 4\n            if (x % mult == 0) res\
    \ += x * x\n        })\n        res.foldLeft(0)(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8qmw3do.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  var counter = 3\n        val listWithCounter = lst.filter {\n            i\
    \ => i % counter == 0\n        }\n        listWithCounter.foreach{\n         \
    \   i => if (i % counter == 0) sum += i * i\n            counter += 4\n      \
    \  }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp142q1rz4.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[36mi\e[0m => \e[33mif\e[0m (i % counter\
    \ == \e[31m0\e[0m) sum += i * i\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lst2 = lst filter\
    \ { x => x % 3 == 0 || (x % 4 == 0 && x % 3 != 0) } \n        lst2.foldLeft(0l)(\
    \ (acc,x) => acc + x * x )\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz48gdrua.scala:20)\n\tat Problem.main(tmpz48gdrua.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var total = 0L\n   \
    \     for (i <- 0 until lst.size) {\n            if (i % 3 == 0) total += lst(i)\n\
    \            if (i % 4 == 0) total += lst(i)\n            else lst(i) = total\n\
    \        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe895e0g1.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m lst(i) = total\n\e[31m\e\
    [31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m  value update is not a\
    \ member of List[Long] - did you mean lst.updated?\n1 error found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val m = mutable.ListBuffer[Long]()\n\
    \        for(i <- lst if i % 3 == 0){\n            m.append(i * i)\n        }\n\
    \        for(i <- lst if i % 4 == 0){\n            m.append(i * i * i)\n     \
    \   }\n        m.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2z7n1dpp.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val n = lst.length\n\
    \        val sum = 0\n        for(i <- 1 to n)\n            if (i%3 == 0 && i%4\
    \ == 0)\n                sum += lst(i)\n                else if (i%3 == 0)\n \
    \                   sum += lst(i) * lst(i)\n                else if (i%4 == 0)\n\
    \                    sum += lst(i) * lst(i) * lst(i)\n                else\n \
    \                   sum += lst(i) * lst(i) * lst(i) * lst(i)\n        sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpesvnwwxu.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpesvnwwxu.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                    sum += lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpesvnwwxu.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    sum +=\
    \ lst(i) * lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpesvnwwxu.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    sum +=\
    \ lst(i) * lst(i) * lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of Int\
    \ - did you mean sum.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // write your logic\
    \ here\n        lst.map {\n            case i if (i % 3 == 0) => i * i\n     \
    \       case i if (i % 4 == 0) => i * i\n            case i => i\n        }.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9k97p61.scala:24)\n\tat Problem.main(tmpz9k97p61.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // 1\n        val isMultipleOf3\
    \ = lst.map(i => i % 3) == 0\n        // 2\n        val isMultipleOf4 = lst.map(i\
    \ => i % 4) == 0\n        // 3\n        val updatedList = lst.filter(i => (i %\
    \ 3 != 0) && (i % 4 != 0))\n        // 4\n        updatedList.foldLeft(0)((x,\
    \ y) => x + y * y)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0c5j5di3.scala:17:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misMultipleOf3\e[0m = lst.map(\e\
    [36mi\e[0m => i % \e[31m3\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values\
    \ of types List[Long] and Int cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmp0c5j5di3.scala:19:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misMultipleOf4\e[0m = lst.map(\e\
    [36mi\e[0m => i % \e[31m4\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values\
    \ of types List[Long] and Int cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0c5j5di3.scala:23:42 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        updatedList.foldLeft(\e[31m0\e[0m)((\e[36mx\e\
    [0m, \e[36my\e[0m) => x + y * y)\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val n = lst.size\n \
    \       val sum = 0\n        var sq = 0\n        var i = 0\n        while(i <\
    \ n) {\n          val x = lst(i)\n          if(x % 3 == 0 || x % 4 == 0) {\n \
    \           sum = sum + x\n          } else {\n            sq = sq + (x * x)\n\
    \          }\n          i += 1\n        }\n        sq + sum\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ous8ahq.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ous8ahq.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sum = sum + x\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ous8ahq.scala:25:17 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            sq = sq + (x * x)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:   \
    \ Long\n\e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2ous8ahq.scala:33:11 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    assert(sumSquares((List[\e[35mLong\e[0m](\e[31m1l\e\
    [0m.toLong, \e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong))) == (\e[31m6l\e[0m));\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not\
    \ found: sumSquares\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ous8ahq.scala:34:11\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    assert(sumSquares((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m4l\e[0m.toLong, \e[31m9l\e[0m.toLong)))\
    \ == (\e[31m14l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: sumSquares\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2ous8ahq.scala:35:11 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m    assert(sumSquares((List[\e[35mLong\e[0m]())) == (\e[31m0l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \      Not found: sumSquares\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   var square = 0\n        var cube = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i%3 == 0 && i%4 != 0) {\n                square = lst.apply(i)\
    \ * lst.apply(i)\n            } else if (i%4 == 0 && i%3 != 0) {\n           \
    \     cube = lst.apply(i) * lst.apply(i)\n            } else {\n             \
    \   sum += lst.apply(i)\n            }\n        }\n        sum + square + cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20ibbznl.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                square = lst.apply(i)\
    \ * lst.apply(i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp20ibbznl.scala:23:23 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                cube = lst.apply(i) * lst.apply(i)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                       Found:    Long\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: complete the\
    \ function here\n        val newList = lst.map(x => if (x % 3 == 0) x * x else\
    \ x * x * x).filter(_ % 4 != 0)\n        lst.zipWithIndex.filter(_._1 % 3 != 0).map(_._2).toList\
    \ + lst.zipWithIndex.filter(_._1 % 4 != 0).map(_._2).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79gb61za.scala:18:64 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.zipWithIndex.filter(_._1 % \e[31m3\e[0m !=\
    \ \e[31m0\e[0m).map(_._2).toList + lst.zipWithIndex.filter(_._1 % \e[31m4\e[0m\
    \ != \e[31m0\e[0m).map(_._2).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  lst.foreach{ elem =>\n            if(elem.toInt % 3 == 0) elem *= elem\n  \
    \          if(elem.toInt % 4 == 0) elem *= elem\n            sum += elem\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykc26gim.scala:18:41 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(elem.toInt % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m) elem *= elem\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Long - did you mean elem.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykc26gim.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(elem.toInt\
    \ % \e[31m4\e[0m == \e[31m0\e[0m) elem *= elem\n\e[31m\e[31m   |\e[0m        \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ *= is not a member of Long - did you mean elem.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpykc26gim.scala:20:16 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            sum += elem\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq4s07bfr.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here!\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpou25t56y.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \e[34m// Your code here!\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: Your code here\n\
    \        // Your solution\n        val totalSquares = lst.filter{ x => x % 3 ==\
    \ 0 || x % 4 == 0 }.map { x => x * x }.sum\n        val totalCubes = lst.filter{\
    \ x => x % 3 == 0 || x % 4 == 0 }.map { x => x * x * x }.sum\n        totalSquares\
    \ + totalCubes\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7frpyj48.scala:23)\n\tat Problem.main(tmp7frpyj48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0)((a,\
    \ b) => a + b * b)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7yn1c2k_.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        lst.foldLeft(\e[31m0\e\
    [0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b * b)\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                Found:    Long\n\e[31m   |\e[0m                             \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var result : Long =\
    \ 0\n        // For every element in list, if index is multiple of 3, square,\
    \ if index is multiple of 4, cube, otherwise ignore.\n        lst.foreach{\n \
    \           i =>\n                if((i % 3) ==0) result += i * i\n          \
    \      if((i % 4) == 0) result -= i * i * i\n                if((i % 4) != 0 &&\
    \ (i % 3) != 0) result -= i * i * i\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5pzwn0p6.scala:27)\n\tat Problem.main(tmp5pzwn0p6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \        lst.foldLeft(0l) {\n            (sum, element) => sum + element * element\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_t9ahk6d.scala:22)\n\tat Problem.main(tmp_t9ahk6d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val count = lst.size\n\
    \        var sum = 0\n        for (i<- 0 to count-1) {\n            val index\
    \ = i % 3\n            if (index == 0) sum += lst(i)\n            else if (index\
    \ == 1) sum += lst(i) * lst(i)\n            else if (index == 2) sum += lst(i)\
    \ * lst(i) * lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ciwl0zo.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (index == \e[31m0\e[0m) sum\
    \ += lst(i)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ciwl0zo.scala:21:37\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (index == \e[31m1\e[0m) sum += lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8ciwl0zo.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (index == \e\
    [31m2\e[0m) sum += lst(i) * lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        require(!lst.isEmpty,\
    \ \"Cannot sum an empty list\")\n        val result: List[Long] = List.empty[Long]\n\
    \        for(i <- 0 until lst.size){\n            val a = lst(i).toInt\n     \
    \       val b = a * 2\n            val c = b * 2\n            val d = c * 2\n\
    \            val e = d * 2\n            val f = e * 2\n            val g = f *\
    \ 2\n            val h = g * 2\n            val i = h * 2\n            val j =\
    \ i * 2\n            val k = j * 2\n            val l = k * 2\n            val\
    \ m = l * 2\n            val n = m * 2\n            val o = n * 2\n          \
    \  val p = o * 2\n            val q = p * 2\n            val r = q * 2\n     \
    \       val s = r * 2\n            val t = s * 2\n            val u = t * 2\n\
    \            val v = u * 2\n            val w = v * 2\n            val x = w *\
    \ 2\n            val y = x * 2\n            val z = y * 2\n            val a2\
    \ = a.toLong\n            val b2 = b.toLong\n            val c2 = c.toLong\n \
    \           val d2 = d.toLong\n            val e2 = e.toLong\n            val\
    \ f2 = f.toLong\n            val g2 = g.toLong\n            val h2 = h.toLong\n\
    \            val i2 = i.toLong\n            val j2 = j.toLong\n            val\
    \ k2 = k.toLong\n            val l2 = l.toLong\n            val m2 = m.toLong\n\
    \            val n2 = n.toLong\n            val o2 = o.toLong\n            val\
    \ p2 = p.toLong\n            val q2 = q.toLong\n            val r2 = r.toLong\n\
    \            val s2 = s.toLong\n            val t2 = t.toLong\n            val\
    \ u2 = u.toLong\n            val v2 = v.toLong\n            val w2 = w.toLong\n\
    \            val x2 = x.toLong\n            val y2 = y.toLong\n            val\
    \ z2 = z.toLong\n            result += a2 + b2 + c2 + d2 + e2 + f2 + g2 + h2 +\
    \ i2 + j2 + k2 + l2 + m2 + n2 + o2 + p2 + q2 + r2 + s2 + t2 + u2 + v2 + w2 + x2\
    \ + y2 + z2\n        }\n        result.foldLeft(0l) { (acc, value) => acc + value\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpln2r1gui.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mb\e[0m = a * \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m        \
    \            Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpln2r1gui.scala:71:19 ------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m            result += a2 + b2 + c2 + d2 + e2 + f2 + g2\
    \ + h2 + i2 + j2 + k2 + l2 + m2 + n2 + o2 + p2 + q2 + r2 + s2 + t2 + u2 + v2 +\
    \ w2 + x2 + y2 + z2\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        value += is not a member of List[Long] - did you mean result.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your solution goes\
    \ here\n        var sum = 0l\n        for (i <- 0 until lst.length){\n       \
    \     if ((i mod 3) == 0) sum += lst(i) * lst(i)\n            if((i mod 4) ==\
    \ 0) sum += lst(i) * lst(i)\n            else sum += lst(i)\n        }\n     \
    \   sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4u3_1uy9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m ((i mod \e[31m3\e[0m) == \e\
    [31m0\e[0m) sum += lst(i) * lst(i)\n\e[31m\e[31m   |\e[0m                 ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4u3_1uy9.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m((i\
    \ mod \e[31m4\e[0m) == \e[31m0\e[0m) sum += lst(i) * lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Int,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: write your\
    \ code in here\n        lst.map(x => if (x % 3 == 0 && x % 4 == 0) x * x else\
    \ if (x % 3 == 0) x * x * x else x * x * x * x).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4o55tp9.scala:20)\n\tat Problem.main(tmpz4o55tp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        lst.foldLeft(0) { (acc,val) => acc + if (val % 3 == 0 && val % 4 != 0)\
    \ val * val else val * val * val }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf8hlrziu.scala:17:31 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foldLeft(\e[31m0\e[0m) { (\e[36macc\e[0m,\e\
    [33mval\e[0m) => acc + \e[33mif\e[0m (\e[33mval\e[0m % \e[31m3\e[0m == \e[31m0\e\
    [0m && \e[33mval\e[0m % \e[31m4\e[0m != \e[31m0\e[0m) \e[33mval\e[0m * \e[33mval\e\
    [0m \e[33melse\e[0m \e[33mval\e[0m * \e[33mval\e[0m * \e[33mval\e[0m }\n\e[31m\e\
    [31m   |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m        \
    \                       expression expected but \e[31mval\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf8hlrziu.scala:17:45 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foldLeft(\e[31m0\e[0m) { (\e[36macc\e[0m,\e\
    [33mval\e[0m) => acc + \e[33mif\e[0m (\e[33mval\e[0m % \e[31m3\e[0m == \e[31m0\e\
    [0m && \e[33mval\e[0m % \e[31m4\e[0m != \e[31m0\e[0m) \e[33mval\e[0m * \e[33mval\e\
    [0m \e[33melse\e[0m \e[33mval\e[0m * \e[33mval\e[0m * \e[33mval\e[0m }\n\e[31m\e\
    [31m   |\e[0m                                             ^^\e[0m\n\e[31m   |\e\
    [0m                                        expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here\n\
    \        val result = 0\n\n        // if lst is empty\n        if(lst.isEmpty)\
    \ {\n            result = 0\n        } else {\n            // if first entry is\
    \ a multiple of 3 \n            if(lst(0).isMultipleOfThree) {\n             \
    \   result =lst(0).doubleValue * lst(0).doubleValue\n                // for every\
    \ other entry in the list except the first \n                for(i <- 1 to lst.size\
    \ - 1) {\n                    // if index i is a multiple of 3 \n            \
    \        if(lst(i).isMultipleOfThree) {\n                        result = result\
    \ + lst(i).doubleValue * lst(i).doubleValue\n                    } else\n    \
    \                // if index i is a multiple of 4 \n                    if(lst(i).isMultipleOfFour)\
    \ {\n                        result = result + lst(i).doubleValue * lst(i).doubleValue\n\
    \                    }\n                }\n            }\n            // if first\
    \ entry is not a multiple of 3 \n            else {\n                result =lst(0).doubleValue\
    \ * lst(0).doubleValue\n                // for every other entry in the list except\
    \ the first \n                for(i <- 1 to lst.size - 1) {\n                \
    \    // if index i is a multiple of 3 \n                    if(!lst(i).isMultipleOfThree)\
    \ {\n                        result = result + lst(i).doubleValue * lst(i).doubleValue\n\
    \                    } else\n                    // if index i is a multiple of\
    \ 4 \n                    if(!lst(i).isMultipleOfFour) {\n                   \
    \     result = result + lst(i).doubleValue * lst(i).doubleValue\n            \
    \        }\n                }\n            }\n        }\n\n        return result.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpp2unyy5e.scala:21:19 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            result = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp2unyy5e.scala:24:22\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(lst(\e\
    [31m0\e[0m).isMultipleOfThree) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value isMultipleOfThree is not a member of\
    \ Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp2unyy5e.scala:25:24\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                result =lst(\e\
    [31m0\e[0m).doubleValue * lst(\e[31m0\e[0m).doubleValue\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Double\n\e[31m   |\e[0m          \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp2unyy5e.scala:29:30 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                    \e[33mif\e[0m(lst(i).isMultipleOfThree) {\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value isMultipleOfThree is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp2unyy5e.scala:30:33 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        result = result + lst(i).doubleValue\
    \ * lst(i).doubleValue\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Found:    Double\n\e[31m   |\e[0m               \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp2unyy5e.scala:33:30 ------------------------\e[0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  var counter = 0\n\n        for (i <- lst.indices) {\n            // \"\n  \
    \          // If the integer index i is even (i is even), we perform an operation\
    \ on its value (i).\n            // If the integer index i is odd, we perform\
    \ an operation on its value (i) * i.\n            if (i%2 == 0) {\n          \
    \      // \"\n                // We square the integer entry at index i.\n   \
    \             // \"\n                sum += i.toLong * i\n            }\n    \
    \        // \"\n            // If the integer index i is even and i is not a multiple\
    \ of 3, then we perform an operation on its value (i).\n            // If the\
    \ integer index i is odd and not a multiple of 4, then we perform an operation\
    \ on its value (i) * i.\n            if (i%2 == 1 && i%3 == 0){\n            \
    \    // \"\n                // We cube the integer entry at index i.\n       \
    \         // \"\n                sum += i.toLong * i\n            }\n        \
    \    // \"\n            // If the integer index i is even and i is a multiple\
    \ of 3 and i is not a multiple of 4, then we perform an operation on its value\
    \ (i).\n            // If the integer index i is odd and i is a multiple of 4\
    \ and i is not a multiple of 3, then we perform an operation on its value (i)\
    \ * i.\n            if (i%2 == 1 && i%4 == 0 && !(i%3 == 0)){\n              \
    \  // \"\n                // We cube the integer entry at index i.\n         \
    \       // \"\n                sum += i.toLong * i\n            }\n          \
    \  // \"\n            // If the integer index i is not even and i is a multiple\
    \ of 3 then we perform an operation on its value (i).\n            // If the integer\
    \ index i is not even and i is a multiple of 4 and not a multiple of 3, then we\
    \ perform an operation on its value (i) * i.\n            if (i%2 != 0 && i%3\
    \ == 0){\n                // \"\n                // We cube the integer entry\
    \ at index i.\n                // \"\n                sum += i.toLong * i\n  \
    \          }\n            // \"\n            // If the integer index i is not\
    \ even and i is a multiple of 4 then we perform an operation on its value (i).\n\
    \            // If the integer index i is not even and i is a multiple of 3 and\
    \ not a multiple of 4, then we perform an operation on its value (i) * i.\n  \
    \          if (i%2 != 0 && i%4 == 0 && !(i%3 == 0)){\n                // \"\n\
    \                // We cube the integer entry at index i.\n                //\
    \ \"\n                sum += i.toLong * i\n            }\n            // \"\n\
    \            // We increment the counter by 1.\n            counter += 1\n   \
    \     }\n        // \"\n        // We return the sum of all entries in the list\
    \ whose indexes are not a multiple of 3 or 4 as long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hf6hpi5.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                sum += i.toLong * i\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4hf6hpi5.scala:36:20 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m                sum += i.toLong * i\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hf6hpi5.scala:45:20\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                sum += i.toLong\
    \ * i\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4hf6hpi5.scala:54:20 ------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                sum += i.toLong * i\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4hf6hpi5.scala:63:20 ------------------------\e[0m\e[0m\n\e[31m63 |\e\
    [0m                sum += i.toLong * i\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L;\n    \
    \    var square = 0L;\n        for(i <- 0 until lst.size) {\n            val index\
    \ = i\n            if (index % 3 == 0L) {\n                square += lst(i)\n\
    \            }\n            if (index % 4 == 0L) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdttc9s36.scala:30)\n\tat Problem.main(tmpdttc9s36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val result = 0\n   \
    \     for (i <- 0 until lst.size) {\n            val isMultipleOf3 = (i % 3 ==\
    \ 0)\n            val isMultipleOf4 = (i % 4 == 0)\n            val isMultipleOf3And4\
    \ = isMultipleOf3 && isMultipleOf4\n            val isNotMultipleOf3And4 = !(isMultipleOf3\
    \ && isMultipleOf4)\n            if (isMultipleOf3And4 || isNotMultipleOf3And4)\
    \ {\n                result += lst(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb64hogcj.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result += lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not\
    \ a member of Int - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Initialize two collections\
    \ -- one for divisors below 3 and the other for divisors above 4.\n        val\
    \ divsBelow3 = mutable.ArrayBuffer(3l.toLong)\n        val divsAbove4 = mutable.ArrayBuffer(4l.toLong)\n\
    \        // Iterate through each entry in the list\n        lst.foreach(i => \n\
    \        {\n            // If the current entry is a multiple of 3, then add it\
    \ to the divisors below 3\n            if (i % 3l.toLong == 0)\n             \
    \   divsBelow3 += i\n            // Else, if the current entry is a multiple of\
    \ 4, then add it to the divisors above 4\n            else if (i % 4l.toLong ==\
    \ 0)\n                divsAbove4 += i\n            // Else, if the current entry\
    \ is not a multiple of either 3 or 4, then simply append it to the list\n    \
    \        else\n                lst += i\n        }) \n        // Calculate the\
    \ sum of all entries in lst that are multiples of either 3 or 4 and return the\
    \ result\n        divsBelow3.sum + divsAbove4.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz115vse_.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdivsBelow3\e[0m = mutable.ArrayBuffer(\e\
    [31m3l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpz115vse_.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdivsAbove4\e[0m = mutable.ArrayBuffer(\e\
    [31m4l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpz115vse_.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                lst += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member of\
    \ List[Long] - did you mean lst.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.toList.zipWithIndex.map\
    \ {\n            case (l, i) => \n                if (i % 3 == 0) l * l else l\
    \ * l * l\n        }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwn_uaq7t.scala:22)\n\tat Problem.main(tmpwn_uaq7t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Only change code\
    \ below this line\n        lst.foldLeft(0.0l) {\n          (total, num) => total\
    \ + (if (num.toInt%3 != 0) num*num else num*num*num)\n        }\n        // Only\
    \ change code above this line\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptml__m91.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foldLeft(0.0l) {\n\e[31m\e[31m   |\e[0m \
    \                    ^\e[0m\n\e[31m   |\e[0m                     Invalid literal\
    \ number\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptml__m91.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m          (\e[36mtotal\e\
    [0m, \e[36mnum\e[0m) => total + (\e[33mif\e[0m (num.toInt%\e[31m3\e[0m != \e[31m0\e\
    [0m) num*num \e[33melse\e[0m num*num*num)\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        val map = new mutable.HashMap[Long, Int]()\n        lst.zipWithIndex.foreach{case\
    \ (el, idx) => if (idx % 3 == 0 && idx % 4 == 0) map.put(el, el * el) else map.put(el,\
    \ el * el * el)}\n        map.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9m_0ail.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum: Long = 0\n\
    \        for(i <- lst){\n            sum += (i * i)\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsql_1y1c.scala:23)\n\tat Problem.main(tmpsql_1y1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Your code here\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        lst.foreach{ i\
    \ =>\n            if (i % 3 == 0)\n                result = result :+ i * i\n\
    \            else if (i % 4 == 0)\n                result = result :+ i * i *\
    \ i\n            else\n                result = result :+ i * i * i * i\n    \
    \    }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp96yvzl4q.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp96yvzl4q.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result = result :+ i * i\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp96yvzl4q.scala:22:23 -----------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                result = result :+ i * i * i\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp96yvzl4q.scala:24:23 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                result = result :+ i * i * i * i\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var result : Long =\
    \ 0\n        lst.foreach{ \n            case i : Long if i % 3 == 0 => result\
    \ += (math.pow(i,2))\n            case i : Long if i % 4 == 0 => result += (math.pow(i,3))\n\
    \            case i : Long if i % 3 != 0 || i % 4 != 0 => result += i\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdvo0c_4.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m i : Long \e[33mif\e[0m i\
    \ % \e[31m3\e[0m == \e[31m0\e[0m => result += (math.pow(i,\e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdvo0c_4.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m i : Long \e[33mif\e[0m i\
    \ % \e[31m4\e[0m == \e[31m0\e[0m => result += (math.pow(i,\e[31m3\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Long - did you mean Long.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write code here\n\
    \        var sum = 0\n        var sumOfAllEntries = 0\n\n        for ( i <- lst.indices)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  } else if (i % 4 == 0) {\n                sum += lst(i)\n            } else\
    \ if (i % 3 == 0 && i % 4 == 0) {\n                sum += lst(i)\n           \
    \ }\n            sumOfAllEntries += lst(i)\n        }\n        return sumOfAllEntries\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1pl0dmhb.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1pl0dmhb.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1pl0dmhb.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                sum += lst(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1pl0dmhb.scala:28:28 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            sumOfAllEntries += lst(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        def sumSquared(x : Long,\
    \ i : Int) : Long = {\n            val n = x % i\n            if (n != 0) n *\
    \ x + sumSquared(x, n) else x\n        }\n        val result = lst.zipWithIndex.foldLeft(0L)((a,\
    \ b) => a + sumSquared(b._1, b._2))\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_88cwkmq.scala:18:46\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (n\
    \ != \e[31m0\e[0m) n * x + sumSquared(x, n) \e[33melse\e[0m x\n\e[31m\e[31m  \
    \ |\e[0m                                              ^\e[0m\n\e[31m   |\e[0m\
    \                                              Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                                              Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for ( i <- lst) {\n            if ( i%3 != 0 ) {\n                sum += i\n\
    \            } else if ( i%4 != 0 ) {\n                sum += i\n            }\
    \ else {\n                sum += i*i\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexj9nmf_.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexj9nmf_.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpexj9nmf_.scala:23:20 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                sum += i*i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l) {\n\
    \            (sum, index) => sum + index.toLong * index.toLong\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83h7chw_.scala:21)\n\tat Problem.main(tmp83h7chw_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   // TODO Your code goes here\n        for ( i <- lst ) {\n            if (\
    \ i % 3 == 0 ) {\n                sum += 1L\n            } else {\n          \
    \      sum *= i\n            }\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qixwadc.scala:28)\n\tat Problem.main(tmp1qixwadc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foreach(x =>\n \
    \           if ((x % 3) == 0) println((x * x).toLong)\n            else if ((x\
    \ % 4) == 0) println((x * x).toLong)\n            else println((x * x).toLong)\n\
    \            )\n        println(\"The sum of all entries is : \" + lst.sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xg1i5qo.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        println(\e[31m\"The sum\
    \ of all entries is : \"\e[0m + lst.sum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val ls = lst.filter(_\
    \ % 3 != 0 && _ % 4 != 0)\n        val sumOfSquare = ls.map { x => x * x }.sum\n\
    \        lst.filter(_ % 3 != 0 && _ % 4 != 0).map(_ => x * x).sum + sumOfSquare\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpvb3069qg.scala:16:28 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mls\e[0m = lst.filter(_ %\
    \ \e[31m3\e[0m != \e[31m0\e[0m && _ % \e[31m4\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpvb3069qg.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.filter(_ % \e[31m3\e[0m != \e[31m0\e[0m &&\
    \ _ % \e[31m4\e[0m != \e[31m0\e[0m).map(_ => x * x).sum + sumOfSquare\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvb3069qg.scala:18:54 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        lst.filter(_ % \e[31m3\e[0m != \e[31m0\e[0m && _ %\
    \ \e[31m4\e[0m != \e[31m0\e[0m).map(_ => x * x).sum + sumOfSquare\n\e[31m\e[31m\
    \   |\e[0m                                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: x\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpvb3069qg.scala:18:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.filter(_ % \e[31m3\e[0m != \e[31m0\e[0m &&\
    \ _ % \e[31m4\e[0m != \e[31m0\e[0m).map(_ => x * x).sum + sumOfSquare\n\e[31m\e\
    [31m   |\e[0m                                                                ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mDoubleIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l) {\n\
    \            (a, b) => (a + b) * (a + b)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpau3bxdvl.scala:21)\n\tat Problem.main(tmpau3bxdvl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here.\n\
    \        lst.foldLeft(0L)( (acc,x) => if(x % 3 == 0) acc + (x * x) else (acc +\
    \ (x * x * x)) )\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpol0lwsin.scala:20)\n\tat Problem.main(tmpol0lwsin.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // TODO: Your code here\n\
    \        val sqList = new mutable.ListBuffer[Long]()\n        val cuList = new\
    \ mutable.ListBuffer[Long]()\n        lst.foreach((x, i) => {\n            if\
    \ (i % 3 == 0) {\n                sqList += x*x\n            } else if (i % 4\
    \ == 0) {\n                cuList += x*x\n            } else {\n             \
    \   sqList += x\n                cuList += x\n            }\n        })\n    \
    \    sqList.sum\n        cuList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq5b5zuf.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msqList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq5b5zuf.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mcuList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmprq5b5zuf.scala:19:27 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        lst.foreach((\e[36mx\e[0m, \e[36mi\e[0m) => {\n\e[31m\e[31m  \
    \ |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Wrong number\
    \ of parameters, expected: 1\n\e[31m20 |\e[0m            \e[33mif\e[0m (i % \e\
    [31m3\e[0m == \e[31m0\e[0m) {\n\e[31m21 |\e[0m                sqList += x*x\n\e\
    [31m22 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (i % \e[31m4\e[0m ==\
    \ \e[31m0\e[0m) {\n\e[31m23 |\e[0m                cuList += x*x\n\e[31m24 |\e\
    [0m            } \e[33melse\e[0m {\n\e[31m25 |\e[0m                sqList += x\n\
    \e[31m26 |\e[0m                cuList += x\n\e[31m27 |\e[0m            }\n\e[31m28\
    \ |\e[0m        })\n3 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your solution\
    \ here\n        var total : Long = 0\n        lst.foreach {\n            case\
    \ (x: Int) => if (x % 3 == 0) x*x else x*x*x\n            case (x: Long) => if\
    \ (x % 4 == 0) x*x else x*x*x\n            case _ => total += x\n        }\n \
    \       total\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjfsnrmk3.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m _ => total += x\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjfsnrmk3.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m _ => total += x\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var total = 0L\n   \
    \     var sum = 0L\n        for (i<- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if (x % 3 == 0 && x % 4 == 0) {\n                total +=\
    \ x\n            } else {\n                sum += x\n            }\n        }\n\
    \        total += sum\n        return total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1kqjfgzu.scala:34)\n\tat Problem.main(tmp1kqjfgzu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for (i <- 0 until lst.length) {\n            if (i mod 3 == 0) {\n        \
    \        sum += i * i\n            }\n            if (i mod 4 == 0) {\n      \
    \          sum += i * i * i\n            }\n        }\n        sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmfmvgox.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i mod \e[31m3\e[0m == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mod is not a member of Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmfmvgox.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (i mod \e[31m4\e[0m == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ mod is not a member of Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        var sum = 0\n        lst.foreach(x => if((x % 3) ==0) list+=x; else if((x\
    \ % 4) ==0) list+=x*x; else list+=x*x*x)\n        list.foreach(x => sum = sum\
    \ + x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp73527ubn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val lsq = lst.filter(_%3\
    \ != 0 || _%4 != 0)\n        val ls3 = lst.filter(_%3 ==0)\n        val ls4 =\
    \ lst.filter(_%4 == 0)\n        ls3.map{x => x*x}.reduce(_ + _)\n        ls4.map{x\
    \ => x*x}.reduce(_ + _)\n        lsq.map{x => x*x}.reduce(_ + _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyfs8o6ig.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlsq\e[0m = lst.filter(_%\e\
    [31m3\e[0m != \e[31m0\e[0m || _%\e[31m4\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Wrong number of parameters, expected: 1\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sum = 0l\n     \
    \   for (i <- 0 until lst.size) {\n            if (i % 3 == 0 || i % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl7or8vyd.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  var square = 0\n        lst.foreach {\n            i =>\n                //\
    \ if index mod 4 == 0\n                if (i % 4 == 0) {\n                   \
    \ square += i\n                    // if index mod 3 == 0\n                } else\
    \ if (i % 3 == 0) {\n                    square += i * i\n                } else\
    \ {\n                    sum += i\n                }\n        }\n        return\
    \ sum + square\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjywb_dv1.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    square += i\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjywb_dv1.scala:25:27 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                    square += i * i\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjywb_dv1.scala:27:24\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    sum +=\
    \ i\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value += is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6de1ggrs.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36msumSquares\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Unit\n\e\
    [31m   |\e[0m                                              Required: Long\n\e\
    [31m16 |\e[0m        \n\e[31m17 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0\n      \
    \  for( i <- 0 until lst.size ) {\n            var squares: Long = 0\n       \
    \     if( lst(i) % 3 == 0 ) {\n                squares = lst(i) * lst(i)\n   \
    \         } else {\n                squares = lst(i) * lst(i)\n            }\n\
    \            sum += squares\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge1ok62c.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            sum += squares\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n      var lst1 = lst.filter(\
    \ i => (i % 3 != 0))\n      var lst2 = lst.filter( i => (i % 4 != 0))\n      var\
    \ lst3 = lst.filter( i => ((i % 3 != 0) && (i % 4 != 0)))\n      var res = new\
    \ mutable.ListBuffer[Long]()\n      lst1.foreach( i => res += i * i)\n      lst2.foreach(\
    \ i => res += i * i)\n      lst3.foreach( i => res += i * i)\n      res.toList.reduce(\
    \ _ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrhzk4em.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mvar\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val n = lst.size\n \
    \       var sum = 0\n        for (i <- 0 until n) {\n            if (i %% 3 ==\
    \ 0 || i %% 4 == 0 || i % 3 != 0 || i % 4 != 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi7opeiy_.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (i %% \e[31m3\e[0m == \e[31m0\e\
    [0m || i %% \e[31m4\e[0m == \e[31m0\e[0m || i % \e[31m3\e[0m != \e[31m0\e[0m ||\
    \ i % \e[31m4\e[0m != \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value %% is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi7opeiy_.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newList = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n\n        lst.foreach(x => {\n            val y = x * x\n\
    \            val z = x * y\n            if (z % 4 == 0) newList += z\n       \
    \     if (y % 3 == 0) newList += y\n            if (x % 3 == 0) newList += x\n\
    \            if (x % 4 == 0) newList += x\n            if (y % 4 == 0) newList\
    \ += y\n        })\n\n        val newList = newList.toList\n        newList.foldLeft(0)((a,\
    \ b) => a + b)\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvjlettea.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = newList.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewList\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewList\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjlettea.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sumOfSquares = lst.map\
    \ { entry =>\n            entry match {\n                case x if (x % 3) ==\
    \ 0 =>  x * x\n                case x if (x % 4) == 0 => x * x * x\n         \
    \       case _ => entry\n            }\n        }.sum\n        \n        sumOfSquares\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpca5bkb9_.scala:27)\n\tat Problem.main(tmpca5bkb9_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val sum : Long = 0\n\
    \        for (i <- lst.indices) {\n            if (i % 3 == 0 & i % 4 == 0) {\n\
    \                sum += lst(i)\n            } else {\n                lst(i) *=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong,\
    \ 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n \
    \   assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbimj0bls.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbimj0bls.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                lst(i) *= lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value *= is not a member of Long - did you\
    \ mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        // Write your code here.\n\
    \        if (lst.isEmpty) return 0\n        var sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0 && i % 4 == 0) sum += lst(i)\n     \
    \       else if (i % 3 == 0) sum += lst(i)\n            else if (i % 4 == 0) sum\
    \ *= lst(i)\n            else sum *= lst(i)\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa9dek6ut.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (i % \e[31m3\e[0m == \e[31m0\e\
    [0m && i % \e[31m4\e[0m == \e[31m0\e[0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa9dek6ut.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i % \e[31m3\e\
    [0m == \e[31m0\e[0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpa9dek6ut.scala:22:37 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m (i % \e[31m4\e[0m == \e[31m0\e[0m)\
    \ sum *= lst(i)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value *= is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa9dek6ut.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e\
    [0m sum *= lst(i)\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value *= is not a member of Int - did you mean Int.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        lst.foldLeft(0l) { (sum,\
    \ el) =>\n            if (el %% 3 == 0 || el %% 4 == 0) sum + (el * el)\n    \
    \        else sum\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwwapj8uu.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (el %% \e[31m3\e[0m == \e[31m0\e\
    [0m || el %% \e[31m4\e[0m == \e[31m0\e[0m) sum + (el * el)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^\e[0m\n\e[31m   |\e[0m                value %% is not\
    \ a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var result = 0.0\n \
    \       for (i <- lst.indices) {\n            result += lst(i)\n        }\n  \
    \      return result\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpawi7ai0q.scala:20:15\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : Double)\n\e[31m   |\e[0m               Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        var sum = 0L\n     \
    \   val mut = mutable.ListBuffer(lst)\n        mut.map(x => sum += x match {\n\
    \            case 0 => x\n            case x if (x % 3 == 0) => x * x\n      \
    \      case x if (x % 4 == 0) => x * x * x\n            case x => x\n        }).foreach\
    \ { x => println(x) }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzarrxdkd.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmut\e[0m = mutable.ListBuffer(lst)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n\
    \    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n\
    \    def sumSquares(lst : List[Long]) : Long = {\n        val newList = lst filter\
    \ { x => x % 3 == 0 || x % 4 == 0 } map {\n            x => x * x\n        }\n\
    \        val sum = newList.sum\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplswg7vqz.scala:23)\n\tat Problem.main(tmplswg7vqz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010382
