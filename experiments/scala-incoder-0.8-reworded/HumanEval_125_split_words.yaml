name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val list = ListBuffer[String]()\n        if (txt.contains(\"\
    ,\")) {\n            val words = txt.replace(\",\", \"\").split(\" \");\n    \
    \        for (w <- words) {\n                if (w.trim.isEmpty) {\n         \
    \           println(\"warning: \" + w + \" is an empty string\")\n           \
    \     } else {\n                    list += w\n                }\n           \
    \ }\n            Right(list.toList)\n        } else {\n            val words =\
    \ txt.replace(\"-\", \"\").split(\" \");\n            for (w <- words) {\n   \
    \             if (w.trim.isEmpty) {\n                    println(\"warning: \"\
    \ + w + \" is an empty string\")\n                } else {\n                 \
    \   list += w\n                }\n            }\n            val lowerCaseLetters\
    \ = txt.filter(_ >= 'a' && _ <= 'z')\n            val numbers = lowerCaseLetters.filter(x\
    \ => x.forall(x => x <= '9' && x >= '0')).count\n            Right(numbers)\n\
    \        }", "        val words = mutable.ListBuffer[String]()\n        val numUpperLetters\
    \ = mutable.ListBuffer[String]()\n        val numLowerLetters = mutable.ListBuffer[String]()\n\
    \        for (i<-0 to txt.length-1) {\n            if (txt(i).isWhitespace) {\n\
    \                words += txt(i)\n            } else if (txt(i).isLetter) {\n\
    \                if (txt(i).isUpper) {\n                    numUpperLetters +=\
    \ txt(i)\n                } else if (txt(i).isLower) {\n                    numLowerLetters\
    \ += txt(i)\n                }\n            }\n        }\n        if (words.length\
    \ == 0) {\n            return Left(numLowerLetters.reverse.mkString(\",\"))\n\
    \        }\n        if (words.length == 1) {\n            return Right(words.length)\n\
    \        }\n        val lowerCaseLetters = txt.length.toString.toCharArray\n \
    \       val upperCaseLetters = txt.length.toString.toCharArray\n        for (i<-0\
    \ to txt.length-1) {\n            if (txt(i).isLetter) {\n                if (txt(i).isUpper)\
    \ {\n                    upperCaseLetters += txt(i)\n                } else if\
    \ (txt(i).isLower) {\n                    lowerCaseLetters += txt(i)\n       \
    \         }\n            }\n        }\n        if (lowerCaseLetters.length !=\
    \ upperCaseLetters.length + 1) {\n            return Left(numLowerLetters.reverse.mkString(\"\
    ,\"))\n        }\n        if (lowerCaseLetters.length != numLowerLetters.length)\
    \ {\n            return Right(words.length)\n        }\n        if (lowerCaseLetters.mkString(\"\
    \").toLowerCase != numLowerLetters.mkString(\"\").toLowerCase) {\n           \
    \ return Right(words.length)\n        }\n        val result: Long = lowerCaseLetters.length\
    \ - upperCaseLetters.length\n        return Right(result)", "        val words\
    \ = txt.split(\" \")\n        var ans : Long = 0\n        val lc = txt.count((_:\
    \ Char).toLowerCase)\n        for (wd <- words) {\n            if (wd.indexOf(\"\
    ,\") > -1) {\n                return Left(words)\n            }\n            if\
    \ (wd.indexOf(\"\\n\") > -1) {\n                return Left(words)\n         \
    \   }\n            val l = wd.length\n            ans += (l * (l-1)) / 2\n   \
    \     }\n        return Right(ans)", "        val list: List[String] = new ListBuffer[String]\n\
    \        val listOfWords: List[String] = new ListBuffer[String]\n        for(x\
    \ <- txt.toList){\n            x match {\n                case x if !x.contains(\"\
    ,\") => list+=x\n                case x if x.contains(\",\") => list+=x\n    \
    \            case x => listOfWords+=x\n            }\n        }\n        if(list.isEmpty){\n\
    \            Right(list.size)\n        }\n        else {\n            val wordList:\
    \ List[String] = list.flatMap(_.split(\" \"))\n            val words: List[String]\
    \ = wordList.filter(_.nonEmpty)\n            if(wordList.isEmpty && !wordList.isEmpty){\n\
    \                Right(list.size)\n            }\n            else {\n       \
    \         val firstList: List[String] = list.filter(_.nonEmpty)\n            \
    \    val firstWords: List[String] = firstList.filter(_.nonEmpty)\n           \
    \     val firstLetters: List[String] = firstWords.map(x => x.split(\"\").map(_.toLowerCase).filter(_.contains(\"\
    a\")).map(_.toLowerCase).filter(_.contains(\"b\")).map(_.toLowerCase).filter(_.contains(\"\
    c\")).map(_.toLowerCase).filter(_.contains(\"d\")).map(_.toLowerCase).filter(_.contains(\"\
    e\")).map(_.toLowerCase).filter(_.contains(\"f\")).map(_.toLowerCase).filter(_.contains(\"\
    g\")).map(_.toLowerCase).filter(_.contains(\"h\")).map(_.toLowerCase).filter(_.contains(\"\
    i\")).map(_.toLowerCase).filter(_.contains(\"j\")).map(_.toLowerCase).filter(_.contains(\"\
    k\")).map(_.toLowerCase).filter(_.contains(\"l\")).map(_.toLowerCase).filter(_.contains(\"\
    m\")).map(_.toLowerCase).filter(_.contains(\"n\")).map(_.toLowerCase).filter(_.contains(\"\
    o\")).map(_.toLowerCase).filter(_.contains(\"p\")).map(_.toLowerCase).filter(_.contains(\"\
    q\")).map(_.toLowerCase).filter(_.contains(\"r\")).map(_.toLowerCase).filter(_.contains(\"\
    s\")).map(_.toLowerCase).filter(_.contains(\"t\")).map(_.toLowerCase).filter(_.contains(\"\
    u\")).map(_.toLowerCase).filter(_.contains(\"v\")).map(_.toLowerCase).filter(_.contains(\"\
    w\")).map(_.toLowerCase).filter(_.contains(\"x\")).map(_.toLowerCase).filter(_.contains(\"\
    y\")).map(_.toLowerCase).filter(_.contains(\"z\")).map(_.toLowerCase).filter(_.contains(\"\
    A\")).map(_.toLowerCase).filter(_.contains(\"B\")).map(_.toLowerCase).filter(_.contains(\"",
  "        val splitWords = txt.split(\" \") match {\n            case Nil => Left(List[String]())\n\
    \            case x => Right(x.length)\n        }\n        splitWords", "    \
    \    val words = mutable.HashSet[String]()\n        for(word <- txt.split(\" \"\
    )){\n            if(word.nonEmpty){\n                words += word\n         \
    \   }\n        }\n        if(words.length < 2l){\n            Right(words.length)\n\
    \        }\n        else{\n            val count = (words.length - 1l) + 1l\n\
    \            val numLetters = words.map(_.length).sum\n            Right(List(words.length,\
    \ numLetters, count))\n        }", "        if (txt.contains(\",\")) {\n     \
    \       splitWords2(txt)\n        } else if (txt.contains(\" \")) {\n        \
    \    splitWords1(txt)\n        } else {\n            splitWords3(txt)\n      \
    \  }", "        val words = txt.split(\"\\\\s\").toList\n        if(words.length==0)\
    \ Right(words.size)\n        else if(words.length>1 && words.head.length>1 &&\
    \ words.last.length>1) Right(words.size - 1)\n        else {\n            val\
    \ wordSet = mutable.HashSet[String]()\n            for(word <- words) {\n    \
    \            val s = word.split(\"\\\\,\")\n                if(s.length==1) wordSet\
    \ += s(0).trim\n                else wordSet += s(0).trim \n            }\n  \
    \          Right(wordSet.toList.size)\n        }", "      val words =\n      \
    \  if (txt.length > 0) {\n          txt.split(\"\\\\s+\")\n        } else {\n\
    \          List(\"\")\n        }\n      if (words.forall(_.length == 0))\n   \
    \     Right(words.size)\n      else {\n        val numberWords = words.filter(_.filter(_.isLetter).forall(_.isDigit).count(_\
    \ == true))\n        val letterWords = words.filter(_.filter(_.isLetter).count(_\
    \ == true) % 2 == 1)\n        val letterWordsLen = letterWords.count\n       \
    \ val numbersLen = numberWords.count\n        val allWordsLen = numberWords.size\
    \ + letterWordsLen\n        val wordLengths = words.map(_.length).toArray\n  \
    \      val maxWordLength = wordLengths.max\n        if (numbersLen > letterWordsLen\
    \ || lettersLen > numberWordsLen)\n          Left[List[String], Long](\"Too many\
    \ words with mixed letters and numbers. \" +\n            s\"Number of letters:\
    \ ${lettersLen} and number of numbers: ${numbersLen}\")\n        else\n      \
    \    Right(allWordsLen / maxWordLength)\n      }", "        // your code here\n\
    \        if(txt.matches(\"[a-zA-Z]+\")) Left(txt.split(\"\\\\s+\"))\n        else\
    \ Right(txt.split(\",\").map( _.toLowerCase).filter(_.toString.length%2==1).length.toLong)",
  "        var list : List[String] = Nil\n        var count = 0\n        for (word\
    \ <- txt.split(\" \")) {\n            if (count % 2 == 1)\n                list\
    \ ::= word\n            else\n                list ::= word.split(\",\")\n   \
    \         count += 1\n        }\n        Either.right(list)", "        val words\
    \ = txt.split(\" \")\n        if(words.length != 3 || words(0) == \"\") Left(words)\n\
    \        else{\n            val evenCounts = words.zipWithIndex.filter(x => x._2\
    \ % 2 == 0).map(x => x._1).length\n            Right(evenCounts)\n        }",
  "        def buildResult(txt : String) : Long = {\n            var result = 0\n\
    \            val words = txt.split(\"\\\\s+\")\n            for (word <- words)\
    \ {\n                if (word.matches(\"[a-z]+\")) {\n                    result\
    \ += word.split(\"[a-z]\").length\n                }\n            }\n        \
    \    result\n        }\n        if (txt.contains(\" \")) {\n            return\
    \ Left(txt.split(\"\\\\s+\"))\n        } else {\n            return Right(buildResult(txt))\n\
    \        }", "        val res = txt split \"[^a-zA-Z,]+\" filterNot (_ == \"\"\
    )\n        res match {\n            case List() | Nil() => Right(0)\n        \
    \    case xs => Right(xs groupBy (_ == ' ').size)\n        }", "        var wordList\
    \ = mutable.ListBuffer[String]()\n        var count = 1\n        for(word <- txt.split(\"\
    \ \")) {\n            wordList += word\n            count += 1\n        }\n  \
    \      if(wordList.length == 1) return Left(wordList)\n        var i = 0\n   \
    \     for((word, count) <- wordList.sliding(2).toList) {\n            if(count.last\
    \ == 0) {\n                for(count <- count.dropRight(1).reverse) {\n      \
    \              if(count == 1) return Right(wordList)\n                    wordList\
    \ += word\n                    count -= 1\n                }\n            }\n\
    \            else {\n                wordList += word\n                count -=\
    \ 2\n                i = 0\n            }\n        }\n        return Left(wordList)",
  "        var lowCharCount = 0\n        var lowCharCounts = scala.collection.mutable.Map[Char,\
    \ Long]()\n        var words = ListBuffer[String]()\n        for(i <- 0 until\
    \ txt.length) {\n            if(lowCharCounts.contains(txt(i))) {\n          \
    \      lowCharCount += 1\n                lowCharCounts += (txt(i) -> lowCharCount)\n\
    \                words += txt(i)\n            } else {\n                val currLowCharCount\
    \ = lowCharCount\n                lowCharCount += 1\n                lowCharCounts\
    \ += (txt(i) -> lowCharCount)\n                words += txt(i)\n             \
    \   if(lowCharCount % 2 == 0) {\n                    words += \",\" + txt(i)\n\
    \                }\n            }\n        }\n        val lowCharCountList = new\
    \ ListBuffer[Long]()\n        for(i <- lowCharCounts.keys) {\n            lowCharCountList\
    \ += lowCharCounts(i)\n        }\n        if (lowCharCount == 1) {\n         \
    \   Right(words.length)\n        } else {\n            Left(words.length, lowCharCountList)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Right(0) else {\n            val letters = txt.toLowerCase.grouped(26).toList\n\
    \            val chars = txt.toLowerCase.map(c => if (letters.contains(c.toInt))\
    \ c.toInt else -1)\n            val counts = chars.groupBy(x => x)\n         \
    \   val odd = counts.filter(x => x._1 % 2 == 1).length\n            Right(odd)\n\
    \        }", "        val words = txt.split(\"\"\"\\W+\"\"\").filter(_.nonEmpty)\n\
    \        var res = Nil\n        var count = 0\n        var i = 0\n        while\
    \ (i < words.length) {\n            if (words.exists(_.equalsIgnoreCase(words(i))))\
    \ {\n                count += 1\n                i += 1\n            } else {\n\
    \                val n = words(i).toLowerCase.indexOf(\"abc\") + 1\n         \
    \       res :+= words(i until (i + n))\n                i = i + n\n          \
    \      count = 0\n            }\n        }\n        res match {\n            case\
    \ Nil => Right(count)\n            case _ => Left(res)\n        }", "        val\
    \ word = txt.split(\"\\\\s+\") // split on whitespaces\n        if (word.nonEmpty)\
    \ Right(word.mkString(\",\"))\n        else Left(word.map(_.length).filter(_ %\
    \ 2 != 0).sum.toLong)", "        val wordList = mutable.ListBuffer[String]()\n\
    \        val lowerCaseLetters = mutable.ListBuffer[Int]()\n        val words =\
    \ mutable.ListBuffer[String]()\n        var currentWord = \"\"\n        var currentLowerCaseLetters\
    \ = 0 // in alphabetical order not counting lower case\n        for(i <- 0 until\
    \ txt.length) {\n            if(txt(i).isLetter) {\n                if(currentLowerCaseLetters\
    \ % 2 != 0) {\n                    lowerCaseLetters.append(txt(i).toLowerCase)\n\
    \                    currentLowerCaseLetters = currentLowerCaseLetters + 1\n \
    \               } else {\n                    words.append(currentWord)\n    \
    \                currentWord = \"\"\n                    currentLowerCaseLetters\
    \ = currentLowerCaseLetters + 1\n                }\n            } else {\n   \
    \             currentWord = currentWord + txt(i)\n            }\n        }\n \
    \       if(currentWord.length > 0) words.append(currentWord)\n        if(lowerCaseLetters.size\
    \ == 0) Right(words.size)\n        else {\n            val odd = lowerCaseLetters.take(lowerCaseLetters.length-1)\n\
    \            Right(List(words.size, odd.size))\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        val splitWords = words.toSet.toList.filter(_.isLetter).toSet.size\n\
    \        val splitLetters = words.filter(_.isLetter).toSet.toList.filter(_.isLetter).toSet.size\n\
    \        val noWhitespaces = splitWords % 2\n        val noCommas = splitLetters\
    \ % 2\n        val noOddOrder = splitLetters.toSet.filter(_ % 2 != 0).size\n \
    \       if (noWhitespaces) {\n            Left(splitWords)\n        } else if\
    \ (noCommas) {\n            Right(splitLetters)\n        } else {\n          \
    \  Left(noOddOrder)\n        }", "        if (txt == null || txt.length == 0)\
    \ return Right(List.empty)\n        var result = new mutable.ListBuffer[String]()\n\
    \        for(c <- txt)\n          if(c.isLetter) result.append(c)\n          else\
    \ result.append(\",\")\n        result.last.zipWithIndex.filter(_._1 % 2 == 1).count",
  "        var count : Long = 0\n        var lastWord : String = \"\"\n        var\
    \ words : List[String] = Nil\n        for(word <- txt.toLowerCase){\n        \
    \    if(lastWord.isEmpty && word.isWhitespace) {\n                lastWord = word\n\
    \                words.append(word)\n            }\n            else if(lastWord.isEmpty\
    \ && word.isWhitespace) {\n                count -= 1\n                lastWord\
    \ = word\n                words.append(word)\n            }\n            else\
    \ if(lastWord.isEmpty && !word.isWhitespace){\n                count += 2\n  \
    \              lastWord = word\n                words.append(word)\n         \
    \   }\n            else {\n                count += 2\n                lastWord\
    \ = word\n                words.append(word)\n            }\n        }\n     \
    \   if(words.length < 1)\n            return Left(words)\n        else if(words.length\
    \ < 2)\n            return Right(count)\n        else\n            return Right(words.length)",
  "      if(txt.contains(\" \"))\n        Left(txt.split(\" \").map(s => s.trim))\n\
    \      else if(txt.contains(\",\"))\n        Right(txt.split(\",\").map(s => s.trim).length)\n\
    \      else\n        Left(0)", "        var result = new mutable.ArrayBuffer[String]();\n\
    \        var index = 0;\n        val words = new mutable.ArrayBuffer[String]();\n\
    \        // go through the words and add them to the result list.\n        for(word\
    \ <- txt){\n            if(word.isEmpty) continue;\n            if(words.isEmpty\
    \ && index > 0) result.add(\",\")\n            result += (word);\n           \
    \ words += word;\n            index++;\n        }\n        // if the number of\
    \ words are odd, add the last word\n        if(words.isEmpty && words.size > 1)\
    \ result += words(words.size - 1)\n        // if the number of words are even,\
    \ add the first word and the number of words - 2\n        if(words.isEmpty &&\
    \ words.size < 2) result += words.take(words.size - 2) + \"l\"\n        // Either\
    \ with the result or with the number of words\n        Left(result)", "      \
    \  val a = if (txt.contains(\",\")) txt.split(\",\") else List(txt)\n        val\
    \ b = (a map {x => x.trim().toLowerCase()}) filterNot (_.isEmpty)\n        val\
    \ c = b.map(x => if (x.count(_ == 'a') = 1) \"a\" else if (x.count(_ == 'b') =\
    \ 1) \"b\" else \"c\").distinct\n        if (c.size == 26) Right(c.size)\n   \
    \     else Left(c)", "        val (words,_) = txt.split(\"\\\\s+\")\n        if\
    \ (words.length == 0) Left[List[String]](List())\n        else {\n           \
    \ val lowerCase = words.toList.map(_.toLowerCase)\n            val letterCount\
    \ = lowerCase.foldLeft(0L)((n,s) => n + s.count(_ >= 'a' && _ < 'z').toLong)\n\
    \            Left(if (letterCount % 2 == 1) words.toList else List())\n      \
    \  }", "      val words = mutable.ListBuffer[String]()\n      val split = txt.split(\"\
    \ \").map(_.trim).toList\n      for (word <- split) {\n        if (word.isEmpty)\
    \ {\n          return Right(words.map(_.toString.length))\n        }\n       \
    \ words ++= word.split(\",\")\n      }\n      val alphabet = mutable.ListBuffer[Char]()\n\
    \      for (c <- ('A' to 'Z')) {\n        alphabet += c\n      }\n      val result\
    \ = words.map(word => {\n        val lowercase = word.map(c => c + 'a').foldLeft(0)((x,\
    \ y) => x * 26 + y)\n        if (lowercase % 2 == 0) {\n          return word\n\
    \        } else {\n          word.split(\",\")\n        }\n      })\n      Right(result.filter(_.length).map(_.length).reduceLeft(_\
    \ + _))", "        if (txt.isEmpty) return Left(List[String]())\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        if (words.isEmpty) return Right(words.size)\n\
    \        val list = words.filter(_.toLowerCase == _.toLowerCase).map(_.toUpperCase\
    \ + _)\n        val evenList = list.filter(_.toUpperCase == \"A\" * 2)\n     \
    \   if (evenList.size % 2 == 0) return Right(evenList.size)\n        val lowLetters\
    \ = list.filter(_.toUpperCase == \"A\" * 2)\n        val upperLetters = list.filter(_.toUpperCase\
    \ == \"A\" * 2)\n        val odd = lowLetters.takeWhile(_ % 2 == 1).size\n   \
    \     if (odd.isDefined) return Right(odd.get)\n        if (upperLetters.isEmpty)\
    \ return Right(upperLetters.size)\n        val even = upperLetters.filter(_.toUpperCase\
    \ == \"A\" * 2)\n        val high = even.filter(_.toUpperCase == \"A\" * 2)\n\
    \        val evenOdd = even.takeWhile(_ % 2 == 1).size\n        if (evenOdd.isDefined)\
    \ return Right(evenOdd.get)\n        if (high.isDefined) return Right(high.get)\n\
    \        Right(list.size)", "        val lines = txt.split(\"\\\\s\")\n      \
    \  val wordsWithSpaces = lines.flatMap(line => line.split(\" \"))\n        val\
    \ commasWithSpaces = lines.flatMap(line => line.split(\",\"))\n        val wordsWithCommas\
    \ = lines.flatMap(line => line.split(\";\"))\n        val lowerCaseWords = lines.map(line\
    \ => line.split(\"[a-z]\")).map(_.map(_.toLowerCase)).flatten\n        val alphabet\
    \ = ArrayBuffer('a' to 'z')\n        val characters = ArrayBuffer('a' to 'z').map(_.toInt)\n\
    \        val numbers = ArrayBuffer('0' to '9').map(_.toInt)\n\n        val odd\
    \ = (characters zip odd) map { case (s,i) => s if i % 2 == 1 }\n        val even\
    \ = (characters zip even) map { case (s,i) => s if i % 2 == 0 }\n\n        val\
    \ oddishWords = wordsWithSpaces.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishWords = wordsWithSpaces.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishWords = wordsWithCommas.filter(w => !even.contains(w.toLowerCase)).size\n\
    \        val oddishCommas = commasWithSpaces.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishCommas = commasWithSpaces.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishCommas = commasWithSpaces.filter(w => !even.contains(w.toLowerCase)).size\n\
    \        val oddishLetters = lowerCaseWords.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishLetters = lowerCaseWords.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishLetters = lowerCaseWords.filter(w => !even.contains(w.toLowerCase)).size\n\
    \n        val oddishNumbers = numbers.filter(w => odd.contains(w)).size\n    \
    \    val evendishNumbers = numbers.filter(w => even.contains(w)).size\n      \
    \  val unevendishNumbers = numbers.filter(w => !even.contains(w)).size\n\n   \
    \     if (oddishWords == words.size) {\n            Right(oddishWords)\n     \
    \   } else if (evendishWords == words.size) {\n            Right(evendishWords)\n\
    \        } else if (unevendishWords == words.size) {\n            Right(unevendishWords)\n\
    \        } else if (oddishCommas == words.size) {\n            Right(oddishCommas",
  "        val splitWords = scala.collection.mutable.ListBuffer[String]()\n      \
    \  for(line <- txt.split(\"[,]\")){\n            if(line.trim.isEmpty){\n    \
    \            continue\n            }\n            val splits = line.split(\" \"\
    )\n            for(split <- splits){\n                splitWords += split.toLowerCase\n\
    \            }\n        }\n        val uniqueWords = splitWords.distinct\n   \
    \     if(uniqueWords.isEmpty){\n            Left(List.empty)\n        }\n    \
    \    else {\n            Right(uniqueWords.size.toLong)\n        }", "       \
    \ if(txt.length() == 0) Left(Nil)\n        else Right(txt.filter(_.isWhitespace).toList).flatMap(_.toLowerCase\
    \ -> _)", '        //TODO: Complete the code', "        try {\n            val\
    \ words = txt.split(\"\\\\s+\");\n            if (words.length == 0) Left(List[String]())\n\
    \            else if (words.length == 1) Right(words.length)\n            else\
    \ Left(words);\n        } catch {\n            case ex : Exception => {\n    \
    \            println(\"Exception occurred: \" + ex.getMessage());\n          \
    \      Left(List[String]())\n            }\n        }", "        txt.trim().split(\"\
    \\\\s+\")\n            .map(_.toLowerCase)\n            .map(_.filter(x => !x.isEmpty))\n\
    \            .map(_.split(\",\"))\n            .map(a => a.count(_ % 2 == 0)).leftMap(_\
    \ % 2)", "        val words = txt.split(\",\")\n        if (words.length == 0)\
    \ Right(txt.length)\n        else if (words.length == 1) {\n            if (words(0).equals(\"\
    \")) Right(txt.length)\n            else Left(words)\n        }\n        else\
    \ Left(words.map(s => s.replaceAll(\"\\\\s\", \"\").toLowerCase).toList)", " \
    \       var chars = s.chars\n        var counter = s.count(i => i != ' ')\n  \
    \      // if there is no whitespaces in text\n        if (counter <= 0)\n    \
    \        Right(counter)\n        // if there are whitespaces in text\n       \
    \ else {\n            // then split on comma\n            if (counter == chars.length)\n\
    \                Right(counter)\n            // else split on whitespace\n   \
    \         else {\n                while (counter > 0) {\n                    if\
    \ (chars[counter - counter - 1] == ',')\n                        Right(counter)\n\
    \                    else {\n                        chars = chars.dropRight(1)\n\
    \                        counter = s.count(i => i != ' ')\n                  \
    \  }\n                }\n                Right(counter)\n            }\n     \
    \   }", "        val wordsWithSpace = txt splitBy (c => c == ' ')\n        val\
    \ wordsWithCommas = txt splitBy (c => c == ',')\n        val wordsWithLetters\
    \ = wordsWithSpace.length + wordsWithCommas.length\n        wordsWithLetters.toEither\
    \ match {\n            case Left(list) =>\n                Right(list)\n     \
    \       case Right(list) =>\n                Right(list)\n        }", "      \
    \  if(txt.isEmpty) Left(Nil)\n        else Right(txt.split(\" \").map(_.toLowerCase).filter(_.contains(\"\
    ,\")).length)", "        val words = mutable.MutableList[String]()\n        val\
    \ charMap = new mutable.HashMap[String, Int]()\n        val words = scala.util.Try{txt.split(\"\
    \ |,\").toList}.getOrElse(mutable.ListBuffer(\"abcdef\")).map(_.toChar).toSet\n\
    \n        for(i <- charMap.keys) if(charMap(i).isEven) words += i\n\n        if(words.isEmpty)\
    \ Either.Right(words.length)\n        else\n            if(words.size() > 26)\
    \ {\n                Either.Left(words.size)\n            } else {\n         \
    \       Either.Right(words.size)\n            }", "        val wordsWithCommas\
    \ = txt.split(\"\"\", |,\"\"\")\n        if (wordsWithCommas.length == 0)\n  \
    \          Left(List(txt))\n        else if (wordsWithCommas.length == 1)\n  \
    \          Right(wordsWithCommas(0).length)\n        else\n            Left(wordsWithCommas)",
  "        val lw = txt.filter(_.isLetter).length\n        val comma = txt.filter(_.isLetter).count(_\
    \ == ',')\n        val odd = (txt.length - lw + comma) % 2\n        val txt2 =\
    \ txt.flatMap(_.toString.split(\"\\\\W+\")).toList\n        if (lw == txt2.length)\n\
    \            Right(txt2)\n        else if (comma == txt2.length)\n           \
    \ Right(txt2.map(_.toLowerCase))\n        else if (odd < txt2.length)\n      \
    \      Left(txt2.take(txt2.length - (odd * 2)))\n        else\n            Left(txt2.map(_.toLowerCase))",
  "        val r = txt.split\n        val evens = r.filter(_.toLowerCase == \"a\"\
    \ || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\"\
    \ ||\n            _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" ||\n          \
    \  _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\"\
    \ || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" ||\n            _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" ||\n          \
    \  _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\"\
    \ || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\"\
    ).length / 2\n        val odds = r.filter(_.toLowerCase != \"a\" && _.toLowerCase\
    \ != \"b\" && _.toLowerCase != \"c\" && _.toLowerCase != \"d\" &&\n          \
    \  _.toLowerCase != \"e\" && _.toLowerCase != \"f\" && _.toLowerCase != \"g\"\
    \ && _.toLowerCase != \"h\" && _.toLowerCase != \"i\" &&\n            _.toLowerCase\
    \ != \"j\" && _.toLowerCase != \"k\" && _.toLowerCase != \"l\" && _.toLowerCase\
    \ != \"m\" && _.toLowerCase != \"n\" &&\n            _.toLowerCase != \"o\" &&\
    \ _.toLowerCase != \"p\" && _.toLowerCase != \"q\" && _.toLowerCase != \"r\" &&\
    \ _.toLowerCase != \"s\" && _.toLowerCase != \"t\" &&\n            _.toLowerCase\
    \ != \"u\" && _.toLowerCase != \"v\" && _.toLowerCase != \"w\" && _.toLowerCase\
    \ != \"x\" && _.toLowerCase != \"y\" && _.toLowerCase != \"z\").length\n     \
    \   Either.both(List(evens, odds))", "      val letters: List[Char] = txt.toLowerCase\
    \ diff List(' ')\n      if (letters.isEmpty) Left(Nil) else {\n        if (letters.filter(c\
    \ => c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c\
    \ == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c\
    \ == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z').isEmpty)\
    \ Right(0) else {\n          if (letters.filter(c => c >= 'a' && c <= 'z').length\
    \ == 1) Right(0) else {\n            if (letters.filter(c => c >= 'A' && c <=\
    \ 'Z').length == 1) Right(0) else {\n              if (letters.filter(c => c >=\
    \ '0' && c <= '9').length == 1) Right(0) else {\n                if (letters.filter(c\
    \ => c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9').length\
    \ == 1) Right(0) else {\n                  if (letters.filter(c => c >= 'A' &&\
    \ c <= 'Z' || c >= '0' && c <= '9').length == 1) Right(0) else {\n           \
    \         if (letters.filter(c => c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\
    \ || c >= '0' && c <= '9' || c >= 'A' && c <= 'Z').length == 1) Right(0) else\
    \ {\n                      Right(letters.length)\n                    }\n    \
    \              }\n                }\n              }\n            }\n        \
    \  }\n        }\n      }", "        val list = txt.split(\" \").toList\n     \
    \   if (list.isEmpty) {\n            Left(List[String]())\n        } else {\n\
    \            val list2 = list.map(_.toLowerCase).toList\n            val list3\
    \ = list2.filter(x => !x.contains(\",\"))\n            val list4 = list3.filter(x\
    \ => (x % 2) == 0)\n            val list5 = list4.filter(x => x >= ord('A') &&\
    \ x <= ord('z'))\n            val list6 = list5.filter(x => (x - ord('A') + 1)\
    \ % (x - ord('A')) == 0)\n            if (list6.isEmpty) {\n                Right(list5.size)\n\
    \            } else {\n                Right(list6.sum)\n            }\n     \
    \   }", "        if (txt.length == 0) {\n            Right(List[String]())\n \
    \       } else if (txt.chars.forall(_.isSpace)) {\n            val list = txt.split(\"\
    \")\n            val sortedList: List[String] = list.sortWith(_.toLowerCase <\
    \ _.toLowerCase).map(_.toString).toList\n            val lowercaseList: List[String]\
    \ = list.sortWith(_.toLowerCase < _.toLowerCase).map(_.toLowerCase).toList\n \
    \           val uniqueLettersSortedList: List[String] = list.filter(x => !list.contains(x.toLowerCase)).sortWith(_.toLowerCase\
    \ < _.toLowerCase).toList\n            val evenCountSortedList: List[String] =\
    \ list.groupBy(x => x.toLowerCase).map(x => (x._1, x._2.length.toLong / 2)).toList\n\
    \            val oddCountSortedList: List[String] = list.groupBy(x => x.toLowerCase).map(x\
    \ => (x._1, x._2.length.toLong / 2)).filter(x => x._2.isEven).toList\n       \
    \     Right(List.fill(sortedList.length)(sortedList))\n        } else if (txt.chars.forall(_.isSpace))\
    \ {\n            val list = txt.split(\"\")\n            val sortedList: List[String]\
    \ = list.sortWith(_.toLowerCase < _.toLowerCase).map(_.toString).toList\n    \
    \        Right(List.fill(sortedList.length)(sortedList))\n        } else {\n \
    \           val list = txt.split(\",\").map(_.toLowerCase).toList\n          \
    \  val uniqueLettersSortedList: List[String] = list.filter(x => !list.contains(x.toLowerCase)).sortWith(_.toLowerCase\
    \ < _.toLowerCase).toList\n            val evenCountSortedList: List[String] =\
    \ list.groupBy(x => x.toLowerCase).map(x => (x._1, x._2.length.toLong / 2)).toList\n\
    \            val oddCountSortedList: List[String] = list.groupBy(x => x.toLowerCase).map(x\
    \ => (x._1, x._2.length.toLong / 2)).filter(x => x._2.isEven).toList\n       \
    \     Right(List.fill(uniqueLettersSortedList.length)(uniqueLettersSortedList))\n\
    \        }", "        val list = (1 to 26).map(c => c +: c.toString).toList\n\
    \        if (txt.trim.isEmpty) Right(list)\n        else txt match {\n       \
    \     case \"_\" => Right(list)\n            case \",\" => Right(list.size)\n\
    \            case _ => Right(list.filter(_ % 2).toList)\n        }", "       \
    \ val str = new StringBuilder()\n        for(i <- 0 until txt.length){\n     \
    \       str.append(txt(i))\n            if(i == txt.length - 1)\n            \
    \    Right(str.toString().split(\" \").length)\n            else\n           \
    \     Left(str.toString().split(\" \"))\n        }", "        val result = new\
    \ mutable.MutableList[String]()\n        for (word <- txt.toLowerCase().split(\"\
    \ \")) {\n            if (word.length > 0) {\n                result.add(word)\n\
    \            }\n        }\n        if (result.isEmpty) {\n            return Right(result.size)\n\
    \        }\n        val result = result.mkString(\",\")\n        if (result.length\
    \ % 2 == 0) {\n            return Right(result.length)\n        }\n        return\
    \ Left(result)", "        // Write your code here\n        var words = txt.split(\"\
    \\\\s+\");\n        var wordLength = 0;\n        for( w <- words){\n         \
    \   wordLength += w.length +2;\n        }\n        if(words.length % 2 == 0) {\n\
    \            val evens = words.filter(w => w.length == wordLength % 2).length\n\
    \            val odds = words.filter(w => w.length == wordLength % 2).filter(w\
    \ => w == \"a\" || w == \"b\" || w == \"c\" || w == \"d\" || w == \"e\" || w ==\
    \ \"f\" || w == \"g\" || w == \"h\" || w == \"i\" || w == \"j\" || w == \"k\"\
    \ || w == \"l\" || w == \"m\" || w == \"n\" || w == \"o\" || w == \"p\" || w ==\
    \ \"q\" || w == \"r\" || w == \"s\" || w == \"t\" || w == \"u\" || w == \"v\"\
    \ || w == \"w\" || w == \"x\" || w == \"y\" || w == \"z\").length\n          \
    \  return Right(words.length - evens)\n        } else {\n            val odd =\
    \ words.filter(w => w.length == wordLength % 2).length\n            return Right(odd)\n\
    \        }", "        val words = txt split \" \" toList\n        if (words.isEmpty)\
    \ Left(List())\n        if (words.exists(_.isEmpty)) Left(List())\n        val\
    \ res = words.filter(_.nonEmpty)\n        val countLowercase = res.count(_.toLowerCase\
    \ == _)\n        val countEvenOrder = (res.filter(_ >= 'a' && _ <= 'z').count(_\
    \ == _) & res.count(_ == _)) >>> 1\n        val countEvenOrder2 = (count(_ >=\
    \ 'a' && _ <= 'z') & res.count(_ == _)) >>> 1\n        Left(res.map(\"\\\"\" +\
    \ _ + \"\\\"\") ++ List(\"\\\"l\\\"\") ++ List(s\"$countLowercase\") ++\n    \
    \        if (countLowercase == 0) \"0\" else s\"$countLowercase\" ++\n       \
    \     if (countEvenOrder == 0) \"0\" else s\"$countEvenOrder\" ++\n          \
    \  if (countEvenOrder2 == 0) \"0\" else s\"$countEvenOrder2\")", "        val\
    \ s = txt.replaceAll(\"\\\\W\", \"\")\n        var words: List[String] = Nil\n\
    \        var i = 0\n        while (i < s.length()) {\n            val c = s.charAt(i)\n\
    \            val k = c.toInt\n            if (c == ',' && (words.length != 0 ||\
    \ k % 2 != 0)) { \n                words += s(i, s.length() - 1) \n          \
    \      i = s.length() - 1\n            }\n            else if (c == ' ') {\n \
    \               words += s(i, s.length() - 1)\n                i = s.length()\
    \ - 1\n            }\n            else {\n                i += 1\n           \
    \ }\n        }\n        if (words.length == 0) { Right(0) }\n        else if (words.length\
    \ % 2 != 0) { Left(words.length) }\n        else {\n            val l = words.length\
    \ / 2\n            val hi = words.take(l).map(w => w.toLowerCase).toList\n   \
    \         val lo = words.drop(l).map(w => w.toLowerCase).toList\n            val\
    \ k = hi.foldLeft(lo.size)((acc, w) => acc + w.count(_ == 'a'))\n            Right(k)\n\
    \        }", "        var count = 0\n        var words = mutable.ListBuffer[String]()\n\
    \        for(word <- txt.split(\" \")){\n            val tmp = word\n        \
    \    if(!words.contains(tmp)){\n                count += 1\n                words\
    \ += tmp\n            }\n        }\n        if(words.length == 0)\n          \
    \  Right(count)\n        else\n            Left(words)", "        val txtArr =\
    \ txt.split(\"\\\\s+\").filterNot(_.isEmpty)\n        val resultWords = txtArr.groupBy(_).toList.flatMap\
    \ {\n            case (v, a) => a.map(_.replaceAll(\",\", \"\").replaceAll(\"\\\
    \\.\", \"\")).flatMap(v => v.trim.split(\" \"))\n        }\n        resultWords.filter(_.length\
    \ != 0).map(_.mkString(\",\")).count(l => l.length == l.toLowerCase().length +\
    \ 1) / txtArr.size", "        if (txt.isEmpty)\n            return Left(List[String]())\n\
    \        var count : Long = 0\n        var list : List[String] = Nil\n       \
    \ var lastChar = txt.head\n        for(i <- 0 until txt.length) {\n          \
    \  if(txt(i) == ',')\n                count = count + lastChar.toInt\n       \
    \     else\n                lastChar = txt(i)\n        }\n        if (lastChar\
    \ == 'a')\n            count = count + ord('a')\n        else if (lastChar ==\
    \ 'b')\n            count = count + ord('b')\n        else if (lastChar == 'c')\n\
    \            count = count + ord('c')\n        else if (lastChar == 'd')\n   \
    \         count = count + ord('d')\n        else if (lastChar == 'e')\n      \
    \      count = count + ord('e')\n        else if (lastChar == 'f')\n         \
    \   count = count + ord('f')\n        else if (lastChar == 'g')\n            count\
    \ = count + ord('g')\n        else if (lastChar == 'h')\n            count = count\
    \ + ord('h')\n        else if (lastChar == 'i')\n            count = count + ord('i')\n\
    \        else if (lastChar == 'j')\n            count = count + ord('j')\n   \
    \     else if (lastChar == 'k')\n            count = count + ord('k')\n      \
    \  else if (lastChar == 'l')\n            count = count + ord('l')\n        else\
    \ if (lastChar == 'm')\n            count = count + ord('m')\n        else if\
    \ (lastChar == 'n')\n            count = count + ord('n')\n        else if (lastChar\
    \ == 'o')\n            count = count + ord('o')\n        else if (lastChar ==\
    \ 'p')\n            count = count + ord('p')\n        else if (lastChar == 'q')\n\
    \            count = count + ord('q')\n        else if (lastChar == 'r')\n   \
    \         count = count + ord('r')\n        else if (lastChar == 's')\n      \
    \      count = count + ord('s')\n        else if (lastChar == 't')\n         \
    \   count = count + ord('t')\n        else if (lastChar == 'u')\n            count\
    \ = count + ord('u')\n        else if (lastChar == 'v')\n            count = count\
    \ + ord('v')\n        else if (lastChar == 'w')\n            count = count + ord('w')\n\
    \        else if (lastChar == 'x')\n            count = count + ord('x')\n   \
    \     else if (lastChar == 'y')\n            count = count + ord('y')\n      \
    \  else if (lastChar == 'z')\n            count = count + ord('z')\n        else\n\
    \            count = count + lastChar.toInt\n        list = list :+ txt.drop(count).toList\n\
    \        return Right(list.last)", "        val list = txt.split(\"[\\\\s]+\"\
    ).filterNot(_.isEmpty).filterNot(_.equals(\",\"))\n        val noSpaces = list.filterNot(_.isEmpty)\n\
    \        val noCommas = list.filterNot(_.equals(\",\"))\n        noSpaces.size\
    \ match {\n            case 0 => noCommas.size match {\n                case 0\
    \ => Left(noSpaces.size)\n                case 1 => Right(noSpaces.head.size)\n\
    \                case _ => Right(noSpaces.size + noCommas.size)\n            }\n\
    \            case 1 => Right(noSpaces.head.length)\n            case _ => Right(noSpaces.head.size\
    \ + noCommas.size)\n        }", "        def splitWord(words : mutable.MutableList[String])\
    \ : Either[List[String], Long] = {\n            if (words.isEmpty) {\n       \
    \         Right(words.size)\n            } else if (words.tail.isEmpty) {\n  \
    \              Left(words.tail.size)\n            } else {\n                val\
    \ first = words.head\n                val last = words.last\n                val\
    \ splitFirst = first.toLowerCase\n                val splitLast = last.toLowerCase\n\
    \                if (splitFirst.contains(splitLast)) {\n                    splitFirst.split(',').count(_\
    \ != splitFirst).map(_.toLong)\n                } else {\n                   \
    \ splitFirst.count(_ == splitLast).map(_.toLong)\n                }\n        \
    \    }\n        }\n\n        val words = mutable.MutableList[String]()\n     \
    \   txt splitTo words splitOnWhitespace\n        splitWord(words)", "        val\
    \ list = txt.split(\"\\\\s+\")\n        if (list.length > 0) Right(list) else\
    \ Left(0)", "        var counter = 0\n        var output: List[String] = Nil\n\
    \        var outputLen = txt.length\n        var letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var i = 0\n\n        for (x <- txt.toCharArray) {\n            if (x\
    \ == ' ' || x == '\\t' || x == '\\n')\n                outputLen = outputLen +\
    \ 1\n            else\n                if (x == '!' || x == '.' || x == '?')\n\
    \                    outputLen = outputLen + 1\n                else {\n     \
    \               output = (output :+ x.toString)\n                    outputLen\
    \ = outputLen + 1\n                    if (x.toString >= letters.charAt(0) &&\
    \ (x.toString <= letters.charAt(26))) {\n                        counter = counter\
    \ + 1\n                    }\n                }\n        }\n\n        Either.catchNonFatal(counter)",
  "        // Split on a comma if it exists\n        val splitWordsResult = txt match\
    \ {\n            case Some(\",\") => txt.split(',').map(_.trim).map(_.toLowerCase).toList\n\
    \            case _ => txt.toLowerCase.split(' ')\n        }\n        if (splitWordsResult.length\
    \ == 0) Left(List(\"\"))\n        else Right(splitWordsResult.size)", "      \
    \  if (txt.isEmpty) {\n            return Right(1)\n        }\n        val words\
    \ = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val odd = words.count(_ < 'a' && _ > 'z' && (_ % 2) == 1)\n   \
    \     val lowerLetterCount = words.count(_ >= 'a' && _ <= 'z')\n        Right(lowerLetterCount\
    \ + odd)", "        val words = txt.split(\"\\\\s\").toList\n        val commaWords\
    \ = txt.split(\",\").toList\n        if (words == null || commaWords == null ||\
    \ words.length != commaWords.length){\n            Right(words.length)\n     \
    \   }\n        else {\n            val result = words.zipWithIndex.flatMap(word\
    \ => word.length match {\n                case 0 => Left(List.empty[String])\n\
    \                case _ => word.map(w => w.toLowerCase)\n            }).filter(_.isOdd).length\n\
    \            Right(result)\n        }", "        val wordsCount = new mutable.HashMap[String,\
    \ Long]()\n        val words = txt.split(\"[\\\\s,]+\")\n        words.foreach(word\
    \ => {\n            if (word.nonEmpty) {\n                val wordCount = word.toLowerCase.split(\"\
    \").filter(_.isLetter).count() match {\n                    case 0 => 0\n    \
    \                case 1 => 1\n                    case 2 if isUpperLetter(word.charAt(0))\
    \ => 2\n                    case 2 => 3\n                    case n if n == 1\
    \ => n + 4\n                    case n => n + 5\n                }\n         \
    \       wordsCount.put(word, wordCount)\n            }\n        })\n        val\
    \ evenWordsCount = wordsCount.filter(_._2 == 0).collect{case (_, v) => v}\n  \
    \      val oddWordsCount = wordsCount.filter(_._2 % 2 == 1).collect{case (_, v)\
    \ => v}\n        val count: Either[List[String], Long] = if (evenWordsCount.isEmpty)\
    \ {\n            if (oddWordsCount.isEmpty) {\n                if (wordsCount.isEmpty)\
    \ Left(0)\n                else Right(wordsCount.values.sum)\n            } else\
    \ {\n                if (wordsCount.isEmpty) Left(oddWordsCount.sum)\n       \
    \         else Right(wordsCount.values.sum - oddWordsCount.sum)\n            }\n\
    \        } else {\n            if (oddWordsCount.isEmpty) {\n                if\
    \ (wordsCount.isEmpty) Left(evenWordsCount.sum)\n                else Right(wordsCount.values.sum\
    \ - evenWordsCount.sum)\n            } else {\n                if (wordsCount.isEmpty)\
    \ Left(evenWordsCount.sum + oddWordsCount.sum)\n                else Right(wordsCount.values.sum\
    \ - evenWordsCount.sum - oddWordsCount.sum)\n            }\n        }\n      \
    \  count", "        if (txt.length <= 10) return Right(txt.length)\n        val\
    \ words: List[String] = txt.split(\"\\\\s+\").toList\n        if (words.length\
    \ <= 2) return Right(words.length)\n        val numLowerLetters = txt.filter(c\
    \ => c.toLower.toInt('a') <= 'z'.toInt).length\n        Right(numLowerLetters)",
  "        val lst = txt.split(\" \");\n        if (lst.isEmpty) Left(List[String]())\n\
    \        else if (lst.size == 1) Right(lst(0))\n        else {\n            val\
    \ numLetters = txt.count(_.isLetter)\n            val result = (if (numLetters.isEven)\
    \ 1 else 0) + numLetters\n            Right(result)\n        }", '        // Your
    code goes here', "        val arr = txt.split(\"\"\"\\s+\"\"\")\n        if (arr.length\
    \ == 1) Right(arr.map(_.trim))\n        else if (arr.length == 2) Right(arr.map(_.trim))\n\
    \        else Left(arr)", "        var lowerLetterCount = 0;\n        val words\
    \ = new mutable.ListBuffer[String]()\n        for (c: Char <- txt) {\n       \
    \     val cLower = c.toLowerCase\n            if (cLower == ',') {\n         \
    \       if (words.length == 0) {\n                    return Left(words.toList)\n\
    \                }\n                else {\n                    words.append(cLower.charAt(0).toString.toLowerCase\
    \ + cLower.substring(1).toString.toUpperCase)\n                    lowerLetterCount\
    \ += cLower.length\n                }\n            }\n            else {\n   \
    \             if (cLower.length() % 2 == 1) {\n                    words.append(cLower.charAt(0).toString.toLowerCase\
    \ + cLower.substring(1).toString.toUpperCase)\n                    lowerLetterCount\
    \ += cLower.length\n                }\n                else {\n              \
    \      return Right(words.toList.map(_.length).sum)\n                }\n     \
    \       }\n        }\n        if (words.length == 0) {\n            return Right(words.toList.map(_.length).sum)\n\
    \        }\n        else {\n            return Right(words.toList)\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length < 4) {\n  \
    \          return Right(words.toList)\n        }\n        val wordCount = (words.toList)\
    \ flatMap (word => {\n            if (word.contains(\",\")) {\n              \
    \  val words = word.split(\",\")\n                words.map (word => word.trim).toList\n\
    \            } else {\n                word.trim().toLowerCase().split(\"\")\n\
    \            }\n        }) filter (word => word.length > 1) map (word => word.length).toList\n\
    \        if (wordCount.sum % 2 == 1) {\n            Left(wordCount)\n        }\
    \ else {\n            Right(wordCount.sum.toLong)\n        }", "        if (txt.contains(\"\
    ,\"))\n            Right(txt.split(\",\").length)\n        else\n            Left(txt.split(\"\
    \ \").size)", '        txt.split("\\s+")', "        val letters = mutable.HashSet[Char]()\n\
    \        txt.foreach(c => letters += c)\n        if (letters.length % 2 == 1)\
    \ Left(List(txt))\n        else if(letters.length % 2 == 0) Right((letters.length\
    \ / 2) - 1)\n        else Left(List(\"Odd number of letters!\"))", "        if\
    \ (txt == null || txt.isEmpty) {\n            Left(List.empty)\n        } else\
    \ {\n            val words = txt.split(\"\\\\s+\", -1).map { x => x.toLowerCase\
    \ }\n            val evensOrders = words.count(x => x % 2 == 0).toLong\n     \
    \       val oddsOrders = words.count(x => x % 2 != 0).toLong\n            Right(if\
    \ (evensOrders == 0) evensOrders else oddsOrders)\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        val noOfWords = words.size //number of words\
    \ in the list excluding blank spaces\n        val countLowLetters = words.count(_\
    \ == txt.substring(0,1).toLower)\n        if (noOfWords == 0) Right(countLowLetters)\n\
    \        else {\n            val listOfLetters = words.map(_.toLower)\n      \
    \      val oddOrderOfLetters = listOfLetters.groupBy(letterVal => letterVal)(letterVal\
    \ => (letterVal, letterVal.length % 2)) //create a map with letters as keys and\
    \ counts as values\n            val countOddOrderLetters = oddOrderOfLetters.filter(letter\
    \ => (letter._2 % 2) != 0)\n            val numberOfWords = countOddOrderLetters.length\n\
    \            val sumOfOddOrderLetters = countOddOrderLetters.values.sum\n    \
    \        val sumOfOddOrderLettersInWords = sumOfOddOrderLetters.sum\n        \
    \    val totalLetters = countLowLetters + sumOfOddOrderLettersInWords + countOddOrderLetters.values.sum\n\
    \            Right(numberOfWords)\n        }", "        var letterCount = 0\n\
    \        var wordCount = txt.length\n\n        val wordList = mutable.MutableList[String]()\n\
    \        val wordListIter = txt.iterator\n\n        if (wordListIter.hasNext)\
    \ {\n            val word: String = wordListIter.next()\n            val wordToAdd:\
    \ String = word + \",\"\n            if (word.length != wordList.length) wordListIter.next()\n\
    \            while (wordListIter.hasNext) {\n                val subWord: String\
    \ = wordListIter.next()\n                if (subWord.length != word.length) wordListIter.next()\n\
    \                if (subWord.forall(_.toLowerCase == \"z\")) letterCount += wordListIter.next().toUpperCase().length\n\
    \                else {\n                    val wordToAdd2 = subWord\n      \
    \              wordListIter.next()\n                    if (wordToAdd2.forall(_.toLowerCase\
    \ == \"z\")) letterCount += wordListIter.next().toUpperCase().length\n       \
    \             else wordListIter.next()\n                }\n            }\n   \
    \         if (wordList.length != wordCount) wordListIter.next()\n            else\
    \ if (wordCount == wordList.length) wordList.head :: wordList\n            else\
    \ wordListIter.next(), letterCount match {\n                case (_, 0) => Either[List[String],\
    \ Long](List.empty, 0l) //No whitespaces in the string\n                case (head,\
    \ tail) => Either[List[String], Long](head :: tail, letterCount)\n           \
    \ }\n        } else Either[List[String], Long](List.empty, 0l)", "        if(txt.isEmpty)\
    \ Right(0)\n        else if(txt.forall(_.isSpace)) Right(txt.mkString.split(\"\
    \ \").length.toLong)\n        else if(txt.forall(_.isDigit) || txt.forall(_.isUppercase))\
    \ Right(txt.mkString.split(\" \").map(_.toString.toInt).sum.toLong)\n        else\
    \ Right(txt.mkString.split(\" \").map(_.toString.toLower).distinct.length)", " \
    \       if (txt == null || txt.isEmpty) {\n            Left(Nil)\n        } else\
    \ {\n            val tokens = txt.split(\" |,\")\n            if (tokens.isEmpty)\
    \ {\n                Right(tokens.size)\n            } else {\n              \
    \  val words = tokens.map(_.toLowerCase).toList\n                if (words(1).forall(_.isLetter)\
    \ && words(0).forall(_.isLower)) {\n                    Right(words(0))\n    \
    \            } else if (words(1).forall(_.isLetter) && words(0).forall(_.isUpper))\
    \ {\n                    Right(words(0) + 1)\n                } else {\n     \
    \               Right(words(0).size)\n                }\n            }\n     \
    \   }", "        val r = new Scanner(txt).useDelimiter(\",\")\n        val s =\
    \ r.findFirst().toString.toLowerCase match {\n            case \"\" => Right(0)\
    \ // no commas\n            case c => Right(c.length) // a comma exists in the\
    \ text\n        }\n        s match {\n            case 0 => Right(0) // no commas\n\
    \            case _ if _ % 2 == 0 => Right(s.size - 1l) // odd number of commas\
    \ in the string\n            case _ => Left[List[String], Long](List())\n    \
    \    }", "        val (words, numLetters) = txt.trim.split(\"\\\\s+\", -1).\n\
    \          toList.map(_.toLowerCase).partition(_ => !_.isEmpty)\n        words.size\
    \ match {\n            case 0 => Left(words)\n            case 1 => Right(numLetters.toLong)\n\
    \            case _ => Right(numLetters.sum + 1l)\n        }", "        var output\
    \ = new ArrayBuffer[String]()\n        var count = 0\n        var characterCount\
    \ = 0\n\n        for (word <- txt.split(\" \")) {\n            characterCount\
    \ += word.length\n            if (characterCount % 2 != 0) {\n               \
    \ output.append(word)\n                characterCount -= 1\n            }\n  \
    \          else if (characterCount == 1) {\n                val first = word.charAt(0)\n\
    \                if (first > 'z') {\n                    count += 1\n        \
    \            characterCount = 1\n                }\n            }\n          \
    \  else {\n                val first = word.charAt(0)\n                if (first\
    \ > 'z') {\n                    count += 1\n                    characterCount\
    \ = 1\n                }\n                else {\n                    count -=\
    \ 1\n                }\n            }\n        }\n\n        val outputLength =\
    \ output.length\n        if (outputLength != 0) {\n            return Right(output)\n\
    \        }\n        else {\n            return Left(count)\n        }", "    \
    \    if(txt.length == 0) Left(Nil)\n        else if(txt.trim.isEmpty) Right(txt.length)\n\
    \        else {\n            val words = txt.split(\" \");\n            val wordsWithCommas\
    \ = words.filter(w => w.contains(\",\"));\n            val wordsWithNoCommas =\
    \ words.filter(w => !w.contains(\",\"));\n            val lettersCount = wordsWithCommas.map(_.toLowerCase\
    \ match { case x if (x.toString isUpper && x.toString.length == 1) => x.toInt\
    \ + 1; }).sum\n\n            Right(wordsWithCommas union wordsWithNoCommas union\
    \ List(lettersCount))\n        }", "        val result = mutable.ListBuffer[String]()\n\
    \        val arr = txt.split(\"\\\\s+\")\n        var len = 0\n        arr.foreach\
    \ { a =>\n            val l = a.length\n            if (l == 0 && a.contains(\"\
    ,\")) {\n                a += \",\"\n            } else if (l == 0 && a.contains(\"\
    .\") || l > 0 && a.contains(\",\")) {\n                val b = a.split(\",\")\n\
    \                val c = b.size\n                if (c % 2 != 0) {\n         \
    \           len += l\n                }\n                a += \",\" + b(0)\n \
    \           }\n            result += (a + \"\\n\")\n        }\n        val len\
    \ = result.length\n        Right(len)", "        val ls = txt.split(\"\\\\s\"\
    )\n        if(ls.length == 0) Left(0)\n        if(ls.length == 1) Right(ls(0).length)\n\
    \        if(ls.length == 2) Right(ls(0).length + ls(1).length)", "        val\
    \ words = txt.split(\"\"\"\\W+\"\"\")\n        Either.fold(List())(_.length.toInt)",
  "        // use mutable to store the result\n        var result: List[String] =\
    \ Nil\n        var count = 0\n        var lastChar = txt.charAt(txt.length-1)\n\
    \        // loop through each character in the string until no more characters\n\
    \        for (i <- 0 until txt.length){\n            val currentChar = txt.charAt(i)\n\
    \            // if the last character is a whitespace or a comma, split the string\n\
    \            if (lastChar == ',' || lastChar == ' '){\n                result\
    \ += currentChar\n                // move the counter forward by one so that we\
    \ can start adding words from the next character\n                count += 1\n\
    \                lastChar = txt.charAt(txt.length-1)\n            } else {\n \
    \               // if the current character is lower case, then count the number\
    \ of characters with odd order\n                if (currentChar >= 'a' && currentChar\
    \ <= 'z') count = count + 1\n                // else the count is the count\n\
    \                else count = count\n                result += currentChar\n \
    \               lastChar = currentChar\n            }\n        }\n        if (result.nonEmpty)\
    \ Left(result)\n        else Right(count)", '        // code goes here', "   \
    \     var words: List[String] = Nil\n        var numWordsThatHaveOddLettersOrder:\
    \ Long = Nil\n        for (word <- txt.split(\"\\\\s\")) if (word.isEmpty) {\n\
    \            words: List[String] = Nil\n            numWordsThatHaveOddLettersOrder\
    \ = Nil\n        } else words += word\n        if (words.length != 0) {\n    \
    \        val wordsThatHaveOddLettersOrder = words.groupBy(x => x).mapValues(_.length)\n\
    \            numWordsThatHaveOddLettersOrder = wordsThatHaveOddLettersOrder.filter(x\
    \ => x._2 % 2 != 0).length\n        }\n        val wordList: Either[List[String],\
    \ Long] = if (numWordsThatHaveOddLettersOrder == Nil) Right(words) else {\n  \
    \          val letters: List[Char] = Nil\n            val numOddLettersOrder =\
    \ numWordsThatHaveOddLettersOrder.filter(_ % 2 != 0).length\n            Right(words.map(_.replaceAll(\"\
    [^a-z]\", \"\")).groupBy(x => x).mapValues(_.length).filter(x => x._2 % 2 == numOddLettersOrder).keys.toList)\n\
    \        }\n        wordList", "      val (words, lc) = text.splitAt(text.size)\n\
    \      val lenWords = words.length\n      val evenWords = words.filter(_.toLowerCase\
    \ != \"abc\")\n      val oddWords = words.filter(_.toLowerCase == \"abc\")\n \
    \     val evenWordsLc = evenWords.filter(_ <= 26)\n      val oddWordsLc = oddWords.filter(_\
    \ <= 26)\n      val evenWordsLcLc = evenWordsLc.map(_.toLowerCase + _)\n     \
    \ val oddWordsLcLc = oddWordsLc.map(_.toLowerCase + _)\n      val evenWordsLcLcLc\
    \ = evenWordsLcLc.map(_.toLowerCase + _)\n      val oddWordsLcLcLc = oddWordsLcLc.map(_.toLowerCase\
    \ + _)\n      val evenWordsLcLcLcLc = evenWordsLcLcLc.map(_.toLowerCase + _)\n\
    \      val oddWordsLcLcLcLc = oddWordsLcLcLc.map(_.toLowerCase + _)\n      val\
    \ evenWordsLcLcLcLcLc = evenWordsLcLcLcLc.map(_.toLowerCase + _)\n      val oddWordsLcLcLcLcLc\
    \ = oddWordsLcLcLcLc.map(_.toLowerCase + _)\n      val evenWordsLcLcLcLcLcLc =\
    \ evenWordsLcLcLcLcLc.map(_.toLowerCase + _)\n      val oddWordsLcLcLcLcLcLc =\
    \ oddWordsLcLcLcLcLc.map(_.toLowerCase + _)\n      val evenWordsLcLcLcLcLcLcLc\
    \ = evenWordsLcLcLcLcLcLc.map(_.toLowerCase + _)\n      val oddWordsLcLcLcLcLcLcLc\
    \ = oddWordsLcLcLcLcLcLc.map(_.toLowerCase + _)\n      val evenWordsLcLcLcLcLcLcLcLc\
    \ = evenWordsLcLcLcLcL", "        val lst = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var count = 1\n        val split = txt.split\n        for(x <- split){\n\
    \            if(x != \" \" && x != \",\"){\n                lst += x\n       \
    \         count += 1\n            }else{\n                break\n            }\n\
    \        }\n        if(count == 1){\n            Right(count)\n        }\n   \
    \     else{\n            Left(lst.toList)\n        }", "        txt.split(\" \"\
    ).map(_.toLowerCase).toList match {\n            case x :: xs =>\n           \
    \     Right(xs.distinct.filterNot(_.equals(\",\")).filter(c => c.isLetter).filter(c\
    \ => c.isLetter && !c.isDigit).count(l => (l % 2 == 1)))\n            case _ =>\
    \ Left[List[String], Long]()\n        }", "        val input = txt.toLowerCase\n\
    \        var words = \"\"\n        var lowerCnt = 0.0\n\n        val listInput\
    \ = input.split(\",\")\n        listInput.foreach(s => { // Split input on commas\n\
    \            val words = s.split(\"\\\\s+\") // Split input on whitespace\n  \
    \          words.length match {\n                case 1 => lowerCnt += 1\n   \
    \             case _ => lowerCnt += 2\n            }\n        })\n        val\
    \ len = listInput.length\n        if (len < 2) {\n            Right(lowerCnt)\n\
    \        } else {\n            var i = 0\n            while (i < len) {\n    \
    \            val w = listInput(i)\n                if (w.toLowerCase == w.toLowerCase)\
    \ {\n                    lowerCnt += 1\n                    i += 1\n         \
    \       } else i += 1\n            }\n            Right(lowerCnt)\n        }",
  "        val words = mutable.ArrayBuffer.empty[String]\n        for (w1 <- txt.toList)\
    \ {\n            for (w2 <- w1.toList) {\n                for (w3 <- w2.toList)\
    \ {\n                    for (w4 <- w3.toList) {\n                        for\
    \ (w5 <- w4.toList) {\n                            for (w6 <- w5.toList) {\n \
    \                               for (w7 <- w6.toList) {\n                    \
    \                for (w8 <- w7.toList) {\n                                   \
    \     for (w9 <- w8.toList) {\n                                            for\
    \ (w10 <- w9.toList) {\n                                                for (w11\
    \ <- w10.toList) {\n                                                    for (w12\
    \ <- w11.toList) {\n                                                        for\
    \ (w13 <- w12.toList) {\n                                                    \
    \        for (w14 <- w13.toList) {\n                                         \
    \                       for (w15 <- w14.toList) {\n                          \
    \                                          for (w16 <- w15.toList) {\n       \
    \                                                                 for (w17 <-\
    \ w16.toList) {\n                                                            \
    \                for (w18 <- w17.toList) {\n                                 \
    \                                               for (w19 <- w18.toList) {\n  \
    \                                                                            \
    \      for (w20 <- w19.toList) {\n                                           \
    \                                             for (w21 <- w20.toList) {\n    \
    \                                                                            \
    \            for (w22 <- w21.toList) {\n                                     \
    \                                                           for (w23 <- w22.toList)\
    \ {\n                                                                        \
    \                            for (w24 <- w23.toList) {\n                     \
    \                                                                            \
    \       for (w25 <- w24.toList) {\n                                          \
    \                                                                  return Right(w25.toSet.size)\n\
    \                                                                            \
    \                            }\n                                             \
    \                                                       }\n                  \
    \                                                                            \
    \  }\n                                                                       \
    \                     }\n                                                    \
    \                                    }\n                                     \
    \                                               }\n                          \
    \                                                      }\n                   \
    \                                                         }\n                \
    \                                                        }\n                 \
    \                                                   }\n                      \
    \                                          }\n                               \
    \                             }\n                                            \
    \            }\n                                                    }\n      \
    \                                          }\n                               \
    \             }\n                                        }\n                 \
    \                   }\n                                }\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        Left[List[String], Long](words)", "  \
    \  val wordSet = Set[String]()\n    val numOfChars = Set[Int]()\n    val numOfUpperChars\
    \ = Set[Int]()\n    val wordSet2 = Set[String]()\n    val numOfChars2 = Set[Int]()\n\
    \    val numOfUpperChars2 = Set[Int]()\n    for (w <- txt.split(\"\\\\s+\")) {\n\
    \        val c = w.toCharArray\n        wordSet.add(c)\n        numOfChars ++=\
    \ Seq(c.length)\n        val isUpper = c.forall(x.isLetter)\n        if (isUpper)\
    \ numOfUpperChars += Seq(c.length)\n        wordSet2 += Seq(w.toLowerCase)\n \
    \       numOfChars2 ++= Seq(w.toLowerCase.length)\n        if (isUpper) numOfUpperChars2\
    \ += Seq(w.toLowerCase.length)", "        var result : List[String] = Nil\n  \
    \      var index : Long = 0\n        for (charValue <- txt.toCharArray)\n    \
    \        if charValue != ' ' {\n                result = result ::: List(charValue)\n\
    \            } else {\n                index+=1\n                if (index%2 ==\
    \ 0) {\n                    result = result ::: List(charValue)\n            \
    \    } else {\n                    result = result ::: List(charValue, charValue)\n\
    \                }\n            }\n        val len = result.length\n        if\
    \ (len < 2) {\n            Right(len)\n        } else {\n            Left(result)\n\
    \        }", "        txt match {\n            case s if (s.toString.trim.isEmpty\
    \ || s.toString.trim.isEmpty) =>\n                Left(Nil)\n            case\
    \ s => s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_ => s.toString.contains(\"\
    ,\"))\n                .toList\n                .map(s => if (s.toLowerCase(Locale.US).count\
    \ ('a') %% 2 == 0) s else s.split(\",\").toList)\n                .map(s => if\
    \ (s.count ('a') %% 2 == 1) s.count(_.isLower) else {\n                    s.count\
    \ {\n                        case 'a' => true\n                        case 'b'\
    \ => true\n                        case 'c' => true\n                        case\
    \ 'd' => true\n                        case 'e' => true\n                    \
    \    case 'f' => true\n                        case 'g' => true\n            \
    \            case 'h' => true\n                        case 'i' => true\n    \
    \                    case 'j' => true\n                        case 'k' => true\n\
    \                        case 'l' => true\n                        case 'm' =>\
    \ true\n                        case 'n' => true\n                        case\
    \ 'o' => true\n                        case 'p' => true\n                    \
    \    case 'q' => true\n                        case 'r' => true\n            \
    \            case 's' => true\n                        case 't' => true\n    \
    \                    case 'u' => true\n                        case 'v' => true\n\
    \                        case 'w' => true\n                        case 'x' =>\
    \ true\n                        case 'y' => true\n                        case\
    \ 'z' => true\n                        case _ => false\n                    }\n\
    \                }).toList\n                .sum\n            case _ =>\n    \
    \            Left(Nil)\n        }", "        val words  = txt.split(\" \")\n \
    \       val numWords = words.length\n        val wordList = (0 until numWords).map(i\
    \ => words(i)).filter(_.nonEmpty)\n        if (wordList.isEmpty)\n           \
    \ Left(numWords)\n        else if (wordList.count(_.isEmpty) == numWords)\n  \
    \          Right(wordList.count(_.toLowerCase == wordList.min.toLowerCase + 1))\n\
    \        else\n            Right(wordList.count(_.toLowerCase == wordList.min.toLowerCase\
    \ + 1))", "        val words = txt.toLowerCase.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(List(\"\"))\n        else if (words.length == 1) Right(List(words[0]))\n\
    \        else {\n            val result = words.filter(word => !word.isEmpty).foldLeft(List.empty[String])(_\
    \ :: _)\n            val numLetters = (result.toString.length).filter(_.isLetter).length\n\
    \            if (numLetters % 2 != 0) Right(result.length)\n            else Right(result.length)\n\
    \        }", "        // code here\n        val res = txt.split(\"[\\\\s,]+\"\
    ).map(_.toLowerCase)\n        var count = 1\n        res.foreach(x => {\n    \
    \        if(x.contains(\",\"))\n                count += 1\n        })\n     \
    \   if(res.size % 2 != 0) \n            Right(count)\n        else\n         \
    \   Left(res)", "        val ls = txt.toLowerCase().trim().split(\",\")\n    \
    \    if (ls.length == 0)\n            Left(Nil)\n        else\n            Right(ls.length)",
  "        val wordList = mutable.ArrayBuffer.empty[String]\n        // use regex\
    \ to find all words seperated by either whitespace or comma and add them to wordList\n\
    \        val regEx = new scala.util.matching.Regex(\"\"\"[\\s,]+\"\"\")\n    \
    \    for (line <- txt.split(\"\\\\n\")) if (line.trim.nonEmpty) wordList += regEx.findAllIn(line).map\
    \ { case Seq(word) => word }.toList.flatten\n        // if wordList has 0 elements\
    \ in it return Right with the length of the wordList\n        if (wordList.size\
    \ < 1) Right(wordList.size)\n        // otherwise use regex to find all words\
    \ in wordList and if their orders are odd in alphabet return Right with the length\
    \ of wordList\n        else Right(wordList.size)", "      val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n      if (words.length <= 1) Right(words.size)\n   \
    \   else {\n        val oddOrders = words.toList.map(_.toLowerCase zip words.toList.takeRight(words.length)\
    \ collect {\n          case (l, r) if l == r => r.toString.toInt\n        }).filter(_.isDefined).map(_.toString.toInt)\n\
    \        if (oddOrders.length == 0) Right(words.size)\n        else Left(words.take(words.length).mkString,\
    \ words.last.length)\n      }", "        var words: List[String] = Nil\n     \
    \   var count = 0L\n        val letters = scala.collection.mutable.ArrayBuffer(\
    \ ('A', 'a'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('E', 'e'), ('F', 'f'), ('G',\
    \ 'g'), ('H', 'h'), ('I', 'i'), ('J', 'j'), ('K', 'k'), ('L', 'l'), ('M', 'm'),\
    \ ('N', 'n'), ('O', 'o'), ('P', 'p'), ('Q', 'q'), ('R', 'r'), ('S', 's'), ('T',\
    \ 't'), ('U', 'u'), ('V', 'v'), ('W', 'w'), ('X', 'x'), ('Y', 'y'), ('Z', 'z'),\
    \ ('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e','E'), ('f','F'), ('g','G'),\
    \ ('h','H'), ('i','I'), ('j','J'), ('k','K'), ('l','L'), ('m','M'), ('n','N'),\
    \ ('o','O'), ('p','P'), ('q','Q'), ('r','R'), ('s','S'), ('t','T'), ('u','U'),\
    \ ('v','V'), ('w','W'), ('x','X'), ('y','Y'), ('z','Z') )\n        for (letter\
    \ <- letters) {\n            val ordLetter = letter.charAt(0).toChar\n       \
    \     if (txt.toUpperCase.contains(letter) && txt.toUpperCase.indexOf(letter)\
    \ != -1) {\n                words.append(letter + txt.toUpperCase.substring(txt.toUpperCase.indexOf(letter)\
    \ + 1))\n                count += 1\n            }\n        }\n        if(words.length\
    \ == 1) return Right(count) \n        else if(words.length == 0) return Left(List(txt))\n\
    \        else return Left(words) ", "        val counts = mutable.HashMap[String,Long]()\n\
    \        val words = ListBuffer.empty[String]\n        var i : Int = 0\n     \
    \   while (i < txt.length){\n            var count : Long = 0\n            while(i\
    \ < txt.length && txt(i) != ' ') {\n                val c = txt(i).toChar\n  \
    \              i += 1\n                if (counts.getOrElse(c,0l) == 0) counts(c)\
    \ = counts.getOrElse(c,0l) + 1\n                else count += 1\n            }\n\
    \            if (count != 0) words += txt.substring(0,i).trim\n            if\
    \ (i < txt.length) words += txt.substring(i, txt.length).trim\n            if\
    \ (count > 1) counts += txt.substring(0,i).trim -> count\n            else counts\
    \ += txt.substring(0,i).trim -> 1\n        }\n        if (counts.size == 0) Left(words)\n\
    \        else {\n            val oddCount = counts.filter(_._2 % 2 == 0).values.sum\n\
    \            Left(ListBuffer(words.length, oddCount))\n        }", "        val\
    \ words = txt.split(\"\\\\s+\").toList\n        if (words.size == 0) {\n     \
    \       Left(Nil)\n        } else {\n            val oddWords = words.filter (w=>\
    \ w.length() > 1).collect {\n                case w if w.count(_ > 0) % 2 == 1\
    \ =>\n                    w.toLowerCase }\n            Left(oddWords)\n      \
    \  }", "        val result = mutable.ArrayBuffer.empty[String]\n        val words:\
    \ List[String] = txt.split(\" \").filter(_.nonEmpty).toList\n        words.foreach\
    \ { word =>\n            val list = word.split(\",\")\n            list match\
    \ {\n                case Nil => result.add(word)\n                case _ =>\n\
    \                    list.foreach { x => result.add(x.toLowerCase) }\n       \
    \     }\n        }\n        val evenLcLetters = words.map(x => x.filter(x.isLowerCase\
    \ && !x.contains(\",\")).length).sum\n        val oddLcLetters = words.map(x =>\
    \ x.filter(x.isLowerCase && x.contains(\",\")).length).sum\n        Right(List(result.distinct.mkString(\"\
    \ \"), evenLcLetters, oddLcLetters))", "        val split = txt.split(\"\\\\s+\"\
    ).filterNot(_.isEmpty)\n        val numOfOddLetters = split.map(_.toLowerCase).filter(_.toString.length\
    \ % 2 != 0).length\n        Right(numOfOddLetters)", "        val words: List[String]\
    \ = splitWords(txt, List(\"\"));\n        val letters: List[Long] = splitWords(txt,\
    \ List.empty);\n        words.flatMap(s => letters.map((_,s.toLowerCase,s)))",
  "        // TODO: Write your implementation here\n        txt match {\n        \
    \    case null => Left(List(\"\"))\n            case txt if txt contains \",\"\
    \ => Left(txt.split(\",\").toList)\n            case txt if txt contains \"-\"\
    \ => Left(txt.split(\"-\"))\n            case txt => Right(txt.length.toLong)\n\
    \        }", "        if(txt.isEmpty) Left(List.empty[String])\n        else if(txt.contains(\"\
    ,\")) Left(txt.split(\",\").map(_.trim).toList)\n        else if(txt.contains(\"\
    .\") && txt.split(\".\")(1).contains(\",\")) Right(txt.split(\".\")(1).split(\"\
    ,\").map(_.trim).toList.size)\n        else Left(List(txt.trim).filter(_.nonEmpty).toList)",
  "        val list = new mutable.LinkedList[String]()\n        val count = mutable.LinkedHashMap[Char,\
    \ Long]()\n        for (word <- txt.split(\" \")) {\n            val word = word.split(\"\
    [^a-zA-Z,]\").toList\n            if (word.length == 0) Left(list)\n         \
    \   else if (word.length > 1) Right(count)\n            else {\n             \
    \   for (letter <- word(0)) {\n                    count(letter) += 1\n      \
    \          }\n                list.add(word.mkString(\"\"))\n            }\n \
    \       }\n        Left(list)", "        def words(txt : String) : List[String]\
    \ = txt splitBy (/[,\\s]/)\n        def oddCharOrder(c : Char) : Boolean = ('A'\
    \ <= c && c <= 'Z') || ('a' <= c && c <= 'z')\n        val ltxt = words(txt)\n\
    \        val oddChars = ltxt.filter (oddCharOrder)\n        val oddCharsCount\
    \ = oddChars.length\n        val evenChars = ltxt.filter (c => !oddChars.contains(c))\n\
    \        val evenCharsCount = evenChars.length\n        val charsCount = ltxt.length\n\
    \        if (oddCharsCount == 0 && evenCharsCount == 0) {\n            Right(oddCharsCount)\n\
    \        } else if (oddCharsCount == 0) {\n            Left(evenCharsCount)\n\
    \        } else {\n            Left(evenCharsCount)\n        }", "        if (txt.length\
    \ > 0) {\n            val arr = txt.split(\" \")\n            if (arr.length ==\
    \ 0 || arr.length == 1) {\n                Right(1)\n            }\n         \
    \   else {\n                val result = mutable.Set[String]()\n             \
    \   for (value <- arr) {\n                    val splitArr = value.split(\",\"\
    )\n                    for (arr1 <- splitArr) {\n                        if (arr1.length\
    \ > 0) {\n                            result += arr1\n                       \
    \ }\n                    }\n                }\n                val str = new scala.collection.mutable.StringBuilder\n\
    \                for (value <- result) {\n                    str += value\n \
    \               }\n                if (str.length % 2 == 0) {\n              \
    \      Right(str.length.toLong)\n                } else {\n                  \
    \  Left(str.length.toLong)\n                }\n            }\n        }\n    \
    \    else {\n            Left(List.empty[String])\n        }", "        val splits\
    \ = txt.toLowerCase.split(\"\"\"[\\s,]+\"\"\")\n        if (splits.size < 2) Left(List.empty)\n\
    \        else if (splits.size == 2) Right(List(splits.head))\n        else {\n\
    \            val words = splits.map(_.trim)\n            val oddWords = words.filter(_.forall(letter\
    \ => letter.toInt % 2 != 0))\n            val evenWords = words.filter(_.forall(letter\
    \ => letter.toInt % 2 == 0))\n            if (odds.size == evenWords.length) Right(odds.toList.length)\n\
    \            else if (odds.size < evenWords.length) Right(odds.toList)\n     \
    \       else {\n                Left(evenWords.toList)\n            }\n      \
    \  }", "        val result = mutable.List.empty[String]\n        val listOfWords\
    \ = txt.split(\"\\\\s\").toList\n        for (word <- listOfWords) {\n       \
    \     result.add(word.trim)\n        }\n        if(result.isEmpty) Left(result.size)\n\
    \        else Right(result)", "        if(txt.isEmpty) {\n            Left(List[String]())\n\
    \        } else {\n            val splits = txt.split(\" \").map(_.toLowerCase).toList\n\
    \            val noWhitespaces = splits.map(_.replaceAll(\"\\W\", \" \")).toList\n\
    \            val noCommas = noWhitespaces.map(_.replaceAll(\",\", \"\")).toList\n\
    \            val noEvenOrder = noCommas.map(x => x.zipWithIndex.filter(_._1 %\
    \ 2 == 1).map(_._1).map(_.toChar).map(_.toLowerCase).toList).toList\n        \
    \    val count = noEvenOrder.map(x => x.size)\n            val evenOrder = noEvenOrder.filter(x\
    \ => x.size % 2 == 0)\n            val countMap = evenOrder.map(x => (x._1, x._2.length)).toMap\n\
    \            val evenOrderMap = evenOrder.map(x => (x._1, x._2.size)).toMap\n\
    \            if(countMap.exists(x => x._2 == 3) || countMap.exists(x => x._2 ==\
    \ 6)) {\n                Right(countMap)\n            } else if(evenOrderMap.exists(x\
    \ => x._2 > 5)) {\n                Right(evenOrderMap)\n            } else {\n\
    \                Left(List[String]())\n            }\n        }", "        var\
    \ result : List[String] = Nil\n        var count : Long = 0\n        for (word\
    \ <- txt.split(\" \")) {\n            result ::= word\n            count += 1\n\
    \        }\n        result ::= (for (i <- 0 to 26 if count%2==1) yield String.valueOf(i)).toList\n\
    \        Right(result.size)", "        val words = txt.toLowerCase.split(\" \"\
    ).filter(_.nonEmpty)\n        val upperCaseChars = words.map(_.count(_ == _.toChar))\n\
    \        val oddChars = upperCaseChars.filter(_ % 2 != 0)\n        val evenChars\
    \ = upperCaseChars.filter(_ % 2 == 0)\n        val result = evenChars.reduce((x,\
    \ y) => x * y)\n        if (result > 0) Right(result.toLong)\n        else if\
    \ (result < 0) Left(List[String]())\n        else Left(List[String](words.head,\
    \ words.last))", "        // Return 3 if there are no commas\n        if (txt.contains(\"\
    ,\"))\n            Left(3)\n        // Otherwise, return number of commas + the\
    \ number of letters\n        else {\n            val arr = txt.split(\",\")\n\
    \            Right(arr.size + arr(0).length - arr.last.length)\n        }", '        txt.filter(_.isLetter).map(_.toLowerCase).toList.map(_.split("
    ").toList).map(_.flatten).map(_.filter(_(_) % 2 != 0)).count', "        val words\
    \ = txt.split(\"\\\\s+\")\n        if(words.length == 0)\n            Right(words.toList)\n\
    \        else if(words.length == 1)\n            Right(words.head.toLong)\n  \
    \      else if(words.exists(_.contains(\",\"))) {\n            val commaWords\
    \ = words.filterNot(_.contains(\",\"))\n            val commaWordsLength = commaWords.map(_.length)\n\
    \            Right(commaWordsLength)\n        } else if(words.exists(_.contains(\"\
    .\"))) {\n            val periodWords = words.filterNot(_.contains(\".\"))\n \
    \           val periodWordsLength = periodWords.map(_.length)\n            Right(periodWordsLength)\n\
    \        } else {\n            val letters = words.map(_.toLowerCase getOrElse\
    \ \"\")\n            val lettersWithOddOrder = letters.map(_.toInt filter { _\
    \ % 2 != 0 })\n            Right(lettersWithOddOrder.sum.toLong)\n        }",
  "        val words = mutable.ListBuffer.empty[String]\n        for(c <- txt) {\n\
    \          if(c.isLetter) {\n            words += c.toString\n          }\n  \
    \      }\n        if(words.isEmpty) Right(\"3\")\n        else {\n          val\
    \ splits = words.map(w => (w split '\\s').toList)\n          splits.foldLeft(Right(\"\
    3\"))((acc, w) => acc.right.getOrElse(w.size.toLong))\n        }\n      }", " \
    \       val words = txt.split(\" |,\")\n        var result = words.toList\n  \
    \      if(words.exists(w => w.isEmpty)) {\n            Right(result)\n       \
    \ } else {\n            val count = words.filter(w => w.isLetter).map(_.toLowerCase\
    \ + w.toLowerCase + \" \").count\n            if(count % 2 == 0)\n           \
    \     Right(result)\n            else {\n                val alphabet = ('A'..'Z').map(_.toString).toList\n\
    \                var evenCount = 0\n                for(i <- 1 to count.toInt)\
    \ {\n                    if(alphabet(i % 26) == \"a\") {\n                   \
    \     evenCount += 1\n                    } else {\n                        if(evenCount\
    \ == 0)\n                            Right(result)\n                        else\
    \ {\n                            val temp = evenCount % 2\n                  \
    \          val finalCount = temp * temp\n                            if(finalCount\
    \ == 0)\n                                Right(result)\n                     \
    \       else {\n                                Right(result)\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }", "        val s = txt.split(\"\\\\s+\".r)\n\
    \        if(s.length==0){\n            Right(s.length)\n        }\n        else\
    \ if(s.length==1){\n            Right(s.headOption.map {_.toLowerCase + s.last})\n\
    \        }\n        else if(s.length==2){\n            val l1 = s.head.toLowerCase\
    \ + s.last\n            val l2 = s.last.toLowerCase + s.last\n            if(l1==l2){\n\
    \                Right(l2)\n            }\n            else{\n               \
    \ Right(l1.length)\n            }\n        }\n        else{\n            val l1\
    \ = s.head.toLowerCase + s.last\n            val l2 = s.last.toLowerCase + s.last\n\
    \            val l3 = s.last.toLowerCase + s.last\n            if(l1==l2 || l1==l3){\n\
    \                val a = s.toList\n                val l = a.dropLast\n      \
    \          Right(l.length)\n            }\n            else{\n               \
    \ val l = a.dropLast\n                Right(l.length)\n            }\n       \
    \ }", "        if (txt.isEmpty) Left(Nil, Nil)\n        else (\n            val\
    \ wordsSplit = txt.split(\"\"\"\\W+\"\"\")\n            val wordsSplit2 = wordsSplit.filter(_.nonEmpty)\n\
    \            val wordCount = wordsSplit2.length\n            val uppercaseLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'a')\n            val lowercaseLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'b')\n            val oddLetterOrderLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'z') - wordsSplit2.count(_.toLowerCase\
    \ == 'a')\n            Right(List(wordsSplit(0), wordsSplit(1)), wordCount, uppercaseLetters,\
    \ lowercaseLetters, oddLetterOrderLetters)\n        )", "        var lst = new\
    \ mutable.ListBuffer[String]()\n        var count = 0\n        for (word <- txt.split(\"\
    \ \")) count += txt.split(\" \").filter(word => word.contains(\" \")).size\n \
    \       var list = txt.split(\" \").filter(word => word.contains(\" \")).map(word\
    \ => word.toLowerCase())\n        val even = list.filter(word => word.contains(\"\
    a\")).size\n        val odd = list.filter(word => word.contains(\"b\")).size\n\
    \        val letters = count % 26\n        if (letters == 0) return Either(lst.reverse.toList)\n\
    \        if (letters == 1) return Either(lst.reverse.toList)\n        if (even\
    \ == odd) return Either(lst.reverse.toList)\n        if (even > odd) return Either(lst.reverse.toList)\n\
    \        if (even == odd) return Either(lst.reverse.toList)\n        if (letters\
    \ < 26) return Either(lst.reverse.toList)\n        Either(lst.reverse.toList)",
  "        var count = 1\n        var splitWords = List[String]()\n        for (w\
    \ <- txt.split(\"\\\\s+\"))\n            if (w == \"\")\n                splitWords\
    \ += w\n            else if (w != \"\") {\n                var last = 0\n    \
    \            var first = 0\n                var found = false\n              \
    \  var i = 0\n                while (i < w.length) {\n                    val\
    \ index = w.indexOf(w(i), first)\n                    if (index < 0) {\n     \
    \                   splitWords += w.substring(first, w.length())\n           \
    \             found = true\n                        break\n                  \
    \  }\n                    first = index + 1 // skip space\n                  \
    \  if (i == 0)\n                        last = index\n                    i +=\
    \ 1\n                }\n                if (found)\n                    splitWords\
    \ += w.substring(first, w.length)\n                if (!found)\n             \
    \       splitWords += w.substring(first, w.length)\n                count = (splitWords.length\
    \ + 1) / 2\n            }\n        splitWords.toRight(count)", "        var wordsCount\
    \ = mutable.List[String]()\n        var oddCount = 0\n        var i = 0\n    \
    \    var evenCount = 0\n        var totalCount = 1\n        var words = []\n \
    \       while(txt != null) {\n            wordsCount.add(txt.substring(i, i +\
    \ 1))\n            i += 2\n        }\n        txt.substring(i, txt.length)\n \
    \       totalCount = wordsCount.size\n        for(word <- wordsCount) {\n    \
    \        if(word.charAt(0) != ',' && word.charAt(0) != ' ') {\n              \
    \  oddCount += 1\n            } else {\n                evenCount += 1\n     \
    \       }\n        }\n        if(evenCount == totalCount) {\n            return\
    \ Right(oddCount)\n        } else {\n            return Left(wordsCount)\n   \
    \     }", "        if (txt.length > 0) List(txt.split(\" \")).flatMap(_.toList)\
    \ match {\n            case x :: xs if x.nonEmpty => Right(x)\n            case\
    \ x :: xs if xs.nonEmpty => Right(xs.toList.mkString(\"\"))\n            case\
    \ x :: xs if !x.nonEmpty => Left(x)\n            case x :: xs => Left(xs.toList.mkString(\"\
    \"))\n        }\n        else Left(0)", "        if (txt.isEmpty) return Left(Nil)\n\
    \        val words = txt.split(\" \")\n        if (words.length > 1) {\n     \
    \       for (w <- words)\n                for (i <- 0 until w.length) if (w.charAt(i)\
    \ == ',')\n                    if (w.length > i + 1)\n                       \
    \ return Right(w.substring(i + 1, w.length).split(',') + \"l\")\n            \
    \    else if (w.charAt(i).isLower) Right(w.substring(i, w.length) + \"l\")\n \
    \               else Left(w.substring(i))\n        }\n        else Right(words.mkString(\"\
    \"))", "        val wordList: List[String] = List(\"Hello\", \"world!\", \"abcde\"\
    )\n        val evenNumbers: List[Long] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\
    \        val oddNumbers: List[Long] = List(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)\n\
    \        val wordCount = txt.length.toInt\n        val numberOfWords = txt.split(\"\
    \ \").length\n        val splitWordsNum = wordCount - numberOfWords\n        val\
    \ splitWords = if(splitWordsNum.productElement(new scala.math.BigInt(2)) % 2 ==\
    \ 1) evenNumbers \n        else if(splitWordsNum.productElement(new scala.math.BigInt(2))\
    \ % 2 == 0) oddNumbers\n        else {\n            val evenCharCount = (txt -\
    \ evenNumbers.take(splitWordsNum.length).mkString).length\n            val oddCharCount\
    \ = (txt - oddNumbers.take(splitWordsNum.length).mkString).length\n          \
    \  val charCount = evenCharCount + oddCharCount\n            if(charCount == splitWordsNum.length)\
    \ oddNumbers else evenNumbers\n        }\n        val returnWords = if(wordList.contains(txt))\
    \ Right(wordList.indexOf(txt)) \n        else if(splitWords.contains(txt)) Right(splitWords.indexOf(txt))\n\
    \        else {\n            val returnWord = if (numberOfWords == 1) txt.toString.toLowerCase\n\
    \            else txt.toString.split(\" \").filter( a => a.toLowerCase.contains(\"\
    a\") || a.toLowerCase.contains(\"b\") || a.toLowerCase.contains(\"c\") || a.toLowerCase.contains(\"\
    d\") || a.toLowerCase.contains(\"e\") || a.toLowerCase.contains(\"f\") || a.toLowerCase.contains(\"\
    g\") || a.toLowerCase.contains(\"h\") || a.toLowerCase.contains(\"i\") || a.toLowerCase.contains(\"\
    j\") || a.toLowerCase.contains(\"k\") || a.toLowerCase.contains(\"l\") || a.toLowerCase.contains(\"\
    m\") || a.toLowerCase.contains(\"n\") || a.toLowerCase.contains(\"o\") || a.toLowerCase.contains(\"\
    p\") || a.toLowerCase.contains(\"q\") || a.toLowerCase.contains(\"r\") || a.toLowerCase.contains(\"\
    s\") || a.toLowerCase.contains(\"t\") || a.toLowerCase.contains(\"u\") || a.toLowerCase.contains(\"\
    v\") || a.toLowerCase.contains(\"w\") || a.toLowerCase.contains(\"x\") || a.toLowerCase.contains(\"\
    y\") || a.toLowerCase.contains(\"z\") ).length\n            val returnChar = txt.length.toString.toString.toInt\n\
    \            Right(returnWord * return", "        def getWords(txt: List[Char],\
    \ words: List[String], start: Long, index: Int) : Either[List[String], Long] =\
    \ {\n            if(index >= txt.length) {\n                Either.Left(words)\n\
    \            } else {\n                val word = txt(index).toLowerCase\n   \
    \             if(word == ',') {\n                    getWords(txt.tail, words.reverse,\
    \ start, index + 1)\n                } else if(word != ' ') {\n              \
    \      val start = if (index == 0) 0 else if (index > 0) index - 1 else index\n\
    \                    val end = index + 1\n                    getWords(txt.tail,\
    \ words.reverse, start, end).fold(\n                        l => l ++ List(\"\
    '\" + word + \"'\"),\n                        r => r.reverse)\n              \
    \  } else {\n                    getWords(txt.tail, words.reverse, start, index\
    \ + 1)\n                }\n            }\n        }\n        getWords(List(txt\
    \ split \" \"), Nil, 0, 0)", "        val result = new mutable.ListBuffer[String]()\n\
    \        if (txt.length > 0) {\n            // Remove whitespaces from left and\
    \ right side\n            val lwrs = txt.map(_.toLowerCase)\n            val rwrs\
    \ = txt.map(_.toLowerCase)\n            val noWhiteSpaces = lwrs.filterNot(_.isEmpty)\n\
    \            val noCommas = rwrs.filterNot(_.equals(\"\"))\n            val lowerCharCount\
    \ = noWhiteSpaces.filterNot(_ == noCommas).size\n            result.append(lowerCharCount.toString)\n\
    \            result.append(noCommas.toList.toString)\n        }\n        result.headOption",
  "        val word = txt.split(\" \");\n        if(word.size == 0) {\n          \
    \  Right(List())\n        } else {\n            val wordList = word.filter(_ !=\
    \ \" \").flatMap(w => w.split(\"\\\\,\")).filter(w => w.length == 1).map(w =>\
    \ w.toLowerCase + w.toUpperCase + w).toList\n            val numLetters = wordList.map(x\
    \ => x.length).sum\n            val evenNums = wordList.filter(x => x.toString.length\
    \ == 1).map(x => x.toString.toLowerCase + x.toString.toUpperCase + x.toString).toList\n\
    \            if(numLetters % 2 == 0) {\n                Right(wordList)\n    \
    \        } else {\n                Left(evenNums)\n            }\n        }",
  "        var result : Long = 0\n        var charArray : Array[Char] = txt.toCharArray.asInstanceOf[Array[Char]]\n\
    \        var splittedWords : List[String] = Nil\n        var lastChar : Char =\
    \ 'a'\n        var wordCount : Long = 0\n\n        // TODO: think about when to\
    \ stop looping\n        while(charArray.length > 0) {\n            lastChar =\
    \ charArray(charArray.length - 1);\n            if(lastChar == ',' || lastChar\
    \ == ' ') {\n                splittedWords = splittedWords.reverse.zip(charArray).map\
    \ { case (w, c) => (w.trim(), c) }.filter(_._1.length > 0).map { case (w, _) =>\n\
    \                    w.toLowerCase\n                }\n                result\
    \ += wordCount\n                charArray = charArray.dropRight(1).asInstanceOf[Array[Char]]\n\
    \                wordCount = 0\n            }\n            else\n            \
    \    charArray = charArray.dropRight(1).asInstanceOf[Array[Char]]\n          \
    \      wordCount += 1\n        }\n        // Add last word\n        splittedWords\
    \ = splittedWords.reverse.zip(charArray).map { case (w, c) => (w.trim(), c) }.filter(_._1.length\
    \ > 0).map { case (w, _) =>\n            w.toLowerCase\n        }\n        //\
    \ Add count\n        result += wordCount\n\n        Right(result)", "        var\
    \ words = mutable.ArrayBuffer.empty[String]\n        var count = 0\n        var\
    \ word = \"\"\n        for (letter <- txt) {\n            word += letter\n   \
    \         if (letter == ' ' || letter == ',') {\n                count += if (word\
    \ != \"\") 1 else 0\n                words = words :+ word\n                word\
    \ = \"\"\n            }\n        }\n        Right(words.length.toLong)", "   \
    \     // write your code here\n        return Right(scala.math.min(txt.split(\"\
    \\\\W+\").filter(_.nonEmpty).map(_.toLowerCase).map(letter => letter.count(_ ==\
    \ 'a' | _ == 'b' | _ == 'c' | _ == 'd' | _ == 'e' | _ == 'f' | _ == 'g' | _ ==\
    \ 'h' | _ == 'i' | _ == 'j' | _ == 'k' | _ == 'l' | _ == 'm' | _ == 'n' | _ ==\
    \ 'o' | _ == 'p' | _ == 'q' | _ == 'r' | _ == 's' | _ == 't' | _ == 'u' | _ ==\
    \ 'v' | _ == 'w' | _ == 'x' | _ == 'y' | _ == 'z').filter(_ % 2 == 1).toList.length))",
  "        val words = txt.split(\" \")\n        if(words.length < 2) {\n        \
    \    Right(words.length)\n        } else {\n            val charSet = chars.toSet\n\
    \            val wordSet = words.toSet\n            val intersection = charSet.intersect(wordSet)\n\
    \            if(intersection.isEmpty) {\n                Right(words.length)\n\
    \            } else {\n                val charList = charSet.filter(c => !wordSet.contains(c))\n\
    \                val wordList = wordSet.filter(w => !charSet.contains(w))\n  \
    \              Right(wordList.size * (wordList.toSeq.sorted.toList.length + 1)\
    \ - charList.size)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\".r)\n        val splitWordsResult = words.flatMap(_.split(\"\".toCharArray))\n\
    \        val evenSplitWordsResult = splitWordsResult.filter(word => !word.isEmpty)\n\
    \        val oddSplitWordsResult = splitWordsResult.filter(word => !word.isEmpty).filter(word\
    \ => word.forall(_.isLower))\n        val lowLettersCount = oddSplitWordsResult.size\n\
    \        val upperLettersCount = evenSplitWordsResult.filter(_.forall(_.isUpper)).size\n\
    \        val result = lowLettersCount + upperLettersCount\n        val error =\
    \ if (result > 26) Right(0) else Left(\"Please input only lowercase letters!\"\
    )\n        error", "      val words = txt.trim.split(\"\\\\W+\")\n      if (words.length\
    \ < 2) Left(words)\n      else {\n        val lowerCases = words.map(_.toLowerCase)\n\
    \        val split = lowerCases.filter(_.nonEmpty)\n        if (split.length ==\
    \ words.length) Right(split.length)\n        else Left(split.length)\n      }",
  "        val words = mutable.ListBuffer[String]()\n        for(x <- txt.split(\"\
    \\\\s+\"))\n            if(!x.isEmpty())\n                words += x\n       \
    \ else {\n            var count = 0\n            for(x <- words)\n           \
    \     if(x.toLowerCase match { case \"a\" => count+1 else count+2 })\n       \
    \         count\n        }\n        words.toList.size", "        if (txt.split(\"\
    \\\\s\").length <= 0)\n            return Right(List.empty[String])\n        if\
    \ (txt.split(\",\").length <= 0)\n            return Right(List.empty[String])\n\
    \        if (txt.split(\"\\\\s\").length > 1 && txt.split(\",\").length > 1)\n\
    \            return Right(txt.split(\"\\\\s\").length.toLong)\n        else if\
    \ (txt.split(\"\\\\s\").length > 1 && txt.split(\",\").length == 1)\n        \
    \    return Right(txt.split(\"\\\\s\").map(_.toLowerCase).toSet.toList.size /2)\n\
    \        else if (txt.split(\",\").length > 1 && txt.split(\"\\\\s\").length ==\
    \ 1)\n            return Right(txt.split(\",\").map(_.toLowerCase).toSet.toList.size)\n\
    \        else\n            Left(\"Invalid input!\")", "        var strArr = txt.split(\"\
    \ \")\n        var wordNum = 0\n        var splitStr : List[String] = Nil\n  \
    \      for(s <- strArr){\n            if(s.toLowerCase().contains(\" \")){\n \
    \               splitStr :+= s\n                wordNum = wordNum + 1\n      \
    \      }else if(s.toLowerCase().contains(\",\")){\n                splitStr :+=\
    \ s\n                wordNum = wordNum + 1\n            }else{\n             \
    \   splitStr :+= s\n                wordNum = wordNum + 1\n            }\n   \
    \     }\n        if(splitStr.length == 0){\n            return Right(splitStr.length)\n\
    \        }else{\n            return Left(splitStr)\n        }", "        val text\
    \ = txt.trim\n        if(text.isEmpty)\n            Left(None)\n        else if(text.startsWith(\"\
    ,\"))\n            Right(text.substring(1).map(_.toString.toLowerCase ).filter(_.toString.isLetter).toList.size)\n\
    \        else Right(text.split(\" \").filter(_.contains(\" \")).map(_.toLowerCase).toList.size)",
  "        val txtSplit = txt.split(\"\\\\s\")\n        val numLetters = txtSplit.size\n\
    \        val wordSplits = if (numLetters % 2 == 0) numLetters/2 else numLetters/2\
    \ + 1\n        val numWords = if (numLetters % wordSplits == 0) wordSplits else\
    \ if (numLetters % wordSplits == 1) 1 else 2\n        val letters = txtSplit.mkString.toList.map(_.toString.toLowerCase)\n\
    \        val result = for (x <- 0 until numWords) yield {\n            val words:\
    \ List[String] = letters.take(x).toList.take(wordSplits)\n            val numLettersInWord\
    \ = words.map(_.length)\n            val evenLetters = words.map(_.toString.toLowerCase.count('a')/2)\n\
    \            val oddLetters = words.map(_.toString.toLowerCase.count('a')%2)\n\
    \            val evenLettersInWord = words.map(_.toString.toLowerCase.count('a').toDouble/2)\n\
    \            val oddLettersInWord = words.map(_.toString.toLowerCase.count('a').toDouble%2)\n\
    \            Right(List(numLetters, numLettersInWord, evenLetters, evenLettersInWord,\
    \ oddLetters, oddLettersInWord))\n        }\n        Left(result)", "        val\
    \ wordsList = txt.split(\"\\\\W+\")\n        val wordsLengthList = wordsList.length\n\
    \        val oddOrders = wordsLengthList.filter(x => x%2 === 1).map(x => 26 -\
    \ x)\n        val evenOrders = wordsLengthList.filter(x => x%2 === 0).map(x =>\
    \ ord(x) + 1)\n        val result = oddOrders.reduce(_+_) & evenOrders.reduce(_+_)\n\
    \        if(result < 26){\n            Right(wordsList.mkString(\",\"))\n    \
    \    } else {\n            Left(wordsList.mkString(\"\").length)\n        }",
  "        if(txt.isEmpty) Left(List[String]())\n        else {\n            val ws\
    \ = txt.split(\" \")\n            if(ws.nonEmpty) Right(ws.size)\n           \
    \ else {\n                val com = txt.split(\",\")\n                if(com.nonEmpty)\
    \ Right(com.size)\n                else {\n                    val odd = (0 to\
    \ 26).filter(i => i%2 == 1).count(_%26)\n                    if(odd < 1) Left(List[String]())\n\
    \                    else {\n                        val lwr = (0 to 26).filter(i\
    \ => i%2 == 0).count(_%26)\n                        if(lwr.length < 1) Left(List[String]())\n\
    \                        else {\n                            Left(List(txt))\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }", "        var words: List[String] = Nil\n        var numWords\
    \ : Long = 0\n        var i = 0\n        val chars = txt.toCharArray()\n     \
    \   var count = 0\n        for (char in chars)\n        {\n            if (char\
    \ == ' ') ++count\n            else if (char == ',') ++count\n            else\
    \ {\n                if (count%2 == 1) numWords += count\n                val\
    \ tmp = new StringBuilder()\n                while (i < (chars.length - 1))\n\
    \                {\n                    tmp.append(chars(i))\n               \
    \     i += 1\n                    if (chars(i) == ' ') count += 1\n          \
    \      }\n                words += tmp.toString\n                count = 0\n \
    \           }\n        }\n        if (count%2 == 1) numWords += count\n      \
    \  Left(words)", "        val words    = txt.split(\"[^\\\\s\\\\w']+\").filter(_.nonEmpty)\n\
    \        val wordList = words.map((_.toLowerCase)).toList\n        if(wordList.isEmpty)\n\
    \            Right(wordList.size)\n        else if(wordList.size % 2 != 0)\n \
    \           Left(wordList)\n        else {\n            var result = 0\n     \
    \       var prev : Long = 0\n            for(i<-0 until wordList.size)\n     \
    \           result += (prev - wordList(i).length()) * 2\n                prev\
    \ = wordList(i).length()\n            Right(result)\n        }", "        val\
    \ words = txt.toLowerCase.split(\"\\\\s\")\n        if (words.isEmpty)\n     \
    \       Left(List())\n        else if (words.size == 1)\n            Right(words.length)\n\
    \        else {\n            val map: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n            var wordLength = 0\n            words.foreach{ word =>\n \
    \               map.get(word) match {\n                    case Some(count) =>\n\
    \                        if (wordLength != count) {\n                        \
    \    Right(wordLength)\n                        }\n                    case None\
    \ =>\n                        val len = word.length\n                        val\
    \ newCount = count + len\n                        if (map.size < newCount) {\n\
    \                            val newMap: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n                            wordLength += len\n                      \
    \      map.put(word, newCount)\n                        } else {\n           \
    \                 val newMap: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n                            wordLength += len\n                      \
    \      newMap.put(word, wordLength)\n                        }\n             \
    \   }\n            }\n            Right(map.toList)\n        }", "        val\
    \ a = txt.toLowerCase\n        var cnt = 0\n        for (i <- 0 until a.length)\
    \ {\n            if (a.charAt(i) == ',')\n                cnt += 1\n         \
    \   else cnt = 0\n            if (cnt == 0)\n                cnt += 1\n      \
    \      else if (cnt == 2)\n                cnt += 1\n            else if (cnt\
    \ % 2 == 1)\n                cnt += 1\n            else if (cnt > 25)\n      \
    \          cnt = 0\n        }\n        if (cnt > 25)\n            Right(cnt)\n\
    \        else\n            Left[List[String], Long](List(a))", "        val arr\
    \ = txt.split(\" \").map( _.toLowerCase)\n        Right(arr.size)", "        var\
    \ total = 0\n        var low = 0\n        var high = 26\n        var even = false\n\
    \        var result: List[String] = Nil\n        var characters: List[Char] =\
    \ txt.toCharArray\n        \n        val characterCount = characters.size\n  \
    \      var charCount = 0\n        var count = 1\n        \n        for(i <- characters){\n\
    \            if(i == 'a' || i == 'b' || i == 'c' || i == 'd' || i == 'e' || i\
    \ == 'f' || i == 'g' || i == 'h' ||\n                i == 'i' || i == 'j' || i\
    \ == 'k' || i == 'l' || i == 'm' || i == 'n' || i == 'o' || i == 'p' ||\n    \
    \            i == 'q' || i == 'r' || i == 's' || i == 't' || i == 'u' || i ==\
    \ 'v' || i == 'w' || i == 'x' ||\n                i == 'y' || i == 'z'){\n   \
    \             count = 1\n                low += count\n            }else{\n  \
    \              count += 1\n                high -= 1\n            }\n        \
    \    \n            if(count % 2 == 0){\n                even = true\n        \
    \    }\n            \n            total += count\n            charCount += count\n\
    \            \n            if((total % 26) == 0){\n                if(even){\n\
    \                    result = result :+ low\n                }else{\n        \
    \            result = result :+ high\n                }\n                low =\
    \ 0\n                high = 26\n                even = false\n            }\n\
    \        }\n        \n        if(charCount % 2 == 0){\n            if(even){\n\
    \                result = result :+ low\n            }else{\n                result\
    \ = result :+ high\n            }\n            low = 0\n            high = 26\n\
    \            even = false\n        }\n        \n        if(low == 0 && high ==\
    \ 26){\n            return Left(result)\n        }else{\n            return Right(total)\n\
    \        }", "        if (txt.length() == 0) {\n            Left(List[String]())\n\
    \        }\n        val split1 = txt.split(\"\\\\s\")\n        if (split1.length\
    \ == 0 || split1(0) != txt) {\n            Left(List[String]())\n        }\n \
    \       val split2 = split1(0).split(\",\")\n        if (split2.length == 0 ||\
    \ split2(0) == \"\") {\n            Left(List[String]())\n        }\n        val\
    \ split3 = split2(0).toLowerCase\n        val split4 = split3.toList\n       \
    \ if (split4.isEmpty || split4(0) != \"\") {\n            Left(List[String]())\n\
    \        }\n        val split5 = split4(0) //.toUpperCase\n        if (split5.length\
    \ == 0 || split5(0) == \"\") {\n            Left(List[String]())\n        }\n\
    \        val split6 = split5(0).toLowerCase //.toCharArray\n        var l = 0\n\
    \        var even = 0\n        var odd = 0\n        for (i = 0; i <= split6.length\
    \ - 1; i++) {\n            val temp = split6(i)\n            if (temp == 'a')\
    \ {\n                even = even + 1\n            }\n            if (temp == 'b')\
    \ {\n                odd = odd + 2\n            }\n            if (temp == 'c')\
    \ {\n                odd = odd + 3\n            }\n            if (temp == 'd')\
    \ {\n                even = even + 4\n            }\n            if (temp == 'e')\
    \ {\n                odd = odd + 5\n            }\n            if (temp == 'f')\
    \ {\n                odd = odd + 6\n            }\n            if (temp == 'g')\
    \ {\n                even = even + 7\n            }\n            if (temp == 'h')\
    \ {\n                odd = odd + 8\n            }\n            if (temp == 'i')\
    \ {\n                even = even + 9\n            }\n            if (temp == 'j')\
    \ {\n                odd = odd + 10\n            }\n            if (temp == 'k')\
    \ {\n                even = even + 11\n            }\n            if (temp ==\
    \ 'l') {\n                odd = odd + 12\n            }\n            if (temp\
    \ == 'm') {\n                even = even + 13\n            }\n            if (temp\
    \ == 'n') {\n                odd = odd + 14\n            }\n            if (temp\
    \ == 'o') {\n                even = even + 15\n            }\n            if (temp\
    \ == 'p') {\n                odd = odd + 16\n            }\n            if (temp\
    \ == 'q') {\n                even = even + 17\n            }\n            if (temp\
    \ == 'r') {\n                odd = odd + 18\n            }\n            if (temp\
    \ == 's') {\n                even = even + 19\n            }\n            if (temp\
    \ == 't') {\n                odd = odd + 20\n            }\n            if (temp\
    \ == 'u') {\n                even = ", "        val words = txt.split(\"\\\\s+|,+\"\
    ).map(word => word.toLowerCase)\n        if (words.length < 3) Right(words.length)\n\
    \        if (words.take(3).forall(_.forall(_.isLetter)) || words.take(3).forall(_.forall(_.isDigit)))\
    \ Right(words.size)\n        if (words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit)\
    \ && words.drop(3).forall(_.forall(_.isDigit))) Right(words.length)\n        if\
    \ (words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.drop(3).forall(_.for", "        var wordsCount = txt.count(w => w ==\
    \ ' ' || w == ',')\n        var letterCount = 0\n        var lowerLetterCount\
    \ = 0\n        for (word <- txt.split(' ')) {\n            wordsCount += txt.count(w\
    \ => w == ' ' || w == ',')\n            letterCount += txt.count(w => w.isLetter)\n\
    \            lowerLetterCount += txt.count(w => w.toLowerCase().isLetter)\n  \
    \      }\n        val result = if (letterCount == wordsCount && wordsCount !=\
    \ 0 && letterCount % 2 == 1) {\n            Right(lettersCount / 2)\n        }\
    \ else {\n            Left(txt)\n        }\n        result", "        var i =\
    \ 0\n        var word = \"\"\n        var count = 0\n        var list = List[String]()\n\
    \        val ls = List('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n\
    \        for(x <- txt)\n        {\n            if(x.equals(\" \"))\n         \
    \   {\n                if(word != \"\")\n                {\n                 \
    \   list :+= word\n                    word =\"\"\n                    count =\
    \ 0\n                }\n                else\n                {\n            \
    \        if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            else if(x.equals(\",\"))\n \
    \           {\n                if(word != \"\")\n                {\n         \
    \           list :+= word\n                    word =\"\"\n                  \
    \  count = 0\n                }\n                else\n                {\n   \
    \                 if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            else if(x.toString.length ==\
    \ 1)\n            {\n                if(i < ls.length)\n                {\n  \
    \                  if(ls(i) == x.toString.toUpperCase())\n                   \
    \ {\n                        count += 1\n                        word += x.toString.toUpperCase\n\
    \                    }\n                    else\n                    {\n    \
    \                    if(count % 2 == 1)\n                        {\n         \
    \                   list :+= x.toString.toUpperCase\n                        }\n\
    \                        else\n                        {\n                   \
    \         list :+= x.toString.toLowerCase\n                        }\n       \
    \                 count = 0\n                        word += x.toString.toLowerCase\n\
    \                    }\n                }\n            }\n            else\n \
    \           {\n                if(word != \"\")\n                {\n         \
    \           list :+= word\n                    word =\"\"\n                  \
    \  count = 0\n                }\n                else\n                {\n   \
    \                 if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            i += 1\n        }\n        return\
    \ Right(count)", "        val wordsList = txt.split(\" \").map(_.toLowerCase)\n\
    \        val commasList = txt.split(\",\")\n        val lowerCaseLetters = txt.toLowerCase.split(\"\
    \").count(_ == 'a')\n        if(wordsList.isEmpty && commasList.isEmpty)\n   \
    \         Right(lowerCaseLetters)\n        else if(wordsList.isEmpty || commasList.isEmpty)\n\
    \            Left(wordsList.length.toLong)\n        else\n            Either.fromRight(lowerCaseLetters)",
  "        var lc = 0, odd = 0, oddWord = \"\"\n        txt.split(\" \").map(_.replaceAll(\"\
    [^a-z]\", \"\")).foreach(word => {\n            word match {\n               \
    \ case \"a\" => lc += 1\n                case \"b\" => lc += 1\n             \
    \   case \"c\" => lc += 1\n                case \"d\" => lc += 1\n           \
    \     case \"e\" => lc += 1\n                case \"f\" => lc += 1\n         \
    \       case \"g\" => lc += 1\n                case \"h\" => lc += 1\n       \
    \         case \"i\" => lc += 1\n                case \"j\" => lc += 1\n     \
    \           case \"k\" => lc += 1\n                case \"l\" => lc += 1\n   \
    \             case \"m\" => lc += 1\n                case \"n\" => lc += 1\n \
    \               case \"o\" => lc += 1\n                case \"p\" => lc += 1\n\
    \                case \"q\" => lc += 1\n                case \"r\" => lc += 1\n\
    \                case \"s\" => lc += 1\n                case \"t\" => lc += 1\n\
    \                case \"u\" => lc += 1\n                case \"v\" => lc += 1\n\
    \                case \"w\" => lc += 1\n                case \"x\" => lc += 1\n\
    \                case \"y\" => lc += 1\n                case \"z\" => lc += 1\n\
    \                case _ => {\n                    val newWord = word.dropWhile(x\
    \ => x != word.dropRight(1).head).toString.toLowerCase\n                    if\
    \ (odd == 0) oddWord = newWord\n                    odd += 1\n               \
    \ }\n            }\n        })\n        if (lc % 2 != 0) Right(List(oddWord))\n\
    \        else Left(List(oddWord))", "        // TODO: Your code goes here\n  \
    \      val wordsList = mutable.ListBuffer[String]()\n        val commaSplit =\
    \ txt.split(\",\")\n        val spaceSplit = txt.split(\" \")\n        val lowercaseSplit\
    \ = txt.map(x => x.toLowerCase)\n        val alphabetSplit = lowercaseSplit.map(x\
    \ => x.toInt).filter(x => x % 2 == 1)\n\n        wordsList ++= spaceSplit\n  \
    \      wordsList ++= commaSplit\n        wordsList ++= alphabetSplit\n\n     \
    \   if (wordsList.size == 3) {\n            Right(wordsList.size)\n        } else\
    \ {\n            Left(wordsList)\n        }", "        val words = txt.toLowerCase().split(\"\
    \"\"\\s+\"\"\".r) // split on whitespace and capture in regex group\n        var\
    \ sum = 0L\n        var evenLetter = 0\n        for (word <- words) {\n      \
    \      if (word.length % 2 == 0) { // if even-length\n                sum += evenLetter\n\
    \                evenLetter = 0\n            } else {\n                sum +=\
    \ word.count(letter => ('A'<=letter) && (letter<='Z')) // count the lower-case\
    \ letters in the word and add them to the sum\n                evenLetter += word.count(letter\
    \ => ('A'<=letter) && (letter<='Z')) //add even-length letters to the even-length\
    \ total\n            }\n        }\n        // If the even length count was odd\
    \ we return it with the sum count\n        if (evenLetter % 2 != 0) Left(List(),\
    \ sum)\n        else Right(words)", "        var words: List[String] = Nil\n \
    \       var cnt: Long = 0\n        var w: String = txt(0)\n        var temp: String\
    \ = w\n        for(i <- 0 until w.length) {\n            if(i == w.length-1) {\n\
    \                words += w\n                cnt += w.toLowerCase == w.toUpperCase\
    \ ? 1 : 0\n            } else {\n                if(w.charAt(i) == w.charAt(i+1))\
    \ {\n                    cnt += w.toLowerCase == w.toUpperCase ? 1 : 0\n     \
    \           } else {\n                    cnt += w.toLowerCase == w.toUpperCase\
    \ ? 2 : -1\n                }\n            }\n            w = temp\n         \
    \   temp = txt(i)\n        }\n        if(words.length == 1) {\n            return\
    \ Right(cnt)\n        } else {\n            return Left(words)\n        }", " \
    \       def getEvenOrder(n: Int) : Long = n - ord('a')\n        val evenLetterCount\
    \ = mutable.HashSet[Int]()\n        val wordsWithEvenOrder = mutable.HashMap[Int,\
    \ List[String]]()\n        var i = 0\n        val wordList = txt.split(\" \")\n\
    \        while (i < wordList.length) {\n            val word = wordList(i)\n \
    \           if (!word.contains(\" \")) {\n                if (word.length < 2)\
    \ {\n                    val oddLetterCount = getEvenOrder(word.length)\n    \
    \                wordsWithEvenOrder.put(oddLetterCount, word)\n              \
    \      evenLetterCount += oddLetterCount\n                }\n                i\
    \ += 1\n            } else {\n                val wordListWithEvenOrder = word.split(\"\
    ,\")\n                if (wordListWithEvenOrder.length == 1) {\n             \
    \       val oddLetterCount = getEvenOrder(word.length)\n                    wordsWithEvenOrder.put(oddLetterCount,\
    \ word)\n                    evenLetterCount += oddLetterCount\n             \
    \   }\n                for (word <- wordListWithEvenOrder) {\n               \
    \     val oddLetterCount = getEvenOrder(word.length)\n                    wordsWithEvenOrder.put(oddLetterCount,\
    \ word)\n                    evenLetterCount += oddLetterCount\n             \
    \   }\n            }\n        }\n        if (evenLetterCount.size == 0) {\n  \
    \          return Right(evenLetterCount.size)\n        } else {\n            return\
    \ Left(wordsWithEvenOrder)\n        }", "        val txtWords = txt.split(\" \"\
    ) \n        if(txtWords.size == 0) Left(List[String]())\n        else if(txtWords.size\
    \ == 1) Right(txtWords(0).toLong)\n        else Left(txtWords)", "    val words\
    \ : List[String] = txt.split(\" \").map(_.toLowerCase).toList\n    var count =\
    \ 1\n    words.foreach {\n        word =>\n            if(word.contains(\",\"\
    )){\n                val words = word.split(',')\n                count = count\
    \ + 1\n                words.foreach(word => count = count + 2)\n            }\
    \ else {\n                count = count + 1\n            }", "        val result\
    \ = new mutable.ListBuffer[String]()\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) matches \".*[a-zA-Z]*\"){\n                if(txt(i).toLower.size\
    \ == txt(i).toUpper.size){\n                    result.append(txt(i).toLower)\n\
    \                } else {\n                    result.append(txt(i))\n       \
    \         }\n            } else {\n                result.append(txt(i))\n   \
    \         }\n        }\n        result.size match {\n            case 0 => Right(result.size)\n\
    \            case _ => Left(result)\n        }", "        var countLettersOdd\
    \ = 1l\n        val txtSplit = txt.split(\" \")\n        val wordsList = txtSplit.map\
    \ { line =>\n            val lineLower = line.toLowerCase\n            val count\
    \ = line.length\n            val countLowerOdd = (count + 1).filter(x => x % 2\
    \ == 0).map(x => x - 1).filter(x => x % 2 == 0).map(x => x - 1).sum\n        \
    \    countLowerOdd == 0 match {\n                case true => line.split(\",\"\
    ).map(x => x.trim)\n                case false => line.split(\",\").toList.map(x\
    \ => x.trim).toList\n            }\n        }\n        val wordsCount = wordsList.map(x\
    \ => x.length).sum\n        val countLettersEven = txtSplit.map(x => x.length).sum\n\
    \        val rightValue = countLettersOdd + (countLettersEven - countLettersOdd)\n\
    \        val leftValue = countLettersOdd + (txtSplit.length - countLettersOdd\
    \ - countLettersEven)\n        val finalEither = wordsCount.map(x => Right(x)).orElse(Left((wordsCount.sum\
    \ + countLettersEven.toLong)))\n        finalEither", "        // TODO: Implement\
    \ me\n        Left(List())", "        val arr = new mutable.ArrayBuffer.empty[String]\n\
    \        txt.split(\"[,\\\\s]+\").foreach(x => if(x.length > 0) arr += x else\
    \ ())\n        val even = arr.filter(x => x.matches(\"[a-z]\")).length % 2 !=\
    \ 0\n        val len = arr.length\n        val nlen = even.filter(_ == 'a').length\
    \ * 2\n        if(arr.length == 0) Right(nlen)\n        else if(len == 0) Left(arr.toString)\n\
    \        else if(len == nlen) Left(arr.mkString(\"a\"))\n        else Right(nlen)",
  "        val lc = txt.filter(x => x.toLowerCase contains ('a', 'b' ,'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z')).size\n        val comma = txt.filter(x => x.toLowerCase\
    \ contains (',')).size\n        val odd = txt.filter(x => x.toLowerCase contains\
    \ ('a', 'b' ,'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')).filter(x => x % 2 !=\
    \ 0).size\n        Either.right(lc + comma + odd)", "        txt match {\n   \
    \         case \"\" => Right(0)\n            case \" \" => Right(0) // no whitespaces,\
    \ return number of letters\n            case \",\" => Right(0) // no commas, return\
    \ number of letters\n            case x => Right(x.toString.length)\n        }",
  "        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val numWords\
    \ = words.length\n        if (words.length > 0) {\n            words.map(_.toLowerCase).toList\n\
    \        } else {\n            Left(numWords)\n        }", "      val splits =\
    \ txt.split(\"[\\\\s,]+\")\n      val wordCount = splits.filter(_.trim().nonEmpty).length\n\
    \      wordCount match {\n        case 0 => Left(List[String]())\n        case\
    \ 1 => Right(splits.length)\n        case 2 => Right(if (splits(1).equals(\",\"\
    )) splits.length else 1)\n      }", "        val words = txt.split(\"\\\\s+\"\
    ).map(_.toLowerCase())\n        val withWhitespaces = words.filterNot(_.isEmpty)\n\
    \        val withoutWhitespaces = words.filter(_ != \"\")\n        val withoutCommas\
    \ = withoutWhitespaces.filterNot(_.contains(\",\"))\n        val withoutLowercaseLetters\
    \ = withoutCommas.filterNot(_.contains(\"a\"))\n        val withoutLowercaseLettersOdd\
    \ = withoutLowercaseLetters.filter(_ % 2 == 1)\n        val withoutLowercaseLettersEven\
    \ = withoutLowercaseLetters.filter(_ % 2 == 0)\n        val withoutLowercaseLettersOddOrder\
    \ = withoutLowercaseLettersOdd.filter(_ % 26 ==1)\n        val withoutLowercaseLettersEvenOrder\
    \ = withoutLowercaseLettersEven.filter(_ % 26 ==0)\n        val withoutLowercaseLettersOddAndEvenOrder\
    \ = withoutLowercaseLettersEven.filter(_ % 26 == 1)\n        val withoutLowercaseLettersOddAndEvenOrderOdd\
    \ = withoutLowercaseLettersOdd.filter(_ % 26 == 0)\n        val withoutLowercaseLettersOddAndEvenOrderEven\
    \ = withoutLowercaseLettersEven.filter(_ % 26 == 1)\n\n        if (withoutLowercaseLettersOddOrder.isEmpty){\n\
    \            Right(withoutLowercaseLettersOddOrder.length)\n        }\n      \
    \  else if (withoutLowercaseLettersOddOrder.contains(withoutLowercaseLettersOddOrder.head)){\n\
    \            Right(withoutLowercaseLettersOddOrder.length)\n        }\n      \
    \  else if (withoutLowercaseLettersEvenOrder.isEmpty){\n            Right(withoutLowercaseLettersEvenOrder.length)\n\
    \        }\n        else if (withoutLowercaseLettersEvenOrder.contains(withoutLowercaseLettersEvenOrder.head)){\n\
    \            Right(withoutLowercaseLettersEvenOrder.length)\n        }\n     \
    \   else if (withoutLowercaseLettersOddAndEvenOrder.isEmpty){\n            Right(withoutLowercaseLettersOddAndEvenOrder.length)\n\
    \        }\n        else if (withoutLowercaseLettersOddAndEvenOrder.contains(withoutLowercaseLettersOddAndEvenOrder.head)){\n\
    \            Right(withoutLowercaseLettersOddAndEvenOrder.length)\n        }\n\
    \        else if (withoutLowercaseLettersOddAndEvenOrderEven.isEmpty){\n     \
    \       Right(withoutLowercaseLettersOddAndEvenOrderEven.length)\n        }\n\
    \        else if (withoutLowercaseLettersOddAndEvenOrderEven.contains(withoutLowercaseLettersOddAndEvenOrderEven.head)){\n\
    \            Right(", "        def countChar (txt: String) : Long = {\n      \
    \      val c = mutable.Map[Char, Long]()\n            txt.foreach(_.toCharArray.zipWithIndex.foreach\
    \ { case (c: Char, i) =>\n                if (c.isLetter) c(c) += 1\n        \
    \    })\n            c.toSeq.sortBy(_._1).map(a => a._2).sum\n        }\n    \
    \    val words = txt.trim().split(\" \").map(x => x.replaceAll(\"\\\\W\", \"\"\
    ).toLowerCase).toList\n        if (words.exists(_ == \"abcdef\") || words.exists(_\
    \ == \"acfdeb\")) {\n            Left(words)\n        } else {\n            Right(countChar(txt))\n\
    \        }", "        val wordsArray = txt.split(\"[,\\\\s]+\")\n        var count\
    \ = 1\n        var splitArray = wordsArray\n        for(word <- splitArray){\n\
    \            splitArray = splitArray.filter(x => !x.equals(word))\n          \
    \  count += splitArray.size\n        }\n        if(splitArray.size > 1)\n    \
    \        Right(count)\n        else\n            Left(splitArray.toList)", " \
    \       val words  = mutable.List[String]()\n        val count  = mutable.Map[Char,\
    \ Long]()\n\n        for(c <- txt.toCharArray()) {\n            count += (c,count.getOrElse(c,\
    \ 1L))\n        }\n\n        for(c <- count.keys) {\n            if((count-=c).toInt\
    \ % 2 == 1) {\n                words += c\n            }\n        }\n\n      \
    \  if(words.length == 0) Right(0) else Left(words)", "        val splits = txt.split(\"\
    [ ,]+\").map((_.toLowerCase match {\n            case \" \" => \"\"\n        \
    \    case \",\" => \",\"\n            case _ => throw new Exception(\"Invalid\
    \ input\")\n        }))\n        // Split on the commas\n        val commaSplit\
    \ = splits.filterNot(_.isEmpty)\n        // Split on the spaces\n        val spaceSplit\
    \ = splits.filterNot(_.isEmpty)\n        // Find the word count for the longest\
    \ word in the list\n        val longestWordLength: Int = spaceSplit.maxBy(_.length)\n\
    \        // Count the number of words with odd order\n        val oddOrderWordCount:\
    \ Long = commaSplit.count(w => w.toInt == (ord(w) - ord(\"a\") + 1))\n       \
    \ val wordCount = oddOrderWordCount + spaceSplit.size\n        // Return either\
    \ an error or the correct count\n        if(wordCount.toInt != longestWordLength.toInt)\
    \ {\n            Left(List(new Exception(\"Invalid input\"), wordCount.toInt))\n\
    \        } else {\n            Right(wordCount)\n        }", "        txt.toLowerCase().trim.split(\"\
    \ \")\n            .filter(_.nonEmpty)\n            .flatMap(_.split(\" \"))\n\
    \            .countBy(word => word.toLowerCase())\n            .toSeq.map(c =>\
    \ if (c.key.toString.size == 1) c.key.toString.toInt else c.key.toString.toLong)\n\
    \            .filter(c => c % 2 != 0).length", "        var numWords : Long =\
    \ 0\n        val splits = txt.split(\" \").toList\n        val words : List[String]\
    \ = splits.filter(_ != \" \").filter(_ != \",\").toList\n        for(i <- 0 to\
    \ words.length-1 if words.charAt(i) == \" \") numWords++\n        if (words.length\
    \ % 2 == 0) Right(numWords) else Left[List[String], Long](numWords)", "      \
    \  val words = mutable.ArrayBuffer.empty[String]\n        var count : Long = 0\n\
    \        for(word <- txt.split(\" \")) {\n            if(!word.isEmpty) {\n  \
    \              words += word\n                count += 1\n            }\n    \
    \    }\n        if(words.length != count) {\n            Left(words)\n       \
    \ } else {\n            Right(count)\n        }", "      var numWords : Long =\
    \ 0\n      var wordCounts : mutable.Map[String, Long] = mutable.Map[String, Long]()\n\
    \      var words : List[String] = Nil\n      val words = txt.split(\"\\\\s\")\n\
    \n      for (i <- words) {\n        if (i == \"\") {\n          numWords += 1\n\
    \          wordCounts = mutable.Map[String, Long]()\n          wordCounts += word\
    \ -> 1\n        } else {\n          wordCounts += word -> 1\n        }\n     \
    \ }\n      \n      val sortedWordCounts = wordCounts.toSeq.sortWith((a, b) =>\
    \ a._1 < b._1)\n      var odd = sortedWordCounts.head._2 % 2\n      var upperCaseWordCount\
    \ = 0\n      for (word <- sortedWordCounts) {\n        if (word._1 % 2 == 0 &&\
    \ word._2 % 2 == 0) {\n          upperCaseWordCount += 1\n        }\n      }\n\
    \n      return Right(numWords + odd + upperCaseWordCount)", "        val pattern\
    \ = \"[, ]+\".r\n        val words: List[String] = pattern.findAllIn(txt).map(x\
    \ => x.group(0)).filter(x => x.length > 0).map(x => x.toLowerCase).toList\n  \
    \      val commas: List[String] = pattern.findAllIn(txt).map(x => x.group(0)).filter(x\
    \ => x.length > 0).map(x => x.toLowerCase).toList\n        if (commas.isEmpty)\n\
    \            Left(words)\n        else\n            Right(words.length)", "  \
    \      var splitStr = new scala.collection.mutable.StringBuilder\n        var\
    \ numOfLetters : Long = 0\n        var numOfWords : Long = 0\n        val words\
    \ = txt.split(\",\")\n\n        for(word <- words) {\n            var splitWord\
    \ : String = new StringBuilder\n            val wordArr = word.split(\" \")\n\
    \            for(word1 <- wordArr) word1.toLowerCase match {\n               \
    \ case letter if letter.isLetter =>\n                    if(numOfLetters % 2 ==\
    \ 0) {\n                        splitStr += word1 + \" \"\n                  \
    \  } else {\n                        numOfWords += 1\n                       \
    \ splitStr += word1 + \" \"\n                    }\n                    numOfLetters\
    \ += 1\n                case letter =>\n                    splitStr += word1\
    \ + \" \"\n            }\n        }\n        numOfWords = numOfWords.toInt\n \
    \       if (splitStr.length == 0) Right(numOfWords)\n        else Left(splitStr.delete(0,\
    \ splitStr.length).toList)", "        val splits = txt.split(\"\\\\s+\").toList\n\
    \        val splitsWithCommas = txt.split(\",+\").toList\n        if (splits.isEmpty)\
    \ {\n            if (splitsWithCommas.isEmpty) {\n                return Right(List(\"\
    l\"))\n            } else {\n                return Right(List(\"l\", \"l\"))\n\
    \            }\n        }\n        if (splitsWithCommas.isEmpty) {\n         \
    \   val lowerCaseLetters = txt filter (x => x.toLower.contains(x)) map (x => x.toLowerCase)\
    \ filter (x => x != \"\") filter (x => x.contains(\"l\") && !x.contains(\"l\"\
    )) map (x => x.toDouble) filter (x => x % 2 == 0)\n            if (lowerCaseLetters.size\
    \ == 1) {\n                return Right(List(lowerCaseLetters.head))\n       \
    \     } else {\n                return Left(List(lowerCaseLetters.size))\n   \
    \         }\n        }\n        val lowerCaseLetters = txt filter (x => x.toLower.contains(x))\
    \ map (x => x.toLowerCase) filter (x => x != \"\") filter (x => x.contains(\"\
    l\") && !x.contains(\"l\")) map (x => x.toDouble) filter (x => x % 2 == 0)\n \
    \       val upperCaseLetters = txt filter (x => x.toUpper.contains(x)) map (x\
    \ => x.toUpper) filter (x => x != \"\") filter (x => x.contains(\"L\") && !x.contains(\"\
    L\")) map (x => x.toDouble) filter (x => x % 2 == 0)\n        if (lowerCaseLetters.size\
    \ == 1 && upperCaseLetters.size == 1) {\n            return Right(List(lowerCaseLetters.head,\
    \ upperCaseLetters.head))\n        } else if (lowerCaseLetters.size == 1 && upperCaseLetters.size\
    \ != 1) {\n            return Right(List(lowerCaseLetters.head))\n        } else\
    \ if (lowerCaseLetters.size != 1 && upperCaseLetters.size == 1) {\n          \
    \  return Left(List(lowerCaseLetters.size, upperCaseLetters.head))\n        }\
    \ else {\n            val allLetters = lowerCaseLetters.toList.::(upperCaseLetters.toList).::(splitsWithCommas.map(x\
    \ => x.replace(\",\", \"\").toLowerCase)).toList\n            if (allLetters.size\
    \ == 1) {\n                return Right(List(allLetters.head))\n            }\
    \ else {\n                return Left(List(allLetters.size))\n            }\n\
    \        }", "        val result = for {\n            words <- split(txt, \" ,.!?-\\\
    n\")\n            _ <- words.size match {\n                case 0 => Left(words)\n\
    \                case s if (s == 1) => Right(s.toLong)\n                case s\
    \ => Right(s.toLong + 1)\n            }\n        } yield words\n\n        result.fold(\n\
    \            left => Left(left),\n            right => Right(right.sum.toLong)\n\
    \        )", "        if(txt == \"\") return Left(List())\n        val splits\
    \ = txt.split(\" \")\n        if(splits.length == 0) return Left(List())\n   \
    \     val words = splits.map(_.toLowerCase).distinct\n        if(words.isEmpty)\
    \ Left(List())\n        else Right(words.size)", "        txt match {\n      \
    \      case null => \"null\"\n            case s => s.split(\",\").toList map\
    \ {_.toLowerCase } match {\n                case Nil => Left(List[String]())\n\
    \                case list => Right(list.size)\n            }\n        }", " \
    \     txt.split(\" \").map(_.toLowerCase).filter(_.contains(\",\")).map(_.split(\"\
    ,\").map(_.toLowerCase)).flatten.toList.flatMap(_\n        .count(_ == \" \")).toList.groupBy(_.count(_\
    \ == \" \").asInstanceOf[Int]) % 2", "        var numUpper = txt.filter(_.isUpper).size\n\
    \        var numLower = txt.filter(_.isLower).size\n        var numLetters = numUpper\
    \ + numLower\n        if (numLetters % 2 != 0) {\n            Right(numLetters)\n\
    \        } else {\n            Left(txt.split(\"[\\\\s]\").map(_.toLowerCase).mkString(\"\
    ,\"))\n        }", "        val words = txt.split(\"\\\\s\")\n        if (words.length\
    \ == 0) Left(List.empty[String])\n        else if (words.length == 1) Right(words.head.size)\n\
    \        else {\n            val evenWordCount = (for (w <- words) yield w.length)\
    \ filter { _ % 2 == 0 }.sum\n            val oddWordCount = (for (w <- words)\
    \ yield w.length) filter { _ % 2 != 0 }.sum\n            if (evenWordCount % 2\
    \ == 1 && oddWordCount % 2 != 0) Right(evenWordCount)\n            else if (evenWordCount\
    \ % 2 != 1 && oddWordCount % 2 == 0) Right(oddWordCount)\n            else if\
    \ (evenWordCount % 2 == 0 && oddWordCount % 2 == 1) Right(evenWordCount + oddWordCount)\n\
    \            else Left(List(words.mkString(\",\")))\n        }", "        val\
    \ words = mutable.ArrayBuffer.empty[String]\n        for (w <- txt.toString.split(\"\
    \ \")) {\n            if (w.contains(\",\"))\n                Right(words.toList.length)\n\
    \            else if (w.contains(\",\"))\n                Right(words.toList.length)\n\
    \            else Right(words.append(w.toLowerCase))\n        }", "        val\
    \ split = txt.split(\"[,]\");\n        val count = split.map(_.length).filter(_\
    \ % 2 != 0).sum\n        val left = split.filter(_ % 2 == 0).sum\n        Left(List(split)\
    \ ++ List(\"[\", count, \"]\") ++ List(\"[\", left, \"]\"))", "        if(txt.contains(\"\
    \ \")) {\n            val splitted = txt.split(\" \");\n            if(splitted.length\
    \ == 2) {\n                return Right(splitted);\n            } else if(splitted.length\
    \ == 1) {\n                return Left(splitted);\n            } else {\n    \
    \            return Left(splitted.length)\n            }\n        } else {\n \
    \           val splitted = txt.split(\",\")\n            if(splitted.length ==\
    \ 2) {\n                return Right(splitted);\n            } else if(splitted.length\
    \ == 1) {\n                return Left(splitted);\n            } else {\n    \
    \            return Left(splitted.length)\n            }\n        }", "      \
    \  val words = mutable.Buffer[String]()\n        val numLowercaseChars = mutable.Buffer(0)\n\
    \        for (char <- txt.iterator) {\n            if (char.equals(\" \") || char.equals(\"\
    ,\"))\n                words += char\n            if (char >= 'a' && char <= 'z')\
    \ {\n                numLowercaseChars += char\n            }\n        }\n   \
    \     val numLowercaseCharsNum = numLowercaseChars.sum + 1\n        return numLowercaseCharsNum.toEither",
  "        val words = txt.split(\"[ ,]+\").toList\n        if (words.length == 1)\
    \ {\n            Right(List(txt))\n        } else {\n            val firstWord\
    \ = words(0)\n            val numUppercaseLetters = firstWord.filter(_.isUppercase).length\n\
    \            val numLowercaseLetters = firstWord.filter(_.isLowercase).length\n\
    \            val wordLength = (words(0).length * words.size)\n            val\
    \ numOddLetters = (numLowercaseLetters.toDouble + numUppercaseLetters.toDouble\
    \ * 2 - wordLength).toInt\n            Right(if (numOddLetters.toDouble % 2 ==\
    \ 0) words(0) else words(0).toString + numOddLetters.toString + numLowercaseLetters.toString)\n\
    \        }", "        try {\n            val words = txt.split(\"\\\\w+\")\n \
    \           val numOfOddLetters = (0 to 25).count( (x => words.toList.zipWithIndex.map(\
    \ y => y(0) ).exists( x => x % 2 == 1 ) ) )\n            return Right(numOfOddLetters)\n\
    \        }\n        catch {\n            case _ : Exception => Left(List(txt))\n\
    \        }", "        var word = \"\"\n        var numOfLowerLettersOdd = 0.0\n\
    \        for ( i <- 0 until txt.length ) {\n            word += txt(i)\n     \
    \       if( txt(i) == ' ' ) {\n                numOfLowerLettersOdd = numOfLowerLettersOdd\
    \ + 1.0\n            }\n        }\n        if( word.length == 0 )\n          \
    \  Left(List())\n        else if( word.length > 0 && word.length <= 255) {\n \
    \           Right(word.split(\" \").length.toLong)\n        } else {\n       \
    \     val splitOnComma = word.split(\",\").length.toLong\n            Right(splitOnComma)\n\
    \        }", "        if (txt.exists(_ == ' ')) {\n            Left(txt.split('\
    \ ').toList)\n        } else {\n            Right(txt.count(_ == ','))\n     \
    \   }", "        val words = txt.split(\"[^a-zA-Z]+\")\n        if (words.size\
    \ > 1) {\n            Right(List(words))\n        } else if (words.isEmpty) {\n\
    \            Left(0)\n        } else {\n            val lowerCaseLetters = words.toList.map(_.toLowerCase)\n\
    \            val evenLetters = lowerCaseLetters.filter(letter => letter % 2 ==\
    \ 0)\n            val odd = lowerCaseLetters.filter(letter => letter % 2 != 0)\n\
    \            if (evenLetters.size == odd.size) {\n                Right(evenLetters.size)\n\
    \            } else {\n                Left(0)\n            }\n        }", " \
    \       val lettersAndOddCounts = (txt split (\" \")).map {\n            s =>\
    \ (s.toLowerCase (), s.length)\n        }.toList\n\n        val counts = lettersAndOddCounts.groupBy\
    \ (_._1).map (_._2).foldLeft (Map[Char, Long]())((counts, c) => counts + (c +\
    \ (1 -> (counts(c._1) % 2))))\n        if (counts contains 'z')\n            Right(lettersAndOddCounts.length)\n\
    \        else if (counts contains 'a')\n            Left(counts('a').toLong.toString\
    \ + \"l\")\n        else\n            Left(counts.length)"]
stop_tokens:
- "\n    }\n"
