language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = ListBuffer[String]()\n        if (txt.contains(\",\")) {\n            val\
    \ words = txt.replace(\",\", \"\").split(\" \");\n            for (w <- words)\
    \ {\n                if (w.trim.isEmpty) {\n                    println(\"warning:\
    \ \" + w + \" is an empty string\")\n                } else {\n              \
    \      list += w\n                }\n            }\n            Right(list.toList)\n\
    \        } else {\n            val words = txt.replace(\"-\", \"\").split(\" \"\
    );\n            for (w <- words) {\n                if (w.trim.isEmpty) {\n  \
    \                  println(\"warning: \" + w + \" is an empty string\")\n    \
    \            } else {\n                    list += w\n                }\n    \
    \        }\n            val lowerCaseLetters = txt.filter(_ >= 'a' && _ <= 'z')\n\
    \            val numbers = lowerCaseLetters.filter(x => x.forall(x => x <= '9'\
    \ && x >= '0')).count\n            Right(numbers)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1sw08_u.scala:25:23\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Right(list.toList)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    List[String]\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph1sw08_u.scala:35:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36mlowerCaseLetters\e[0m = txt.filter(_ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph1sw08_u.scala:36:57\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumbers\e[0m = lowerCaseLetters.filter(\e[36mx\e[0m => x.forall(\e[36mx\e\
    [0m => x <= \e[31m'9'\e[0m && x >= \e[31m'0'\e[0m)).count\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value forall is not a member of\
    \ Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1sw08_u.scala:37:18\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            Right(numbers)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (numbers : (Char => Boolean) => Int)\n\e[31m   |\e[0m      \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ListBuffer[String]()\n        val numUpperLetters = mutable.ListBuffer[String]()\n\
    \        val numLowerLetters = mutable.ListBuffer[String]()\n        for (i<-0\
    \ to txt.length-1) {\n            if (txt(i).isWhitespace) {\n               \
    \ words += txt(i)\n            } else if (txt(i).isLetter) {\n               \
    \ if (txt(i).isUpper) {\n                    numUpperLetters += txt(i)\n     \
    \           } else if (txt(i).isLower) {\n                    numLowerLetters\
    \ += txt(i)\n                }\n            }\n        }\n        if (words.length\
    \ == 0) {\n            return Left(numLowerLetters.reverse.mkString(\",\"))\n\
    \        }\n        if (words.length == 1) {\n            return Right(words.length)\n\
    \        }\n        val lowerCaseLetters = txt.length.toString.toCharArray\n \
    \       val upperCaseLetters = txt.length.toString.toCharArray\n        for (i<-0\
    \ to txt.length-1) {\n            if (txt(i).isLetter) {\n                if (txt(i).isUpper)\
    \ {\n                    upperCaseLetters += txt(i)\n                } else if\
    \ (txt(i).isLower) {\n                    lowerCaseLetters += txt(i)\n       \
    \         }\n            }\n        }\n        if (lowerCaseLetters.length !=\
    \ upperCaseLetters.length + 1) {\n            return Left(numLowerLetters.reverse.mkString(\"\
    ,\"))\n        }\n        if (lowerCaseLetters.length != numLowerLetters.length)\
    \ {\n            return Right(words.length)\n        }\n        if (lowerCaseLetters.mkString(\"\
    \").toLowerCase != numLowerLetters.mkString(\"\").toLowerCase) {\n           \
    \ return Right(words.length)\n        }\n        val result: Long = lowerCaseLetters.length\
    \ - upperCaseLetters.length\n        return Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4axhiq9.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo4axhiq9.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumUpperLetters\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4axhiq9.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumLowerLetters\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4axhiq9.scala:40:37 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    upperCaseLetters += txt(i)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of Array[Char] - did you mean upperCaseLetters.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpo4axhiq9.scala:42:37 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                    lowerCaseLetters += txt(i)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of Array[Char] - did you mean lowerCaseLetters.!=?\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        var ans : Long = 0\n        val lc = txt.count((_:\
    \ Char).toLowerCase)\n        for (wd <- words) {\n            if (wd.indexOf(\"\
    ,\") > -1) {\n                return Left(words)\n            }\n            if\
    \ (wd.indexOf(\"\\n\") > -1) {\n                return Left(words)\n         \
    \   }\n            val l = wd.length\n            ans += (l * (l-1)) / 2\n   \
    \     }\n        return Right(ans)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprjfkr8ir.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlc\e[0m = txt.count((_:\
    \ \e[35mChar\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprjfkr8ir.scala:20:28 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \                \e[33mreturn\e[0m Left(words)\n\e[31m\e[31m   |\e[0m        \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (words : Array[String])\n\e[31m   |\e[0m                            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjfkr8ir.scala:23:28\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mreturn\e\
    [0m Left(words)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Found:    (words : Array[String])\n\
    \e[31m   |\e[0m                            Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list:\
    \ List[String] = new ListBuffer[String]\n        val listOfWords: List[String]\
    \ = new ListBuffer[String]\n        for(x <- txt.toList){\n            x match\
    \ {\n                case x if !x.contains(\",\") => list+=x\n               \
    \ case x if x.contains(\",\") => list+=x\n                case x => listOfWords+=x\n\
    \            }\n        }\n        if(list.isEmpty){\n            Right(list.size)\n\
    \        }\n        else {\n            val wordList: List[String] = list.flatMap(_.split(\"\
    \ \"))\n            val words: List[String] = wordList.filter(_.nonEmpty)\n  \
    \          if(wordList.isEmpty && !wordList.isEmpty){\n                Right(list.size)\n\
    \            }\n            else {\n                val firstList: List[String]\
    \ = list.filter(_.nonEmpty)\n                val firstWords: List[String] = firstList.filter(_.nonEmpty)\n\
    \                val firstLetters: List[String] = firstWords.map(x => x.split(\"\
    \").map(_.toLowerCase).filter(_.contains(\"a\")).map(_.toLowerCase).filter(_.contains(\"\
    b\")).map(_.toLowerCase).filter(_.contains(\"c\")).map(_.toLowerCase).filter(_.contains(\"\
    d\")).map(_.toLowerCase).filter(_.contains(\"e\")).map(_.toLowerCase).filter(_.contains(\"\
    f\")).map(_.toLowerCase).filter(_.contains(\"g\")).map(_.toLowerCase).filter(_.contains(\"\
    h\")).map(_.toLowerCase).filter(_.contains(\"i\")).map(_.toLowerCase).filter(_.contains(\"\
    j\")).map(_.toLowerCase).filter(_.contains(\"k\")).map(_.toLowerCase).filter(_.contains(\"\
    l\")).map(_.toLowerCase).filter(_.contains(\"m\")).map(_.toLowerCase).filter(_.contains(\"\
    n\")).map(_.toLowerCase).filter(_.contains(\"o\")).map(_.toLowerCase).filter(_.contains(\"\
    p\")).map(_.toLowerCase).filter(_.contains(\"q\")).map(_.toLowerCase).filter(_.contains(\"\
    r\")).map(_.toLowerCase).filter(_.contains(\"s\")).map(_.toLowerCase).filter(_.contains(\"\
    t\")).map(_.toLowerCase).filter(_.contains(\"u\")).map(_.toLowerCase).filter(_.contains(\"\
    v\")).map(_.toLowerCase).filter(_.contains(\"w\")).map(_.toLowerCase).filter(_.contains(\"\
    x\")).map(_.toLowerCase).filter(_.contains(\"y\")).map(_.toLowerCase).filter(_.contains(\"\
    z\")).map(_.toLowerCase).filter(_.contains(\"A\")).map(_.toLowerCase).filter(_.contains(\"\
    B\")).map(_.toLowerCase).filter(_.contains(\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4wtrpcvv.scala:36:1322 ---------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mval\e[0m \e[36mfirstLetters\e[0m:\
    \ \e[35mList\e[0m[\e[35mString\e[0m] = firstWords.map(\e[36mx\e[0m => x.split(\e\
    [31m\"\"\e[0m).map(_.toLowerCase).filter(_.contains(\e[31m\"a\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"b\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"c\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"d\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"e\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"f\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"g\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"h\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"i\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"j\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"k\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"l\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"m\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"n\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"o\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"p\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"q\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"r\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"s\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"t\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"u\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"v\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"w\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"x\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"y\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"z\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e[31m\"A\"\e[0m)).map(_.toLowerCase).filter(_.contains(\e\
    [31m\"B\"\e[0m)).map(_.toLowerCase).filter(_.contains(\"\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            "
  stdout: ''
  timestamp: 1660029315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val splitWords\
    \ = txt.split(\" \") match {\n            case Nil => Left(List[String]())\n \
    \           case x => Right(x.length)\n        }\n        splitWords\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvfb9__9s.scala:16:17\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m Nil\
    \ => Left(List[String]())\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e\
    [31m   |\e[0m        Required: Array[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \        where:    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e\
    [0m\n\e[31m   |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m\
    \ \e[35mscala.collection.immutable\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \    pattern type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvfb9__9s.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        splitWords\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31msplitWords\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[List[String], \e\
    [1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[List[String],\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.HashSet[String]()\n        for(word <- txt.split(\" \")){\n      \
    \      if(word.nonEmpty){\n                words += word\n            }\n    \
    \    }\n        if(words.length < 2l){\n            Right(words.length)\n    \
    \    }\n        else{\n            val count = (words.length - 1l) + 1l\n    \
    \        val numLetters = words.map(_.length).sum\n            Right(List(words.length,\
    \ numLetters, count))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppc3mc1zk.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppc3mc1zk.scala:27:22 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            Right(List(words.length, numLetters, count))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Nothing]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    ,\")) {\n            splitWords2(txt)\n        } else if (txt.contains(\" \"))\
    \ {\n            splitWords1(txt)\n        } else {\n            splitWords3(txt)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy8ik4km.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            splitWords2(txt)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: splitWords2\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy8ik4km.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            splitWords1(txt)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Not found: splitWords1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgy8ik4km.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            splitWords3(txt)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: splitWords3\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s\").toList\n        if(words.length==0) Right(words.size)\n\
    \        else if(words.length>1 && words.head.length>1 && words.last.length>1)\
    \ Right(words.size - 1)\n        else {\n            val wordSet = mutable.HashSet[String]()\n\
    \            for(word <- words) {\n                val s = word.split(\"\\\\,\"\
    )\n                if(s.length==1) wordSet += s(0).trim\n                else\
    \ wordSet += s(0).trim \n            }\n            Right(wordSet.toList.size)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_v_3cq76.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val words =\n\
    \        if (txt.length > 0) {\n          txt.split(\"\\\\s+\")\n        } else\
    \ {\n          List(\"\")\n        }\n      if (words.forall(_.length == 0))\n\
    \        Right(words.size)\n      else {\n        val numberWords = words.filter(_.filter(_.isLetter).forall(_.isDigit).count(_\
    \ == true))\n        val letterWords = words.filter(_.filter(_.isLetter).count(_\
    \ == true) % 2 == 1)\n        val letterWordsLen = letterWords.count\n       \
    \ val numbersLen = numberWords.count\n        val allWordsLen = numberWords.size\
    \ + letterWordsLen\n        val wordLengths = words.map(_.length).toArray\n  \
    \      val maxWordLength = wordLengths.max\n        if (numbersLen > letterWordsLen\
    \ || lettersLen > numberWordsLen)\n          Left[List[String], Long](\"Too many\
    \ words with mixed letters and numbers. \" +\n            s\"Number of letters:\
    \ ${lettersLen} and number of numbers: ${numbersLen}\")\n        else\n      \
    \    Right(allWordsLen / maxWordLength)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ldygzni.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mif\e[0m (words.forall(_.length == \e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \     value forall is not a member of Object\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3ldygzni.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        Right(words.size)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value size is not a member of Object\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3ldygzni.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumberWords\e[0m = words.filter(_.filter(_.isLetter).forall(_.isDigit).count(_\
    \ == \e[31mtrue\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value filter is not a member of\
    \ Object\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ldygzni.scala:25:32\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWords\e[0m = words.filter(_.filter(_.isLetter).count(_ == \e[31mtrue\e\
    [0m) % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value filter\
    \ is not a member of Object\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ldygzni.scala:29:32\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mwordLengths\e[0m = words.map(_.length).toArray\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \   value map is not a member of Object\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3ldygzni.scala:33:35 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m            \e[31ms\"Number of letters: \e[0m${lettersLen}\e[31m and number\
    \ of numbers: \e[0m${numbersLen}\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                  Not found: lettersLen\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        if(txt.matches(\"[a-zA-Z]+\")) Left(txt.split(\"\\\\s+\"))\n \
    \       else Right(txt.split(\",\").map( _.toLowerCase).filter(_.toString.length%2==1).length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2urlvp5.scala:16:51\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(txt.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)) Left(txt.split(\e[31m\"\\\\s+\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                          Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var list\
    \ : List[String] = Nil\n        var count = 0\n        for (word <- txt.split(\"\
    \ \")) {\n            if (count % 2 == 1)\n                list ::= word\n   \
    \         else\n                list ::= word.split(\",\")\n            count\
    \ += 1\n        }\n        Either.right(list)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl_0uarwm.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                list ::= word.split(\e[31m\",\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is\
    \ not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl_0uarwm.scala:24:15 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        Either.right(list)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value right is not a member of\
    \ object scala.util.Either\n2 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if(words.length != 3 || words(0) == \"\") Left(words)\n\
    \        else{\n            val evenCounts = words.zipWithIndex.filter(x => x._2\
    \ % 2 == 0).map(x => x._1).length\n            Right(evenCounts)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgixxx3b.scala:16:53\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m(words.length\
    \ != \e[31m3\e[0m || words(\e[31m0\e[0m) == \e[31m\"\"\e[0m) Left(words)\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (words : Array[String])\n\
    \e[31m   |\e[0m                                       Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def buildResult(txt\
    \ : String) : Long = {\n            var result = 0\n            val words = txt.split(\"\
    \\\\s+\")\n            for (word <- words) {\n                if (word.matches(\"\
    [a-z]+\")) {\n                    result += word.split(\"[a-z]\").length\n   \
    \             }\n            }\n            result\n        }\n        if (txt.contains(\"\
    \ \")) {\n            return Left(txt.split(\"\\\\s+\"))\n        } else {\n \
    \           return Right(buildResult(txt))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dz9gr64.scala:26:33\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mreturn\e[0m\
    \ Left(txt.split(\e[31m\"\\\\s+\"\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m                        Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val res =\
    \ txt split \"[^a-zA-Z,]+\" filterNot (_ == \"\")\n        res match {\n     \
    \       case List() | Nil() => Right(0)\n            case xs => Right(xs groupBy\
    \ (_ == ' ').size)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpupd43_gp.scala:17:29 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m List() | Nil() => Right(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m          Wrong number of argument patterns for Nil; expected: (Nothing)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpupd43_gp.scala:18:41 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m xs => Right(xs groupBy (_\
    \ == \e[31m' '\e[0m).size)\n\e[31m\e[31m   |\e[0m                            \
    \             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2 == \e[31m' '\e[0m.\n2 errors found\n"
  stdout: ''
  timestamp: 1660029308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var wordList\
    \ = mutable.ListBuffer[String]()\n        var count = 1\n        for(word <- txt.split(\"\
    \ \")) {\n            wordList += word\n            count += 1\n        }\n  \
    \      if(wordList.length == 1) return Left(wordList)\n        var i = 0\n   \
    \     for((word, count) <- wordList.sliding(2).toList) {\n            if(count.last\
    \ == 0) {\n                for(count <- count.dropRight(1).reverse) {\n      \
    \              if(count == 1) return Right(wordList)\n                    wordList\
    \ += word\n                    count -= 1\n                }\n            }\n\
    \            else {\n                wordList += word\n                count -=\
    \ 2\n                i = 0\n            }\n        }\n        return Left(wordList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj0eouzuc.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var lowCharCount\
    \ = 0\n        var lowCharCounts = scala.collection.mutable.Map[Char, Long]()\n\
    \        var words = ListBuffer[String]()\n        for(i <- 0 until txt.length)\
    \ {\n            if(lowCharCounts.contains(txt(i))) {\n                lowCharCount\
    \ += 1\n                lowCharCounts += (txt(i) -> lowCharCount)\n          \
    \      words += txt(i)\n            } else {\n                val currLowCharCount\
    \ = lowCharCount\n                lowCharCount += 1\n                lowCharCounts\
    \ += (txt(i) -> lowCharCount)\n                words += txt(i)\n             \
    \   if(lowCharCount % 2 == 0) {\n                    words += \",\" + txt(i)\n\
    \                }\n            }\n        }\n        val lowCharCountList = new\
    \ ListBuffer[Long]()\n        for(i <- lowCharCounts.keys) {\n            lowCharCountList\
    \ += lowCharCounts(i)\n        }\n        if (lowCharCount == 1) {\n         \
    \   Right(words.length)\n        } else {\n            Left(words.length, lowCharCountList)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxts9gm1.scala:22:28\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                words += txt(i)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    Char\n\e[31m   |\e[0m                       \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxts9gm1.scala:27:28\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                words += txt(i)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    Char\n\e[31m   |\e[0m                       \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxts9gm1.scala:40:17\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            Left(words.length,\
    \ lowCharCountList)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (Int, scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m              Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.isEmpty) Right(0) else {\n      \
    \      val letters = txt.toLowerCase.grouped(26).toList\n            val chars\
    \ = txt.toLowerCase.map(c => if (letters.contains(c.toInt)) c.toInt else -1)\n\
    \            val counts = chars.groupBy(x => x)\n            val odd = counts.filter(x\
    \ => x._1 % 2 == 1).length\n            Right(odd)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_nn85_j.scala:20:56 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = counts.filter(\e\
    [36mx\e[0m => x._1 % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value length is not a member of Map[Int, IndexedSeq[Int]]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\"\"\\W+\"\"\").filter(_.nonEmpty)\n        var res = Nil\n  \
    \      var count = 0\n        var i = 0\n        while (i < words.length) {\n\
    \            if (words.exists(_.equalsIgnoreCase(words(i)))) {\n             \
    \   count += 1\n                i += 1\n            } else {\n               \
    \ val n = words(i).toLowerCase.indexOf(\"abc\") + 1\n                res :+= words(i\
    \ until (i + n))\n                i = i + n\n                count = 0\n     \
    \       }\n        }\n        res match {\n            case Nil => Right(count)\n\
    \            case _ => Left(res)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7y6ixcuh.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                res :+= words(i until (i + n))\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not a member\
    \ of object scala.collection.immutable.Nil - did you mean Nil.:+?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7y6ixcuh.scala:25:30 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                res :+= words(i until (i + n))\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    Range\n\e[31m   |\e[0m              \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val word\
    \ = txt.split(\"\\\\s+\") // split on whitespaces\n        if (word.nonEmpty)\
    \ Right(word.mkString(\",\"))\n        else Left(word.map(_.length).filter(_ %\
    \ 2 != 0).sum.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dava57o.scala:16:46\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (word.nonEmpty)\
    \ Right(word.mkString(\e[31m\",\"\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Found:    String\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dava57o.scala:17:60\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m Left(word.map(_.length).filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).sum.toLong)\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordList\
    \ = mutable.ListBuffer[String]()\n        val lowerCaseLetters = mutable.ListBuffer[Int]()\n\
    \        val words = mutable.ListBuffer[String]()\n        var currentWord = \"\
    \"\n        var currentLowerCaseLetters = 0 // in alphabetical order not counting\
    \ lower case\n        for(i <- 0 until txt.length) {\n            if(txt(i).isLetter)\
    \ {\n                if(currentLowerCaseLetters % 2 != 0) {\n                \
    \    lowerCaseLetters.append(txt(i).toLowerCase)\n                    currentLowerCaseLetters\
    \ = currentLowerCaseLetters + 1\n                } else {\n                  \
    \  words.append(currentWord)\n                    currentWord = \"\"\n       \
    \             currentLowerCaseLetters = currentLowerCaseLetters + 1\n        \
    \        }\n            } else {\n                currentWord = currentWord +\
    \ txt(i)\n            }\n        }\n        if(currentWord.length > 0) words.append(currentWord)\n\
    \        if(lowerCaseLetters.size == 0) Right(words.size)\n        else {\n  \
    \          val odd = lowerCaseLetters.take(lowerCaseLetters.length-1)\n      \
    \      Right(List(words.size, odd.size))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_epwnb0.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_epwnb0.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseLetters\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_epwnb0.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj_epwnb0.scala:38:22\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m            Right(List(words.size,\
    \ odd.size))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[Nothing]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val splitWords = words.toSet.toList.filter(_.isLetter).toSet.size\n\
    \        val splitLetters = words.filter(_.isLetter).toSet.toList.filter(_.isLetter).toSet.size\n\
    \        val noWhitespaces = splitWords % 2\n        val noCommas = splitLetters\
    \ % 2\n        val noOddOrder = splitLetters.toSet.filter(_ % 2 != 0).size\n \
    \       if (noWhitespaces) {\n            Left(splitWords)\n        } else if\
    \ (noCommas) {\n            Right(splitLetters)\n        } else {\n          \
    \  Left(noOddOrder)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryvk1ov8.scala:16:53 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msplitWords\e[0m = words.toSet.toList.filter(_.isLetter).toSet.size\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryvk1ov8.scala:17:42\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36msplitLetters\e[0m = words.filter(_.isLetter).toSet.toList.filter(_.isLetter).toSet.size\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryvk1ov8.scala:17:74\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36msplitLetters\e[0m = words.filter(_.isLetter).toSet.toList.filter(_.isLetter).toSet.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpryvk1ov8.scala:20:38 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoOddOrder\e[0m = splitLetters.toSet.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value toSet is not a member\
    \ of Int - did you mean splitLetters.toInt?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpryvk1ov8.scala:21:12 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mif\e[0m (noWhitespaces) {\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (noWhitespaces\
    \ : Int)\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpryvk1ov8.scala:22:17 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        "
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt ==\
    \ null || txt.length == 0) return Right(List.empty)\n        var result = new\
    \ mutable.ListBuffer[String]()\n        for(c <- txt)\n          if(c.isLetter)\
    \ result.append(c)\n          else result.append(\",\")\n        result.last.zipWithIndex.filter(_._1\
    \ % 2 == 1).count\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9saqe0o4.scala:15:57\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (txt ==\
    \ \e[31mnull\e[0m || txt.length == \e[31m0\e[0m) \e[33mreturn\e[0m Right(List.empty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \      Found:    List[Nothing]\n\e[31m   |\e[0m                              \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9saqe0o4.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mvar\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var count\
    \ : Long = 0\n        var lastWord : String = \"\"\n        var words : List[String]\
    \ = Nil\n        for(word <- txt.toLowerCase){\n            if(lastWord.isEmpty\
    \ && word.isWhitespace) {\n                lastWord = word\n                words.append(word)\n\
    \            }\n            else if(lastWord.isEmpty && word.isWhitespace) {\n\
    \                count -= 1\n                lastWord = word\n               \
    \ words.append(word)\n            }\n            else if(lastWord.isEmpty && !word.isWhitespace){\n\
    \                count += 2\n                lastWord = word\n               \
    \ words.append(word)\n            }\n            else {\n                count\
    \ += 2\n                lastWord = word\n                words.append(word)\n\
    \            }\n        }\n        if(words.length < 1)\n            return Left(words)\n\
    \        else if(words.length < 2)\n            return Right(count)\n        else\n\
    \            return Right(words.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkilhxzq6.scala:20:27\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                lastWord = word\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (word : Char)\n\e[31m   |\e[0m            \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkilhxzq6.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                words.append(word)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[String] - did you mean\
    \ List[String].appended?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkilhxzq6.scala:25:27\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                lastWord = word\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (word : Char)\n\e[31m   |\e[0m            \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkilhxzq6.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                words.append(word)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[String] - did you mean\
    \ List[String].appended?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkilhxzq6.scala:30:27\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                lastWord = word\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (word : Char)\n\e[31m   |\e[0m            \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkilhxzq6.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                words.append(word)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member"
  stdout: ''
  timestamp: 1660029313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      if(txt.contains(\"\
    \ \"))\n        Left(txt.split(\" \").map(s => s.trim))\n      else if(txt.contains(\"\
    ,\"))\n        Right(txt.split(\",\").map(s => s.trim).length)\n      else\n \
    \       Left(0)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7abxosv.scala:16:13\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Left(txt.split(\e[31m\"\
    \ \"\e[0m).map(\e[36ms\e[0m => s.trim))\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m             Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7abxosv.scala:20:13 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        Left(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \          ^\e[0m\n\e[31m   |\e[0m             Found:    (\e[31m0\e[0m : Int)\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var result\
    \ = new mutable.ArrayBuffer[String]();\n        var index = 0;\n        val words\
    \ = new mutable.ArrayBuffer[String]();\n        // go through the words and add\
    \ them to the result list.\n        for(word <- txt){\n            if(word.isEmpty)\
    \ continue;\n            if(words.isEmpty && index > 0) result.add(\",\")\n  \
    \          result += (word);\n            words += word;\n            index++;\n\
    \        }\n        // if the number of words are odd, add the last word\n   \
    \     if(words.isEmpty && words.size > 1) result += words(words.size - 1)\n  \
    \      // if the number of words are even, add the first word and the number of\
    \ words - 2\n        if(words.isEmpty && words.size < 2) result += words.take(words.size\
    \ - 2) + \"l\"\n        // Either with the result or with the number of words\n\
    \        Left(result)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7opokk6n.scala:24:19 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            index++;\n\e[31m\e[31m   |\e[0m         \
    \          ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7opokk6n.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]();\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7opokk6n.scala:17:24 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mString\e[0m]();\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7opokk6n.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(word.isEmpty) continue;\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value isEmpty is not a member of Char\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp7opokk6n.scala:20:29 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mif\e[0m(word.isEmpty) continue;\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \              Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val a = if\
    \ (txt.contains(\",\")) txt.split(\",\") else List(txt)\n        val b = (a map\
    \ {x => x.trim().toLowerCase()}) filterNot (_.isEmpty)\n        val c = b.map(x\
    \ => if (x.count(_ == 'a') = 1) \"a\" else if (x.count(_ == 'b') = 1) \"b\" else\
    \ \"c\").distinct\n        if (c.size == 26) Right(c.size)\n        else Left(c)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphfes3k8d.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = (a map {\e[36mx\e\
    [0m => x.trim().toLowerCase()}) filterNot (_.isEmpty)\n\e[31m\e[31m   |\e[0m \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                 value map is not\
    \ a member of Object\n1 error found\n"
  stdout: ''
  timestamp: 1660029321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val (words,_)\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left[List[String]](List())\n\
    \        else {\n            val lowerCase = words.toList.map(_.toLowerCase)\n\
    \            val letterCount = lowerCase.foldLeft(0L)((n,s) => n + s.count(_ >=\
    \ 'a' && _ < 'z').toLong)\n            Left(if (letterCount % 2 == 1) words.toList\
    \ else List())\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgyoa9p4.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (words.length == \e[31m0\e[0m)\
    \ Left[\e[35mList\e[0m[\e[35mString\e[0m]](List())\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value length is not a member\
    \ of Any\n\e[31m\e[31m-- [E023] Syntax Error: /tmp/tmpmgyoa9p4.scala:16:35 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (words.length == \e[31m0\e[0m)\
    \ Left[\e[35mList\e[0m[\e[35mString\e[0m]](List())\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      Not enough type arguments for scala.util.Left.apply[A, B]\n\e[31m   |\e\
    [0m               expected: [A, B]\n\e[31m   |\e[0m               actual:   [\e\
    [35mList\e[0m[\e[35mString\e[0m]]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmgyoa9p4.scala:18:34 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mval\e[0m \e[36mlowerCase\e[0m = words.toList.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value toList is not a member of Any\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmgyoa9p4.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Left(\e[33mif\e[0m (letterCount % \e[31m2\e\
    [0m == \e[31m1\e[0m) words.toList \e[33melse\e[0m List())\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     value toList is not a member of Any\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val words =\
    \ mutable.ListBuffer[String]()\n      val split = txt.split(\" \").map(_.trim).toList\n\
    \      for (word <- split) {\n        if (word.isEmpty) {\n          return Right(words.map(_.toString.length))\n\
    \        }\n        words ++= word.split(\",\")\n      }\n      val alphabet =\
    \ mutable.ListBuffer[Char]()\n      for (c <- ('A' to 'Z')) {\n        alphabet\
    \ += c\n      }\n      val result = words.map(word => {\n        val lowercase\
    \ = word.map(c => c + 'a').foldLeft(0)((x, y) => x * 26 + y)\n        if (lowercase\
    \ % 2 == 0) {\n          return word\n        } else {\n          word.split(\"\
    ,\")\n        }\n      })\n      Right(result.filter(_.length).map(_.length).reduceLeft(_\
    \ + _))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ol6ufnh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2ol6ufnh.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      \e[33mval\e[0m \e[36malphabet\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.isEmpty)\
    \ return Left(List[String]())\n        val words = txt.split(\" \").filter(_.nonEmpty)\n\
    \        if (words.isEmpty) return Right(words.size)\n        val list = words.filter(_.toLowerCase\
    \ == _.toLowerCase).map(_.toUpperCase + _)\n        val evenList = list.filter(_.toUpperCase\
    \ == \"A\" * 2)\n        if (evenList.size % 2 == 0) return Right(evenList.size)\n\
    \        val lowLetters = list.filter(_.toUpperCase == \"A\" * 2)\n        val\
    \ upperLetters = list.filter(_.toUpperCase == \"A\" * 2)\n        val odd = lowLetters.takeWhile(_\
    \ % 2 == 1).size\n        if (odd.isDefined) return Right(odd.get)\n        if\
    \ (upperLetters.isEmpty) return Right(upperLetters.size)\n        val even = upperLetters.filter(_.toUpperCase\
    \ == \"A\" * 2)\n        val high = even.filter(_.toUpperCase == \"A\" * 2)\n\
    \        val evenOdd = even.takeWhile(_ % 2 == 1).size\n        if (evenOdd.isDefined)\
    \ return Right(evenOdd.get)\n        if (high.isDefined) return Right(high.get)\n\
    \        Right(list.size)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpisgf1r43.scala:18:32 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_.toLowerCase\
    \ == _.toLowerCase).map(_.toUpperCase + _)\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpisgf1r43.scala:18:68 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_.toLowerCase\
    \ == _.toLowerCase).map(_.toUpperCase + _)\n\e[31m\e[31m   |\e[0m            \
    \                                                        ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- Error: /tmp/tmpisgf1r43.scala:18:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = words.filter(_.toLowerCase\
    \ == _.toLowerCase).map(_.toUpperCase + _)\n\e[31m\e[31m   |\e[0m            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lines\
    \ = txt.split(\"\\\\s\")\n        val wordsWithSpaces = lines.flatMap(line =>\
    \ line.split(\" \"))\n        val commasWithSpaces = lines.flatMap(line => line.split(\"\
    ,\"))\n        val wordsWithCommas = lines.flatMap(line => line.split(\";\"))\n\
    \        val lowerCaseWords = lines.map(line => line.split(\"[a-z]\")).map(_.map(_.toLowerCase)).flatten\n\
    \        val alphabet = ArrayBuffer('a' to 'z')\n        val characters = ArrayBuffer('a'\
    \ to 'z').map(_.toInt)\n        val numbers = ArrayBuffer('0' to '9').map(_.toInt)\n\
    \n        val odd = (characters zip odd) map { case (s,i) => s if i % 2 == 1 }\n\
    \        val even = (characters zip even) map { case (s,i) => s if i % 2 == 0\
    \ }\n\n        val oddishWords = wordsWithSpaces.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishWords = wordsWithSpaces.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishWords = wordsWithCommas.filter(w => !even.contains(w.toLowerCase)).size\n\
    \        val oddishCommas = commasWithSpaces.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishCommas = commasWithSpaces.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishCommas = commasWithSpaces.filter(w => !even.contains(w.toLowerCase)).size\n\
    \        val oddishLetters = lowerCaseWords.filter(w => odd.contains(w.toLowerCase)).size\n\
    \        val evendishLetters = lowerCaseWords.filter(w => even.contains(w.toLowerCase)).size\n\
    \        val unevendishLetters = lowerCaseWords.filter(w => !even.contains(w.toLowerCase)).size\n\
    \n        val oddishNumbers = numbers.filter(w => odd.contains(w)).size\n    \
    \    val evendishNumbers = numbers.filter(w => even.contains(w)).size\n      \
    \  val unevendishNumbers = numbers.filter(w => !even.contains(w)).size\n\n   \
    \     if (oddishWords == words.size) {\n            Right(oddishWords)\n     \
    \   } else if (evendishWords == words.size) {\n            Right(evendishWords)\n\
    \        } else if (unevendishWords == words.size) {\n            Right(unevendishWords)\n\
    \        } else if (oddishCommas == words.size) {\n            Right(oddishCommas\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyr8bnlw1.scala:24:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = (characters zip\
    \ odd) map { \e[33mcase\e[0m (s,i) => s \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m1\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                                 \
    \            ^^\e[0m\n\e[31m   |\e[0m                                end of statement\
    \ expected but 'if' found\n\e[31m\e[31m-- Error: /tmp/tmpyr8bnlw1.scala:25:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36meven\e[0m = (characters zip even) map { \e[33mcase\e[0m\
    \ (s,i) => s \e[33mif\e[0m i % \e[31m2\e[0m == \e[31m0\e[0m }\n\e[31m\e[31m  \
    \ |\e[0m                                                               ^^\e[0m\n\
    \e[31m   |\e[0m                                end of statement expected but 'if'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyr8bnlw1.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyr8bnlw1.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyr8bnlw1.scala:21:55 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcharacters\e[0m = ArrayBuffer(\e[31m'a'\e\
    [0m to \e[31m'z'\e[0m).map(_.toInt)\n\e[31m\e[31m   |\e[0m                   \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is\
    \ not a member of scala.collection.immutable.NumericRange.Inclusive[Char], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyr8bnlw1.scala:22:52 ----------"
  stdout: ''
  timestamp: 1660029325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val splitWords\
    \ = scala.collection.mutable.ListBuffer[String]()\n        for(line <- txt.split(\"\
    [,]\")){\n            if(line.trim.isEmpty){\n                continue\n     \
    \       }\n            val splits = line.split(\" \")\n            for(split <-\
    \ splits){\n                splitWords += split.toLowerCase\n            }\n \
    \       }\n        val uniqueWords = splitWords.distinct\n        if(uniqueWords.isEmpty){\n\
    \            Left(List.empty)\n        }\n        else {\n            Right(uniqueWords.size.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujbr757f.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.length()\
    \ == 0) Left(Nil)\n        else Right(txt.filter(_.isWhitespace).toList).flatMap(_.toLowerCase\
    \ -> _)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7ss_z44x.scala:16:62 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m Right(txt.filter(_.isWhitespace).toList).flatMap(_.toLowerCase\
    \ -> _)\n\e[31m\e[31m   |\e[0m                                               \
    \               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        //TODO: Complete\
    \ the code\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptt3ax5c9.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36msplitWords\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mEither\e[0m[\e[35mList\e[0m[\e\
    [35mString\e[0m], \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                      Required: Either[List[String], Long]\n\e[31m15 |\e[0m \
    \       \e[34m//TODO: Complete the code\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        try {\n \
    \           val words = txt.split(\"\\\\s+\");\n            if (words.length ==\
    \ 0) Left(List[String]())\n            else if (words.length == 1) Right(words.length)\n\
    \            else Left(words);\n        } catch {\n            case ex : Exception\
    \ => {\n                println(\"Exception occurred: \" + ex.getMessage());\n\
    \                Left(List[String]())\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8265_20e.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m Left(words);\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (words : Array[String])\n\e[31m   |\e[0m           \
    \           Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt.trim().split(\"\
    \\\\s+\")\n            .map(_.toLowerCase)\n            .map(_.filter(x => !x.isEmpty))\n\
    \            .map(_.split(\",\"))\n            .map(a => a.count(_ % 2 == 0)).leftMap(_\
    \ % 2)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptcamfpto.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            .map(_.filter(x => !x.isEmpty))\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value isEmpty is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptcamfpto.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            .map(a => a.count(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m)).leftMap(_ % \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\",\")\n        if (words.length == 0) Right(txt.length)\n     \
    \   else if (words.length == 1) {\n            if (words(0).equals(\"\")) Right(txt.length)\n\
    \            else Left(words)\n        }\n        else Left(words.map(s => s.replaceAll(\"\
    \\\\s\", \"\").toLowerCase).toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplakebnye.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (words : Array[String])\n\e[31m   |\e[0m           \
    \           Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var chars\
    \ = s.chars\n        var counter = s.count(i => i != ' ')\n        // if there\
    \ is no whitespaces in text\n        if (counter <= 0)\n            Right(counter)\n\
    \        // if there are whitespaces in text\n        else {\n            // then\
    \ split on comma\n            if (counter == chars.length)\n                Right(counter)\n\
    \            // else split on whitespace\n            else {\n               \
    \ while (counter > 0) {\n                    if (chars[counter - counter - 1]\
    \ == ',')\n                        Right(counter)\n                    else {\n\
    \                        chars = chars.dropRight(1)\n                        counter\
    \ = s.count(i => i != ' ')\n                    }\n                }\n       \
    \         Right(counter)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3bxbj8_.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mchars\e[0m = s.chars\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3bxbj8_.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e\
    [36mcounter\e[0m = s.count(\e[36mi\e[0m => i != \e[31m' '\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3bxbj8_.scala:28:48\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    \e[33mif\e\
    [0m (chars[\e[35mcounter\e[0m \e[35m-\e[0m \e[35mcounter\e[0m \e[35m-\e[0m \e\
    [31m1\e[0m] == \e[31m','\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                   Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp3bxbj8_.scala:32:34 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                        counter = s.count(\e[36mi\e[0m =>\
    \ i != \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \  ^\e[0m\n\e[31m   |\e[0m                                  Not found: s\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsWithSpace\
    \ = txt splitBy (c => c == ' ')\n        val wordsWithCommas = txt splitBy (c\
    \ => c == ',')\n        val wordsWithLetters = wordsWithSpace.length + wordsWithCommas.length\n\
    \        wordsWithLetters.toEither match {\n            case Left(list) =>\n \
    \               Right(list)\n            case Right(list) =>\n               \
    \ Right(list)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidn75n1r.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsWithSpace\e[0m = txt\
    \ splitBy (\e[36mc\e[0m => c == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value splitBy is\
    \ not a member of String - did you mean txt.split?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpidn75n1r.scala:16:34 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCommas\e[0m = txt splitBy\
    \ (\e[36mc\e[0m => c == \e[31m','\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value splitBy is not a\
    \ member of String - did you mean txt.split?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpidn75n1r.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                Right(list)\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                      Not found: list\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidn75n1r.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                Right(list)\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ list\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.isEmpty)\
    \ Left(Nil)\n        else Right(txt.split(\" \").map(_.toLowerCase).filter(_.contains(\"\
    ,\")).length)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswa_tuz0.scala:19)\n\tat Problem.main(tmpswa_tuz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.MutableList[String]()\n        val charMap = new mutable.HashMap[String,\
    \ Int]()\n        val words = scala.util.Try{txt.split(\" |,\").toList}.getOrElse(mutable.ListBuffer(\"\
    abcdef\")).map(_.toChar).toSet\n\n        for(i <- charMap.keys) if(charMap(i).isEven)\
    \ words += i\n\n        if(words.isEmpty) Either.Right(words.length)\n       \
    \ else\n            if(words.size() > 26) {\n                Either.Left(words.size)\n\
    \            } else {\n                Either.Right(words.size)\n            }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmf4u7mo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = scala.util.Try{txt.split(\e\
    [31m\" |,\"\e[0m).toList}.getOrElse(mutable.ListBuffer(\e[31m\"abcdef\"\e[0m)).map(_.toChar).toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwords is already defined as \e[33mvalue\e[0m \e[35mwords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxmf4u7mo.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxmf4u7mo.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxmf4u7mo.scala:21:33 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mif\e[0m(words.isEmpty) Either.Right(words.length)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \          value Right is not a member of object scala.util.Either\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxmf4u7mo.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                Either.Left(words.size)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue Left is not a\
    \ member of object scala.util.Either - did you mean Either.wait?\n\e[31m\e[31m--\
    \ [E008] Not Found Error"
  stdout: ''
  timestamp: 1660029325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsWithCommas\
    \ = txt.split(\"\"\", |,\"\"\")\n        if (wordsWithCommas.length == 0)\n  \
    \          Left(List(txt))\n        else if (wordsWithCommas.length == 1)\n  \
    \          Right(wordsWithCommas(0).length)\n        else\n            Left(wordsWithCommas)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu92yvm60.scala:21:17\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(wordsWithCommas)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \               Found:    (wordsWithCommas : Array[String])\n\e[31m   |\e[0m \
    \                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lw =\
    \ txt.filter(_.isLetter).length\n        val comma = txt.filter(_.isLetter).count(_\
    \ == ',')\n        val odd = (txt.length - lw + comma) % 2\n        val txt2 =\
    \ txt.flatMap(_.toString.split(\"\\\\W+\")).toList\n        if (lw == txt2.length)\n\
    \            Right(txt2)\n        else if (comma == txt2.length)\n           \
    \ Right(txt2.map(_.toLowerCase))\n        else if (odd < txt2.length)\n      \
    \      Left(txt2.take(txt2.length - (odd * 2)))\n        else\n            Left(txt2.map(_.toLowerCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv6a78t1m.scala:18:23 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtxt2\e[0m = txt.flatMap(_.toString.split(\e\
    [31m\"\\\\W+\"\e[0m)).toList\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mflatMap\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m \
    \  |\e[0m (f: Char => String): String\n\e[31m   |\e[0m [B](f: Char => IterableOnce[B]):\
    \ IndexedSeq[B]\n\e[31m   |\e[0mmatch arguments (Char => Array[String])\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val r = txt.split\n\
    \        val evens = r.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\"\
    \ || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" ||\n            _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" ||\n            _.toLowerCase == \"j\" ||\
    \ _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" ||\
    \ _.toLowerCase == \"n\" ||\n            _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" ||\n            _.toLowerCase == \"u\" ||\
    \ _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" ||\
    \ _.toLowerCase == \"y\" || _.toLowerCase == \"z\").length / 2\n        val odds\
    \ = r.filter(_.toLowerCase != \"a\" && _.toLowerCase != \"b\" && _.toLowerCase\
    \ != \"c\" && _.toLowerCase != \"d\" &&\n            _.toLowerCase != \"e\" &&\
    \ _.toLowerCase != \"f\" && _.toLowerCase != \"g\" && _.toLowerCase != \"h\" &&\
    \ _.toLowerCase != \"i\" &&\n            _.toLowerCase != \"j\" && _.toLowerCase\
    \ != \"k\" && _.toLowerCase != \"l\" && _.toLowerCase != \"m\" && _.toLowerCase\
    \ != \"n\" &&\n            _.toLowerCase != \"o\" && _.toLowerCase != \"p\" &&\
    \ _.toLowerCase != \"q\" && _.toLowerCase != \"r\" && _.toLowerCase != \"s\" &&\
    \ _.toLowerCase != \"t\" &&\n            _.toLowerCase != \"u\" && _.toLowerCase\
    \ != \"v\" && _.toLowerCase != \"w\" && _.toLowerCase != \"x\" && _.toLowerCase\
    \ != \"y\" && _.toLowerCase != \"z\").length\n        Either.both(List(evens,\
    \ odds))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpjyys2b63.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = txt.split\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload.\
    \ The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mboth match\
    \ expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyys2b63.scala:26:15\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        Either.both(List(evens,\
    \ odds))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ both is not a member of object scala.util.Either - did you mean Either.cond?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val letters:\
    \ List[Char] = txt.toLowerCase diff List(' ')\n      if (letters.isEmpty) Left(Nil)\
    \ else {\n        if (letters.filter(c => c == 'a' || c == 'b' || c == 'c' ||\
    \ c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c ==\
    \ 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z').isEmpty) Right(0) else {\n     \
    \     if (letters.filter(c => c >= 'a' && c <= 'z').length == 1) Right(0) else\
    \ {\n            if (letters.filter(c => c >= 'A' && c <= 'Z').length == 1) Right(0)\
    \ else {\n              if (letters.filter(c => c >= '0' && c <= '9').length ==\
    \ 1) Right(0) else {\n                if (letters.filter(c => c >= 'a' && c <=\
    \ 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9').length == 1) Right(0) else\
    \ {\n                  if (letters.filter(c => c >= 'A' && c <= 'Z' || c >= '0'\
    \ && c <= '9').length == 1) Right(0) else {\n                    if (letters.filter(c\
    \ => c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c\
    \ >= 'A' && c <= 'Z').length == 1) Right(0) else {\n                      Right(letters.length)\n\
    \                    }\n                  }\n                }\n             \
    \ }\n            }\n          }\n        }\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqv0qjga_.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mletters\e\
    [0m: \e[35mList\e[0m[\e[35mChar\e[0m] = txt.toLowerCase diff List(\e[31m' '\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    String\n\e[31m \
    \  |\e[0m                                Required: List[Char]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = txt.split(\" \").toList\n        if (list.isEmpty) {\n            Left(List[String]())\n\
    \        } else {\n            val list2 = list.map(_.toLowerCase).toList\n  \
    \          val list3 = list2.filter(x => !x.contains(\",\"))\n            val\
    \ list4 = list3.filter(x => (x % 2) == 0)\n            val list5 = list4.filter(x\
    \ => x >= ord('A') && x <= ord('z'))\n            val list6 = list5.filter(x =>\
    \ (x - ord('A') + 1) % (x - ord('A')) == 0)\n            if (list6.isEmpty) {\n\
    \                Right(list5.size)\n            } else {\n                Right(list6.sum)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsnov7rbc.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlist4\e[0m = list3.filter(\e\
    [36mx\e[0m => (x % \e[31m2\e[0m) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                      ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnov7rbc.scala:22:47\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlist5\e[0m = list4.filter(\e[36mx\e[0m => x >= ord(\e[31m'A'\e[0m) &&\
    \ x <= ord(\e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m                           \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \                Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsnov7rbc.scala:22:64 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mlist5\e[0m = list4.filter(\e[36mx\e[0m =>\
    \ x >= ord(\e[31m'A'\e[0m) && x <= ord(\e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                ^^^\e[0m\n\e\
    [31m   |\e[0m                                                          Not found:\
    \ ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsnov7rbc.scala:23:45\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlist6\e[0m = list5.filter(\e[36mx\e[0m => (x - ord(\e[31m'A'\e[0m) + \e\
    [31m1\e[0m) % (x - ord(\e[31m'A'\e[0m)) == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixin"
  stdout: ''
  timestamp: 1660029326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.length\
    \ == 0) {\n            Right(List[String]())\n        } else if (txt.chars.forall(_.isSpace))\
    \ {\n            val list = txt.split(\"\")\n            val sortedList: List[String]\
    \ = list.sortWith(_.toLowerCase < _.toLowerCase).map(_.toString).toList\n    \
    \        val lowercaseList: List[String] = list.sortWith(_.toLowerCase < _.toLowerCase).map(_.toLowerCase).toList\n\
    \            val uniqueLettersSortedList: List[String] = list.filter(x => !list.contains(x.toLowerCase)).sortWith(_.toLowerCase\
    \ < _.toLowerCase).toList\n            val evenCountSortedList: List[String] =\
    \ list.groupBy(x => x.toLowerCase).map(x => (x._1, x._2.length.toLong / 2)).toList\n\
    \            val oddCountSortedList: List[String] = list.groupBy(x => x.toLowerCase).map(x\
    \ => (x._1, x._2.length.toLong / 2)).filter(x => x._2.isEven).toList\n       \
    \     Right(List.fill(sortedList.length)(sortedList))\n        } else if (txt.chars.forall(_.isSpace))\
    \ {\n            val list = txt.split(\"\")\n            val sortedList: List[String]\
    \ = list.sortWith(_.toLowerCase < _.toLowerCase).map(_.toString).toList\n    \
    \        Right(List.fill(sortedList.length)(sortedList))\n        } else {\n \
    \           val list = txt.split(\",\").map(_.toLowerCase).toList\n          \
    \  val uniqueLettersSortedList: List[String] = list.filter(x => !list.contains(x.toLowerCase)).sortWith(_.toLowerCase\
    \ < _.toLowerCase).toList\n            val evenCountSortedList: List[String] =\
    \ list.groupBy(x => x.toLowerCase).map(x => (x._1, x._2.length.toLong / 2)).toList\n\
    \            val oddCountSortedList: List[String] = list.groupBy(x => x.toLowerCase).map(x\
    \ => (x._1, x._2.length.toLong / 2)).filter(x => x._2.isEven).toList\n       \
    \     Right(List.fill(uniqueLettersSortedList.length)(uniqueLettersSortedList))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuh6f93k0.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(List[\e[35mString\e\
    [0m]())\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    List[String]\n\e[31m   |\e[0m            \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuh6f93k0.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        } \e[33melse\e[0m\
    \ \e[33mif\e[0m (txt.chars.forall(_.isSpace)) {\n\e[31m\e[31m   |\e[0m       \
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue forall is not a member\
    \ of java.util.stream.IntStream - did you mean IntStream.forEach?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuh6f93k0.scala:22:126 -------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenCountSortedList\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = list.groupBy(\e[36mx\e[0m => x.toLowerCase).map(\e\
    [36mx\e[0m => (x._1, x._2.length.toLong / \e[31m2\e[0m)).toList\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    List[\e\
    [1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e\
    [1m\e[31m)\e[0m]\n\e[31m   |\e[0m                                          Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuh6f93k0.scala:23:142\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCountSortedList\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = list.groupBy(\e\
    [36mx\e[0m => x.toLowerCase).map(\e[36mx\e[0m => (x._1, x._2.length.toLong / \e\
    [31m2\e[0m)).filter(\e[36mx\e[0m => x._2.isEven).toList\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                             ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660029331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = (1 to 26).map(c => c +: c.toString).toList\n        if (txt.trim.isEmpty)\
    \ Right(list)\n        else txt match {\n            case \"_\" => Right(list)\n\
    \            case \",\" => Right(list.size)\n            case _ => Right(list.filter(_\
    \ % 2).toList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dk1ynvx.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (txt.trim.isEmpty)\
    \ Right(list)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (list : List[IndexedSeq[AnyVal]])\n\
    \e[31m   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dk1ynvx.scala:18:30 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31m\"_\"\e[0m => Right(list)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (list : List[IndexedSeq[AnyVal]])\n\e\
    [31m   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6dk1ynvx.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => Right(list.filter(_\
    \ % \e[31m2\e[0m).toList)\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of IndexedSeq[AnyVal],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val str =\
    \ new StringBuilder()\n        for(i <- 0 until txt.length){\n            str.append(txt(i))\n\
    \            if(i == txt.length - 1)\n                Right(str.toString().split(\"\
    \ \").length)\n            else\n                Left(str.toString().split(\"\
    \ \"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20tahlyi.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <-\
    \ \e[31m0\e[0m until txt.length){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Either[List[String],\
    \ Long]\n\e[31m17 |\e[0m            str.append(txt(i))\n\e[31m18 |\e[0m      \
    \      \e[33mif\e[0m(i == txt.length - \e[31m1\e[0m)\n\e[31m19 |\e[0m        \
    \        Right(str.toString().split(\e[31m\" \"\e[0m).length)\n\e[31m20 |\e[0m\
    \            \e[33melse\e[0m\n\e[31m21 |\e[0m                Left(str.toString().split(\e\
    [31m\" \"\e[0m))\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = new mutable.MutableList[String]()\n        for (word <- txt.toLowerCase().split(\"\
    \ \")) {\n            if (word.length > 0) {\n                result.add(word)\n\
    \            }\n        }\n        if (result.isEmpty) {\n            return Right(result.size)\n\
    \        }\n        val result = result.mkString(\",\")\n        if (result.length\
    \ % 2 == 0) {\n            return Right(result.length)\n        }\n        return\
    \ Left(result)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc86r6rq4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.mkString(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpc86r6rq4.scala:15:25 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        var words = txt.split(\"\\\\s+\");\n        var wordLength\
    \ = 0;\n        for( w <- words){\n            wordLength += w.length +2;\n  \
    \      }\n        if(words.length % 2 == 0) {\n            val evens = words.filter(w\
    \ => w.length == wordLength % 2).length\n            val odds = words.filter(w\
    \ => w.length == wordLength % 2).filter(w => w == \"a\" || w == \"b\" || w ==\
    \ \"c\" || w == \"d\" || w == \"e\" || w == \"f\" || w == \"g\" || w == \"h\"\
    \ || w == \"i\" || w == \"j\" || w == \"k\" || w == \"l\" || w == \"m\" || w ==\
    \ \"n\" || w == \"o\" || w == \"p\" || w == \"q\" || w == \"r\" || w == \"s\"\
    \ || w == \"t\" || w == \"u\" || w == \"v\" || w == \"w\" || w == \"x\" || w ==\
    \ \"y\" || w == \"z\").length\n            return Right(words.length - evens)\n\
    \        } else {\n            val odd = words.filter(w => w.length == wordLength\
    \ % 2).length\n            return Right(odd)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3lqvq0p.scala:31)\n\tat Problem.main(tmpb3lqvq0p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt split \" \" toList\n        if (words.isEmpty) Left(List())\n        if\
    \ (words.exists(_.isEmpty)) Left(List())\n        val res = words.filter(_.nonEmpty)\n\
    \        val countLowercase = res.count(_.toLowerCase == _)\n        val countEvenOrder\
    \ = (res.filter(_ >= 'a' && _ <= 'z').count(_ == _) & res.count(_ == _)) >>> 1\n\
    \        val countEvenOrder2 = (count(_ >= 'a' && _ <= 'z') & res.count(_ == _))\
    \ >>> 1\n        Left(res.map(\"\\\"\" + _ + \"\\\"\") ++ List(\"\\\"l\\\"\")\
    \ ++ List(s\"$countLowercase\") ++\n            if (countLowercase == 0) \"0\"\
    \ else s\"$countLowercase\" ++\n            if (countEvenOrder == 0) \"0\" else\
    \ s\"$countEvenOrder\" ++\n            if (countEvenOrder2 == 0) \"0\" else s\"\
    $countEvenOrder2\")\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpehqw0bez.scala:15:40 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = txt split \e\
    [31m\" \"\e[0m toList\n\e[31m\e[31m   |\e[0m                                 \
    \       ^\e[0m\n\e[31m   |\e[0m                                        expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpehqw0bez.scala:22:85 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        Left(res.map(\e[31m\"\\\"\"\e[0m + _ + \e[31m\"\\\"\"\e[0m) ++\
    \ List(\e[31m\"\\\"l\\\"\"\e[0m) ++ List(\e[31ms\"\e[0m$countLowercase\e[31m\"\
    \e[0m) ++\n\e[31m\e[31m   |\e[0m                                             \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                           expression expected but \e[31mif\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehqw0bez.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (words.exists(_.isEmpty)) Left(List())\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value isEmpty is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpehqw0bez.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = words.filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value nonEmpty is not a member of Char\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpehqw0bez.scala:19:39 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcountLowercase\e[0m = res.count(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpehqw0bez.scala:20:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 "
  stdout: ''
  timestamp: 1660029334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val s = txt.replaceAll(\"\
    \\\\W\", \"\")\n        var words: List[String] = Nil\n        var i = 0\n   \
    \     while (i < s.length()) {\n            val c = s.charAt(i)\n            val\
    \ k = c.toInt\n            if (c == ',' && (words.length != 0 || k % 2 != 0))\
    \ { \n                words += s(i, s.length() - 1) \n                i = s.length()\
    \ - 1\n            }\n            else if (c == ' ') {\n                words\
    \ += s(i, s.length() - 1)\n                i = s.length() - 1\n            }\n\
    \            else {\n                i += 1\n            }\n        }\n      \
    \  if (words.length == 0) { Right(0) }\n        else if (words.length % 2 != 0)\
    \ { Left(words.length) }\n        else {\n            val l = words.length / 2\n\
    \            val hi = words.take(l).map(w => w.toLowerCase).toList\n         \
    \   val lo = words.drop(l).map(w => w.toLowerCase).toList\n            val k =\
    \ hi.foldLeft(lo.size)((acc, w) => acc + w.count(_ == 'a'))\n            Right(k)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb2icd8o6.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                words += s(i, s.length() - \e[31m1\e\
    [0m) \n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb2icd8o6.scala:22:27 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                words += s(i, s.length() - \e[31m1\e\
    [0m) \n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (Int, Int)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb2icd8o6.scala:26:22 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                words += s(i, s.length() - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is\
    \ not a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb2icd8o6.scala:26:27 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                words += s(i, s.length() - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (Int, Int)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb2icd8o6.scala:34:53 --------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length % \e[31m2\e\
    [0m != \e[31m0\e[0m) { Left(words.length) }\n\e[31m\e[31m   |\e[0m           \
    \                                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                         Found:    Int\n\e[31m   |\e[0m     \
    \                                          Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var count\
    \ = 0\n        var words = mutable.ListBuffer[String]()\n        for(word <- txt.split(\"\
    \ \")){\n            val tmp = word\n            if(!words.contains(tmp)){\n \
    \               count += 1\n                words += tmp\n            }\n    \
    \    }\n        if(words.length == 0)\n            Right(count)\n        else\n\
    \            Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobsgdyth.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val txtArr\
    \ = txt.split(\"\\\\s+\").filterNot(_.isEmpty)\n        val resultWords = txtArr.groupBy(_).toList.flatMap\
    \ {\n            case (v, a) => a.map(_.replaceAll(\",\", \"\").replaceAll(\"\\\
    \\.\", \"\")).flatMap(v => v.trim.split(\" \"))\n        }\n        resultWords.filter(_.length\
    \ != 0).map(_.mkString(\",\")).count(l => l.length == l.toLowerCase().length +\
    \ 1) / txtArr.size\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpksa6s7_8.scala:16:41 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresultWords\e[0m = txtArr.groupBy(_).toList.flatMap\
    \ {\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not\
    \ infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m_$2\
    \ => \n\e[31m   |\e[0m  txtArr.groupBy(_$2).toList.flatMap(\n\e[31m   |\e[0m \
    \   {\n\e[31m   |\e[0m      \e[33mcase \e[0m(v, a) => \n\e[31m   |\e[0m      \
    \  a.map(_$3 => _$3.replaceAll(\e[32m\",\"\e[0m, \e[32m\"\"\e[0m).replaceAll(\e\
    [32m\"\\\\.\"\e[0m, \e[32m\"\"\e[0m)).flatMap(\n\e[31m   |\e[0m          v =>\
    \ v.trim.split(\e[32m\" \"\e[0m)\n\e[31m   |\e[0m        )\n\e[31m   |\e[0m  \
    \  }\n\e[31m   |\e[0m  ).\n1 error found\n"
  stdout: ''
  timestamp: 1660029331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.isEmpty)\n\
    \            return Left(List[String]())\n        var count : Long = 0\n     \
    \   var list : List[String] = Nil\n        var lastChar = txt.head\n        for(i\
    \ <- 0 until txt.length) {\n            if(txt(i) == ',')\n                count\
    \ = count + lastChar.toInt\n            else\n                lastChar = txt(i)\n\
    \        }\n        if (lastChar == 'a')\n            count = count + ord('a')\n\
    \        else if (lastChar == 'b')\n            count = count + ord('b')\n   \
    \     else if (lastChar == 'c')\n            count = count + ord('c')\n      \
    \  else if (lastChar == 'd')\n            count = count + ord('d')\n        else\
    \ if (lastChar == 'e')\n            count = count + ord('e')\n        else if\
    \ (lastChar == 'f')\n            count = count + ord('f')\n        else if (lastChar\
    \ == 'g')\n            count = count + ord('g')\n        else if (lastChar ==\
    \ 'h')\n            count = count + ord('h')\n        else if (lastChar == 'i')\n\
    \            count = count + ord('i')\n        else if (lastChar == 'j')\n   \
    \         count = count + ord('j')\n        else if (lastChar == 'k')\n      \
    \      count = count + ord('k')\n        else if (lastChar == 'l')\n         \
    \   count = count + ord('l')\n        else if (lastChar == 'm')\n            count\
    \ = count + ord('m')\n        else if (lastChar == 'n')\n            count = count\
    \ + ord('n')\n        else if (lastChar == 'o')\n            count = count + ord('o')\n\
    \        else if (lastChar == 'p')\n            count = count + ord('p')\n   \
    \     else if (lastChar == 'q')\n            count = count + ord('q')\n      \
    \  else if (lastChar == 'r')\n            count = count + ord('r')\n        else\
    \ if (lastChar == 's')\n            count = count + ord('s')\n        else if\
    \ (lastChar == 't')\n            count = count + ord('t')\n        else if (lastChar\
    \ == 'u')\n            count = count + ord('u')\n        else if (lastChar ==\
    \ 'v')\n            count = count + ord('v')\n        else if (lastChar == 'w')\n\
    \            count = count + ord('w')\n        else if (lastChar == 'x')\n   \
    \         count = count + ord('x')\n        else if (lastChar == 'y')\n      \
    \      count = count + ord('y')\n        else if (lastChar == 'z')\n         \
    \   count = count + ord('z')\n        else\n            count = count + lastChar.toInt\n\
    \        list = list :+ txt.drop(count).toList\n        return Right(list.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaeflagp.scala:27:28 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            count = count + ord(\e[31m'a'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuaeflagp.scala:29:28 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            count = count + ord(\e[31m'b'\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \ Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaeflagp.scala:31:28\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            count = count\
    \ + ord(\e[31m'c'\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: ord\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaeflagp.scala:33:28 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            count = count + ord(\e[31m'd'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuaeflagp.scala:35:28 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m            count = count + ord(\e[31m'e'\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \ Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaeflagp.scala:37:28\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            count = count\
    \ + ord(\e[31m'f'\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: ord\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = txt.split(\"[\\\\s]+\").filterNot(_.isEmpty).filterNot(_.equals(\",\"))\n\
    \        val noSpaces = list.filterNot(_.isEmpty)\n        val noCommas = list.filterNot(_.equals(\"\
    ,\"))\n        noSpaces.size match {\n            case 0 => noCommas.size match\
    \ {\n                case 0 => Left(noSpaces.size)\n                case 1 =>\
    \ Right(noSpaces.head.size)\n                case _ => Right(noSpaces.size + noCommas.size)\n\
    \            }\n            case 1 => Right(noSpaces.head.length)\n          \
    \  case _ => Right(noSpaces.head.size + noCommas.size)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46blyd7u.scala:20:40\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e\
    [0m \e[31m0\e[0m => Left(noSpaces.size)\n\e[31m\e[31m   |\e[0m               \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Found:    Int\n\e[31m   |\e[0m                               Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def splitWord(words\
    \ : mutable.MutableList[String]) : Either[List[String], Long] = {\n          \
    \  if (words.isEmpty) {\n                Right(words.size)\n            } else\
    \ if (words.tail.isEmpty) {\n                Left(words.tail.size)\n         \
    \   } else {\n                val first = words.head\n                val last\
    \ = words.last\n                val splitFirst = first.toLowerCase\n         \
    \       val splitLast = last.toLowerCase\n                if (splitFirst.contains(splitLast))\
    \ {\n                    splitFirst.split(',').count(_ != splitFirst).map(_.toLong)\n\
    \                } else {\n                    splitFirst.count(_ == splitLast).map(_.toLong)\n\
    \                }\n            }\n        }\n\n        val words = mutable.MutableList[String]()\n\
    \        txt splitTo words splitOnWhitespace\n        splitWord(words)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sy5i611.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36msplitWord\e[0m(\e[36mwords\e\
    [0m : mutable.MutableList[\e[35mString\e[0m]) : \e[35mEither\e[0m[\e[35mList\e\
    [0m[\e[35mString\e[0m], \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sy5i611.scala:33:20\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sy5i611.scala:34:12\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        txt splitTo words\
    \ splitOnWhitespace\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       value splitTo is not a member of String - did you mean txt.split?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = txt.split(\"\\\\s+\")\n        if (list.length > 0) Right(list) else Left(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqqnaorfy.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (list.length\
    \ > \e[31m0\e[0m) Right(list) \e[33melse\e[0m Left(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (list : Array[String])\n\e[31m   |\e[0m\
    \                                   Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqqnaorfy.scala:16:51 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (list.length > \e[31m0\e[0m) Right(list)\
    \ \e[33melse\e[0m Left(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                              Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m\
    \                                                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var counter\
    \ = 0\n        var output: List[String] = Nil\n        var outputLen = txt.length\n\
    \        var letters = \"abcdefghijklmnopqrstuvwxyz\"\n        var i = 0\n\n \
    \       for (x <- txt.toCharArray) {\n            if (x == ' ' || x == '\\t' ||\
    \ x == '\\n')\n                outputLen = outputLen + 1\n            else\n \
    \               if (x == '!' || x == '.' || x == '?')\n                    outputLen\
    \ = outputLen + 1\n                else {\n                    output = (output\
    \ :+ x.toString)\n                    outputLen = outputLen + 1\n            \
    \        if (x.toString >= letters.charAt(0) && (x.toString <= letters.charAt(26)))\
    \ {\n                        counter = counter + 1\n                    }\n  \
    \              }\n        }\n\n        Either.catchNonFatal(counter)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx60d85dt.scala:30:52\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    \e[33mif\e\
    [0m (x.toString >= letters.charAt(\e[31m0\e[0m) && (x.toString <= letters.charAt(\e\
    [31m26\e[0m))) {\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    Char\n\e[31m\
    \   |\e[0m                                      Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx60d85dt.scala:30:88 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mif\e[0m (x.toString >= letters.charAt(\e\
    [31m0\e[0m) && (x.toString <= letters.charAt(\e[31m26\e[0m))) {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                           Found:    Char\n\e[31m   |\e[0m                  \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx60d85dt.scala:36:15 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        Either.catchNonFatal(counter)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value catchNonFatal\
    \ is not a member of object scala.util.Either\n3 errors found\n"
  stdout: ''
  timestamp: 1660029336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Split\
    \ on a comma if it exists\n        val splitWordsResult = txt match {\n      \
    \      case Some(\",\") => txt.split(',').map(_.trim).map(_.toLowerCase).toList\n\
    \            case _ => txt.toLowerCase.split(' ')\n        }\n        if (splitWordsResult.length\
    \ == 0) Left(List(\"\"))\n        else Right(splitWordsResult.size)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwskayd__.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (splitWordsResult.length == \e\
    [31m0\e[0m) Left(List(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Object\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwskayd__.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Right(splitWordsResult.size)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value size is not a member of Object\n2 errors found\n"
  stdout: ''
  timestamp: 1660029335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.isEmpty)\
    \ {\n            return Right(1)\n        }\n        val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val odd = words.count(_ < 'a' && _ > 'z' && (_ % 2) == 1)\n   \
    \     val lowerLetterCount = words.count(_ >= 'a' && _ <= 'z')\n        Right(lowerLetterCount\
    \ + odd)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzw5ravoe.scala:20:30 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = words.count(_\
    \ < \e[31m'a'\e[0m && _ > \e[31m'z'\e[0m && (_ % \e[31m2\e[0m) == \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzw5ravoe.scala:21:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlowerLetterCount\e[0m = words.count(_ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660029333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s\").toList\n        val commaWords = txt.split(\",\").toList\n\
    \        if (words == null || commaWords == null || words.length != commaWords.length){\n\
    \            Right(words.length)\n        }\n        else {\n            val result\
    \ = words.zipWithIndex.flatMap(word => word.length match {\n                case\
    \ 0 => Left(List.empty[String])\n                case _ => word.map(w => w.toLowerCase)\n\
    \            }).filter(_.isOdd).length\n            Right(result)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgn9cq8ll.scala:21:65 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = words.zipWithIndex.flatMap(\e\
    [36mword\e[0m => word.length \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m       \
    \                                                     ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value length is not a member of (String @uncheckedVariance,\
    \ Int)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgn9cq8ll.scala:22:30\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e\
    [0m \e[31m0\e[0m => Left(List.empty[String])\n\e[31m\e[31m   |\e[0m          \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            Found:    Left[List[String], Nothing]\n\e[31m   |\e[0m          \
    \                Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpgn9cq8ll.scala:23:35 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m _ => word.map(w => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                          Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter w.\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgn9cq8ll.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }).filter(_.isOdd).length\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     value isOdd is not a member of Nothing\n4 errors found\n"
  stdout: ''
  timestamp: 1660029336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsCount\
    \ = new mutable.HashMap[String, Long]()\n        val words = txt.split(\"[\\\\\
    s,]+\")\n        words.foreach(word => {\n            if (word.nonEmpty) {\n \
    \               val wordCount = word.toLowerCase.split(\"\").filter(_.isLetter).count()\
    \ match {\n                    case 0 => 0\n                    case 1 => 1\n\
    \                    case 2 if isUpperLetter(word.charAt(0)) => 2\n          \
    \          case 2 => 3\n                    case n if n == 1 => n + 4\n      \
    \              case n => n + 5\n                }\n                wordsCount.put(word,\
    \ wordCount)\n            }\n        })\n        val evenWordsCount = wordsCount.filter(_._2\
    \ == 0).collect{case (_, v) => v}\n        val oddWordsCount = wordsCount.filter(_._2\
    \ % 2 == 1).collect{case (_, v) => v}\n        val count: Either[List[String],\
    \ Long] = if (evenWordsCount.isEmpty) {\n            if (oddWordsCount.isEmpty)\
    \ {\n                if (wordsCount.isEmpty) Left(0)\n                else Right(wordsCount.values.sum)\n\
    \            } else {\n                if (wordsCount.isEmpty) Left(oddWordsCount.sum)\n\
    \                else Right(wordsCount.values.sum - oddWordsCount.sum)\n     \
    \       }\n        } else {\n            if (oddWordsCount.isEmpty) {\n      \
    \          if (wordsCount.isEmpty) Left(evenWordsCount.sum)\n                else\
    \ Right(wordsCount.values.sum - evenWordsCount.sum)\n            } else {\n  \
    \              if (wordsCount.isEmpty) Left(evenWordsCount.sum + oddWordsCount.sum)\n\
    \                else Right(wordsCount.values.sum - evenWordsCount.sum - oddWordsCount.sum)\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3x8bujg.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpj3x8bujg.scala:19:68 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mval\e[0m \e[36mwordCount\e[0m = word.toLowerCase.split(\e\
    [31m\"\"\e[0m).filter(_.isLetter).count() \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3x8bujg.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e\
    [0m \e[31m2\e[0m \e[33mif\e[0m isUpperLetter(word.charAt(\e[31m0\e[0m)) => \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: isUpperLetter\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj3x8bujg.scala:34:45\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                \e[33mif\e[0m\
    \ (wordsCount.isEmpty) Left(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                        Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m     \
    \                                        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.length\
    \ <= 10) return Right(txt.length)\n        val words: List[String] = txt.split(\"\
    \\\\s+\").toList\n        if (words.length <= 2) return Right(words.length)\n\
    \        val numLowerLetters = txt.filter(c => c.toLower.toInt('a') <= 'z'.toInt).length\n\
    \        Right(numLowerLetters)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpr4aab5jo.scala:18:56 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumLowerLetters\e[0m = txt.filter(\e\
    [36mc\e[0m => c.toLower.toInt(\e[31m'a'\e[0m) <= \e[31m'z'\e[0m.toInt).length\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     \e[33mmethod\e[0m \e[35mtoInt\e[0m in\
    \ \e[33mclass\e[0m \e[35mChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lst =\
    \ txt.split(\" \");\n        if (lst.isEmpty) Left(List[String]())\n        else\
    \ if (lst.size == 1) Right(lst(0))\n        else {\n            val numLetters\
    \ = txt.count(_.isLetter)\n            val result = (if (numLetters.isEven) 1\
    \ else 0) + numLetters\n            Right(result)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzkz1wg6k.scala:17:41\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (lst.size == \e[31m1\e[0m) Right(lst(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                      ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                            Found:    String\n\e[31m   |\e[0m               \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzkz1wg6k.scala:20:41 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = (\e[33mif\e\
    [0m (numLetters.isEven) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m) + numLetters\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value isEven is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ goes here\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdeqajkxc.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36msplitWords\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mEither\e[0m[\e[35mList\e[0m[\e\
    [35mString\e[0m], \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                      Required: Either[List[String], Long]\n\e[31m15 |\e[0m \
    \       \e[34m// Your code goes here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val arr =\
    \ txt.split(\"\"\"\\s+\"\"\")\n        if (arr.length == 1) Right(arr.map(_.trim))\n\
    \        else if (arr.length == 2) Right(arr.map(_.trim))\n        else Left(arr)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws_uwimy.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (arr.length\
    \ == \e[31m1\e[0m) Right(arr.map(_.trim))\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                  Found:    Array[String]\n\e[31m   |\e[0m                  \
    \                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpws_uwimy.scala:17:40 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (arr.length == \e[31m2\e[0m) Right(arr.map(_.trim))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Array[String]\n\
    \e[31m   |\e[0m                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws_uwimy.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(arr)\n\e[31m\e[31m   |\e\
    [0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (arr\
    \ : Array[String])\n\e[31m   |\e[0m                  Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var lowerLetterCount\
    \ = 0;\n        val words = new mutable.ListBuffer[String]()\n        for (c:\
    \ Char <- txt) {\n            val cLower = c.toLowerCase\n            if (cLower\
    \ == ',') {\n                if (words.length == 0) {\n                    return\
    \ Left(words.toList)\n                }\n                else {\n            \
    \        words.append(cLower.charAt(0).toString.toLowerCase + cLower.substring(1).toString.toUpperCase)\n\
    \                    lowerLetterCount += cLower.length\n                }\n  \
    \          }\n            else {\n                if (cLower.length() % 2 == 1)\
    \ {\n                    words.append(cLower.charAt(0).toString.toLowerCase +\
    \ cLower.substring(1).toString.toUpperCase)\n                    lowerLetterCount\
    \ += cLower.length\n                }\n                else {\n              \
    \      return Right(words.toList.map(_.length).sum)\n                }\n     \
    \       }\n        }\n        if (words.length == 0) {\n            return Right(words.toList.map(_.length).sum)\n\
    \        }\n        else {\n            return Right(words.toList)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2zau9gf.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc2zau9gf.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcLower\e[0m = c.toLowerCase\n\e[31m\e[31m   |\e[0m                   \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value toLowerCase\
    \ is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660029338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length < 4) {\n            return\
    \ Right(words.toList)\n        }\n        val wordCount = (words.toList) flatMap\
    \ (word => {\n            if (word.contains(\",\")) {\n                val words\
    \ = word.split(\",\")\n                words.map (word => word.trim).toList\n\
    \            } else {\n                word.trim().toLowerCase().split(\"\")\n\
    \            }\n        }) filter (word => word.length > 1) map (word => word.length).toList\n\
    \        if (wordCount.sum % 2 == 1) {\n            Left(wordCount)\n        }\
    \ else {\n            Right(wordCount.sum.toLong)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l7nosge.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mreturn\e[0m\
    \ Right(words.toList)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[String]\n\e[31m  \
    \ |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp6l7nosge.scala:26:49 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        }) filter (word => word.length > \e[31m1\e[0m)\
    \ map (word => word.length).toList\n\e[31m\e[31m   |\e[0m                    \
    \                             ^^^^\e[0m\n\e[31m   |\e[0m                     \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  \
    \     I could not infer the type of the parameter word.\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6l7nosge.scala:27:25 -----------------------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (wordCount.sum % \e[31m2\e[0m == \e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mDoubleIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmp6l7nosge.scala:30:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            Right(wordCount.sum.toLong)\n\e[31m\e[31m\
    \   |\e[0m                               ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mDoubleIsFractional\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e\
    [33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e\
    [33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    ,\"))\n            Right(txt.split(\",\").length)\n        else\n            Left(txt.split(\"\
    \ \").size)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xnord9h.scala:18:32\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Left(txt.split(\e\
    [31m\" \"\e[0m).size)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Int\n\e[31m   |\e[0m          \
    \       Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt.split(\"\
    \\\\s+\")\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0smsd0mi.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        txt.split(\e[31m\"\\\\\
    s+\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Array[String]\n\e[31m   |\e[0m        Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val letters\
    \ = mutable.HashSet[Char]()\n        txt.foreach(c => letters += c)\n        if\
    \ (letters.length % 2 == 1) Left(List(txt))\n        else if(letters.length %\
    \ 2 == 0) Right((letters.length / 2) - 1)\n        else Left(List(\"Odd number\
    \ of letters!\"))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvz_bthm6.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt ==\
    \ null || txt.isEmpty) {\n            Left(List.empty)\n        } else {\n   \
    \         val words = txt.split(\"\\\\s+\", -1).map { x => x.toLowerCase }\n \
    \           val evensOrders = words.count(x => x % 2 == 0).toLong\n          \
    \  val oddsOrders = words.count(x => x % 2 != 0).toLong\n            Right(if\
    \ (evensOrders == 0) evensOrders else oddsOrders)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqig8s3mt.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevensOrders\e[0m = words.count(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).toLong\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqig8s3mt.scala:20:48\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddsOrders\e[0m = words.count(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                                           \
    \   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        val noOfWords = words.size //number of words\
    \ in the list excluding blank spaces\n        val countLowLetters = words.count(_\
    \ == txt.substring(0,1).toLower)\n        if (noOfWords == 0) Right(countLowLetters)\n\
    \        else {\n            val listOfLetters = words.map(_.toLower)\n      \
    \      val oddOrderOfLetters = listOfLetters.groupBy(letterVal => letterVal)(letterVal\
    \ => (letterVal, letterVal.length % 2)) //create a map with letters as keys and\
    \ counts as values\n            val countOddOrderLetters = oddOrderOfLetters.filter(letter\
    \ => (letter._2 % 2) != 0)\n            val numberOfWords = countOddOrderLetters.length\n\
    \            val sumOfOddOrderLetters = countOddOrderLetters.values.sum\n    \
    \        val sumOfOddOrderLettersInWords = sumOfOddOrderLetters.sum\n        \
    \    val totalLetters = countLowLetters + sumOfOddOrderLettersInWords + countOddOrderLetters.values.sum\n\
    \            Right(numberOfWords)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy2cib6_1.scala:17:66 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcountLowLetters\e[0m = words.count(_\
    \ == txt.substring(\e[31m0\e[0m,\e[31m1\e[0m).toLower)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy2cib6_1.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlistOfLetters\e[0m = words.map(_.toLower)\n\e[31m\e[31m   |\e[0m     \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         value toLower is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmpy2cib6_1.scala:20:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mlistOfLetters\e[0m =\
    \ words.map(_.toLower)\n\e[31m\e[31m   |\e[0m                                \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var letterCount\
    \ = 0\n        var wordCount = txt.length\n\n        val wordList = mutable.MutableList[String]()\n\
    \        val wordListIter = txt.iterator\n\n        if (wordListIter.hasNext)\
    \ {\n            val word: String = wordListIter.next()\n            val wordToAdd:\
    \ String = word + \",\"\n            if (word.length != wordList.length) wordListIter.next()\n\
    \            while (wordListIter.hasNext) {\n                val subWord: String\
    \ = wordListIter.next()\n                if (subWord.length != word.length) wordListIter.next()\n\
    \                if (subWord.forall(_.toLowerCase == \"z\")) letterCount += wordListIter.next().toUpperCase().length\n\
    \                else {\n                    val wordToAdd2 = subWord\n      \
    \              wordListIter.next()\n                    if (wordToAdd2.forall(_.toLowerCase\
    \ == \"z\")) letterCount += wordListIter.next().toUpperCase().length\n       \
    \             else wordListIter.next()\n                }\n            }\n   \
    \         if (wordList.length != wordCount) wordListIter.next()\n            else\
    \ if (wordCount == wordList.length) wordList.head :: wordList\n            else\
    \ wordListIter.next(), letterCount match {\n                case (_, 0) => Either[List[String],\
    \ Long](List.empty, 0l) //No whitespaces in the string\n                case (head,\
    \ tail) => Either[List[String], Long](head :: tail, letterCount)\n           \
    \ }\n        } else Either[List[String], Long](List.empty, 0l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp527jf12h.scala:38:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33melse\e[0m wordListIter.next(), letterCount\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \  ^\e[0m\n\e[31m   |\e[0m                                 end of statement expected\
    \ but ',' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp527jf12h.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m = mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp527jf12h.scala:22:48\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36mword\e[0m: \e[35mString\e[0m = wordListIter.next()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           Found:    Char\n\e[31m   |\e[0m                  \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp527jf12h.scala:26:55 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                \e[33mval\e[0m \e[36msubWord\e[0m: \e[35mString\e[0m =\
    \ wordListIter.next()\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    Char\n\e[31m   |\e[0m                                     \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp527jf12h.scala:28:37\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e\
    [0m (subWord.forall(_.toLowerCase == \e[31m\"z\"\e[0m)) letterCount += wordListIter.next().toUpperCase().length\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            "
  stdout: ''
  timestamp: 1660029346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.isEmpty)\
    \ Right(0)\n        else if(txt.forall(_.isSpace)) Right(txt.mkString.split(\"\
    \ \").length.toLong)\n        else if(txt.forall(_.isDigit) || txt.forall(_.isUppercase))\
    \ Right(txt.mkString.split(\" \").map(_.toString.toInt).sum.toLong)\n        else\
    \ Right(txt.mkString.split(\" \").map(_.toString.toLower).distinct.length)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vkd4v8_.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(txt.forall(_.isSpace))\
    \ Right(txt.mkString.split(\e[31m\" \"\e[0m).length.toLong)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \           value isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6vkd4v8_.scala:17:54 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(txt.forall(_.isDigit) || txt.forall(_.isUppercase))\
    \ Right(txt.mkString.split(\e[31m\" \"\e[0m).map(_.toString.toInt).sum.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isUppercase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vkd4v8_.scala:18:58\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(txt.mkString.split(\e\
    [31m\" \"\e[0m).map(_.toString.toLower).distinct.length)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value toLower is not a member of String\n\
    \e[31m\e[31m-- Error: /tmp/tmp6vkd4v8_.scala:18:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Right(txt.mkString.split(\e[31m\"\
    \ \"\e[0m).map(_.toString.toLower).distinct.length)\n\e[31m\e[31m   |\e[0m   \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1660029347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt ==\
    \ null || txt.isEmpty) {\n            Left(Nil)\n        } else {\n          \
    \  val tokens = txt.split(\" |,\")\n            if (tokens.isEmpty) {\n      \
    \          Right(tokens.size)\n            } else {\n                val words\
    \ = tokens.map(_.toLowerCase).toList\n                if (words(1).forall(_.isLetter)\
    \ && words(0).forall(_.isLower)) {\n                    Right(words(0))\n    \
    \            } else if (words(1).forall(_.isLetter) && words(0).forall(_.isUpper))\
    \ {\n                    Right(words(0) + 1)\n                } else {\n     \
    \               Right(words(0).size)\n                }\n            }\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplwz1xmpj.scala:24:31\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    Right(words(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Found:    String\n\e[31m   |\e[0m     \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplwz1xmpj.scala:26:26 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                    Right(words(\e[31m0\e[0m) + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    String\n\e[31m   |\e[0m        \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val r = new\
    \ Scanner(txt).useDelimiter(\",\")\n        val s = r.findFirst().toString.toLowerCase\
    \ match {\n            case \"\" => Right(0) // no commas\n            case c\
    \ => Right(c.length) // a comma exists in the text\n        }\n        s match\
    \ {\n            case 0 => Right(0) // no commas\n            case _ if _ % 2\
    \ == 0 => Right(s.size - 1l) // odd number of commas in the string\n         \
    \   case _ => Left[List[String], Long](List())\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8dcbd4cy.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ \e[35mScanner\e[0m(txt).useDelimiter(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ type Scanner\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8dcbd4cy.scala:22:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m _ \e[33mif\e[0m _ % \e[31m2\e[0m == \e[31m0\e[0m => Right(s.size - \e[31m1l\e\
    [0m) \e[34m// odd number of commas in the string\e[0m\n\e[31m\e[31m   |\e[0m \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => \n\e[31m   |\e[0m     s\e[33m\
    \ match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase \e\
    [0m0 => \n\e[31m   |\e[0m           Right(0)\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m_\e[33m if \e[0m_$1 % 2 == 0 => \n\e[31m   |\e[0m           Right(s.size\
    \ - \e[31m1L\e[0m)\n\e[31m   |\e[0m         \e[33mcase \e[0m_ => \n\e[31m   |\e\
    [0m           Left[\e[35mList\e[0m[\e[35mString\e[0m], \e[35mLong\e[0m](List())\n\
    \e[31m   |\e[0m       }.\n\e[31m\e[31m-- Error: /tmp/tmp8dcbd4cy.scala:21:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m => Right(\e\
    [31m0\e[0m) \e[34m// no commas\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0mValues of types Int and Right[Nothing, Int] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8dcbd4cy.scala:22:44\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e\
    [0m _ \e[33mif\e[0m _ % \e[31m2\e[0m == \e[31m0\e[0m => Right(s.size - \e[31m1l\e\
    [0m) \e[34m// odd number of commas in the string\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                         ^^^^^^\e[0m\n\e[31m   |\e[0mvalue size\
    \ is not a member of Right[Nothing, Int] - did you mean s.swap?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val (words,\
    \ numLetters) = txt.trim.split(\"\\\\s+\", -1).\n          toList.map(_.toLowerCase).partition(_\
    \ => !_.isEmpty)\n        words.size match {\n            case 0 => Left(words)\n\
    \            case 1 => Right(numLetters.toLong)\n            case _ => Right(numLetters.sum\
    \ + 1l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpg3k6dnca.scala:16:52 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m          toList.map(_.toLowerCase).partition(_ => !_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   _$3 => ! _$3.isEmpty.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3k6dnca.scala:19:39\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e\
    [0m \e[31m1\e[0m => Right(numLetters.toLong)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of List[String], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpg3k6dnca.scala:20:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => Right(numLetters.sum\
    \ + \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \      ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type variable\
    \ with constraint >: String\n\e[31m   |\e[0m                .\n3 errors found\n"
  stdout: ''
  timestamp: 1660029349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var output\
    \ = new ArrayBuffer[String]()\n        var count = 0\n        var characterCount\
    \ = 0\n\n        for (word <- txt.split(\" \")) {\n            characterCount\
    \ += word.length\n            if (characterCount % 2 != 0) {\n               \
    \ output.append(word)\n                characterCount -= 1\n            }\n  \
    \          else if (characterCount == 1) {\n                val first = word.charAt(0)\n\
    \                if (first > 'z') {\n                    count += 1\n        \
    \            characterCount = 1\n                }\n            }\n          \
    \  else {\n                val first = word.charAt(0)\n                if (first\
    \ > 'z') {\n                    count += 1\n                    characterCount\
    \ = 1\n                }\n                else {\n                    count -=\
    \ 1\n                }\n            }\n        }\n\n        val outputLength =\
    \ output.length\n        if (outputLength != 0) {\n            return Right(output)\n\
    \        }\n        else {\n            return Left(count)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_g846jp0.scala:46:25\
    \ --------------------\e[0m\e[0m\n\e[31m46 |\e[0m            \e[33mreturn\e[0m\
    \ Right(output)\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m       Found:    (output : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_g846jp0.scala:49:24 --------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m            \e[33mreturn\e[0m Left(count)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \      Found:    (count : Int)\n\e[31m   |\e[0m                        Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.length\
    \ == 0) Left(Nil)\n        else if(txt.trim.isEmpty) Right(txt.length)\n     \
    \   else {\n            val words = txt.split(\" \");\n            val wordsWithCommas\
    \ = words.filter(w => w.contains(\",\"));\n            val wordsWithNoCommas =\
    \ words.filter(w => !w.contains(\",\"));\n            val lettersCount = wordsWithCommas.map(_.toLowerCase\
    \ match { case x if (x.toString isUpper && x.toString.length == 1) => x.toInt\
    \ + 1; }).sum\n\n            Right(wordsWithCommas union wordsWithNoCommas union\
    \ List(lettersCount))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsa6ourft.scala:21:107 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlettersCount\e[0m =\
    \ wordsWithCommas.map(_.toLowerCase \e[33mmatch\e[0m { \e[33mcase\e[0m x \e[33mif\e\
    [0m (x.toString isUpper && x.toString.length == \e[31m1\e[0m) => x.toInt + \e\
    [31m1\e[0m; }).sum\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsa6ourft.scala:21:95\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlettersCount\e[0m = wordsWithCommas.map(_.toLowerCase \e[33mmatch\e[0m\
    \ { \e[33mcase\e[0m x \e[33mif\e[0m (x.toString isUpper && x.toString.length ==\
    \ \e[31m1\e[0m) => x.toInt + \e[31m1\e[0m; }).sum\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ isUpper is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsa6ourft.scala:21:103\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlettersCount\e[0m = wordsWithCommas.map(_.toLowerCase \e[33mmatch\e[0m\
    \ { \e[33mcase\e[0m x \e[33mif\e[0m (x.toString isUpper && x.toString.length ==\
    \ \e[31m1\e[0m) => x.toInt + \e[31m1\e[0m; }).sum\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \                      ^^\e[0m\n\e[31m   |\e[0m                              \
    \                             Not found: &&\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsa6ourft.scala:23:18 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            Right(wordsWithCommas union wordsWithNoCommas\
    \ union List(lettersCount))\n\e[31m\e[31m   |\e[0m                  ^^^^^"
  stdout: ''
  timestamp: 1660029349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = mutable.ListBuffer[String]()\n        val arr = txt.split(\"\\\\s+\")\n  \
    \      var len = 0\n        arr.foreach { a =>\n            val l = a.length\n\
    \            if (l == 0 && a.contains(\",\")) {\n                a += \",\"\n\
    \            } else if (l == 0 && a.contains(\".\") || l > 0 && a.contains(\"\
    ,\")) {\n                val b = a.split(\",\")\n                val c = b.size\n\
    \                if (c % 2 != 0) {\n                    len += l\n           \
    \     }\n                a += \",\" + b(0)\n            }\n            result\
    \ += (a + \"\\n\")\n        }\n        val len = result.length\n        Right(len)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp93klnkky.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = result.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlen\
    \ is already defined as \e[33mvariable\e[0m \e[35mlen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93klnkky.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93klnkky.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                a += \e[31m\"\
    ,\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value += is not a member of String - did you mean a.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp93klnkky.scala:28:18 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                a += \e[31m\",\"\e[0m + b(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of String - did you mean a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val ls =\
    \ txt.split(\"\\\\s\")\n        if(ls.length == 0) Left(0)\n        if(ls.length\
    \ == 1) Right(ls(0).length)\n        if(ls.length == 2) Right(ls(0).length + ls(1).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn04vi_0.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(ls.length\
    \ == \e[31m2\e[0m) Right(ls(\e[31m0\e[0m).length + ls(\e[31m1\e[0m).length)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\"\"\\W+\"\"\")\n        Either.fold(List())(_.length.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvylq9z8r.scala:16:15 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        Either.fold(List())(_.length.toInt)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue fold is not a member\
    \ of object scala.util.Either - did you mean Either.cond?\n1 error found\n"
  stdout: ''
  timestamp: 1660029348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // use mutable\
    \ to store the result\n        var result: List[String] = Nil\n        var count\
    \ = 0\n        var lastChar = txt.charAt(txt.length-1)\n        // loop through\
    \ each character in the string until no more characters\n        for (i <- 0 until\
    \ txt.length){\n            val currentChar = txt.charAt(i)\n            // if\
    \ the last character is a whitespace or a comma, split the string\n          \
    \  if (lastChar == ',' || lastChar == ' '){\n                result += currentChar\n\
    \                // move the counter forward by one so that we can start adding\
    \ words from the next character\n                count += 1\n                lastChar\
    \ = txt.charAt(txt.length-1)\n            } else {\n                // if the\
    \ current character is lower case, then count the number of characters with odd\
    \ order\n                if (currentChar >= 'a' && currentChar <= 'z') count =\
    \ count + 1\n                // else the count is the count\n                else\
    \ count = count\n                result += currentChar\n                lastChar\
    \ = currentChar\n            }\n        }\n        if (result.nonEmpty) Left(result)\n\
    \        else Right(count)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9a1hvhrt.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                result += currentChar\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9a1hvhrt.scala:33:23 ------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                result += currentChar\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // code goes\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8wv1_htv.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36msplitWords\e\
    [0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mEither\e[0m[\e[35mList\e[0m[\e\
    [35mString\e[0m], \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                      Required: Either[List[String], Long]\n\e[31m15 |\e[0m \
    \       \e[34m// code goes here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var words:\
    \ List[String] = Nil\n        var numWordsThatHaveOddLettersOrder: Long = Nil\n\
    \        for (word <- txt.split(\"\\\\s\")) if (word.isEmpty) {\n            words:\
    \ List[String] = Nil\n            numWordsThatHaveOddLettersOrder = Nil\n    \
    \    } else words += word\n        if (words.length != 0) {\n            val wordsThatHaveOddLettersOrder\
    \ = words.groupBy(x => x).mapValues(_.length)\n            numWordsThatHaveOddLettersOrder\
    \ = wordsThatHaveOddLettersOrder.filter(x => x._2 % 2 != 0).length\n        }\n\
    \        val wordList: Either[List[String], Long] = if (numWordsThatHaveOddLettersOrder\
    \ == Nil) Right(words) else {\n            val letters: List[Char] = Nil\n   \
    \         val numOddLettersOrder = numWordsThatHaveOddLettersOrder.filter(_ %\
    \ 2 != 0).length\n            Right(words.map(_.replaceAll(\"[^a-z]\", \"\")).groupBy(x\
    \ => x).mapValues(_.length).filter(x => x._2 % 2 == numOddLettersOrder).keys.toList)\n\
    \        }\n        wordList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzig8vd7e.scala:18:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            words: \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m \
    \  |\e[0m                                end of statement expected but '=' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzig8vd7e.scala:16:52 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mnumWordsThatHaveOddLettersOrder\e\
    [0m: \e[35mLong\e[0m = Nil\n\e[31m\e[31m   |\e[0m                            \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Found:    collection.immutable.Nil.type\n\e[31m   |\e[0m              \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzig8vd7e.scala:19:46 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            numWordsThatHaveOddLettersOrder = Nil\n\e[31m\e[31m   |\e\
    [0m                                              ^^^\e[0m\n\e[31m   |\e[0m   \
    \                              Found:    collection.immutable.Nil.type\n\e[31m\
    \   |\e[0m                                 Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzig8vd7e.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        } \e[33melse\e[0m words += word\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpzig8vd7e.scala:23:102 -----------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            numWordsThatHaveOddLettersOrder = wordsThatHaveOddLettersOrder.filter(\e\
    [36mx\e[0m => x._2 % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value length is not a member of scala.collection.MapView[String,\
    \ Int]\n\e[31m\e[31m-- Er"
  stdout: ''
  timestamp: 1660029351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val (words,\
    \ lc) = text.splitAt(text.size)\n      val lenWords = words.length\n      val\
    \ evenWords = words.filter(_.toLowerCase != \"abc\")\n      val oddWords = words.filter(_.toLowerCase\
    \ == \"abc\")\n      val evenWordsLc = evenWords.filter(_ <= 26)\n      val oddWordsLc\
    \ = oddWords.filter(_ <= 26)\n      val evenWordsLcLc = evenWordsLc.map(_.toLowerCase\
    \ + _)\n      val oddWordsLcLc = oddWordsLc.map(_.toLowerCase + _)\n      val\
    \ evenWordsLcLcLc = evenWordsLcLc.map(_.toLowerCase + _)\n      val oddWordsLcLcLc\
    \ = oddWordsLcLc.map(_.toLowerCase + _)\n      val evenWordsLcLcLcLc = evenWordsLcLcLc.map(_.toLowerCase\
    \ + _)\n      val oddWordsLcLcLcLc = oddWordsLcLcLc.map(_.toLowerCase + _)\n \
    \     val evenWordsLcLcLcLcLc = evenWordsLcLcLcLc.map(_.toLowerCase + _)\n   \
    \   val oddWordsLcLcLcLcLc = oddWordsLcLcLcLc.map(_.toLowerCase + _)\n      val\
    \ evenWordsLcLcLcLcLcLc = evenWordsLcLcLcLcLc.map(_.toLowerCase + _)\n      val\
    \ oddWordsLcLcLcLcLcLc = oddWordsLcLcLcLcLc.map(_.toLowerCase + _)\n      val\
    \ evenWordsLcLcLcLcLcLcLc = evenWordsLcLcLcLcLcLc.map(_.toLowerCase + _)\n   \
    \   val oddWordsLcLcLcLcLcLcLc = oddWordsLcLcLcLcLcLc.map(_.toLowerCase + _)\n\
    \      val evenWordsLcLcLcLcLcLcLcLc = evenWordsLcLcLcLcL\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5vzdjqj.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m (words, lc) = text.splitAt(text.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Not found: text\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps5vzdjqj.scala:15:11 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m      \e[33mval\e[0m (words, lc) = text.splitAt(text.size)\n\e[31m\e[31m\
    \   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Recursive \e[33mvalue\e\
    [0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps5vzdjqj.scala:15:18 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m      \e[33mval\e[0m (words, lc) = text.splitAt(text.size)\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps5vzdjqj.scala:33:38 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m      \e[33mval\e[0m \e[36mevenWordsLcLcLcLcLcLcLcLc\e\
    [0m = evenWordsLcLcLcLcL\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Not found: evenWordsLcLcLcLcL\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps5vzdjqj.scala:34:5 ---------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lst =\
    \ scala.collection.mutable.ArrayBuffer.empty[String]\n        var count = 1\n\
    \        val split = txt.split\n        for(x <- split){\n            if(x !=\
    \ \" \" && x != \",\"){\n                lst += x\n                count += 1\n\
    \            }else{\n                break\n            }\n        }\n       \
    \ if(count == 1){\n            Right(count)\n        }\n        else{\n      \
    \      Left(lst.toList)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmps4_azu9g.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msplit\e[0m = txt.split\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt.split(\"\
    \ \").map(_.toLowerCase).toList match {\n            case x :: xs =>\n       \
    \         Right(xs.distinct.filterNot(_.equals(\",\")).filter(c => c.isLetter).filter(c\
    \ => c.isLetter && !c.isDigit).count(l => (l % 2 == 1)))\n            case _ =>\
    \ Left[List[String], Long]()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptw_8unqi.scala:17:73 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                Right(xs.distinct.filterNot(_.equals(\e\
    [31m\",\"\e[0m)).filter(\e[36mc\e[0m => c.isLetter).filter(\e[36mc\e[0m => c.isLetter\
    \ && !c.isDigit).count(\e[36ml\e[0m => (l % \e[31m2\e[0m == \e[31m1\e[0m)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptw_8unqi.scala:17:97 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                Right(xs.distinct.filterNot(_.equals(\e[31m\",\"\e[0m)).filter(\e\
    [36mc\e[0m => c.isLetter).filter(\e[36mc\e[0m => c.isLetter && !c.isDigit).count(\e\
    [36ml\e[0m => (l % \e[31m2\e[0m == \e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \   value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmptw_8unqi.scala:17:135 -----------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                Right(xs.distinct.filterNot(_.equals(\e[31m\",\"\e[0m)).filter(\e\
    [36mc\e[0m => c.isLetter).filter(\e[36mc\e[0m => c.isLetter && !c.isDigit).count(\e\
    [36ml\e[0m => (l % \e[31m2\e[0m == \e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmptw_8unqi.scala:18:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m _ => Left[List[String], Long]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmissi"
  stdout: ''
  timestamp: 1660029351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val input\
    \ = txt.toLowerCase\n        var words = \"\"\n        var lowerCnt = 0.0\n\n\
    \        val listInput = input.split(\",\")\n        listInput.foreach(s => {\
    \ // Split input on commas\n            val words = s.split(\"\\\\s+\") // Split\
    \ input on whitespace\n            words.length match {\n                case\
    \ 1 => lowerCnt += 1\n                case _ => lowerCnt += 2\n            }\n\
    \        })\n        val len = listInput.length\n        if (len < 2) {\n    \
    \        Right(lowerCnt)\n        } else {\n            var i = 0\n          \
    \  while (i < len) {\n                val w = listInput(i)\n                if\
    \ (w.toLowerCase == w.toLowerCase) {\n                    lowerCnt += 1\n    \
    \                i += 1\n                } else i += 1\n            }\n      \
    \      Right(lowerCnt)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0o92or5x.scala:29:18\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            Right(lowerCnt)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          Found:    (lowerCnt : Double)\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0o92or5x.scala:39:18\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m            Right(lowerCnt)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          Found:    (lowerCnt : Double)\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ArrayBuffer.empty[String]\n        for (w1 <- txt.toList) {\n    \
    \        for (w2 <- w1.toList) {\n                for (w3 <- w2.toList) {\n  \
    \                  for (w4 <- w3.toList) {\n                        for (w5 <-\
    \ w4.toList) {\n                            for (w6 <- w5.toList) {\n        \
    \                        for (w7 <- w6.toList) {\n                           \
    \         for (w8 <- w7.toList) {\n                                        for\
    \ (w9 <- w8.toList) {\n                                            for (w10 <-\
    \ w9.toList) {\n                                                for (w11 <- w10.toList)\
    \ {\n                                                    for (w12 <- w11.toList)\
    \ {\n                                                        for (w13 <- w12.toList)\
    \ {\n                                                            for (w14 <- w13.toList)\
    \ {\n                                                                for (w15\
    \ <- w14.toList) {\n                                                         \
    \           for (w16 <- w15.toList) {\n                                      \
    \                                  for (w17 <- w16.toList) {\n               \
    \                                                             for (w18 <- w17.toList)\
    \ {\n                                                                        \
    \        for (w19 <- w18.toList) {\n                                         \
    \                                           for (w20 <- w19.toList) {\n      \
    \                                                                            \
    \      for (w21 <- w20.toList) {\n                                           \
    \                                                 for (w22 <- w21.toList) {\n\
    \                                                                            \
    \                    for (w23 <- w22.toList) {\n                             \
    \                                                                       for (w24\
    \ <- w23.toList) {\n                                                         \
    \                                               for (w25 <- w24.toList) {\n  \
    \                                                                            \
    \                              return Right(w25.toSet.size)\n                \
    \                                                                            \
    \            }\n                                                             \
    \                                       }\n                                  \
    \                                                              }\n           \
    \                                                                            \
    \     }\n                                                                    \
    \                    }\n                                                     \
    \                               }\n                                          \
    \                                      }\n                                   \
    \                                         }\n                                \
    \                                        }\n                                 \
    \                                   }\n                                      \
    \                          }\n                                               \
    \             }\n                                                        }\n \
    \                                                   }\n                      \
    \                          }\n                                            }\n\
    \                                        }\n                                 \
    \   }\n                                }\n                            }\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        Left[List[String], Long](words)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp35bqrcuv.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp35bqrcuv.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (w2 <- w1.toList) {\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \ value toList is not a member of Char - did you mean w1.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n    val wordSet =\
    \ Set[String]()\n    val numOfChars = Set[Int]()\n    val numOfUpperChars = Set[Int]()\n\
    \    val wordSet2 = Set[String]()\n    val numOfChars2 = Set[Int]()\n    val numOfUpperChars2\
    \ = Set[Int]()\n    for (w <- txt.split(\"\\\\s+\")) {\n        val c = w.toCharArray\n\
    \        wordSet.add(c)\n        numOfChars ++= Seq(c.length)\n        val isUpper\
    \ = c.forall(x.isLetter)\n        if (isUpper) numOfUpperChars += Seq(c.length)\n\
    \        wordSet2 += Seq(w.toLowerCase)\n        numOfChars2 ++= Seq(w.toLowerCase.length)\n\
    \        if (isUpper) numOfUpperChars2 += Seq(w.toLowerCase.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnqouco1p.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnqouco1p.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        wordSet.add(c)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (c : Array[Char])\n\e[31m   |\e[0m                    Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqouco1p.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36misUpper\e[0m = c.forall(x.isLetter)\n\e[31m\e[31m   |\e[0m               \
    \                ^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnqouco1p.scala:26:43\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (isUpper)\
    \ numOfUpperChars += Seq(c.length)\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \        Found:    scala.collection.mutable.Seq[Int]\n\e[31m   |\e[0m        \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnqouco1p.scala:27:23 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        wordSet2 += Seq(w.toLowerCase)\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    scala.collection.mutable.Seq[String]\n\e[31m   |\e[0m                   \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnqouco1p.scala:29:44\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (isUpper)\
    \ numOfUpperChars2 += Seq(w.toLowerCase.length)\n\e[31m\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1660029357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var result\
    \ : List[String] = Nil\n        var index : Long = 0\n        for (charValue <-\
    \ txt.toCharArray)\n            if charValue != ' ' {\n                result\
    \ = result ::: List(charValue)\n            } else {\n                index+=1\n\
    \                if (index%2 == 0) {\n                    result = result :::\
    \ List(charValue)\n                } else {\n                    result = result\
    \ ::: List(charValue, charValue)\n                }\n            }\n        val\
    \ len = result.length\n        if (len < 2) {\n            Right(len)\n      \
    \  } else {\n            Left(result)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt08gu73m.scala:20:14 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m\
    \              ^^^^\e[0m\n\e[31m   |\e[0m              'then' expected, but 'else'\
    \ found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpt08gu73m.scala:18:28 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m charValue != \e[31m' '\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0m\
    \                            expression does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt08gu73m.scala:19:25 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result = result ::: List(charValue)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[Matchable]\n\e[31m   |\e\
    [0m                         Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpt08gu73m.scala:28:8 -----------------\e\
    [0m\e[0m\n\e[33m27 |\e[0m            }\n\e[33m28 |\e[0m        \e[33mval\e[0m\
    \ len = result.length\n\e[33m\e[33m   |\e[0m             ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt match\
    \ {\n            case s if (s.toString.trim.isEmpty || s.toString.trim.isEmpty)\
    \ =>\n                Left(Nil)\n            case s => s.split(\" \").filter(_.nonEmpty).map(_.toLowerCase).filter(_\
    \ => s.toString.contains(\",\"))\n                .toList\n                .map(s\
    \ => if (s.toLowerCase(Locale.US).count ('a') %% 2 == 0) s else s.split(\",\"\
    ).toList)\n                .map(s => if (s.count ('a') %% 2 == 1) s.count(_.isLower)\
    \ else {\n                    s.count {\n                        case 'a' => true\n\
    \                        case 'b' => true\n                        case 'c' =>\
    \ true\n                        case 'd' => true\n                        case\
    \ 'e' => true\n                        case 'f' => true\n                    \
    \    case 'g' => true\n                        case 'h' => true\n            \
    \            case 'i' => true\n                        case 'j' => true\n    \
    \                    case 'k' => true\n                        case 'l' => true\n\
    \                        case 'm' => true\n                        case 'n' =>\
    \ true\n                        case 'o' => true\n                        case\
    \ 'p' => true\n                        case 'q' => true\n                    \
    \    case 'r' => true\n                        case 's' => true\n            \
    \            case 't' => true\n                        case 'u' => true\n    \
    \                    case 'v' => true\n                        case 'w' => true\n\
    \                        case 'x' => true\n                        case 'y' =>\
    \ true\n                        case 'z' => true\n                        case\
    \ _ => false\n                    }\n                }).toList\n             \
    \   .sum\n            case _ =>\n                Left(Nil)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49zjzhs6.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                .map(s => \e[33mif\e[0m (s.toLowerCase(Locale.US).count\
    \ (\e[31m'a'\e[0m) %% \e[31m2\e[0m == \e[31m0\e[0m) s \e[33melse\e[0m s.split(\e\
    [31m\",\"\e[0m).toList)\n\e[31m\e[31m   |\e[0m                               \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \         Not found: Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp49zjzhs6.scala:20:62 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                .map(s => \e[33mif\e[0m (s.toLowerCase(Locale.US).count\
    \ (\e[31m'a'\e[0m) %% \e[31m2\e[0m == \e[31m0\e[0m) s \e[33melse\e[0m s.split(\e\
    [31m\",\"\e[0m).toList)\n\e[31m\e[31m   |\e[0m                               \
    \                               ^^^\e[0m\n\e[31m   |\e[0m                    \
    \                           Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m\
    \                                               Required: Char => Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp49zjzhs6.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                .map(s =>\
    \ \e[33mif\e[0m (s.count (\e[31m'a'\e[0m) %% \e[31m2\e[0m == \e[31m1\e[0m) s.count(_.isLower)\
    \ \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value count is not a member of Object - did you\
    \ mean s.clone?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp49zjzhs6.scala:21:57\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                .map(s =>\
    \ \e[33mif\e[0m (s.count (\e[31m'a'\e[0m) %% \e[31m2\e[0m == \e[31m1\e[0m) s.count(_.isLower)\
    \ \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                                   \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           value count is not\
    \ a member of Object - did you mean s.clone?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp49zjzhs6.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m         "
  stdout: ''
  timestamp: 1660029358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \  = txt.split(\" \")\n        val numWords = words.length\n        val wordList\
    \ = (0 until numWords).map(i => words(i)).filter(_.nonEmpty)\n        if (wordList.isEmpty)\n\
    \            Left(numWords)\n        else if (wordList.count(_.isEmpty) == numWords)\n\
    \            Right(wordList.count(_.toLowerCase == wordList.min.toLowerCase +\
    \ 1))\n        else\n            Right(wordList.count(_.toLowerCase == wordList.min.toLowerCase\
    \ + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuusrtby.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(numWords)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \      Found:    (numWords : Int)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.toLowerCase.split(\"\\\\s+\")\n        if (words.length == 0) Right(List(\"\
    \"))\n        else if (words.length == 1) Right(List(words[0]))\n        else\
    \ {\n            val result = words.filter(word => !word.isEmpty).foldLeft(List.empty[String])(_\
    \ :: _)\n            val numLetters = (result.toString.length).filter(_.isLetter).length\n\
    \            if (numLetters % 2 != 0) Right(result.length)\n            else Right(result.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbek7wqu4.scala:16:41\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (words.length\
    \ == \e[31m0\e[0m) Right(List(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                     Found:    List[String]\n\e[31m   |\e[0m                \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpbek7wqu4.scala:17:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e\
    [31m1\e[0m) Right(List(words[\e[31m0\e[0m]))\n\e[31m\e[31m   |\e[0m          \
    \                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m\
    \ does not take type parameters\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbek7wqu4.scala:19:92\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mresult\e[0m = words.filter(\e[36mword\e[0m => !word.isEmpty).foldLeft(List.empty[\e\
    [35mString\e[0m])(_ :: _)\n\e[31m\e[31m   |\e[0m                             \
    \                                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                      value :: is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbek7wqu4.scala:20:54\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumLetters\e[0m = (result.toString.length).filter(_.isLetter).length\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value filter is not a member\
    \ of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660029359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // code here\n\
    \        val res = txt.split(\"[\\\\s,]+\").map(_.toLowerCase)\n        var count\
    \ = 1\n        res.foreach(x => {\n            if(x.contains(\",\"))\n       \
    \         count += 1\n        })\n        if(res.size % 2 != 0) \n           \
    \ Right(count)\n        else\n            Left(res)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj_r_lyrf.scala:25:17\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Left(res)\n\e[31m\e\
    [31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (res : Array[String])\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val ls =\
    \ txt.toLowerCase().trim().split(\",\")\n        if (ls.length == 0)\n       \
    \     Left(Nil)\n        else\n            Right(ls.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpee7k4l8w.scala:22)\n\tat Problem.main(tmpee7k4l8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordList\
    \ = mutable.ArrayBuffer.empty[String]\n        // use regex to find all words\
    \ seperated by either whitespace or comma and add them to wordList\n        val\
    \ regEx = new scala.util.matching.Regex(\"\"\"[\\s,]+\"\"\")\n        for (line\
    \ <- txt.split(\"\\\\n\")) if (line.trim.nonEmpty) wordList += regEx.findAllIn(line).map\
    \ { case Seq(word) => word }.toList.flatten\n        // if wordList has 0 elements\
    \ in it return Right with the length of the wordList\n        if (wordList.size\
    \ < 1) Right(wordList.size)\n        // otherwise use regex to find all words\
    \ in wordList and if their orders are odd in alphabet return Right with the length\
    \ of wordList\n        else Right(wordList.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpetrpawby.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val words =\
    \ txt.split(\" \").filter(_.nonEmpty)\n      if (words.length <= 1) Right(words.size)\n\
    \      else {\n        val oddOrders = words.toList.map(_.toLowerCase zip words.toList.takeRight(words.length)\
    \ collect {\n          case (l, r) if l == r => r.toString.toInt\n        }).filter(_.isDefined).map(_.toString.toInt)\n\
    \        if (oddOrders.length == 0) Right(words.size)\n        else Left(words.take(words.length).mkString,\
    \ words.last.length)\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcodk68ah.scala:19:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          \e[33mcase\e[0m (l, r) \e[33mif\e[0m l == r\
    \ => r.toString.toInt\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcodk68ah.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        }).filter(_.isDefined).map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isDefined is not a member of IndexedSeq[Int] - did you mean _$3.isDefinedAt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcodk68ah.scala:22:18 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m Left(words.take(words.length).mkString,\
    \ words.last.length)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (String, Int)\n\e[31m   |\e[0m\
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var words:\
    \ List[String] = Nil\n        var count = 0L\n        val letters = scala.collection.mutable.ArrayBuffer(\
    \ ('A', 'a'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('E', 'e'), ('F', 'f'), ('G',\
    \ 'g'), ('H', 'h'), ('I', 'i'), ('J', 'j'), ('K', 'k'), ('L', 'l'), ('M', 'm'),\
    \ ('N', 'n'), ('O', 'o'), ('P', 'p'), ('Q', 'q'), ('R', 'r'), ('S', 's'), ('T',\
    \ 't'), ('U', 'u'), ('V', 'v'), ('W', 'w'), ('X', 'x'), ('Y', 'y'), ('Z', 'z'),\
    \ ('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e','E'), ('f','F'), ('g','G'),\
    \ ('h','H'), ('i','I'), ('j','J'), ('k','K'), ('l','L'), ('m','M'), ('n','N'),\
    \ ('o','O'), ('p','P'), ('q','Q'), ('r','R'), ('s','S'), ('t','T'), ('u','U'),\
    \ ('v','V'), ('w','W'), ('x','X'), ('y','Y'), ('z','Z') )\n        for (letter\
    \ <- letters) {\n            val ordLetter = letter.charAt(0).toChar\n       \
    \     if (txt.toUpperCase.contains(letter) && txt.toUpperCase.indexOf(letter)\
    \ != -1) {\n                words.append(letter + txt.toUpperCase.substring(txt.toUpperCase.indexOf(letter)\
    \ + 1))\n                count += 1\n            }\n        }\n        if(words.length\
    \ == 1) return Right(count) \n        else if(words.length == 0) return Left(List(txt))\n\
    \        else return Left(words) \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26rtxtey.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mordLetter\e[0m = letter.charAt(\e\
    [31m0\e[0m).toChar\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value charAt is not a member of\
    \ (Char, Char)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp26rtxtey.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                words.append(letter\
    \ + txt.toUpperCase.substring(txt.toUpperCase.indexOf(letter) + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append\
    \ is not a member of List[String] - did you mean List[String].appended?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp26rtxtey.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                words.append(letter + txt.toUpperCase.substring(txt.toUpperCase.indexOf(letter)\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Char, Char), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val counts\
    \ = mutable.HashMap[String,Long]()\n        val words = ListBuffer.empty[String]\n\
    \        var i : Int = 0\n        while (i < txt.length){\n            var count\
    \ : Long = 0\n            while(i < txt.length && txt(i) != ' ') {\n         \
    \       val c = txt(i).toChar\n                i += 1\n                if (counts.getOrElse(c,0l)\
    \ == 0) counts(c) = counts.getOrElse(c,0l) + 1\n                else count +=\
    \ 1\n            }\n            if (count != 0) words += txt.substring(0,i).trim\n\
    \            if (i < txt.length) words += txt.substring(i, txt.length).trim\n\
    \            if (count > 1) counts += txt.substring(0,i).trim -> count\n     \
    \       else counts += txt.substring(0,i).trim -> 1\n        }\n        if (counts.size\
    \ == 0) Left(words)\n        else {\n            val oddCount = counts.filter(_._2\
    \ % 2 == 0).values.sum\n            Left(ListBuffer(words.length, oddCount))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfujeqlj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptfujeqlj.scala:31:35 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (counts.size == \e[31m0\e[0m) Left(words)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m         Found:    (words : scala.collection.mutable.ListBuffer[String])\n\e\
    [31m   |\e[0m         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptfujeqlj.scala:34:27 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            Left(ListBuffer(words.length, oddCount))\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 Found:    scala.collection.mutable.ListBuffer[Int]\n\
    \e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").toList\n        if (words.size == 0) {\n           \
    \ Left(Nil)\n        } else {\n            val oddWords = words.filter (w=> w.length()\
    \ > 1).collect {\n                case w if w.count(_ > 0) % 2 == 1 =>\n     \
    \               w.toLowerCase }\n            Left(oddWords)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq05dsmnd.scala:26)\n\tat Problem.main(tmpq05dsmnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = mutable.ArrayBuffer.empty[String]\n        val words: List[String] = txt.split(\"\
    \ \").filter(_.nonEmpty).toList\n        words.foreach { word =>\n           \
    \ val list = word.split(\",\")\n            list match {\n                case\
    \ Nil => result.add(word)\n                case _ =>\n                    list.foreach\
    \ { x => result.add(x.toLowerCase) }\n            }\n        }\n        val evenLcLetters\
    \ = words.map(x => x.filter(x.isLowerCase && !x.contains(\",\")).length).sum\n\
    \        val oddLcLetters = words.map(x => x.filter(x.isLowerCase && x.contains(\"\
    ,\")).length).sum\n        Right(List(result.distinct.mkString(\" \"), evenLcLetters,\
    \ oddLcLetters))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn2a8qcy.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwn2a8qcy.scala:20:21 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m Nil => result.add(word)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m        Required:\
    \ Array[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:    Nil  is a getter\
    \ in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m             \
    \     Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwn2a8qcy.scala:25:54\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mevenLcLetters\e[0m = words.map(\e[36mx\e[0m => x.filter(x.isLowerCase && !x.contains(\e\
    [31m\",\"\e[0m)).length).sum\n\e[31m\e[31m   |\e[0m                          \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isLowerCase\
    \ is not a member of String - did you mean x.toLowerCase?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwn2a8qcy.scala:26:53 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moddLcLetters\e[0m = words.map(\e\
    [36mx\e[0m => x.filter(x.isLowerCase && x.contains(\e[31m\",\"\e[0m)).length).sum\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isLowerCase is not a member of String - did you mean\
    \ x.toLowerCase?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwn2a8qcy.scala:27:18\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0"
  stdout: ''
  timestamp: 1660029360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val split\
    \ = txt.split(\"\\\\s+\").filterNot(_.isEmpty)\n        val numOfOddLetters =\
    \ split.map(_.toLowerCase).filter(_.toString.length % 2 != 0).length\n       \
    \ Right(numOfOddLetters)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow0asrbh.scala:20)\n\tat Problem.main(tmpow0asrbh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words:\
    \ List[String] = splitWords(txt, List(\"\"));\n        val letters: List[Long]\
    \ = splitWords(txt, List.empty);\n        words.flatMap(s => letters.map((_,s.toLowerCase,s)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk51qqvfn.scala:15:45\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = splitWords(txt, List(\e[31m\"\"\e[0m));\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (String,\
    \ List[String])\n\e[31m   |\e[0m                                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk51qqvfn.scala:16:45\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mletters\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = splitWords(txt, List.empty);\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (String, List[Nothing])\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk51qqvfn.scala:17:21 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        words.flatMap(\e[36ms\e[0m => letters.map((_,s.toLowerCase,s)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[(Long, String, String)]\n\e[31m   |\e\
    [0m        Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Write your implementation here\n        txt match {\n            case null =>\
    \ Left(List(\"\"))\n            case txt if txt contains \",\" => Left(txt.split(\"\
    ,\").toList)\n            case txt if txt contains \"-\" => Left(txt.split(\"\
    -\"))\n            case txt => Right(txt.length.toLong)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbq0eo6v6.scala:19:58\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m txt\
    \ \e[33mif\e[0m txt contains \e[31m\"-\"\e[0m => Left(txt.split(\e[31m\"-\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m                            \
    \                     Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.isEmpty)\
    \ Left(List.empty[String])\n        else if(txt.contains(\",\")) Left(txt.split(\"\
    ,\").map(_.trim).toList)\n        else if(txt.contains(\".\") && txt.split(\"\
    .\")(1).contains(\",\")) Right(txt.split(\".\")(1).split(\",\").map(_.trim).toList.size)\n\
    \        else Left(List(txt.trim).filter(_.nonEmpty).toList)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr9926hg.scala:21)\n\tat Problem.main(tmpmr9926hg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val list\
    \ = new mutable.LinkedList[String]()\n        val count = mutable.LinkedHashMap[Char,\
    \ Long]()\n        for (word <- txt.split(\" \")) {\n            val word = word.split(\"\
    [^a-zA-Z,]\").toList\n            if (word.length == 0) Left(list)\n         \
    \   else if (word.length > 1) Right(count)\n            else {\n             \
    \   for (letter <- word(0)) {\n                    count(letter) += 1\n      \
    \          }\n                list.add(word.mkString(\"\"))\n            }\n \
    \       }\n        Left(list)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9b73260w.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9b73260w.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.LinkedHashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def words(txt\
    \ : String) : List[String] = txt splitBy (/[,\\s]/)\n        def oddCharOrder(c\
    \ : Char) : Boolean = ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')\n     \
    \   val ltxt = words(txt)\n        val oddChars = ltxt.filter (oddCharOrder)\n\
    \        val oddCharsCount = oddChars.length\n        val evenChars = ltxt.filter\
    \ (c => !oddChars.contains(c))\n        val evenCharsCount = evenChars.length\n\
    \        val charsCount = ltxt.length\n        if (oddCharsCount == 0 && evenCharsCount\
    \ == 0) {\n            Right(oddCharsCount)\n        } else if (oddCharsCount\
    \ == 0) {\n            Left(evenCharsCount)\n        } else {\n            Left(evenCharsCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpairc7o1y.scala:15:64 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mwords\e[0m(\e[36mtxt\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = txt splitBy (/[,\e\
    [35m\\s\e[0m]/)\n\e[31m\e[31m   |\e[0m                                       \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \       an identifier expected, but ',' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpairc7o1y.scala:15:67 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mdef\e[0m \e[36mwords\e[0m(\e[36mtxt\e[0m : \e[35mString\e\
    [0m) : \e[35mList\e[0m[\e[35mString\e[0m] = txt splitBy (/[,\e[35m\\s\e[0m]/)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpairc7o1y.scala:15:69\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m\
    \ \e[36mwords\e[0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = txt splitBy (/[,\e[35m\\s\e[0m]/)\n\e[31m\e[31m   |\e[0m              \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpairc7o1y.scala:15:53\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e\
    [36mwords\e[0m(\e[36mtxt\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = txt splitBy (/[,\e[35m\\s\e[0m]/)\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value\
    \ splitBy is not a member of String - did you mean txt.split?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpairc7o1y.scala:15:62 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mwords\e[0m(\e[36mtxt\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = txt splitBy (/[,\e\
    [35m\\s\e[0m]/)\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660029362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.length\
    \ > 0) {\n            val arr = txt.split(\" \")\n            if (arr.length ==\
    \ 0 || arr.length == 1) {\n                Right(1)\n            }\n         \
    \   else {\n                val result = mutable.Set[String]()\n             \
    \   for (value <- arr) {\n                    val splitArr = value.split(\",\"\
    )\n                    for (arr1 <- splitArr) {\n                        if (arr1.length\
    \ > 0) {\n                            result += arr1\n                       \
    \ }\n                    }\n                }\n                val str = new scala.collection.mutable.StringBuilder\n\
    \                for (value <- result) {\n                    str += value\n \
    \               }\n                if (str.length % 2 == 0) {\n              \
    \      Right(str.length.toLong)\n                } else {\n                  \
    \  Left(str.length.toLong)\n                }\n            }\n        }\n    \
    \    else {\n            Left(List.empty[String])\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzu67yq4t.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzu67yq4t.scala:37:36 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    Left(str.length.toLong)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val splits\
    \ = txt.toLowerCase.split(\"\"\"[\\s,]+\"\"\")\n        if (splits.size < 2) Left(List.empty)\n\
    \        else if (splits.size == 2) Right(List(splits.head))\n        else {\n\
    \            val words = splits.map(_.trim)\n            val oddWords = words.filter(_.forall(letter\
    \ => letter.toInt % 2 != 0))\n            val evenWords = words.filter(_.forall(letter\
    \ => letter.toInt % 2 == 0))\n            if (odds.size == evenWords.length) Right(odds.toList.length)\n\
    \            else if (odds.size < evenWords.length) Right(odds.toList)\n     \
    \       else {\n                Left(evenWords.toList)\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplkie3e73.scala:17:45\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (splits.size == \e[31m2\e[0m) Right(List(splits.head))\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    List[String]\n\e[31m   |\e\
    [0m                                         Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplkie3e73.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (odds.size == evenWords.length)\
    \ Right(odds.toList.length)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: odds\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplkie3e73.scala:22:53 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (odds.size == evenWords.length)\
    \ Right(odds.toList.length)\n\e[31m\e[31m   |\e[0m                           \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                             Not found: odds\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplkie3e73.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (odds.size\
    \ < evenWords.length) Right(odds.toList)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                     Not found: odds\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkie3e73.scala:23:57 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (odds.size\
    \ < evenWords.length) Right(odds.toList)\n\e[31m\e[31m   |\e[0m              \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                              "
  stdout: ''
  timestamp: 1660029363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = mutable.List.empty[String]\n        val listOfWords = txt.split(\"\\\\s\"\
    ).toList\n        for (word <- listOfWords) {\n            result.add(word.trim)\n\
    \        }\n        if(result.isEmpty) Left(result.size)\n        else Right(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw_sjj4xs.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.List.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.isEmpty)\
    \ {\n            Left(List[String]())\n        } else {\n            val splits\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n            val noWhitespaces\
    \ = splits.map(_.replaceAll(\"\\W\", \" \")).toList\n            val noCommas\
    \ = noWhitespaces.map(_.replaceAll(\",\", \"\")).toList\n            val noEvenOrder\
    \ = noCommas.map(x => x.zipWithIndex.filter(_._1 % 2 == 1).map(_._1).map(_.toChar).map(_.toLowerCase).toList).toList\n\
    \            val count = noEvenOrder.map(x => x.size)\n            val evenOrder\
    \ = noEvenOrder.filter(x => x.size % 2 == 0)\n            val countMap = evenOrder.map(x\
    \ => (x._1, x._2.length)).toMap\n            val evenOrderMap = evenOrder.map(x\
    \ => (x._1, x._2.size)).toMap\n            if(countMap.exists(x => x._2 == 3)\
    \ || countMap.exists(x => x._2 == 6)) {\n                Right(countMap)\n   \
    \         } else if(evenOrderMap.exists(x => x._2 > 5)) {\n                Right(evenOrderMap)\n\
    \            } else {\n                Left(List[String]())\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiedyrhy2.scala:19:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnoWhitespaces\e[0m =\
    \ splits.map(_.replaceAll(\e[31m\"\\W\"\e[0m, \e[31m\" \"\e[0m)).toList\n\e[31m\e\
    [31m   |\e[0m                                                          ^\e[0m\n\
    \e[31m   |\e[0m                                                invalid escape\
    \ character\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiedyrhy2.scala:21:115\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnoEvenOrder\e[0m = noCommas.map(\e[36mx\e[0m => x.zipWithIndex.filter(_._1\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).map(_.toChar).map(_.toLowerCase).toList).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiedyrhy2.scala:24:49\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcountMap\e[0m = evenOrder.map(\e[36mx\e[0m => (x._1, x._2.length)).toMap\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\
    \e[31m   |\e[0m                               value _1 is not a member of List[Nothing]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiedyrhy2.scala:24:55 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcountMap\e[0m = evenOrder.map(\e\
    [36mx\e[0m => (x._1, x._2.length)).toMap\n\e[31m\e[31m   |\e[0m              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value _2 is not a member of List[Nothing]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpiedyrhy2.scala:25:53 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOrderMap\e[0m =\
    \ evenOrder.map(\e[36mx\e[0m => (x._1, x._2.size)).toMap\n\e[31m\e[31m   |\e[0m\
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value _1 is not a member of List[Not"
  stdout: ''
  timestamp: 1660029368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var result\
    \ : List[String] = Nil\n        var count : Long = 0\n        for (word <- txt.split(\"\
    \ \")) {\n            result ::= word\n            count += 1\n        }\n   \
    \     result ::= (for (i <- 0 to 26 if count%2==1) yield String.valueOf(i)).toList\n\
    \        Right(result.size)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6empw1k.scala:21:15 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result ::= (\e[33mfor\e[0m (i <- \e[31m0\e[0m\
    \ to \e[31m26\e[0m \e[33mif\e[0m count%\e[31m2\e[0m==\e[31m1\e[0m) \e[33myield\e\
    [0m String.valueOf(i)).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.toLowerCase.split(\" \").filter(_.nonEmpty)\n        val upperCaseChars\
    \ = words.map(_.count(_ == _.toChar))\n        val oddChars = upperCaseChars.filter(_\
    \ % 2 != 0)\n        val evenChars = upperCaseChars.filter(_ % 2 == 0)\n     \
    \   val result = evenChars.reduce((x, y) => x * y)\n        if (result > 0) Right(result.toLong)\n\
    \        else if (result < 0) Left(List[String]())\n        else Left(List[String](words.head,\
    \ words.last))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmptpy2f1rj.scala:16:47 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mupperCaseChars\e[0m = words.map(_.count(_\
    \ == _.toChar))\n\e[31m\e[31m   |\e[0m                                       \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660029366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Return\
    \ 3 if there are no commas\n        if (txt.contains(\",\"))\n            Left(3)\n\
    \        // Otherwise, return number of commas + the number of letters\n     \
    \   else {\n            val arr = txt.split(\",\")\n            Right(arr.size\
    \ + arr(0).length - arr.last.length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg916nz7g.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Left(\e[31m3\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (\e[31m3\e[0m : Int)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt.filter(_.isLetter).map(_.toLowerCase).toList.map(_.split(\"\
    \ \").toList).map(_.flatten).map(_.filter(_(_) % 2 != 0)).count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkelp41au.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        txt.filter(_.isLetter).map(_.toLowerCase).toList.map(_.split(\e\
    [31m\" \"\e[0m).toList).map(_.flatten).map(_.filter(_(_) % \e[31m2\e[0m != \e\
    [31m0\e[0m)).count\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660029368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if(words.length == 0)\n            Right(words.toList)\n\
    \        else if(words.length == 1)\n            Right(words.head.toLong)\n  \
    \      else if(words.exists(_.contains(\",\"))) {\n            val commaWords\
    \ = words.filterNot(_.contains(\",\"))\n            val commaWordsLength = commaWords.map(_.length)\n\
    \            Right(commaWordsLength)\n        } else if(words.exists(_.contains(\"\
    .\"))) {\n            val periodWords = words.filterNot(_.contains(\".\"))\n \
    \           val periodWordsLength = periodWords.map(_.length)\n            Right(periodWordsLength)\n\
    \        } else {\n            val letters = words.map(_.toLowerCase getOrElse\
    \ \"\")\n            val lettersWithOddOrder = letters.map(_.toInt filter { _\
    \ % 2 != 0 })\n            Right(lettersWithOddOrder.sum.toLong)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp05vhnvmq.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(words.toList)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              Found:    List[String]\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp05vhnvmq.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Right(commaWordsLength)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    (commaWordsLength : Array[Int])\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp05vhnvmq.scala:27:18 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            Right(periodWordsLength)\n\e[31m\e[31m   |\e[0m          \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (periodWordsLength\
    \ : Array[Int])\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp05vhnvmq.scala:29:50 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase\
    \ getOrElse \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          value getOrElse is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp05vhnvmq.scala:29:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \     \e[33mval\e[0m \e[36mletters\e[0m = words.map(_.toLowerCase getOrElse \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \            No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \                                       where:    B is a type v"
  stdout: ''
  timestamp: 1660029371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ListBuffer.empty[String]\n        for(c <- txt) {\n          if(c.isLetter)\
    \ {\n            words += c.toString\n          }\n        }\n        if(words.isEmpty)\
    \ Right(\"3\")\n        else {\n          val splits = words.map(w => (w split\
    \ '\\s').toList)\n          splits.foldLeft(Right(\"3\"))((acc, w) => acc.right.getOrElse(w.size.toLong))\n\
    \        }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp031ovnnp.scala:23:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m          \e[33mval\e[0m \e[36msplits\e[0m = words.map(\e\
    [36mw\e[0m => (w split \e[31m'\\s'\e[0m).toList)\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                      invalid escape character\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp031ovnnp.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp031ovnnp.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp031ovnnp.scala:21:32\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(words.isEmpty)\
    \ Right(\e[31m\"3\"\e[0m)\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^\e[0m\n\e[31m   |\e[0m                                Found:    (\e[32m\"\
    3\"\e[0m : String)\n\e[31m   |\e[0m                                Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp031ovnnp.scala:29:11\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m    assert(splitWords((\e\
    [31m\"Hello world!\"\e[0m)).equals(List[\e[35mString\e[0m](\e[31m\"Hello\"\e[0m,\
    \ \e[31m\"world!\"\e[0m)));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Not found: splitWords\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp031ovnnp.scala:30:11 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    assert(splitWords((\e[31m\"Hello,world!\"\e[0m)).equals(List[\e\
    [35mString\e[0m](\e[31m\"Hello\"\e[0m, \e[31m\"world!\"\e[0m)));\n\e[31m\e[31m\
    \   |\e[0m           "
  stdout: ''
  timestamp: 1660029369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" |,\")\n        var result = words.toList\n        if(words.exists(w\
    \ => w.isEmpty)) {\n            Right(result)\n        } else {\n            val\
    \ count = words.filter(w => w.isLetter).map(_.toLowerCase + w.toLowerCase + \"\
    \ \").count\n            if(count % 2 == 0)\n                Right(result)\n \
    \           else {\n                val alphabet = ('A'..'Z').map(_.toString).toList\n\
    \                var evenCount = 0\n                for(i <- 1 to count.toInt)\
    \ {\n                    if(alphabet(i % 26) == \"a\") {\n                   \
    \     evenCount += 1\n                    } else {\n                        if(evenCount\
    \ == 0)\n                            Right(result)\n                        else\
    \ {\n                            val temp = evenCount % 2\n                  \
    \          val finalCount = temp * temp\n                            if(finalCount\
    \ == 0)\n                                Right(result)\n                     \
    \       else {\n                                Right(result)\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16wrbwa0.scala:24:36 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36malphabet\e[0m =\
    \ (\e[31m'A'\e[0m..\e[31m'Z'\e[0m).map(_.toString).toList\n\e[31m\e[31m   |\e\
    [0m                                    ^\e[0m\n\e[31m   |\e[0m               \
    \                    an identifier expected, but '.' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp16wrbwa0.scala:18:18 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Right(result)\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (result : List[String])\n\
    \e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp16wrbwa0.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = words.filter(\e\
    [36mw\e[0m => w.isLetter).map(_.toLowerCase + w.toLowerCase + \e[31m\" \"\e[0m).count\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16wrbwa0.scala:20:74\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcount\e[0m = words.filter(\e[36mw\e[0m => w.isLetter).map(_.toLowerCase\
    \ + w.toLowerCase + \e[31m\" \"\e[0m).count\n\e[31m\e[31m   |\e[0m           \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                            Not found:\
    \ w\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16wrbwa0.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(count\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe followin"
  stdout: ''
  timestamp: 1660029372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val s = txt.split(\"\
    \\\\s+\".r)\n        if(s.length==0){\n            Right(s.length)\n        }\n\
    \        else if(s.length==1){\n            Right(s.headOption.map {_.toLowerCase\
    \ + s.last})\n        }\n        else if(s.length==2){\n            val l1 = s.head.toLowerCase\
    \ + s.last\n            val l2 = s.last.toLowerCase + s.last\n            if(l1==l2){\n\
    \                Right(l2)\n            }\n            else{\n               \
    \ Right(l1.length)\n            }\n        }\n        else{\n            val l1\
    \ = s.head.toLowerCase + s.last\n            val l2 = s.last.toLowerCase + s.last\n\
    \            val l3 = s.last.toLowerCase + s.last\n            if(l1==l2 || l1==l3){\n\
    \                val a = s.toList\n                val l = a.dropLast\n      \
    \          Right(l.length)\n            }\n            else{\n               \
    \ val l = a.dropLast\n                Right(l.length)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv1uulkv.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms\e\
    [0m = txt.split(\e[31m\"\\\\s+\"\e[0m.r)\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  scala.util.matching.Regex\n\e[31m   |\e[0m                          Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv1uulkv.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Right(s.headOption.map\
    \ {_.toLowerCase + s.last})\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Option[String]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzv1uulkv.scala:26:22 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                Right(l2)\n\e[31m\e[31m   |\e[0m                     \
    \ ^^\e[0m\n\e[31m   |\e[0m                      Found:    (l2 : String)\n\e[31m\
    \   |\e[0m                      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzv1uulkv.scala:38:26 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = a.dropLast\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value dropLast is not a member of List[String]\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzv1uulkv.scala:42:24 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = a.dropLast\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.isEmpty)\
    \ Left(Nil, Nil)\n        else (\n            val wordsSplit = txt.split(\"\"\"\
    \\W+\"\"\")\n            val wordsSplit2 = wordsSplit.filter(_.nonEmpty)\n   \
    \         val wordCount = wordsSplit2.length\n            val uppercaseLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'a')\n            val lowercaseLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'b')\n            val oddLetterOrderLetters\
    \ = wordsSplit2.count(_.toLowerCase == 'z') - wordsSplit2.count(_.toLowerCase\
    \ == 'a')\n            Right(List(wordsSplit(0), wordsSplit(1)), wordCount, uppercaseLetters,\
    \ lowercaseLetters, oddLetterOrderLetters)\n        )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplvmv8pio.scala:16:14 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (\n\e[31m\e[31m   |\e[0m    \
    \          ^\e[0m\n\e[31m   |\e[0m              expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplvmv8pio.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (txt.isEmpty)\
    \ Left(Nil, Nil)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (scala.collection.immutable.Nil.type, scala.collection.immutable.Nil.type)\n\
    \e[31m   |\e[0mRequired: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var lst =\
    \ new mutable.ListBuffer[String]()\n        var count = 0\n        for (word <-\
    \ txt.split(\" \")) count += txt.split(\" \").filter(word => word.contains(\"\
    \ \")).size\n        var list = txt.split(\" \").filter(word => word.contains(\"\
    \ \")).map(word => word.toLowerCase())\n        val even = list.filter(word =>\
    \ word.contains(\"a\")).size\n        val odd = list.filter(word => word.contains(\"\
    b\")).size\n        val letters = count % 26\n        if (letters == 0) return\
    \ Either(lst.reverse.toList)\n        if (letters == 1) return Either(lst.reverse.toList)\n\
    \        if (even == odd) return Either(lst.reverse.toList)\n        if (even\
    \ > odd) return Either(lst.reverse.toList)\n        if (even == odd) return Either(lst.reverse.toList)\n\
    \        if (letters < 26) return Either(lst.reverse.toList)\n        Either(lst.reverse.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyd62cdxk.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mlst\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpyd62cdxk.scala:22:33 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (letters == \e[31m0\e[0m) \e[33mreturn\e\
    [0m Either(lst.reverse.toList)\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mgetter\e[0m \e[35mEither\e\
    [0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpyd62cdxk.scala:23:33 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (letters == \e[31m1\e[0m) \e[33mreturn\e\
    [0m Either(lst.reverse.toList)\n\e[31m\e[31m   |\e[0m                        \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mgetter\e[0m \e[35mEither\e\
    [0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpyd62cdxk.scala:24:32 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (even == odd) \e[33mreturn\e[0m\
    \ Either(lst.reverse.toList)\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mgetter\e[0m \e[35mEither\e\
    [0m in \e[33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpyd62cdxk.scala:25:31 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (even > odd) \e[33mreturn\e[0m\
    \ Either(lst.reverse.toList)\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660029370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var count\
    \ = 1\n        var splitWords = List[String]()\n        for (w <- txt.split(\"\
    \\\\s+\"))\n            if (w == \"\")\n                splitWords += w\n    \
    \        else if (w != \"\") {\n                var last = 0\n               \
    \ var first = 0\n                var found = false\n                var i = 0\n\
    \                while (i < w.length) {\n                    val index = w.indexOf(w(i),\
    \ first)\n                    if (index < 0) {\n                        splitWords\
    \ += w.substring(first, w.length())\n                        found = true\n  \
    \                      break\n                    }\n                    first\
    \ = index + 1 // skip space\n                    if (i == 0)\n               \
    \         last = index\n                    i += 1\n                }\n      \
    \          if (found)\n                    splitWords += w.substring(first, w.length)\n\
    \                if (!found)\n                    splitWords += w.substring(first,\
    \ w.length)\n                count = (splitWords.length + 1) / 2\n           \
    \ }\n        splitWords.toRight(count)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmz21be.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                splitWords += w\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpebmz21be.scala:28:35 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                        splitWords += w.substring(first, w.length())\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpebmz21be.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmz21be.scala:38:31\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                    splitWords\
    \ += w.substring(first, w.length)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmz21be.scala:40:31 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    splitWords += w.substring(first,\
    \ w.length)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebmz21be.scala:43:19 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        splitWords.toRight(count)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toRight is not a member\
    \ of List[String] - did you mean List[String].dropRight?\n6 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var wordsCount\
    \ = mutable.List[String]()\n        var oddCount = 0\n        var i = 0\n    \
    \    var evenCount = 0\n        var totalCount = 1\n        var words = []\n \
    \       while(txt != null) {\n            wordsCount.add(txt.substring(i, i +\
    \ 1))\n            i += 2\n        }\n        txt.substring(i, txt.length)\n \
    \       totalCount = wordsCount.size\n        for(word <- wordsCount) {\n    \
    \        if(word.charAt(0) != ',' && word.charAt(0) != ' ') {\n              \
    \  oddCount += 1\n            } else {\n                evenCount += 1\n     \
    \       }\n        }\n        if(evenCount == totalCount) {\n            return\
    \ Right(oddCount)\n        } else {\n            return Left(wordsCount)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpip1kd9ab.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpip1kd9ab.scala:21:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e\
    [0m(txt != \e[31mnull\e[0m) {\n\e[31m\e[31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=>'\
    \ expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpip1kd9ab.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mvar\e[0m \e[36mwordsCount\e[0m = mutable.List[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.length\
    \ > 0) List(txt.split(\" \")).flatMap(_.toList) match {\n            case x ::\
    \ xs if x.nonEmpty => Right(x)\n            case x :: xs if xs.nonEmpty => Right(xs.toList.mkString(\"\
    \"))\n            case x :: xs if !x.nonEmpty => Left(x)\n            case x ::\
    \ xs => Left(xs.toList.mkString(\"\"))\n        }\n        else Left(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmnqsenf.scala:16:48\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs \e[33mif\e[0m x.nonEmpty => Right(x)\n\e[31m\e[31m   |\e[0m          \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                 Found:    (x : String)\n\e[31m   |\e[0m    \
    \                                            Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmnqsenf.scala:17:67 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m x :: xs \e[33mif\e[0m xs.nonEmpty\
    \ => Right(xs.toList.mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                 Found:    String\n\e\
    [31m   |\e[0m                                                 Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmnqsenf.scala:18:48\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs \e[33mif\e[0m !x.nonEmpty => Left(x)\n\e[31m\e[31m   |\e[0m          \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                 Found:    (x : String)\n\e[31m   |\e[0m    \
    \                                            Required: List[String]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmnqsenf.scala:19:51 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m x :: xs => Left(xs.toList.mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    String\n\e[31m\
    \   |\e[0m                                 Required: \e[1m\e[32mList\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avail"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.isEmpty)\
    \ return Left(Nil)\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            for (w <- words)\n                for (i <- 0 until w.length)\
    \ if (w.charAt(i) == ',')\n                    if (w.length > i + 1)\n       \
    \                 return Right(w.substring(i + 1, w.length).split(',') + \"l\"\
    )\n                else if (w.charAt(i).isLower) Right(w.substring(i, w.length)\
    \ + \"l\")\n                else Left(w.substring(i))\n        }\n        else\
    \ Right(words.mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoef5y648.scala:21:77 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                        \e[33mreturn\e[0m Right(w.substring(i\
    \ + \e[31m1\e[0m, w.length).split(\e[31m','\e[0m) + \e[31m\"l\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Array[String], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoef5y648.scala:25:33 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m Right(words.mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m            \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordList:\
    \ List[String] = List(\"Hello\", \"world!\", \"abcde\")\n        val evenNumbers:\
    \ List[Long] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val oddNumbers:\
    \ List[Long] = List(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)\n        val wordCount\
    \ = txt.length.toInt\n        val numberOfWords = txt.split(\" \").length\n  \
    \      val splitWordsNum = wordCount - numberOfWords\n        val splitWords =\
    \ if(splitWordsNum.productElement(new scala.math.BigInt(2)) % 2 == 1) evenNumbers\
    \ \n        else if(splitWordsNum.productElement(new scala.math.BigInt(2)) % 2\
    \ == 0) oddNumbers\n        else {\n            val evenCharCount = (txt - evenNumbers.take(splitWordsNum.length).mkString).length\n\
    \            val oddCharCount = (txt - oddNumbers.take(splitWordsNum.length).mkString).length\n\
    \            val charCount = evenCharCount + oddCharCount\n            if(charCount\
    \ == splitWordsNum.length) oddNumbers else evenNumbers\n        }\n        val\
    \ returnWords = if(wordList.contains(txt)) Right(wordList.indexOf(txt)) \n   \
    \     else if(splitWords.contains(txt)) Right(splitWords.indexOf(txt))\n     \
    \   else {\n            val returnWord = if (numberOfWords == 1) txt.toString.toLowerCase\n\
    \            else txt.toString.split(\" \").filter( a => a.toLowerCase.contains(\"\
    a\") || a.toLowerCase.contains(\"b\") || a.toLowerCase.contains(\"c\") || a.toLowerCase.contains(\"\
    d\") || a.toLowerCase.contains(\"e\") || a.toLowerCase.contains(\"f\") || a.toLowerCase.contains(\"\
    g\") || a.toLowerCase.contains(\"h\") || a.toLowerCase.contains(\"i\") || a.toLowerCase.contains(\"\
    j\") || a.toLowerCase.contains(\"k\") || a.toLowerCase.contains(\"l\") || a.toLowerCase.contains(\"\
    m\") || a.toLowerCase.contains(\"n\") || a.toLowerCase.contains(\"o\") || a.toLowerCase.contains(\"\
    p\") || a.toLowerCase.contains(\"q\") || a.toLowerCase.contains(\"r\") || a.toLowerCase.contains(\"\
    s\") || a.toLowerCase.contains(\"t\") || a.toLowerCase.contains(\"u\") || a.toLowerCase.contains(\"\
    v\") || a.toLowerCase.contains(\"w\") || a.toLowerCase.contains(\"x\") || a.toLowerCase.contains(\"\
    y\") || a.toLowerCase.contains(\"z\") ).length\n            val returnChar = txt.length.toString.toString.toInt\n\
    \            Right(returnWord * return\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7k5e7j8z.scala:35:31 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            Right(returnWord * \e[33mreturn\e[0m\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31mreturn\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7k5e7j8z.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7k5e7j8z.scala:21:42 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36msplitWords\e[0m = \e[33mif\e[0m(splitWordsNum.productElement(\e\
    [33mnew\e[0m scala.math.BigInt(\e[31m2\e[0m)) % \e[31m2\e[0m == \e[31m1\e[0m)\
    \ evenNumbers \n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value productElement is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7k5e7j8z.scala:21:79\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msplitWords\e\
    [0m = \e[33mif\e[0m(splitWordsNum.productElement(\e[33mnew\e[0m scala.math.BigInt(\e\
    [31m2\e[0m)) % \e[31m2\e[0m == \e[31m1\e[0m) evenNumbers \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \     ^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (\e[31m2\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \       Required: java.math.BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7k5e7j8z.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(splitWordsNum.productElement(\e\
    [33mnew\e[0m scala.math.BigInt(\e[31m2\e[0m)) % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ oddNumbers\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value productElement is not a me"
  stdout: ''
  timestamp: 1660029378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def getWords(txt:\
    \ List[Char], words: List[String], start: Long, index: Int) : Either[List[String],\
    \ Long] = {\n            if(index >= txt.length) {\n                Either.Left(words)\n\
    \            } else {\n                val word = txt(index).toLowerCase\n   \
    \             if(word == ',') {\n                    getWords(txt.tail, words.reverse,\
    \ start, index + 1)\n                } else if(word != ' ') {\n              \
    \      val start = if (index == 0) 0 else if (index > 0) index - 1 else index\n\
    \                    val end = index + 1\n                    getWords(txt.tail,\
    \ words.reverse, start, end).fold(\n                        l => l ++ List(\"\
    '\" + word + \"'\"),\n                        r => r.reverse)\n              \
    \  } else {\n                    getWords(txt.tail, words.reverse, start, index\
    \ + 1)\n                }\n            }\n        }\n        getWords(List(txt\
    \ split \" \"), Nil, 0, 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37qyy8rc.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                Either.Left(words)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue Left is not a member\
    \ of object scala.util.Either - did you mean Either.wait?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp37qyy8rc.scala:19:38 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mword\e[0m = txt(index).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp37qyy8rc.scala:26:29 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        \e[36ml\e[0m => l ++ List(\e\
    [31m\"'\"\e[0m + word + \e[31m\"'\"\e[0m),\n\e[31m\e[31m   |\e[0m            \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                   Found:    List[String]\n\e[31m   |\e[0m                  \
    \           Required: \e[1m\e[32mEither\e[0m\e[1m\e[32m[\e[0mList[String\e[1m\e\
    [32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37qyy8rc.scala:27:31 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        \e[36mr\e[0m => r.reverse)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value reverse is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp37qyy8rc.scala:33:22 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        getWords(List(txt split \e[31m\" \"\e[0m), Nil,\
    \ \e[31m0\e[0m, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Array[String]\n\e[31m   |\e\
    [0m                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = new mutable.ListBuffer[String]()\n        if (txt.length > 0) {\n        \
    \    // Remove whitespaces from left and right side\n            val lwrs = txt.map(_.toLowerCase)\n\
    \            val rwrs = txt.map(_.toLowerCase)\n            val noWhiteSpaces\
    \ = lwrs.filterNot(_.isEmpty)\n            val noCommas = rwrs.filterNot(_.equals(\"\
    \"))\n            val lowerCharCount = noWhiteSpaces.filterNot(_ == noCommas).size\n\
    \            result.append(lowerCharCount.toString)\n            result.append(noCommas.toList.toString)\n\
    \        }\n        result.headOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpic34hehg.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpic34hehg.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlwrs\e[0m = txt.map(_.toLowerCase)\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpic34hehg.scala:19:33 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mrwrs\e[0m = txt.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val word\
    \ = txt.split(\" \");\n        if(word.size == 0) {\n            Right(List())\n\
    \        } else {\n            val wordList = word.filter(_ != \" \").flatMap(w\
    \ => w.split(\"\\\\,\")).filter(w => w.length == 1).map(w => w.toLowerCase + w.toUpperCase\
    \ + w).toList\n            val numLetters = wordList.map(x => x.length).sum\n\
    \            val evenNums = wordList.filter(x => x.toString.length == 1).map(x\
    \ => x.toString.toLowerCase + x.toString.toUpperCase + x.toString).toList\n  \
    \          if(numLetters % 2 == 0) {\n                Right(wordList)\n      \
    \      } else {\n                Left(evenNums)\n            }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzsithwd_.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(List())\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    List[Nothing]\n\e[31m   |\e[0m                  Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzsithwd_.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                Right(wordList)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (wordList : List[String])\n\e[31m   |\e[0m      \
    \                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var result\
    \ : Long = 0\n        var charArray : Array[Char] = txt.toCharArray.asInstanceOf[Array[Char]]\n\
    \        var splittedWords : List[String] = Nil\n        var lastChar : Char =\
    \ 'a'\n        var wordCount : Long = 0\n\n        // TODO: think about when to\
    \ stop looping\n        while(charArray.length > 0) {\n            lastChar =\
    \ charArray(charArray.length - 1);\n            if(lastChar == ',' || lastChar\
    \ == ' ') {\n                splittedWords = splittedWords.reverse.zip(charArray).map\
    \ { case (w, c) => (w.trim(), c) }.filter(_._1.length > 0).map { case (w, _) =>\n\
    \                    w.toLowerCase\n                }\n                result\
    \ += wordCount\n                charArray = charArray.dropRight(1).asInstanceOf[Array[Char]]\n\
    \                wordCount = 0\n            }\n            else\n            \
    \    charArray = charArray.dropRight(1).asInstanceOf[Array[Char]]\n          \
    \      wordCount += 1\n        }\n        // Add last word\n        splittedWords\
    \ = splittedWords.reverse.zip(charArray).map { case (w, c) => (w.trim(), c) }.filter(_._1.length\
    \ > 0).map { case (w, _) =>\n            w.toLowerCase\n        }\n        //\
    \ Add count\n        result += wordCount\n\n        Right(result)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu61cpie7.scala:46)\n\tat Problem.main(tmpu61cpie7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var words\
    \ = mutable.ArrayBuffer.empty[String]\n        var count = 0\n        var word\
    \ = \"\"\n        for (letter <- txt) {\n            word += letter\n        \
    \    if (letter == ' ' || letter == ',') {\n                count += if (word\
    \ != \"\") 1 else 0\n                words = words :+ word\n                word\
    \ = \"\"\n            }\n        }\n        Right(words.length.toLong)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpn77exfci.scala:21:25 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                count += \e[33mif\e[0m (word != \e[31m\"\
    \"\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                     ^^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn77exfci.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mvar\e[0m \e[36mwords\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn77exfci.scala:21:22 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                count += \e[33mif\e[0m (word != \e[31m\"\"\
    \e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // write\
    \ your code here\n        return Right(scala.math.min(txt.split(\"\\\\W+\").filter(_.nonEmpty).map(_.toLowerCase).map(letter\
    \ => letter.count(_ == 'a' | _ == 'b' | _ == 'c' | _ == 'd' | _ == 'e' | _ ==\
    \ 'f' | _ == 'g' | _ == 'h' | _ == 'i' | _ == 'j' | _ == 'k' | _ == 'l' | _ ==\
    \ 'm' | _ == 'n' | _ == 'o' | _ == 'p' | _ == 'q' | _ == 'r' | _ == 's' | _ ==\
    \ 't' | _ == 'u' | _ == 'v' | _ == 'w' | _ == 'x' | _ == 'y' | _ == 'z').filter(_\
    \ % 2 == 1).toList.length))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbim4ac6w.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbim4ac6w.scala:16:119\
    \ --------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e\
    [0m Right(scala.math.min(txt.split(\e[31m\"\\\\W+\"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).map(\e\
    [36mletter\e[0m => letter.count(_ == \e[31m'a'\e[0m | _ == \e[31m'b'\e[0m | _\
    \ == \e[31m'c'\e[0m | _ == \e[31m'd'\e[0m | _ == \e[31m'e'\e[0m | _ == \e[31m'f'\e\
    [0m | _ == \e[31m'g'\e[0m | _ == \e[31m'h'\e[0m | _ == \e[31m'i'\e[0m | _ == \e\
    [31m'j'\e[0m | _ == \e[31m'k'\e[0m | _ == \e[31m'l'\e[0m | _ == \e[31m'm'\e[0m\
    \ | _ == \e[31m'n'\e[0m | _ == \e[31m'o'\e[0m | _ == \e[31m'p'\e[0m | _ == \e\
    [31m'q'\e[0m | _ == \e[31m'r'\e[0m | _ == \e[31m's'\e[0m | _ == \e[31m't'\e[0m\
    \ | _ == \e[31m'u'\e[0m | _ == \e[31m'v'\e[0m | _ == \e[31m'w'\e[0m | _ == \e\
    [31m'x'\e[0m | _ == \e[31m'y'\e[0m | _ == \e[31m'z'\e[0m).filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).toList.length))\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpbim4ac6w.scala:16:437 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m Right(scala.math.min(txt.split(\e\
    [31m\"\\\\W+\"\e[0m).filter(_.nonEmpty).map(_.toLowerCase).map(\e[36mletter\e\
    [0m => letter.count(_ == \e[31m'a'\e[0m | _ == \e[31m'b'\e[0m | _ == \e[31m'c'\e\
    [0m | _ == \e[31m'd'\e[0m | _ == \e[31m'e'\e[0m | _ == \e[31m'f'\e[0m | _ == \e\
    [31m'g'\e[0m | _ == \e[31m'h'\e[0m | _ == \e[31m'i'\e[0m | _ == \e[31m'j'\e[0m\
    \ | _ == \e[31m'k'\e[0m | _ == \e[31m'l'\e[0m | _ == \e[31m'm'\e[0m "
  stdout: ''
  timestamp: 1660029376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if(words.length < 2) {\n            Right(words.length)\n\
    \        } else {\n            val charSet = chars.toSet\n            val wordSet\
    \ = words.toSet\n            val intersection = charSet.intersect(wordSet)\n \
    \           if(intersection.isEmpty) {\n                Right(words.length)\n\
    \            } else {\n                val charList = charSet.filter(c => !wordSet.contains(c))\n\
    \                val wordList = wordSet.filter(w => !charSet.contains(w))\n  \
    \              Right(wordList.size * (wordList.toSeq.sorted.toList.length + 1)\
    \ - charList.size)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cztjv3m.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcharSet\e[0m = chars.toSet\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: chars\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\".r)\n        val splitWordsResult = words.flatMap(_.split(\"\
    \".toCharArray))\n        val evenSplitWordsResult = splitWordsResult.filter(word\
    \ => !word.isEmpty)\n        val oddSplitWordsResult = splitWordsResult.filter(word\
    \ => !word.isEmpty).filter(word => word.forall(_.isLower))\n        val lowLettersCount\
    \ = oddSplitWordsResult.size\n        val upperLettersCount = evenSplitWordsResult.filter(_.forall(_.isUpper)).size\n\
    \        val result = lowLettersCount + upperLettersCount\n        val error =\
    \ if (result > 26) Right(0) else Left(\"Please input only lowercase letters!\"\
    )\n        error\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5y1ds_3.scala:15:37\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m = txt.split(\e[31m\"\\\\s+\"\e[0m.r)\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    scala.util.matching.Regex\n\e[31m   |\e[0m                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5y1ds_3.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        error\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (error : Either[String,\
    \ Int])\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val words =\
    \ txt.trim.split(\"\\\\W+\")\n      if (words.length < 2) Left(words)\n      else\
    \ {\n        val lowerCases = words.map(_.toLowerCase)\n        val split = lowerCases.filter(_.nonEmpty)\n\
    \        if (split.length == words.length) Right(split.length)\n        else Left(split.length)\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa95t2pd.scala:16:33\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mif\e[0m (words.length\
    \ < \e[31m2\e[0m) Left(words)\n\e[31m\e[31m   |\e[0m                         \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:  \
    \  (words : Array[String])\n\e[31m   |\e[0m                                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa95t2pd.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m Left(split.length)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              Found:    Int\n\e[31m   |\e[0m                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ListBuffer[String]()\n        for(x <- txt.split(\"\\\\s+\"))\n  \
    \          if(!x.isEmpty())\n                words += x\n        else {\n    \
    \        var count = 0\n            for(x <- words)\n                if(x.toLowerCase\
    \ match { case \"a\" => count+1 else count+2 })\n                count\n     \
    \   }\n        words.toList.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq03yhzfe.scala:19:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq03yhzfe.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.split(\"\
    \\\\s\").length <= 0)\n            return Right(List.empty[String])\n        if\
    \ (txt.split(\",\").length <= 0)\n            return Right(List.empty[String])\n\
    \        if (txt.split(\"\\\\s\").length > 1 && txt.split(\",\").length > 1)\n\
    \            return Right(txt.split(\"\\\\s\").length.toLong)\n        else if\
    \ (txt.split(\"\\\\s\").length > 1 && txt.split(\",\").length == 1)\n        \
    \    return Right(txt.split(\"\\\\s\").map(_.toLowerCase).toSet.toList.size /2)\n\
    \        else if (txt.split(\",\").length > 1 && txt.split(\"\\\\s\").length ==\
    \ 1)\n            return Right(txt.split(\",\").map(_.toLowerCase).toSet.toList.size)\n\
    \        else\n            Left(\"Invalid input!\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpka4ik01u.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mreturn\e[0m\
    \ Right(List.empty[\e[35mString\e[0m])\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    List[String]\n\e[31m   |\e[0m                         Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpka4ik01u.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m\
    \ Right(List.empty[\e[35mString\e[0m])\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    List[String]\n\e[31m   |\e[0m                         Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpka4ik01u.scala:26:17\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            Left(\e[31m\"Invalid\
    \ input!\"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 Found:    (\e[32m\"Invalid input!\"\e[0m : String)\n\
    \e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var strArr\
    \ = txt.split(\" \")\n        var wordNum = 0\n        var splitStr : List[String]\
    \ = Nil\n        for(s <- strArr){\n            if(s.toLowerCase().contains(\"\
    \ \")){\n                splitStr :+= s\n                wordNum = wordNum + 1\n\
    \            }else if(s.toLowerCase().contains(\",\")){\n                splitStr\
    \ :+= s\n                wordNum = wordNum + 1\n            }else{\n         \
    \       splitStr :+= s\n                wordNum = wordNum + 1\n            }\n\
    \        }\n        if(splitStr.length == 0){\n            return Right(splitStr.length)\n\
    \        }else{\n            return Left(splitStr)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_e07p81.scala:37)\n\tat Problem.main(tmpa_e07p81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val text\
    \ = txt.trim\n        if(text.isEmpty)\n            Left(None)\n        else if(text.startsWith(\"\
    ,\"))\n            Right(text.substring(1).map(_.toString.toLowerCase ).filter(_.toString.isLetter).toList.size)\n\
    \        else Right(text.split(\" \").filter(_.contains(\" \")).map(_.toLowerCase).toList.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkw8sd70l.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Left(None)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    None.type\n\e[31m   |\e[0m                 Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkw8sd70l.scala:19:83 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Right(text.substring(\e[31m1\e[0m).map(_.toString.toLowerCase\
    \ ).filter(_.toString.isLetter).toList.size)\n\e[31m\e[31m   |\e[0m          \
    \                                                              ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val txtSplit\
    \ = txt.split(\"\\\\s\")\n        val numLetters = txtSplit.size\n        val\
    \ wordSplits = if (numLetters % 2 == 0) numLetters/2 else numLetters/2 + 1\n \
    \       val numWords = if (numLetters % wordSplits == 0) wordSplits else if (numLetters\
    \ % wordSplits == 1) 1 else 2\n        val letters = txtSplit.mkString.toList.map(_.toString.toLowerCase)\n\
    \        val result = for (x <- 0 until numWords) yield {\n            val words:\
    \ List[String] = letters.take(x).toList.take(wordSplits)\n            val numLettersInWord\
    \ = words.map(_.length)\n            val evenLetters = words.map(_.toString.toLowerCase.count('a')/2)\n\
    \            val oddLetters = words.map(_.toString.toLowerCase.count('a')%2)\n\
    \            val evenLettersInWord = words.map(_.toString.toLowerCase.count('a').toDouble/2)\n\
    \            val oddLettersInWord = words.map(_.toString.toLowerCase.count('a').toDouble%2)\n\
    \            Right(List(numLetters, numLettersInWord, evenLetters, evenLettersInWord,\
    \ oddLetters, oddLettersInWord))\n        }\n        Left(result)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ba1f_6z.scala:23:69\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mevenLetters\e[0m = words.map(_.toString.toLowerCase.count(\e[31m'a'\e[0m)/\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                      Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m    \
    \                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ba1f_6z.scala:24:68 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.map(_.toString.toLowerCase.count(\e\
    [31m'a'\e[0m)%\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                                     Found:    (\e[31m'a'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                               Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ba1f_6z.scala:25:75\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e\
    [36mevenLettersInWord\e[0m = words.map(_.toString.toLowerCase.count(\e[31m'a'\e\
    [0m).toDouble/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                            Found:    (\e[31m'a'\e[0m : Char)\n\
    \e[31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ba1f_6z.scala:26:74\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e\
    [36moddLettersInWord\e[0m = words.map(_.toString.toLowerCase.count(\e[31m'a'\e\
    [0m).toDouble%\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1660029384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsList\
    \ = txt.split(\"\\\\W+\")\n        val wordsLengthList = wordsList.length\n  \
    \      val oddOrders = wordsLengthList.filter(x => x%2 === 1).map(x => 26 - x)\n\
    \        val evenOrders = wordsLengthList.filter(x => x%2 === 0).map(x => ord(x)\
    \ + 1)\n        val result = oddOrders.reduce(_+_) & evenOrders.reduce(_+_)\n\
    \        if(result < 26){\n            Right(wordsList.mkString(\",\"))\n    \
    \    } else {\n            Left(wordsList.mkString(\"\").length)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnbduubl1.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36moddOrders\e[0m = wordsLengthList.filter(\e\
    [36mx\e[0m => x%\e[31m2\e[0m === \e[31m1\e[0m).map(\e[36mx\e[0m => \e[31m26\e\
    [0m - x)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value filter is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnbduubl1.scala:18:41 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenOrders\e[0m = wordsLengthList.filter(\e\
    [36mx\e[0m => x%\e[31m2\e[0m === \e[31m0\e[0m).map(\e[36mx\e[0m => ord(x) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value filter is not a member of Int\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbduubl1.scala:21:36 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Right(wordsList.mkString(\e[31m\",\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    String\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbduubl1.scala:23:17\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Left(wordsList.mkString(\e\
    [31m\"\"\e[0m).length)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    Int\n\e[31m   |\e[0m          \
    \       Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.isEmpty)\
    \ Left(List[String]())\n        else {\n            val ws = txt.split(\" \")\n\
    \            if(ws.nonEmpty) Right(ws.size)\n            else {\n            \
    \    val com = txt.split(\",\")\n                if(com.nonEmpty) Right(com.size)\n\
    \                else {\n                    val odd = (0 to 26).filter(i => i%2\
    \ == 1).count(_%26)\n                    if(odd < 1) Left(List[String]())\n  \
    \                  else {\n                        val lwr = (0 to 26).filter(i\
    \ => i%2 == 0).count(_%26)\n                        if(lwr.length < 1) Left(List[String]())\n\
    \                        else {\n                            Left(List(txt))\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpighoom32.scala:23:68\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e\
    [0m \e[36modd\e[0m = (\e[31m0\e[0m to \e[31m26\e[0m).filter(\e[36mi\e[0m => i%\e\
    [31m2\e[0m == \e[31m1\e[0m).count(_%\e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m                                                       Found:   \
    \ Int\n\e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpighoom32.scala:26:72\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                        \e[33mval\e\
    [0m \e[36mlwr\e[0m = (\e[31m0\e[0m to \e[31m26\e[0m).filter(\e[36mi\e[0m => i%\e\
    [31m2\e[0m == \e[31m0\e[0m).count(_%\e[31m26\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Int\n\e[31m   |\e[0m                                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpighoom32.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                        \e\
    [33mif\e[0m(lwr.length < \e[31m1\e[0m) Left(List[\e[35mString\e[0m]())\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                      value length is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var words:\
    \ List[String] = Nil\n        var numWords : Long = 0\n        var i = 0\n   \
    \     val chars = txt.toCharArray()\n        var count = 0\n        for (char\
    \ in chars)\n        {\n            if (char == ' ') ++count\n            else\
    \ if (char == ',') ++count\n            else {\n                if (count%2 ==\
    \ 1) numWords += count\n                val tmp = new StringBuilder()\n      \
    \          while (i < (chars.length - 1))\n                {\n               \
    \     tmp.append(chars(i))\n                    i += 1\n                    if\
    \ (chars(i) == ' ') count += 1\n                }\n                words += tmp.toString\n\
    \                count = 0\n            }\n        }\n        if (count%2 == 1)\
    \ numWords += count\n        Left(words)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmd2nktyh.scala:21:0 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        {\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e\
    [0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m-- [E020] Syntax Error:\
    \ /tmp/tmpmd2nktyh.scala:39:4 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    \e[33myield\e\
    [0m or \e[33mdo\e[0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \    = txt.split(\"[^\\\\s\\\\w']+\").filter(_.nonEmpty)\n        val wordList\
    \ = words.map((_.toLowerCase)).toList\n        if(wordList.isEmpty)\n        \
    \    Right(wordList.size)\n        else if(wordList.size % 2 != 0)\n         \
    \   Left(wordList)\n        else {\n            var result = 0\n            var\
    \ prev : Long = 0\n            for(i<-0 until wordList.size)\n               \
    \ result += (prev - wordList(i).length()) * 2\n                prev = wordList(i).length()\n\
    \            Right(result)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqa6nxyp2.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result += (prev - wordList(i).length())\
    \ * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.toLowerCase.split(\"\\\\s\")\n        if (words.isEmpty)\n           \
    \ Left(List())\n        else if (words.size == 1)\n            Right(words.length)\n\
    \        else {\n            val map: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n            var wordLength = 0\n            words.foreach{ word =>\n \
    \               map.get(word) match {\n                    case Some(count) =>\n\
    \                        if (wordLength != count) {\n                        \
    \    Right(wordLength)\n                        }\n                    case None\
    \ =>\n                        val len = word.length\n                        val\
    \ newCount = count + len\n                        if (map.size < newCount) {\n\
    \                            val newMap: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n                            wordLength += len\n                      \
    \      map.put(word, newCount)\n                        } else {\n           \
    \                 val newMap: mutable.Map[String, Int] = mutable.HashMap.empty[String,\
    \ Int]\n                            wordLength += len\n                      \
    \      newMap.put(word, wordLength)\n                        }\n             \
    \   }\n            }\n            Right(map.toList)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuromd1ds.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmap\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.HashMap.empty[\e[35mString\e[0m, \e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuromd1ds.scala:21:48 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmap\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.HashMap.empty[\e[35mString\e[0m, \e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                                         \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuromd1ds.scala:26:42 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                        \e[33mif\e[0m (wordLength != count) {\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Not found: count\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuromd1ds.scala:31:39 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                        \e[33mval\e[0m \e[36mnewCount\e\
    [0m = count + len\n\e[31m\e[31m   |\e[0m                                     \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuromd1ds.scala:33:40\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                        \
    \    \e[33mval\e[0m \e[36mnewMap\e[0m: mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m] = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                   "
  stdout: ''
  timestamp: 1660029382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val a = txt.toLowerCase\n\
    \        var cnt = 0\n        for (i <- 0 until a.length) {\n            if (a.charAt(i)\
    \ == ',')\n                cnt += 1\n            else cnt = 0\n            if\
    \ (cnt == 0)\n                cnt += 1\n            else if (cnt == 2)\n     \
    \           cnt += 1\n            else if (cnt % 2 == 1)\n                cnt\
    \ += 1\n            else if (cnt > 25)\n                cnt = 0\n        }\n \
    \       if (cnt > 25)\n            Right(cnt)\n        else\n            Left[List[String],\
    \ Long](List(a))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi21jugtj.scala:36)\n\tat Problem.main(tmpi21jugtj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val arr =\
    \ txt.split(\" \").map( _.toLowerCase)\n        Right(arr.size)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmsd6drd.scala:19)\n\tat Problem.main(tmpjmsd6drd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var total\
    \ = 0\n        var low = 0\n        var high = 26\n        var even = false\n\
    \        var result: List[String] = Nil\n        var characters: List[Char] =\
    \ txt.toCharArray\n        \n        val characterCount = characters.size\n  \
    \      var charCount = 0\n        var count = 1\n        \n        for(i <- characters){\n\
    \            if(i == 'a' || i == 'b' || i == 'c' || i == 'd' || i == 'e' || i\
    \ == 'f' || i == 'g' || i == 'h' ||\n                i == 'i' || i == 'j' || i\
    \ == 'k' || i == 'l' || i == 'm' || i == 'n' || i == 'o' || i == 'p' ||\n    \
    \            i == 'q' || i == 'r' || i == 's' || i == 't' || i == 'u' || i ==\
    \ 'v' || i == 'w' || i == 'x' ||\n                i == 'y' || i == 'z'){\n   \
    \             count = 1\n                low += count\n            }else{\n  \
    \              count += 1\n                high -= 1\n            }\n        \
    \    \n            if(count % 2 == 0){\n                even = true\n        \
    \    }\n            \n            total += count\n            charCount += count\n\
    \            \n            if((total % 26) == 0){\n                if(even){\n\
    \                    result = result :+ low\n                }else{\n        \
    \            result = result :+ high\n                }\n                low =\
    \ 0\n                high = 26\n                even = false\n            }\n\
    \        }\n        \n        if(charCount % 2 == 0){\n            if(even){\n\
    \                result = result :+ low\n            }else{\n                result\
    \ = result :+ high\n            }\n            low = 0\n            high = 26\n\
    \            even = false\n        }\n        \n        if(low == 0 && high ==\
    \ 26){\n            return Left(result)\n        }else{\n            return Right(total)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9iur4jy9.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcharacters\e\
    [0m: \e[35mList\e[0m[\e[35mChar\e[0m] = txt.toCharArray\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                   Found:    \e[1m\e[31mArray\e[0m[Char]\n\e\
    [31m   |\e[0m                                     Required: \e[1m\e[32mList\e\
    [0m[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9iur4jy9.scala:47:39\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m                    result =\
    \ result :+ low\n\e[31m\e[31m   |\e[0m                                       ^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (low : Int)\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9iur4jy9.scala:49:39 --------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                    result = result :+ high\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       Found:    (high : Int)\n\e[31m   |\e[0m\
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9iur4jy9.scala:59:35 --------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m                result = result :+ low\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Found:    (low : Int)\n\e[31m   |\e[0m          \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9iur4jy9.scala:61:35 --------------------\e[0m\e\
    [0m\n\e[31m61 |\e[0m                result = result :+ high\n\e[31m\e[31m   |\e\
    [0m     "
  stdout: ''
  timestamp: 1660029387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.length()\
    \ == 0) {\n            Left(List[String]())\n        }\n        val split1 = txt.split(\"\
    \\\\s\")\n        if (split1.length == 0 || split1(0) != txt) {\n            Left(List[String]())\n\
    \        }\n        val split2 = split1(0).split(\",\")\n        if (split2.length\
    \ == 0 || split2(0) == \"\") {\n            Left(List[String]())\n        }\n\
    \        val split3 = split2(0).toLowerCase\n        val split4 = split3.toList\n\
    \        if (split4.isEmpty || split4(0) != \"\") {\n            Left(List[String]())\n\
    \        }\n        val split5 = split4(0) //.toUpperCase\n        if (split5.length\
    \ == 0 || split5(0) == \"\") {\n            Left(List[String]())\n        }\n\
    \        val split6 = split5(0).toLowerCase //.toCharArray\n        var l = 0\n\
    \        var even = 0\n        var odd = 0\n        for (i = 0; i <= split6.length\
    \ - 1; i++) {\n            val temp = split6(i)\n            if (temp == 'a')\
    \ {\n                even = even + 1\n            }\n            if (temp == 'b')\
    \ {\n                odd = odd + 2\n            }\n            if (temp == 'c')\
    \ {\n                odd = odd + 3\n            }\n            if (temp == 'd')\
    \ {\n                even = even + 4\n            }\n            if (temp == 'e')\
    \ {\n                odd = odd + 5\n            }\n            if (temp == 'f')\
    \ {\n                odd = odd + 6\n            }\n            if (temp == 'g')\
    \ {\n                even = even + 7\n            }\n            if (temp == 'h')\
    \ {\n                odd = odd + 8\n            }\n            if (temp == 'i')\
    \ {\n                even = even + 9\n            }\n            if (temp == 'j')\
    \ {\n                odd = odd + 10\n            }\n            if (temp == 'k')\
    \ {\n                even = even + 11\n            }\n            if (temp ==\
    \ 'l') {\n                odd = odd + 12\n            }\n            if (temp\
    \ == 'm') {\n                even = even + 13\n            }\n            if (temp\
    \ == 'n') {\n                odd = odd + 14\n            }\n            if (temp\
    \ == 'o') {\n                even = even + 15\n            }\n            if (temp\
    \ == 'p') {\n                odd = odd + 16\n            }\n            if (temp\
    \ == 'q') {\n                even = even + 17\n            }\n            if (temp\
    \ == 'r') {\n                odd = odd + 18\n            }\n            if (temp\
    \ == 's') {\n                even = even + 19\n            }\n            if (temp\
    \ == 't') {\n                odd = odd + 20\n            }\n            if (temp\
    \ == 'u') {\n                even = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpggimrqq8.scala:39:15 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m (i = \e[31m0\e[0m; i <= split6.length\
    \ - \e[31m1\e[0m; i++) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m \
    \  |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpggimrqq8.scala:39:42 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mfor\e[0m (i = \e[31m0\e[0m; i <= split6.length - \e\
    [31m1\e[0m; i++) {\n\e[31m\e[31m   |\e[0m                                    \
    \      ^\e[0m\n\e[31m   |\e[0m                                          '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpggimrqq8.scala:39:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m0\e[0m; i <= split6.length - \e[31m1\e[0m; i++) {\n\e[31m\e[31m \
    \  |\e[0m                                               ^\e[0m\n\e[31m   |\e[0m\
    \                                               pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpggimrqq8.scala:28:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m (split4.isEmpty || split4(\e[31m0\e\
    [0m) != \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpggimrqq8.scala:32:19\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (split5.length\
    \ == \e[31m0\e[0m || split5(\e[31m0\e[0m) == \e[31m\"\"\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value length\
    \ is not a member of Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpggimrqq8.scala:35:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e\
    [0m \e[36msplit6\e[0m = split5(\e[31m0\e[0m).toLowerCase \e[34m//.toCharArray\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   \e[33mvalue\e[0m \e[35msplit5\e[0m does not take parameter"
  stdout: ''
  timestamp: 1660029388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+|,+\").map(word => word.toLowerCase)\n        if (words.length\
    \ < 3) Right(words.length)\n        if (words.take(3).forall(_.forall(_.isLetter))\
    \ || words.take(3).forall(_.forall(_.isDigit))) Right(words.size)\n        if\
    \ (words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit)\
    \ && words.drop(3).forall(_.forall(_.isDigit))) Right(words.length)\n        if\
    \ (words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.drop(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit) && words.drop(3).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n        if (words.take(3).forall(_.forall(_.isDigit) &&\
    \ words.drop(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.take(3).forall(_.forall(_.isDigit)) && words.take(3).forall(_.forall(_.isDigit))\
    \ && words.drop(3).forall(_.for\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkkgd0m9u.scala:19:8 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (words.take(\e[31m3\e[0m).forall(_.forall(_.isDigit)\
    \ && words.drop(\e[31m3\e[0m).forall(_.forall(_.isDigit)) && words.take(\e[31m3\e\
    [0m).forall(_.forall(_.isDigit)) && words.take(\e[31m3\e[0m).forall(_.forall(_.isDigit))\
    \ && words.drop(\e[31m3\e[0m).forall(_.forall(_.isDigit)) && words.take(\e[31m3\e\
    [0m).forall(_.forall(_.isDigit) && words.drop(\e[31m3\e[0m).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m \
    \       ')' expected, but 'if' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkgd0m9u.scala:18:99\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (words.take(\e\
    [31m3\e[0m).forall(_.forall(_.isDigit) && words.drop(\e[31m3\e[0m).forall(_.forall(_.isDigit)))\
    \ Right(words.length)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value Right is not a member of Boolean\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpkkgd0m9u.scala:36:0 -----------------\e\
    [0m\e[0m\n\e[33m36 |\e[0m}\n\e[33m\e[33m   |\e[0m ^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var wordsCount\
    \ = txt.count(w => w == ' ' || w == ',')\n        var letterCount = 0\n      \
    \  var lowerLetterCount = 0\n        for (word <- txt.split(' ')) {\n        \
    \    wordsCount += txt.count(w => w == ' ' || w == ',')\n            letterCount\
    \ += txt.count(w => w.isLetter)\n            lowerLetterCount += txt.count(w =>\
    \ w.toLowerCase().isLetter)\n        }\n        val result = if (letterCount ==\
    \ wordsCount && wordsCount != 0 && letterCount % 2 == 1) {\n            Right(lettersCount\
    \ / 2)\n        } else {\n            Left(txt)\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpj2473a.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            lowerLetterCount += txt.count(\e[36mw\e[0m\
    \ => w.toLowerCase().isLetter)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzpj2473a.scala:21:49\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            lowerLetterCount\
    \ += txt.count(\e[36mw\e[0m => w.toLowerCase().isLetter)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpj2473a.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Right(lettersCount / \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Not found: lettersCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzpj2473a.scala:28:8 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Either[String, Nothing])\n\e[31m   |\e[0m     \
    \   Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var i = 0\n\
    \        var word = \"\"\n        var count = 0\n        var list = List[String]()\n\
    \        val ls = List('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n\
    \        for(x <- txt)\n        {\n            if(x.equals(\" \"))\n         \
    \   {\n                if(word != \"\")\n                {\n                 \
    \   list :+= word\n                    word =\"\"\n                    count =\
    \ 0\n                }\n                else\n                {\n            \
    \        if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            else if(x.equals(\",\"))\n \
    \           {\n                if(word != \"\")\n                {\n         \
    \           list :+= word\n                    word =\"\"\n                  \
    \  count = 0\n                }\n                else\n                {\n   \
    \                 if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            else if(x.toString.length ==\
    \ 1)\n            {\n                if(i < ls.length)\n                {\n  \
    \                  if(ls(i) == x.toString.toUpperCase())\n                   \
    \ {\n                        count += 1\n                        word += x.toString.toUpperCase\n\
    \                    }\n                    else\n                    {\n    \
    \                    if(count % 2 == 1)\n                        {\n         \
    \                   list :+= x.toString.toUpperCase\n                        }\n\
    \                        else\n                        {\n                   \
    \         list :+= x.toString.toLowerCase\n                        }\n       \
    \                 count = 0\n                        word += x.toString.toLowerCase\n\
    \                    }\n                }\n            }\n            else\n \
    \           {\n                if(word != \"\")\n                {\n         \
    \           list :+= word\n                    word =\"\"\n                  \
    \  count = 0\n                }\n                else\n                {\n   \
    \                 if(i >= ls.length)\n                        return Left[List[String]](list)\n\
    \                    else\n                        return Right((ls(i) +\"l\"\
    ))\n                }\n            }\n            i += 1\n        }\n        return\
    \ Right(count)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E023] Syntax Error: /tmp/tmpptfnimgj.scala:33:35 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                        \e[33mreturn\e[0m Left[\e[35mList\e\
    [0m[\e[35mString\e[0m]](list)\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Not enough type\
    \ arguments for scala.util.Left.apply[A, B]\n\e[31m   |\e[0m               expected:\
    \ [A, B]\n\e[31m   |\e[0m               actual:   [\e[35mList\e[0m[\e[35mString\e\
    [0m]]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptfnimgj.scala:35:38\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                        \e[33mreturn\e\
    [0m Right((ls(i) +\e[31m\"l\"\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \              Found:    String\n\e[31m   |\e[0m                             \
    \         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E023] Syntax Error:\
    \ /tmp/tmpptfnimgj.scala:49:35 ---------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m                        \e[33mreturn\e[0m Left[\e[35mList\e[0m[\e[35mString\e\
    [0m]](list)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not enough type arguments for scala.util.Left.apply[A,\
    \ B]\n\e[31m   |\e[0m               expected: [A, B]\n\e[31m   |\e[0m        \
    \       actual:   [\e[35mList\e[0m[\e[35mString\e[0m]]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpptfnimgj.scala:51:38 --------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                        \e[33mreturn\e[0m Right((ls(i)\
    \ +\e[31m\"l\"\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    String\n\e[31m   |\e[0m                                      Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling wi"
  stdout: ''
  timestamp: 1660029389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsList\
    \ = txt.split(\" \").map(_.toLowerCase)\n        val commasList = txt.split(\"\
    ,\")\n        val lowerCaseLetters = txt.toLowerCase.split(\"\").count(_ == 'a')\n\
    \        if(wordsList.isEmpty && commasList.isEmpty)\n            Right(lowerCaseLetters)\n\
    \        else if(wordsList.isEmpty || commasList.isEmpty)\n            Left(wordsList.length.toLong)\n\
    \        else\n            Either.fromRight(lowerCaseLetters)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps0vwx4zi.scala:17:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseLetters\e[0m =\
    \ txt.toLowerCase.split(\e[31m\"\"\e[0m).count(_ == \e[31m'a'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0vwx4zi.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(wordsList.length.toLong)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 Found:    Long\n\e[31m   |\e[0m                 Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps0vwx4zi.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Either.fromRight(lowerCaseLetters)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value fromRight is not a member of object scala.util.Either\n3 errors found\n"
  stdout: ''
  timestamp: 1660029388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var lc =\
    \ 0, odd = 0, oddWord = \"\"\n        txt.split(\" \").map(_.replaceAll(\"[^a-z]\"\
    , \"\")).foreach(word => {\n            word match {\n                case \"\
    a\" => lc += 1\n                case \"b\" => lc += 1\n                case \"\
    c\" => lc += 1\n                case \"d\" => lc += 1\n                case \"\
    e\" => lc += 1\n                case \"f\" => lc += 1\n                case \"\
    g\" => lc += 1\n                case \"h\" => lc += 1\n                case \"\
    i\" => lc += 1\n                case \"j\" => lc += 1\n                case \"\
    k\" => lc += 1\n                case \"l\" => lc += 1\n                case \"\
    m\" => lc += 1\n                case \"n\" => lc += 1\n                case \"\
    o\" => lc += 1\n                case \"p\" => lc += 1\n                case \"\
    q\" => lc += 1\n                case \"r\" => lc += 1\n                case \"\
    s\" => lc += 1\n                case \"t\" => lc += 1\n                case \"\
    u\" => lc += 1\n                case \"v\" => lc += 1\n                case \"\
    w\" => lc += 1\n                case \"x\" => lc += 1\n                case \"\
    y\" => lc += 1\n                case \"z\" => lc += 1\n                case _\
    \ => {\n                    val newWord = word.dropWhile(x => x != word.dropRight(1).head).toString.toLowerCase\n\
    \                    if (odd == 0) oddWord = newWord\n                    odd\
    \ += 1\n                }\n            }\n        })\n        if (lc % 2 != 0)\
    \ Right(List(oddWord))\n        else Left(List(oddWord))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0l2wpi8j.scala:15:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mlc\e[0m = \e[31m0\e[0m,\
    \ odd = \e[31m0\e[0m, oddWord = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m       \
    \           ^\e[0m\n\e[31m   |\e[0m                  end of statement expected\
    \ but ',' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l2wpi8j.scala:46:24\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                    \e[33mif\e\
    [0m (odd == \e[31m0\e[0m) oddWord = newWord\n\e[31m\e[31m   |\e[0m           \
    \             ^^^\e[0m\n\e[31m   |\e[0m                        Not found: odd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l2wpi8j.scala:46:34\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                    \e[33mif\e\
    [0m (odd == \e[31m0\e[0m) oddWord = newWord\n\e[31m\e[31m   |\e[0m           \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \          Not found: oddWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0l2wpi8j.scala:47:20 ------------------------\e[0m\e[0m\n\e[31m47 |\e\
    [0m                    odd += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \        ^^^\e[0m\n\e[31m   |\e[0m                    Not found: odd\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l2wpi8j.scala:51:36 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mif\e[0m (lc % \e[31m2\e[0m != \e[31m0\e\
    [0m) Right(List(oddWord))\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ oddWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l2wpi8j.scala:52:23\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33melse\e[0m Left(List(oddWord))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660029385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Your code goes here\n        val wordsList = mutable.ListBuffer[String]()\n\
    \        val commaSplit = txt.split(\",\")\n        val spaceSplit = txt.split(\"\
    \ \")\n        val lowercaseSplit = txt.map(x => x.toLowerCase)\n        val alphabetSplit\
    \ = lowercaseSplit.map(x => x.toInt).filter(x => x % 2 == 1)\n\n        wordsList\
    \ ++= spaceSplit\n        wordsList ++= commaSplit\n        wordsList ++= alphabetSplit\n\
    \n        if (wordsList.size == 3) {\n            Right(wordsList.size)\n    \
    \    } else {\n            Left(wordsList)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzuhdpesb.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordsList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzuhdpesb.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlowercaseSplit\e[0m = txt.map(\e\
    [36mx\e[0m => x.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660029389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.toLowerCase().split(\"\"\"\\s+\"\"\".r) // split on whitespace and capture\
    \ in regex group\n        var sum = 0L\n        var evenLetter = 0\n        for\
    \ (word <- words) {\n            if (word.length % 2 == 0) { // if even-length\n\
    \                sum += evenLetter\n                evenLetter = 0\n         \
    \   } else {\n                sum += word.count(letter => ('A'<=letter) && (letter<='Z'))\
    \ // count the lower-case letters in the word and add them to the sum\n      \
    \          evenLetter += word.count(letter => ('A'<=letter) && (letter<='Z'))\
    \ //add even-length letters to the even-length total\n            }\n        }\n\
    \        // If the even length count was odd we return it with the sum count\n\
    \        if (evenLetter % 2 != 0) Left(List(), sum)\n        else Right(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpev6hqnq8.scala:15:54\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m = txt.toLowerCase().split(\e[31m\"\"\"\\s+\"\"\"\e[0m.r) \e[34m// split on\
    \ whitespace and capture in regex group\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            Found:    scala.util.matching.Regex\n\e[31m   |\e\
    [0m                                     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpev6hqnq8.scala:28:38 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m (evenLetter % \e[31m2\e[0m != \e\
    [31m0\e[0m) Left(List(), sum)\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (List[Nothing], Long)\n\e[31m   |\e[0m                    \
    \                  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpev6hqnq8.scala:29:19 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33melse\e[0m Right(words)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (words\
    \ : Array[String])\n\e[31m   |\e[0m                   Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var words:\
    \ List[String] = Nil\n        var cnt: Long = 0\n        var w: String = txt(0)\n\
    \        var temp: String = w\n        for(i <- 0 until w.length) {\n        \
    \    if(i == w.length-1) {\n                words += w\n                cnt +=\
    \ w.toLowerCase == w.toUpperCase ? 1 : 0\n            } else {\n             \
    \   if(w.charAt(i) == w.charAt(i+1)) {\n                    cnt += w.toLowerCase\
    \ == w.toUpperCase ? 1 : 0\n                } else {\n                    cnt\
    \ += w.toLowerCase == w.toUpperCase ? 2 : -1\n                }\n            }\n\
    \            w = temp\n            temp = txt(i)\n        }\n        if(words.length\
    \ == 1) {\n            return Right(cnt)\n        } else {\n            return\
    \ Left(words)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpds5nyl2v.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mw\e\
    [0m: \e[35mString\e[0m = txt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Char\n\
    \e[31m   |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpds5nyl2v.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                words += w\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpds5nyl2v.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                cnt += w.toLowerCase\
    \ == w.toUpperCase ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member of Long.\n\
    \e[31m   |\e[0m      An extension method was tried, but could not be fully constructed:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          Long.long2float(cnt)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpds5nyl2v.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                cnt += w.toLowerCase == w.toUpperCase\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                 value ? is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpds5nyl2v.scala:25:24 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                    cnt += w.toLowerCase == w.toUpperCase ? \e\
    [31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value += is not a member of Long.\n\e[31m   |\e[0m      An\
    \ extension method was tried, but could not be fully constructed:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m          Long.long2float(cnt)\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpds5nyl2v.scala:25:58 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m      "
  stdout: ''
  timestamp: 1660029393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def getEvenOrder(n:\
    \ Int) : Long = n - ord('a')\n        val evenLetterCount = mutable.HashSet[Int]()\n\
    \        val wordsWithEvenOrder = mutable.HashMap[Int, List[String]]()\n     \
    \   var i = 0\n        val wordList = txt.split(\" \")\n        while (i < wordList.length)\
    \ {\n            val word = wordList(i)\n            if (!word.contains(\" \"\
    )) {\n                if (word.length < 2) {\n                    val oddLetterCount\
    \ = getEvenOrder(word.length)\n                    wordsWithEvenOrder.put(oddLetterCount,\
    \ word)\n                    evenLetterCount += oddLetterCount\n             \
    \   }\n                i += 1\n            } else {\n                val wordListWithEvenOrder\
    \ = word.split(\",\")\n                if (wordListWithEvenOrder.length == 1)\
    \ {\n                    val oddLetterCount = getEvenOrder(word.length)\n    \
    \                wordsWithEvenOrder.put(oddLetterCount, word)\n              \
    \      evenLetterCount += oddLetterCount\n                }\n                for\
    \ (word <- wordListWithEvenOrder) {\n                    val oddLetterCount =\
    \ getEvenOrder(word.length)\n                    wordsWithEvenOrder.put(oddLetterCount,\
    \ word)\n                    evenLetterCount += oddLetterCount\n             \
    \   }\n            }\n        }\n        if (evenLetterCount.size == 0) {\n  \
    \          return Right(evenLetterCount.size)\n        } else {\n            return\
    \ Left(wordsWithEvenOrder)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81be_1q8.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mgetEvenOrder\e[0m(\e[36mn\e\
    [0m: \e[35mInt\e[0m) : \e[35mLong\e[0m = n - ord(\e[31m'a'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^\e[0m\n\e[31m   |\e\
    [0m                                              Not found: ord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81be_1q8.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenLetterCount\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81be_1q8.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordsWithEvenOrder\e[0m\
    \ = mutable.HashMap[\e[35mInt\e[0m, \e[35mList\e[0m[\e[35mString\e[0m]]()\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val txtWords\
    \ = txt.split(\" \") \n        if(txtWords.size == 0) Left(List[String]())\n \
    \       else if(txtWords.size == 1) Right(txtWords(0).toLong)\n        else Left(txtWords)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxf9j267_.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Left(txtWords)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          Found:    (txtWords : Array[String])\n\e[31m   |\e[0m             \
    \     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n    val words : List[String]\
    \ = txt.split(\" \").map(_.toLowerCase).toList\n    var count = 1\n    words.foreach\
    \ {\n        word =>\n            if(word.contains(\",\")){\n                val\
    \ words = word.split(',')\n                count = count + 1\n               \
    \ words.foreach(word => count = count + 2)\n            } else {\n           \
    \     count = count + 1\n            }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp38phehg8.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp38phehg8.scala:38:1\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) matches \".*[a-zA-Z]*\"){\n                if(txt(i).toLower.size\
    \ == txt(i).toUpper.size){\n                    result.append(txt(i).toLower)\n\
    \                } else {\n                    result.append(txt(i))\n       \
    \         }\n            } else {\n                result.append(txt(i))\n   \
    \         }\n        }\n        result.size match {\n            case 0 => Right(result.size)\n\
    \            case _ => Left(result)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_7w_uty.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_7w_uty.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(txt(i)\
    \ matches \e[31m\".*[a-zA-Z]*\"\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr_7w_uty.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(txt(i).toLower.size ==\
    \ txt(i).toUpper.size){\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value size is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var countLettersOdd\
    \ = 1l\n        val txtSplit = txt.split(\" \")\n        val wordsList = txtSplit.map\
    \ { line =>\n            val lineLower = line.toLowerCase\n            val count\
    \ = line.length\n            val countLowerOdd = (count + 1).filter(x => x % 2\
    \ == 0).map(x => x - 1).filter(x => x % 2 == 0).map(x => x - 1).sum\n        \
    \    countLowerOdd == 0 match {\n                case true => line.split(\",\"\
    ).map(x => x.trim)\n                case false => line.split(\",\").toList.map(x\
    \ => x.trim).toList\n            }\n        }\n        val wordsCount = wordsList.map(x\
    \ => x.length).sum\n        val countLettersEven = txtSplit.map(x => x.length).sum\n\
    \        val rightValue = countLettersOdd + (countLettersEven - countLettersOdd)\n\
    \        val leftValue = countLettersOdd + (txtSplit.length - countLettersOdd\
    \ - countLettersEven)\n        val finalEither = wordsCount.map(x => Right(x)).orElse(Left((wordsCount.sum\
    \ + countLettersEven.toLong)))\n        finalEither\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1uyb_vyq.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcountLowerOdd\e[0m =\
    \ (count + \e[31m1\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e\
    [0m).map(\e[36mx\e[0m => x - \e[31m1\e[0m).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x - \e[31m1\e[0m).sum\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1uyb_vyq.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordsCount\e[0m = wordsList.map(\e\
    [36mx\e[0m => x.length).sum\n\e[31m\e[31m   |\e[0m                           \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     value length is not a member of Object\n\e[31m\e[31m-- Error: /tmp/tmp1uyb_vyq.scala:26:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mwordsCount\e[0m = wordsList.map(\e[36mx\e[0m => x.length).sum\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029395
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        Left(List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2felxch.scala:19)\n\tat Problem.main(tmpa2felxch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val arr =\
    \ new mutable.ArrayBuffer.empty[String]\n        txt.split(\"[,\\\\s]+\").foreach(x\
    \ => if(x.length > 0) arr += x else ())\n        val even = arr.filter(x => x.matches(\"\
    [a-z]\")).length % 2 != 0\n        val len = arr.length\n        val nlen = even.filter(_\
    \ == 'a').length * 2\n        if(arr.length == 0) Right(nlen)\n        else if(len\
    \ == 0) Left(arr.toString)\n        else if(len == nlen) Left(arr.mkString(\"\
    a\"))\n        else Right(nlen)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg9oh8gds.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lc =\
    \ txt.filter(x => x.toLowerCase contains ('a', 'b' ,'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z')).size\n        val comma = txt.filter(x => x.toLowerCase contains\
    \ (',')).size\n        val odd = txt.filter(x => x.toLowerCase contains ('a',\
    \ 'b' ,'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')).filter(x => x % 2 != 0).size\n\
    \        Either.right(lc + comma + odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7yf_n_3.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlc\e[0m = txt.filter(\e\
    [36mx\e[0m => x.toLowerCase contains (\e[31m'a'\e[0m, \e[31m'b'\e[0m ,\e[31m'c'\e\
    [0m, \e[31m'd'\e[0m, \e[31m'e'\e[0m, \e[31m'f'\e[0m, \e[31m'g'\e[0m, \e[31m'h'\e\
    [0m, \e[31m'i'\e[0m, \e[31m'j'\e[0m, \e[31m'k'\e[0m, \e[31m'l'\e[0m, \e[31m'm'\e\
    [0m, \e[31m'n'\e[0m, \e[31m'o'\e[0m, \e[31m'p'\e[0m, \e[31m'q'\e[0m, \e[31m'r'\e\
    [0m, \e[31m's'\e[0m, \e[31m't'\e[0m, \e[31m'u'\e[0m, \e[31m'v'\e[0m, \e[31m'w'\e\
    [0m, \e[31m'x'\e[0m, \e[31m'y'\e[0m, \e[31m'z'\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpj7yf_n_3.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcomma\e[0m = txt.filter(\e\
    [36mx\e[0m => x.toLowerCase contains (\e[31m','\e[0m)).size\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                            value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpj7yf_n_3.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = txt.filter(\e\
    [36mx\e[0m => x.toLowerCase contains (\e[31m'a'\e[0m, \e[31m'b'\e[0m ,\e[31m'c'\e\
    [0m, \e[31m'd'\e[0m, \e[31m'e'\e[0m, \e[31m'f'\e[0m, \e[31m'g'\e[0m, \e[31m'h'\e\
    [0m, \e[31m'i'\e[0m, \e[31m'j'\e[0m, \e[31m'k'\e[0m, \e[31m'l'\e[0m, \e[31m'm'\e\
    [0m, \e[31m'n'\e[0m, \e[31m'o'\e[0m, \e[31m'p'\e[0m, \e[31m'q'\e[0m, \e[31m'r'\e\
    [0m, \e[31m's'\e[0m, \e[31m't'\e[0m, \e[31m'u'\e[0m, \e[31m'v'\e[0m, \e[31m'w'\e\
    [0m, \e[31m'x'\e[0m, \e[31m'y'\e[0m, \e[31m'z'\e[0m)).filter(\e[36mx\e[0m => x\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m                \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpj7yf_n_3.scala:18:15 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        Either.right(lc + comma + odd)\n\e[31m\e[31m   |\e[0m \
    \      "
  stdout: ''
  timestamp: 1660029396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt match\
    \ {\n            case \"\" => Right(0)\n            case \" \" => Right(0) //\
    \ no whitespaces, return number of letters\n            case \",\" => Right(0)\
    \ // no commas, return number of letters\n            case x => Right(x.toString.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeagey22r.scala:23)\n\tat Problem.main(tmpeagey22r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        val numWords = words.length\n\
    \        if (words.length > 0) {\n            words.map(_.toLowerCase).toList\n\
    \        } else {\n            Left(numWords)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjo16usg4.scala:18:37\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            words.map(_.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    List[String]\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32mEither\e[0m\e[1m\e[32m[\e[0mList[String\e[1m\e[32m]\e[0m\e[1m\e[32m,\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjo16usg4.scala:20:17 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Left(numWords)\n\e[31m\e[31m   |\e[0m        \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    (numWords :\
    \ Int)\n\e[31m   |\e[0m                 Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      val splits\
    \ = txt.split(\"[\\\\s,]+\")\n      val wordCount = splits.filter(_.trim().nonEmpty).length\n\
    \      wordCount match {\n        case 0 => Left(List[String]())\n        case\
    \ 1 => Right(splits.length)\n        case 2 => Right(if (splits(1).equals(\",\"\
    )) splits.length else 1)\n      }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2iiittcl.scala:24)\n\tat Problem.main(tmp2iiittcl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\").map(_.toLowerCase())\n        val withWhitespaces =\
    \ words.filterNot(_.isEmpty)\n        val withoutWhitespaces = words.filter(_\
    \ != \"\")\n        val withoutCommas = withoutWhitespaces.filterNot(_.contains(\"\
    ,\"))\n        val withoutLowercaseLetters = withoutCommas.filterNot(_.contains(\"\
    a\"))\n        val withoutLowercaseLettersOdd = withoutLowercaseLetters.filter(_\
    \ % 2 == 1)\n        val withoutLowercaseLettersEven = withoutLowercaseLetters.filter(_\
    \ % 2 == 0)\n        val withoutLowercaseLettersOddOrder = withoutLowercaseLettersOdd.filter(_\
    \ % 26 ==1)\n        val withoutLowercaseLettersEvenOrder = withoutLowercaseLettersEven.filter(_\
    \ % 26 ==0)\n        val withoutLowercaseLettersOddAndEvenOrder = withoutLowercaseLettersEven.filter(_\
    \ % 26 == 1)\n        val withoutLowercaseLettersOddAndEvenOrderOdd = withoutLowercaseLettersOdd.filter(_\
    \ % 26 == 0)\n        val withoutLowercaseLettersOddAndEvenOrderEven = withoutLowercaseLettersEven.filter(_\
    \ % 26 == 1)\n\n        if (withoutLowercaseLettersOddOrder.isEmpty){\n      \
    \      Right(withoutLowercaseLettersOddOrder.length)\n        }\n        else\
    \ if (withoutLowercaseLettersOddOrder.contains(withoutLowercaseLettersOddOrder.head)){\n\
    \            Right(withoutLowercaseLettersOddOrder.length)\n        }\n      \
    \  else if (withoutLowercaseLettersEvenOrder.isEmpty){\n            Right(withoutLowercaseLettersEvenOrder.length)\n\
    \        }\n        else if (withoutLowercaseLettersEvenOrder.contains(withoutLowercaseLettersEvenOrder.head)){\n\
    \            Right(withoutLowercaseLettersEvenOrder.length)\n        }\n     \
    \   else if (withoutLowercaseLettersOddAndEvenOrder.isEmpty){\n            Right(withoutLowercaseLettersOddAndEvenOrder.length)\n\
    \        }\n        else if (withoutLowercaseLettersOddAndEvenOrder.contains(withoutLowercaseLettersOddAndEvenOrder.head)){\n\
    \            Right(withoutLowercaseLettersOddAndEvenOrder.length)\n        }\n\
    \        else if (withoutLowercaseLettersOddAndEvenOrderEven.isEmpty){\n     \
    \       Right(withoutLowercaseLettersOddAndEvenOrderEven.length)\n        }\n\
    \        else if (withoutLowercaseLettersOddAndEvenOrderEven.contains(withoutLowercaseLettersOddAndEvenOrderEven.head)){\n\
    \            Right(\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdmfervmw.scala:50:18 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            Right(\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdmfervmw.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpdmfervmw.scala:20:74 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mwithoutLowercaseLettersOdd\e[0m =\
    \ withoutLowercaseLetters.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdmfervmw.scala:21:75\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwithoutLowercaseLettersEven\e[0m = withoutLowercaseLetters.filter(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdmfervmw.scala:22:82\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mwithoutLowercaseLettersOddOrder\e[0m = withoutLowercaseLettersOdd.filter(_\
    \ % \e[31m26\e[0m ==\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                    "
  stdout: ''
  timestamp: 1660029402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        def countChar\
    \ (txt: String) : Long = {\n            val c = mutable.Map[Char, Long]()\n  \
    \          txt.foreach(_.toCharArray.zipWithIndex.foreach { case (c: Char, i)\
    \ =>\n                if (c.isLetter) c(c) += 1\n            })\n            c.toSeq.sortBy(_._1).map(a\
    \ => a._2).sum\n        }\n        val words = txt.trim().split(\" \").map(x =>\
    \ x.replaceAll(\"\\\\W\", \"\").toLowerCase).toList\n        if (words.exists(_\
    \ == \"abcdef\") || words.exists(_ == \"acfdeb\")) {\n            Left(words)\n\
    \        } else {\n            Right(countChar(txt))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhcarau1.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhcarau1.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            txt.foreach(_.toCharArray.zipWithIndex.foreach\
    \ { \e[33mcase\e[0m (c: \e[35mChar\e[0m, i) =>\n\e[31m\e[31m   |\e[0m        \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value\
    \ toCharArray is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val wordsArray\
    \ = txt.split(\"[,\\\\s]+\")\n        var count = 1\n        var splitArray =\
    \ wordsArray\n        for(word <- splitArray){\n            splitArray = splitArray.filter(x\
    \ => !x.equals(word))\n            count += splitArray.size\n        }\n     \
    \   if(splitArray.size > 1)\n            Right(count)\n        else\n        \
    \    Left(splitArray.toList)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoblven99.scala:28)\n\tat Problem.main(tmpoblven99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \  = mutable.List[String]()\n        val count  = mutable.Map[Char, Long]()\n\n\
    \        for(c <- txt.toCharArray()) {\n            count += (c,count.getOrElse(c,\
    \ 1L))\n        }\n\n        for(c <- count.keys) {\n            if((count-=c).toInt\
    \ % 2 == 1) {\n                words += c\n            }\n        }\n\n      \
    \  if(words.length == 0) Right(0) else Left(words)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vbzii73.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m  = mutable.List[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4vbzii73.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m  = mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val splits\
    \ = txt.split(\"[ ,]+\").map((_.toLowerCase match {\n            case \" \" =>\
    \ \"\"\n            case \",\" => \",\"\n            case _ => throw new Exception(\"\
    Invalid input\")\n        }))\n        // Split on the commas\n        val commaSplit\
    \ = splits.filterNot(_.isEmpty)\n        // Split on the spaces\n        val spaceSplit\
    \ = splits.filterNot(_.isEmpty)\n        // Find the word count for the longest\
    \ word in the list\n        val longestWordLength: Int = spaceSplit.maxBy(_.length)\n\
    \        // Count the number of words with odd order\n        val oddOrderWordCount:\
    \ Long = commaSplit.count(w => w.toInt == (ord(w) - ord(\"a\") + 1))\n       \
    \ val wordCount = oddOrderWordCount + spaceSplit.size\n        // Return either\
    \ an error or the correct count\n        if(wordCount.toInt != longestWordLength.toInt)\
    \ {\n            Left(List(new Exception(\"Invalid input\"), wordCount.toInt))\n\
    \        } else {\n            Right(wordCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ftr5rha.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlongestWordLength\e\
    [0m: \e[35mInt\e[0m = spaceSplit.maxBy(_.length)\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    String\n\e[31m   |\e[0m    \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8ftr5rha.scala:27:72 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moddOrderWordCount\e[0m:\
    \ \e[35mLong\e[0m = commaSplit.count(\e[36mw\e[0m => w.toInt == (ord(w) - ord(\e\
    [31m\"a\"\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                                                  ^^^\e[0m\n\e[31m   |\e[0m \
    \                                                         Not found: ord\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ftr5rha.scala:31:22 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            Left(List(\e[33mnew\e[0m \e[35mException\e\
    [0m(\e[31m\"Invalid input\"\e[0m), wordCount.toInt))\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    Exception\n\e[31m   |\e[0m                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ftr5rha.scala:31:64\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            Left(List(\e[33mnew\e\
    [0m \e[35mException\e[0m(\e[31m\"Invalid input\"\e[0m), wordCount.toInt))\n\e\
    [31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1660029400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt.toLowerCase().trim.split(\"\
    \ \")\n            .filter(_.nonEmpty)\n            .flatMap(_.split(\" \"))\n\
    \            .countBy(word => word.toLowerCase())\n            .toSeq.map(c =>\
    \ if (c.key.toString.size == 1) c.key.toString.toInt else c.key.toString.toLong)\n\
    \            .filter(c => c % 2 != 0).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplpc9jdpf.scala:18:13 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        txt.toLowerCase().trim.split(\e[31m\" \"\e[0m)\n\
    \e[31m16 |\e[0m            .filter(_.nonEmpty)\n\e[31m17 |\e[0m            .flatMap(_.split(\e\
    [31m\" \"\e[0m))\n\e[31m18 |\e[0m            .countBy(\e[36mword\e[0m => word.toLowerCase())\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        value countBy is not\
    \ a member of Array[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var numWords\
    \ : Long = 0\n        val splits = txt.split(\" \").toList\n        val words\
    \ : List[String] = splits.filter(_ != \" \").filter(_ != \",\").toList\n     \
    \   for(i <- 0 to words.length-1 if words.charAt(i) == \" \") numWords++\n   \
    \     if (words.length % 2 == 0) Right(numWords) else Left[List[String], Long](numWords)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsmuietrb.scala:18:74 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to words.length-\e\
    [31m1\e[0m \e[33mif\e[0m words.charAt(i) == \e[31m\" \"\e[0m) numWords++\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^\e[0m\n\e[31m   |\e[0m                                        expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsmuietrb.scala:18:46 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to words.length-\e[31m1\e[0m \e[33mif\e\
    [0m words.charAt(i) == \e[31m\" \"\e[0m) numWords++\n\e[31m\e[31m   |\e[0m   \
    \                                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                       value charAt is not a member of List[String]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ArrayBuffer.empty[String]\n        var count : Long = 0\n        for(word\
    \ <- txt.split(\" \")) {\n            if(!word.isEmpty) {\n                words\
    \ += word\n                count += 1\n            }\n        }\n        if(words.length\
    \ != count) {\n            Left(words)\n        } else {\n            Right(count)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgxqmurtl.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      var numWords\
    \ : Long = 0\n      var wordCounts : mutable.Map[String, Long] = mutable.Map[String,\
    \ Long]()\n      var words : List[String] = Nil\n      val words = txt.split(\"\
    \\\\s\")\n\n      for (i <- words) {\n        if (i == \"\") {\n          numWords\
    \ += 1\n          wordCounts = mutable.Map[String, Long]()\n          wordCounts\
    \ += word -> 1\n        } else {\n          wordCounts += word -> 1\n        }\n\
    \      }\n      \n      val sortedWordCounts = wordCounts.toSeq.sortWith((a, b)\
    \ => a._1 < b._1)\n      var odd = sortedWordCounts.head._2 % 2\n      var upperCaseWordCount\
    \ = 0\n      for (word <- sortedWordCounts) {\n        if (word._1 % 2 == 0 &&\
    \ word._2 % 2 == 0) {\n          upperCaseWordCount += 1\n        }\n      }\n\
    \n      return Right(numWords + odd + upperCaseWordCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeuj07_j5.scala:18:10 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mwords\e[0m = txt.split(\e\
    [31m\"\\\\s\"\e[0m)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwords is already defined as \e[33mvariable\e[0m \e[35mwords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpeuj07_j5.scala:16:23 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m      \e[33mvar\e[0m \e[36mwordCounts\e[0m : mutable.Map[\e[35mString\e\
    [0m, \e[35mLong\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpeuj07_j5.scala:16:51 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m      \e[33mvar\e[0m \e[36mwordCounts\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeuj07_j5.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m          wordCounts = mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val pattern\
    \ = \"[, ]+\".r\n        val words: List[String] = pattern.findAllIn(txt).map(x\
    \ => x.group(0)).filter(x => x.length > 0).map(x => x.toLowerCase).toList\n  \
    \      val commas: List[String] = pattern.findAllIn(txt).map(x => x.group(0)).filter(x\
    \ => x.length > 0).map(x => x.toLowerCase).toList\n        if (commas.isEmpty)\n\
    \            Left(words)\n        else\n            Right(words.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxbt2v526.scala:16:68 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = pattern.findAllIn(txt).map(\e[36mx\e[0m => x.group(\e\
    [31m0\e[0m)).filter(\e[36mx\e[0m => x.length > \e[31m0\e[0m).map(\e[36mx\e[0m\
    \ => x.toLowerCase).toList\n\e[31m\e[31m   |\e[0m                            \
    \                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                          value group is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxbt2v526.scala:16:92 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = pattern.findAllIn(txt).map(\e[36mx\e[0m => x.group(\e\
    [31m0\e[0m)).filter(\e[36mx\e[0m => x.length > \e[31m0\e[0m).map(\e[36mx\e[0m\
    \ => x.toLowerCase).toList\n\e[31m\e[31m   |\e[0m                            \
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue length is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import concurrent.duration.pairIntToDuration\n\
    \e[31m   |\e[0m  import concurrent.duration.pairLongToDuration\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxbt2v526.scala:16:115 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = pattern.findAllIn(txt).map(\e[36mx\e[0m => x.group(\e\
    [31m0\e[0"
  stdout: ''
  timestamp: 1660029403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var splitStr\
    \ = new scala.collection.mutable.StringBuilder\n        var numOfLetters : Long\
    \ = 0\n        var numOfWords : Long = 0\n        val words = txt.split(\",\"\
    )\n\n        for(word <- words) {\n            var splitWord : String = new StringBuilder\n\
    \            val wordArr = word.split(\" \")\n            for(word1 <- wordArr)\
    \ word1.toLowerCase match {\n                case letter if letter.isLetter =>\n\
    \                    if(numOfLetters % 2 == 0) {\n                        splitStr\
    \ += word1 + \" \"\n                    } else {\n                        numOfWords\
    \ += 1\n                        splitStr += word1 + \" \"\n                  \
    \  }\n                    numOfLetters += 1\n                case letter =>\n\
    \                    splitStr += word1 + \" \"\n            }\n        }\n   \
    \     numOfWords = numOfWords.toInt\n        if (splitStr.length == 0) Right(numOfWords)\n\
    \        else Left(splitStr.delete(0, splitStr.length).toList)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0v014um.scala:21:37\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e\
    [36msplitWord\e[0m : \e[35mString\e[0m = \e[33mnew\e[0m \e[35mStringBuilder\e\
    [0m\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    StringBuilder\n\
    \e[31m   |\e[0m                                     Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb0v014um.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter.isLetter =>\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0v014um.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                        splitStr\
    \ += word1 + \e[31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    Found:    String\n\e[31m   |\e[0m                                    Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0v014um.scala:29:36\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        splitStr\
    \ += word1 + \e[31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \    Found:    String\n\e[31m   |\e[0m                                    Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0v014um.scala:33:32\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    splitStr\
    \ += word1 + \e[31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:"
  stdout: ''
  timestamp: 1660029403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val splits\
    \ = txt.split(\"\\\\s+\").toList\n        val splitsWithCommas = txt.split(\"\
    ,+\").toList\n        if (splits.isEmpty) {\n            if (splitsWithCommas.isEmpty)\
    \ {\n                return Right(List(\"l\"))\n            } else {\n       \
    \         return Right(List(\"l\", \"l\"))\n            }\n        }\n       \
    \ if (splitsWithCommas.isEmpty) {\n            val lowerCaseLetters = txt filter\
    \ (x => x.toLower.contains(x)) map (x => x.toLowerCase) filter (x => x != \"\"\
    ) filter (x => x.contains(\"l\") && !x.contains(\"l\")) map (x => x.toDouble)\
    \ filter (x => x % 2 == 0)\n            if (lowerCaseLetters.size == 1) {\n  \
    \              return Right(List(lowerCaseLetters.head))\n            } else {\n\
    \                return Left(List(lowerCaseLetters.size))\n            }\n   \
    \     }\n        val lowerCaseLetters = txt filter (x => x.toLower.contains(x))\
    \ map (x => x.toLowerCase) filter (x => x != \"\") filter (x => x.contains(\"\
    l\") && !x.contains(\"l\")) map (x => x.toDouble) filter (x => x % 2 == 0)\n \
    \       val upperCaseLetters = txt filter (x => x.toUpper.contains(x)) map (x\
    \ => x.toUpper) filter (x => x != \"\") filter (x => x.contains(\"L\") && !x.contains(\"\
    L\")) map (x => x.toDouble) filter (x => x % 2 == 0)\n        if (lowerCaseLetters.size\
    \ == 1 && upperCaseLetters.size == 1) {\n            return Right(List(lowerCaseLetters.head,\
    \ upperCaseLetters.head))\n        } else if (lowerCaseLetters.size == 1 && upperCaseLetters.size\
    \ != 1) {\n            return Right(List(lowerCaseLetters.head))\n        } else\
    \ if (lowerCaseLetters.size != 1 && upperCaseLetters.size == 1) {\n          \
    \  return Left(List(lowerCaseLetters.size, upperCaseLetters.head))\n        }\
    \ else {\n            val allLetters = lowerCaseLetters.toList.::(upperCaseLetters.toList).::(splitsWithCommas.map(x\
    \ => x.replace(\",\", \"\").toLowerCase)).toList\n            if (allLetters.size\
    \ == 1) {\n                return Right(List(allLetters.head))\n            }\
    \ else {\n                return Left(List(allLetters.size))\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpocxg1cm_.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mreturn\e\
    [0m Right(List(\e[31m\"l\"\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:  \
    \  List[String]\n\e[31m   |\e[0m                             Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpocxg1cm_.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mreturn\e\
    [0m Right(List(\e[31m\"l\"\e[0m, \e[31m\"l\"\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \               Found:    List[String]\n\e[31m   |\e[0m                      \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocxg1cm_.scala:25:62\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlowerCaseLetters\e[0m = txt filter (\e[36mx\e[0m => x.toLower.contains(x))\
    \ map (\e[36mx\e[0m => x.toLowerCase) filter (\e[36mx\e[0m => x != \e[31m\"\"\e\
    [0m) filter (\e[36mx\e[0m => x.contains(\e[31m\"l\"\e[0m) && !x.contains(\e[31m\"\
    l\"\e[0m)) map (\e[36mx\e[0m => x.toDouble) filter (\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpocxg1cm_.scala:25:87 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mlowerCaseLetters\e[0m = txt\
    \ filter (\e[36mx\e[0m => x.toLower.contains(x)) map (\e[36mx\e[0m => x.toLowerCase)\
    \ filter (\e[36mx\e[0m => x != \e[31m\"\"\e[0m) filter (\e[36mx\e[0m => x.contains(\e\
    [31m\"l\"\e[0m) && !x.contains(\e[31m\"l\"\e[0m)) map (\e[36mx\e[0m => x.toDouble)\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      "
  stdout: ''
  timestamp: 1660029405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val result\
    \ = for {\n            words <- split(txt, \" ,.!?-\\n\")\n            _ <- words.size\
    \ match {\n                case 0 => Left(words)\n                case s if (s\
    \ == 1) => Right(s.toLong)\n                case s => Right(s.toLong + 1)\n  \
    \          }\n        } yield words\n\n        result.fold(\n            left\
    \ => Left(left),\n            right => Right(right.sum.toLong)\n        )\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9jbbdc_.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            words <- split(txt, \e[31m\" ,.!?-\\n\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Not found: split\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt ==\
    \ \"\") return Left(List())\n        val splits = txt.split(\" \")\n        if(splits.length\
    \ == 0) return Left(List())\n        val words = splits.map(_.toLowerCase).distinct\n\
    \        if(words.isEmpty) Left(List())\n        else Right(words.size)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt64ni6d7.scala:23)\n\tat Problem.main(tmpt64ni6d7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        txt match\
    \ {\n            case null => \"null\"\n            case s => s.split(\",\").toList\
    \ map {_.toLowerCase } match {\n                case Nil => Left(List[String]())\n\
    \                case list => Right(list.size)\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7txc98qu.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e\
    [31mnull\e[0m => \e[31m\"null\"\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:    (\e[32m\"\
    null\"\e[0m : String)\n\e[31m   |\e[0m                         Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n      txt.split(\"\
    \ \").map(_.toLowerCase).filter(_.contains(\",\")).map(_.split(\",\").map(_.toLowerCase)).flatten.toList.flatMap(_\n\
    \        .count(_ == \" \")).toList.groupBy(_.count(_ == \" \").asInstanceOf[Int])\
    \ % 2\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqdk0z7cg.scala:16:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        .count(_ == \e[31m\" \"\e[0m)).toList.groupBy(_.count(_\
    \ == \e[31m\" \"\e[0m).asInstanceOf[Int]) % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqdk0z7cg.scala:16:43 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        .count(_ == \e[31m\" \"\e[0m)).toList.groupBy(_.count(_ == \e[31m\"\
    \ \"\e[0m).asInstanceOf[Int]) % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue count is not\
    \ a member of Nothing, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var numUpper\
    \ = txt.filter(_.isUpper).size\n        var numLower = txt.filter(_.isLower).size\n\
    \        var numLetters = numUpper + numLower\n        if (numLetters % 2 != 0)\
    \ {\n            Right(numLetters)\n        } else {\n            Left(txt.split(\"\
    [\\\\s]\").map(_.toLowerCase).mkString(\",\"))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw45dtz1c.scala:21:63\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Left(txt.split(\e\
    [31m\"[\\\\s]\"\e[0m).map(_.toLowerCase).mkString(\e[31m\",\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    String\n\e[31m   |\e[0m       \
    \          Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s\")\n        if (words.length == 0) Left(List.empty[String])\n\
    \        else if (words.length == 1) Right(words.head.size)\n        else {\n\
    \            val evenWordCount = (for (w <- words) yield w.length) filter { _\
    \ % 2 == 0 }.sum\n            val oddWordCount = (for (w <- words) yield w.length)\
    \ filter { _ % 2 != 0 }.sum\n            if (evenWordCount % 2 == 1 && oddWordCount\
    \ % 2 != 0) Right(evenWordCount)\n            else if (evenWordCount % 2 != 1\
    \ && oddWordCount % 2 == 0) Right(oddWordCount)\n            else if (evenWordCount\
    \ % 2 == 0 && oddWordCount % 2 == 1) Right(evenWordCount + oddWordCount)\n   \
    \         else Left(List(words.mkString(\",\")))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpw_xuknps.scala:19:75 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenWordCount\e[0m =\
    \ (\e[33mfor\e[0m (w <- words) \e[33myield\e[0m w.length) filter { _ % \e[31m2\e\
    [0m == \e[31m0\e[0m }.sum\n\e[31m\e[31m   |\e[0m                             \
    \                                              ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 % 2\
    \ == 0.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpw_xuknps.scala:20:74 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddWordCount\e[0m =\
    \ (\e[33mfor\e[0m (w <- words) \e[33myield\e[0m w.length) filter { _ % \e[31m2\e\
    [0m != \e[31m0\e[0m }.sum\n\e[31m\e[31m   |\e[0m                             \
    \                                             ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2 % 2\
    \ != 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw_xuknps.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (evenWordCount % \e[31m2\e\
    [0m == \e[31m1\e[0m && oddWordCount % \e[31m2\e[0m != \e[31m0\e[0m) Right(evenWordCount)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of Array[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw_xuknps.scala:21:71\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (evenWordCount\
    \ % \e[31m2\e[0m == \e[31m1\e[0m && oddWordCount % \e[31m2\e[0m != \e[31m0\e[0m)\
    \ Right(evenWordCount)\n\e[31m\e[31m   |\e[0m                                \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               "
  stdout: ''
  timestamp: 1660029408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.ArrayBuffer.empty[String]\n        for (w <- txt.toString.split(\"\
    \ \")) {\n            if (w.contains(\",\"))\n                Right(words.toList.length)\n\
    \            else if (w.contains(\",\"))\n                Right(words.toList.length)\n\
    \            else Right(words.append(w.toLowerCase))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnmt_m9qe.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnmt_m9qe.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (w <- txt.toString.split(\e[31m\"\
    \ \"\e[0m)) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Either[List[String], Long]\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m (w.contains(\e[31m\",\"\e[0m))\n\e[31m18 |\e\
    [0m                Right(words.toList.length)\n\e[31m19 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (w.contains(\e[31m\",\"\e[0m))\n\e[31m20 |\e[0m            \
    \    Right(words.toList.length)\n\e[31m21 |\e[0m            \e[33melse\e[0m Right(words.append(w.toLowerCase))\n\
    \e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val split\
    \ = txt.split(\"[,]\");\n        val count = split.map(_.length).filter(_ % 2\
    \ != 0).sum\n        val left = split.filter(_ % 2 == 0).sum\n        Left(List(split)\
    \ ++ List(\"[\", count, \"]\") ++ List(\"[\", left, \"]\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdeu27l__.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = split.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpdeu27l__.scala:17:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = split.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                 \
    \                              ^\e[0m\n\e[31m   |\e[0m                No implicit\
    \ Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:\
    \    B is a type variable with constraint >: String\n\e[31m   |\e[0m         \
    \       .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdeu27l__.scala:18:13\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        Left(List(split) ++ List(\e\
    [31m\"[\"\e[0m, count, \e[31m\"]\"\e[0m) ++ List(\e[31m\"[\"\e[0m, left, \e[31m\"\
    ]\"\e[0m))\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    List[Matchable]\n\e[31m   |\e[0m  \
    \           Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if(txt.contains(\"\
    \ \")) {\n            val splitted = txt.split(\" \");\n            if(splitted.length\
    \ == 2) {\n                return Right(splitted);\n            } else if(splitted.length\
    \ == 1) {\n                return Left(splitted);\n            } else {\n    \
    \            return Left(splitted.length)\n            }\n        } else {\n \
    \           val splitted = txt.split(\",\")\n            if(splitted.length ==\
    \ 2) {\n                return Right(splitted);\n            } else if(splitted.length\
    \ == 1) {\n                return Left(splitted);\n            } else {\n    \
    \            return Left(splitted.length)\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6qngy7f.scala:18:29\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mreturn\e\
    [0m Right(splitted);\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (splitted : Array[String])\n\
    \e[31m   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6qngy7f.scala:20:28 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mreturn\e[0m Left(splitted);\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (splitted : Array[String])\n\e[31m   |\e\
    [0m                            Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg6qngy7f.scala:22:37 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mreturn\e[0m Left(splitted.length)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    Int\n\e[31m   |\e[0m         \
    \                   Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg6qngy7f.scala:27:29 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                \e[33mreturn\e[0m Right(splitted);\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                        Found:    (splitted : Array[String])\n\e[31m   |\e[0m\
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg6qngy7f.scala:29:28 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mreturn\e[0m Left(splitted);\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    "
  stdout: ''
  timestamp: 1660029408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = mutable.Buffer[String]()\n        val numLowercaseChars = mutable.Buffer(0)\n\
    \        for (char <- txt.iterator) {\n            if (char.equals(\" \") || char.equals(\"\
    ,\"))\n                words += char\n            if (char >= 'a' && char <= 'z')\
    \ {\n                numLowercaseChars += char\n            }\n        }\n   \
    \     val numLowercaseCharsNum = numLowercaseChars.sum + 1\n        return numLowercaseCharsNum.toEither\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2h9o4jz.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.Buffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn2h9o4jz.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumLowercaseChars\e[0m =\
    \ mutable.Buffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"[ ,]+\").toList\n        if (words.length == 1) {\n          \
    \  Right(List(txt))\n        } else {\n            val firstWord = words(0)\n\
    \            val numUppercaseLetters = firstWord.filter(_.isUppercase).length\n\
    \            val numLowercaseLetters = firstWord.filter(_.isLowercase).length\n\
    \            val wordLength = (words(0).length * words.size)\n            val\
    \ numOddLetters = (numLowercaseLetters.toDouble + numUppercaseLetters.toDouble\
    \ * 2 - wordLength).toInt\n            Right(if (numOddLetters.toDouble % 2 ==\
    \ 0) words(0) else words(0).toString + numOddLetters.toString + numLowercaseLetters.toString)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn4oi3em.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(List(txt))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           Found:    List[String]\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphn4oi3em.scala:20:57\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumUppercaseLetters\e[0m = firstWord.filter(_.isUppercase).length\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isUppercase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphn4oi3em.scala:21:57\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumLowercaseLetters\e[0m = firstWord.filter(_.isLowercase).length\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isLowercase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn4oi3em.scala:24:60\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Right(\e[33mif\e\
    [0m (numOddLetters.toDouble % \e[31m2\e[0m == \e[31m0\e[0m) words(\e[31m0\e[0m)\
    \ \e[33melse\e[0m words(\e[31m0\e[0m).toString + numOddLetters.toString + numLowercaseLetters.toString)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn4oi3em.scala:24:69\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            Right(\e[33mif\e\
    [0m (numOddLetters.toDouble % \e[31m2\e[0m == \e[31m0\e[0m) words(\e[31m0\e[0m)\
    \ \e[33melse\e[0m words(\e[31m0\e[0m).toStr"
  stdout: ''
  timestamp: 1660029408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        try {\n \
    \           val words = txt.split(\"\\\\w+\")\n            val numOfOddLetters\
    \ = (0 to 25).count( (x => words.toList.zipWithIndex.map( y => y(0) ).exists(\
    \ x => x % 2 == 1 ) ) )\n            return Right(numOfOddLetters)\n        }\n\
    \        catch {\n            case _ : Exception => Left(List(txt))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxu8wprtf.scala:17:115 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mnumOfOddLetters\e[0m\
    \ = (\e[31m0\e[0m to \e[31m25\e[0m).count( (\e[36mx\e[0m => words.toList.zipWithIndex.map(\
    \ \e[36my\e[0m => y(\e[31m0\e[0m) ).exists( \e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m ) ) )\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \   ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        var word\
    \ = \"\"\n        var numOfLowerLettersOdd = 0.0\n        for ( i <- 0 until txt.length\
    \ ) {\n            word += txt(i)\n            if( txt(i) == ' ' ) {\n       \
    \         numOfLowerLettersOdd = numOfLowerLettersOdd + 1.0\n            }\n \
    \       }\n        if( word.length == 0 )\n            Left(List())\n        else\
    \ if( word.length > 0 && word.length <= 255) {\n            Right(word.split(\"\
    \ \").length.toLong)\n        } else {\n            val splitOnComma = word.split(\"\
    ,\").length.toLong\n            Right(splitOnComma)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19ga3sg3.scala:33)\n\tat Problem.main(tmp19ga3sg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.exists(_\
    \ == ' ')) {\n            Left(txt.split(' ').toList)\n        } else {\n    \
    \        Right(txt.count(_ == ','))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnawv3syu.scala:22)\n\tat Problem.main(tmpnawv3syu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"[^a-zA-Z]+\")\n        if (words.size > 1) {\n            Right(List(words))\n\
    \        } else if (words.isEmpty) {\n            Left(0)\n        } else {\n\
    \            val lowerCaseLetters = words.toList.map(_.toLowerCase)\n        \
    \    val evenLetters = lowerCaseLetters.filter(letter => letter % 2 == 0)\n  \
    \          val odd = lowerCaseLetters.filter(letter => letter % 2 != 0)\n    \
    \        if (evenLetters.size == odd.size) {\n                Right(evenLetters.size)\n\
    \            } else {\n                Left(0)\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjyk64cl_.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Right(List(words))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    List[Array[String]]\n\e[31m   |\e[0m                 \
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjyk64cl_.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyk64cl_.scala:22:71\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = lowerCaseLetters.filter(\e[36mletter\e[0m => letter\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyk64cl_.scala:23:63\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = lowerCaseLetters.filter(\e[36mletter\e[0m => letter % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjyk"
  stdout: ''
  timestamp: 1660029409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lettersAndOddCounts\
    \ = (txt split (\" \")).map {\n            s => (s.toLowerCase (), s.length)\n\
    \        }.toList\n\n        val counts = lettersAndOddCounts.groupBy (_._1).map\
    \ (_._2).foldLeft (Map[Char, Long]())((counts, c) => counts + (c + (1 -> (counts(c._1)\
    \ % 2))))\n        if (counts contains 'z')\n            Right(lettersAndOddCounts.length)\n\
    \        else if (counts contains 'a')\n            Left(counts('a').toLong.toString\
    \ + \"l\")\n        else\n            Left(counts.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbe6k42q.scala:19:123 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = lettersAndOddCounts.groupBy\
    \ (_._1).map (_._2).foldLeft (Map[\e[35mChar\e[0m, \e[35mLong\e[0m]())((\e[36mcounts\e\
    [0m, \e[36mc\e[0m) => counts + (c + (\e[31m1\e[0m -> (counts(c._1) % \e[31m2\e\
    [0m))))\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                          ^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[(String, Int)], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbbe6k42q.scala:19:141 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = lettersAndOddCounts.groupBy\
    \ (_._1).map (_._2).foldLeft (Map[\e[35mChar\e[0m, \e[35mLong\e[0m]())((\e[36mcounts\e\
    [0m, \e[36mc\e[0m) => counts + (c + (\e[31m1\e[0m -> (counts(c._1) % \e[31m2\e\
    [0m))))\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                         value _1 is\
    \ not a member of List[(String, Int)]\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbbe6k42q.scala:23:17 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \            Left(counts(\e[31m'a'\e[0m).toLong.toString + \e[31m\"l\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 Found:    String\n\e[31m   |\e[0m            \
    \     Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbbe6k42q.sca"
  stdout: ''
  timestamp: 1660029409
