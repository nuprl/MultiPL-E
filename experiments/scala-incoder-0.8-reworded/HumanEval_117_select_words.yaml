name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        val words = s.split\n\n        if (words.length == 0) {\n \
    \           return Nil\n        }\n\n        var found = 0\n        var list:\
    \ List[String] = Nil\n\n        words.foreach(w => if (found.compareTo(n) == 0L)\
    \ {\n            found += 1\n            if (found == n)\n                list\
    \ ::= w\n        }) \n\n        return list", "        // Your code goes here\n\
    \        var ret: List[String] = List()\n        val myset = s.toSet\n       \
    \ var cnt: Long = 0\n        for (w <- myset) {\n            if (w.toString.count(_\
    \ == 'a') > n || w.toString.count(_ == 'e') > n || w.toString.count(_ == 'i')\
    \ > n || w.toString.count(_ == 'o') > n || w.toString.count(_ == 'u') > n) {\n\
    \                cnt += 1\n            }\n            if (cnt == n) {\n      \
    \          ret += w\n            }\n        }\n        if (ret.size == 0) {\n\
    \            ret\n        } else {\n            ret\n        }", "        val\
    \ words = mutable.ListBuffer[String]()\n        for (i <- 0 until s.length - 1)\
    \ if (s(i).isConsonant && s.substring(i, i+1).isConsonant) {\n            val\
    \ next = s.substring(i+1, i+2)\n            if (next.length == n) words += next\n\
    \        }\n        if (s.length == 0) words.toList\n        else words", "  \
    \      val r = new scala.collection.mutable.StringBuilder(s)\n        var i :\
    \ Int = 0\n        while (i < r.length) {\n            if (r.charAt(i) == ' ')\
    \ { \n                if (r.length == i) \n                    r.clear()\n   \
    \             else\n                    r.setCharAt(i, ' ')\n            }\n \
    \           i += \n                if (r.charAt(i) != ' ') \n                \
    \    r.length\n                else if (r.charAt(i) == ' ' && r.length != i) \n\
    \                    1\n                else\n                    -1\n       \
    \ }\n        if (n == 1l) \n            List(s)\n        else if (r.length ==\
    \ 0) \n            Nil\n        else \n            r.split(\" \").map(_.toUpperCase).filter(_.size\
    \ == n).sorted", "        val list = s.split(\" \").toList\n        var result\
    \ = List()\n        for (i<-0 until list.size) {\n            if ((list.count(elem\
    \ => elem.contains(s(i), i, n)) > 0l)) {\n                result += list(i)\n\
    \            }\n        }\n        if (result.isEmpty) List()\n        else result",
  "        val map = mutable.HashMap()\n        // We use a mutable map to track how\
    \ each word is seen \n        val words = mutable.ArrayBuffer.empty[String]\n\
    \        \n        // We use a mutable Set to track how each character is seen\n\
    \        val characters = mutable.Set.empty[Char]\n        \n        // We iterate\
    \ through the characters in the string\n        for(i <- 0 until s.length()) {\n\
    \            val c = s.charAt(i)\n            \n            // If this character\
    \ has been seen before\n            if(map.contains(c)) {\n                val\
    \ prev = map.get(c).get\n                // If n is greater than the current number\
    \ of consonants \n                // seen on this character\n                if(n\
    \ == prev) {\n                    characters -= c\n                } else {\n\
    \                    // Otherwise, keep adding to the set\n                  \
    \  characters -= c\n                    characters += c\n                }\n \
    \           } else {\n                // Otherwise, keep adding to the set\n \
    \               characters -= c\n                characters += c\n           \
    \ }\n            \n            // If the character is in the set, add the word\
    \ to the list\n            if(characters.contains(c)) {\n                words\
    \ += s.substring(i)\n            }\n            \n            // Update the map\
    \ if the character was previously seen\n            if(map.contains(c)) {\n  \
    \              map.get(c) += n\n            } else {\n                map.put(c,\
    \ Set(n))\n            }\n        }\n        \n        // Return the list\n  \
    \      words.toList", "        var result = List[String]()\n        for(c <- s.toCharArray)\
    \ {\n            if(c.toString.toList.filter(_ == 'b').length == n || c.toString.toList.filter(_\
    \ == 'c').length == n || c.toString.toList.filter(_ == 'd').length == n || c.toString.toList.filter(_\
    \ == 'f').length == n || c.toString.toList.filter(_ == 'g').length == n || c.toString.toList.filter(_\
    \ == 'h').length == n || c.toString.toList.filter(_ == 'j').length == n || c.toString.toList.filter(_\
    \ == 'k').length == n || c.toString.toList.filter(_ == 'l').length == n || c.toString.toList.filter(_\
    \ == 'm').length == n || c.toString.toList.filter(_ == 'n').length == n || c.toString.toList.filter(_\
    \ == 'p').length == n || c.toString.toList.filter(_ == 'r').length == n || c.toString.toList.filter(_\
    \ == 's').length == n || c.toString.toList.filter(_ == 't').length == n || c.toString.toList.filter(_\
    \ == 'v').length == n || c.toString.toList.filter(_ == 'w').length == n || c.toString.toList.filter(_\
    \ == 'x').length == n || c.toString.toList.filter(_ == 'z').length == n) {\n \
    \               result += [s]\n            }\n        }\n        result", "  \
    \      var result: List[String] = Nil\n        var i = 0\n        var last: Option[String]\
    \ = None\n        while (i < s.length() && i <= n) {\n            if (s.charAt(i)\
    \ == '\\\\') {\n                i += 1\n            }\n            if (s.charAt(i)\
    \ == ' ') {\n                if (!last.isDefined) {\n                    last\
    \ = Some(s.substring(i, i + 1))\n                } else {\n                  \
    \  result ::= last.get\n                    last = Some(\"\")\n              \
    \  }\n            }\n            i += 1\n        }\n        if (!last.isDefined)\
    \ {\n            result ::= last.get\n        }\n        result", '        //
    TODO: define words with exactly n consonants.', "        // base case: empty string\
    \ \n        if (s == \"\") List.empty[String]\n        else {\n            val\
    \ list = new mutable.ListBuffer[String]()\n            var index = 0\n       \
    \     var c = 0\n            var currentChar = s.charAt(index)\n            var\
    \ letterCount = 0\n            while (index < s.length) {\n                c +=\
    \ 1\n                letterCount += s.charAt(index).toString.toInt\n         \
    \       index += 1\n                if (letterCount == n) {\n                \
    \    list += currentChar\n                }\n                currentChar = s.charAt(index)\n\
    \                letterCount = 0\n            }\n            list += currentChar\n\
    \            list.toList\n        }", "        val words: List[String] = if(s.isEmpty)\
    \ Nil else {\n            val len = s.length\n            val consonants = mutable.Set[Char](\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        \
    \    val lastConsonant: String = \"\"\n            var currentIndex = 0\n\n  \
    \          while(currentIndex < len) {\n                if(consonants.contains(s.charAt(currentIndex)))\
    \ {\n                    currentIndex += 1\n                }\n              \
    \  else if(s.charAt(currentIndex) == lastConsonant) {\n                    currentIndex\
    \ += 1\n                }\n                else {\n                    lastConsonant\
    \ = s.charAt(currentIndex)\n                    words += s.substring(currentIndex,\
    \ currentIndex + 1).replaceAll(\"[^a-zA-Z ]\", \"\")\n                    currentIndex\
    \ += 1\n                }\n            }\n            words\n        }\n     \
    \   val result = words.length == n\n        if(result) words\n        else Nil",
  "        val lst = ListBuffer[String]()\n        for {\n            i <- 0 until\
    \ s.length\n            c <- 0 until s.length\n        } yield {\n           \
    \ if (s.length != 0 && !c.isLetter) lst\n            else {\n                var\
    \ a = i\n                var b = c\n                var c = n - 1\n          \
    \      while (a < b) if (s.charAt(a) == s.charAt(b)) a += 1; else c -= 1\n   \
    \             if (c == 0) lst += s.substring(a, b + 1)\n            }\n      \
    \  }\n        lst.toList", "        var index = 0\n        var result: List[String]\
    \ = Nil\n        while (index < s.length - 1) {\n            val next = s.charAt(index\
    \ + 1)\n            if (next == n || next == ' ') {\n                result ::=\
    \ s.substring(index + 1, s.length)\n                index += 1\n            }\
    \ else {\n                index += 1\n            }\n        }\n        return\
    \ result", "        if (s.length == 0) Nil\n        else {\n            def find(s:\
    \ List[Char], n : Long, acc : List[String]) : List[String] = \n              \
    \  if (s.length >= n) acc :: (for {\n                        c <- s\n        \
    \                cn <- if (c == ' ') Nil else List(c + \"\")\n               \
    \ } yield cn :: acc)\n                else find((s.drop(1), n, acc), n, Nil)\n\
    \n            find(s.drop(1), n, Nil)\n        }", "        val list = s.split(\"\
    \ \").toList\n        if (list.length < 1) return Nil\n        val words = list.map(x\
    \ => x.replaceAll(\"\"\"\\W*\"\"\", \"\").toLowerCase + \" \").toList\n      \
    \  val maxLen = (words.length - 1) * n / 2\n        val retList = words.tail.flatMap(x\
    \ => if (x.matches(\"\"\"\\W*\"\"\")\n                                       \
    \        x.replaceAll(\"\"\"\\W*\"\"\", \"\").toLowerCase\n                  \
    \                             else List.empty)\n                             \
    \               .takeWhile(_ <= maxLen)\n                                    \
    \        .sorted)\n        if (words.length <= n) retList\n        else retList.drop(retList.length)",
  "        val stringList = List(\"a\",\"\",\"b\",\"\",\"c\",\"\",\"d\",\"\",\"e\"\
    ,\"\",\"f\",\"\",\"g\",\"\",\"h\",\"\",\"i\",\"\",\"j\",\"\",\"k\",\"\",\"l\"\
    ,\"\",\"m\",\"\",\"n\",\"\",\"o\",\"\",\"p\",\"\",\"q\",\"\",\"r\",\"\",\"s\"\
    ,\"\",\"t\",\"\",\"u\",\"\",\"v\",\"\",\"w\",\"\",\"x\",\"\",\"y\",\"\",\"z\"\
    ,\"\",\"A\",\"\",\"B\",\"\",\"C\",\"\",\"D\",\"\",\"E\",\"\",\"F\",\"\",\"G\"\
    ,\"\",\"H\",\"\",\"I\",\"\",\"J\",\"\",\"K\",\"\",\"L\",\"\",\"M\",\"\",\"N\"\
    ,\"\",\"O\",\"\",\"P\",\"\",\"Q\",\"\",\"R\",\"\",\"S\",\"\",\"T\",\"\",\"U\"\
    ,\"\",\"V\",\"\",\"W\",\"\",\"X\",\"\",\"Y\",\"\",\"Z\",\"\")\n        val characterList\
    \ = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\",\"\")\n        val vowelList = List(\"a\",\"e\",\"i\",\"o\",\"u\",\"\
    A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelCount = stringList.foldLeft(Map.empty[String,\
    \ Long])((acc, string) => {\n            for (v <- vowelList) \n             \
    \   if (string.contains(v))\n                    acc += ((v,string.length))\n\
    \        })\n        val nonVowelCount = stringList.foldLeft(Map.empty[String,\
    \ Long])((acc, string) => {\n            for (v <- vowelList) \n             \
    \   if (!string.contains(v))\n                    acc += ((v,string.length))\n\
    \        })\n        val consonantCount = characterList.foldLeft(Map.empty[String,\
    \ Long])((acc, char) => {\n            for (c <- consonantList) \n           \
    \     if (string.contains(c))\n                    acc += ((c,string.length))\n\
    \        })\n        val consonantCount = characterList.foldLeft(Map.empty[String,\
    \ Long])((acc, char) => {\n            for (c <- consonantList) \n           \
    \     if (!string.contains(c))\n                    acc += ((c,string.length))\n\
    \        })\n\n        val result = nonVowelCount.filter((v, n) => n == n).keySet.toList.filter(k\
    \ => consonantCount.contains(k)).toList\n", "        val words  = s.toLowerCase().split(\"\
    \ \").map(_.trim).toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => \n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        )\n        result.toList",
  "        val count = countConsonants(s)\n        val consonants = count(s) - n\n\
    \        if (consonants > 0)\n            findWords(s, n, count(s))\n        else\n\
    \            List()", "        val words = s.split(\" \")\n        val ans = words.foldLeft(List(\"\
    \"))((acc, x) => {\n        val letter = x(0)\n        val num = x(1)\n      \
    \  if(acc == \"\") {\n            if (num > n) acc :+ x\n            else {\n\
    \                acc :+ x\n                if (num == n) acc :+ x\n          \
    \  }\n        } else if(num < n) acc :+ x\n        else { acc :+ x\n         \
    \   if (num == n) acc :+ x\n        }\n        })\n        ans.toList", "    \
    \    // Your code here\n        val chars = s.toCharArray\n        val len = s.length\n\
    \        if (len == 0)\n            return []\n        if (len == 1)\n       \
    \     if (chars(0) == ' '\n                && n <= 1\n                && n >=\
    \ len)\n                return List()\n            else\n                return\
    \ List()\n        if (chars(0) == ' ')\n            selectWords(s.substring(1),\
    \ n)\n        else\n            val rem = s.substring(1).toLowerCase\n       \
    \     if (n == len)\n                if (rem == 'q')\n                    return\
    \ List()\n                else\n                    rem.toCharArray.filter (_\
    \ == 'q').toList\n            else\n                rem :: selectWords(rem, n-1).filter\
    \ (_ == ' ').toList", "        var list = s.split(\" \").toList\n        if (list.isEmpty)\
    \ list.init\n        var nC : Long = 0\n        for (x <- list.tail) if (nC <=\
    \ n) if (x.toString.toList.filter(x => x =~ \"\" && x.toString.toList.count(x\
    \ => x =~ \"a\") <= n && x.toString.toList.count(x => x =~ \"e\") <= n && x.toString.toList.count(x\
    \ => x =~ \"i\") <= n && x.toString.toList.count(x => x =~ \"o\") <= n && x.toString.toList.count(x\
    \ => x =~ \"u\") <= n) nC += 1\n        list.tail.init", "        var list = List[String]()\n\
    \        var temp = \"\"\n        val n = math.max(4l, 3l) // limit the search\
    \ to 4 or 3 letters\n        var i = 0\n        while (i < s.length && n > 0)\
    \ {\n            if (s.charAt(i) == 'a' && s.charAt(i + 1) == 'm' && s.charAt(i\
    \ + 2) == 'y') {\n                temp += \" a\"\n                n -= 1\n   \
    \         } else if (s.charAt(i) == 'e' && s.charAt(i + 1) == 'c' && s.charAt(i\
    \ + 2) == 'l' && s.charAt(i + 3) == 'l') {\n                temp += \" e\"\n \
    \               n -= 1\n            } else if (s.charAt(i) == 'h' && s.charAt(i\
    \ + 1) == 'e' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 'o') {\n       \
    \         temp += \" h\"\n                n -= 1\n            } else if (s.charAt(i)\
    \ == 'l' && s.charAt(i + 1) == 'l') {\n                temp += \" l\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'o' && s.charAt(i + 1)\
    \ == 'o') {\n                temp += \" o\"\n                n -= 1\n        \
    \    } else if (s.charAt(i) == 'u' && s.charAt(i + 1) == 'c' && s.charAt(i + 2)\
    \ == 'l' && s.charAt(i + 3) == 's' && s.charAt(i + 4) == 'm' && s.charAt(i + 5)\
    \ == 'e') {\n                temp += \" u\"\n                n -= 1\n        \
    \    } else if (s.charAt(i) == 'a' && s.charAt(i + 1) == 'm' && s.charAt(i + 2)\
    \ == 'y' && s.charAt(i + 3) == 'o' && s.charAt(i + 4) == 'e') {\n            \
    \    temp += \" y\"\n                n -= 1\n            } else if (s.charAt(i)\
    \ == 'e' && s.charAt(i + 1) == 'c' && s.charAt(i + 2) == 'l' && s.charAt(i + 3)\
    \ == 'l' && s.charAt(i + 4) == 'y') {\n                temp += \" e\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'h' && s.charAt(i + 1)\
    \ == 'e' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 'o' && s.charAt(i + 4)\
    \ == 'l' && s.charAt(i + 5) == 'l') {\n                temp += \" h\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'l' && s.charAt(i + 1)\
    \ == 'l' && s.charAt(i + 2) == 'l') {\n                temp += \" l\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'o' && s.charAt(i + 1)\
    \ == 'o' && s.charAt(i + 2) == 'o') {\n                temp += \" o\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'u' && s.charAt(i + 1)\
    \ == 'c' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 's' && s.charAt(i + 4)\
    \ == 'm' && s.charAt(i + 5) == 'e' && s.charAt(i + 6) == 'n') {\n            \
    \    temp += \" u\"\n", "        // Base case: if the given string s is empty\
    \ then the solution should be an empty list.\n        s match {\n            case\
    \ \"\" => Nil\n            case _ => \n                var s = s\n           \
    \     var n = n\n                var list = List[String]()\n                while\
    \ (n > 0) {\n                    list += s.substring(s.indexOf(' ')).trim\n  \
    \                  s = s.substring(s.indexOf(' ', s.indexOf(' ') + 1).toString.length\
    \ + 1).trim\n                    n--\n                }\n                list\n\
    \        }", "        var result : List[String] = Nil\n        if (s.isEmpty)\n\
    \            result\n        else if (n >= s.size)\n            result\n     \
    \   else\n            result += s.substring(0,n)\n            var resultSet :\
    \ Set[String] = Set[String]()\n            var counter : Long = 0\n          \
    \  for (i <- 0 until s.length - n)\n                if (s(i) isConsonant)\n  \
    \                  counter += 1\n            resultSet += s.substring(0,n)\n \
    \           for (i=n+1 until s.length)\n                if (s(i) isConsonant)\n\
    \                    counter += 1\n            if (counter > resultSet.size)\n\
    \                resultSet += s.substring(0,n)\n            result += resultSet.toList\n\
    \            selectWords(s, n+1)", "        if(s.isEmpty) List()\n        else\
    \ {\n        val vowels = \"aeiouy\"\n        var l = s.toLowerCase\n        val\
    \ letters: List[String] = new ListBuffer[String]()\n        val vowel_pos = 1\n\
    \        var cons_pos = 0\n        for(i <- 1 until l.length) {\n            if(cons_pos\
    \ == n) {\n                letters append (l.substring(i,i + n))\n           \
    \     letters.append(vowels.substring(vowel_pos, vowel_pos + 1))\n           \
    \     cons_pos = 0\n                letters.append(vowels.substring(vowel_pos\
    \ + 1, vowel_pos + n))\n                letters.append(l.substring(i, i + n))\n\
    \                letters.append(vowels.substring(vowel_pos + 1, vowel_pos + n))\n\
    \                cons_pos = 0\n                letters.append(vowels.substring(vowel_pos\
    \ + 1, vowel_pos + n))\n                letters.append(l.substring(i, i + n))\n\
    \                cons_pos = 0\n                letters.append(l.substring(i, i\
    \ + n))\n                cons_pos = 0\n                letters.append(l.substring(i,i\
    \ + n))\n            }\n            else if(cons_pos > 0) {\n                if(l.charAt(i)\
    \ == vowels.charAt(vowel_pos)) {\n                    cons_pos += 1\n        \
    \            vowel_pos += 1\n                }\n            }\n        }\n   \
    \     letters.toList\n        }", "        var words: mutable.List[String] = Nil\n\
    \        var index = 0\n        while(index < s.length){\n            if(s.substring(index,\
    \ index + n.toInt).forall(x => x != ' ')){\n                words = words :+ s.substring(index,\
    \ index + n.toInt)\n            }\n            index += 1\n        }\n       \
    \ return words.toList", "        val m = s.length\n        var i : Long = 0\n\
    \        var j : Long = 0\n        var k : Long = 0\n        var l : Long = 0\n\
    \        var ls : List[String] = List()\n        while (i < n) {\n           \
    \ if (j < m) {\n                if (s.charAt(j) == ' ') {\n                  \
    \  k += 1\n                    j += 1\n                } else {\n            \
    \        l += 1\n                    j += 1\n                }\n            }\
    \ else {\n                ls = ls :+ s.substring(i)\n                i += 1\n\
    \                j = 0\n            }\n        }\n        if (l == 0) {\n    \
    \        ls = ls :+ s.substring(i)\n        }\n        ls.toList", "        val\
    \ res : List[String] = s.split(\" \").filter(_.length == n)\n        res.toList",
  "        def wordCount (w : String, count : Long) : List[String] =\n           \
    \ if (w.length == count) w :: Nil\n            else wordCount(w.substring(0,count),\
    \ count) ++ w.substring(count) :: Nil\n\n        def splitWords(w : String) :\
    \ List[String] =\n            w.splitAt(w.lastIndexOf(' '))\n\n        // We start\
    \ with a list of all possible words in our list\n        val list = \n       \
    \     s.split(\" \").flatMap { w =>\n                if (w.length <= n) Nil\n\
    \                else {\n                    val count = \n                  \
    \      w.substring(0,w.length - 1).lastIndexOf(' ')\n                    if (count\
    \ == -1) Nil\n                    else wordCount(w, count).reverse\n         \
    \       }\n            }.toList\n        \n        if (s.isEmpty) Nil\n      \
    \  else list.reverse", "        def helper(s1 : String, s2 : String, counter :\
    \ Long) : List[String] = {\n            if (s1.isEmpty) {\n                return\
    \ Nil\n            } else if (s2.size == counter) {\n                return List(s1.toUpperCase)\n\
    \            } else {\n                val x = s2.substring(counter, s2.size)\n\
    \                val y = s1.toUpperCase\n                return x :: helper(s1,\
    \ x + y, counter + 1)\n            }\n        }\n        helper(s, \"\", 0).toList",
  "        val result: List[String] = Nil\n        val stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until s.length)\n            stack push (s.charAt(i).toChar)\n\
    \        while (stack.nonEmpty) {\n            val c = stack.pop()\n         \
    \   for (i <- 0 until c.length)\n                stack push ((c.charAt(i) + n).toChar)\n\
    \            if (c.size == n) result ::= c.mkString(\"\")\n        }\n       \
    \ return result.toList", "      var res = new Array[String](0)\n      val c =\
    \ s.toCharArray\n      val l = c.length - 1\n      val m = c.drop(l).filter(_\
    \ == ' ').length\n      val r = c.take(m).filter(_ == ' ').length\n      val k\
    \ = c.takeWhile(_ == ' ').dropWhile(_ == ' ').length\n      \n      if (n == 0\
    \ || m == 0 || k == 0) {\n        return res\n      }\n      if (n == l) {\n \
    \       res = res + c.drop(l + 1).filter(_ == ' ')\n      }\n      if (k == r)\
    \ {\n        res = res + c.take(l - k).filter(_ == ' ')\n      }\n      res",
  "        val list = s.split(\" \").toList\n        val newList = []\n        list.foreach(x\
    \ => {\n            if(x.contains(\"l\") || x.contains(\"t\") || x.contains(\"\
    a\") || x.contains(\"p\") || x.contains(\"h\") || x.contains(\"e\")){\n      \
    \          newList += x\n            }\n        })\n        list.foreach(x =>\
    \ {\n            if(x.contains(\"d\") || x.contains(\"s\") || x.contains(\"c\"\
    ) || x.contains(\"m\") || x.contains(\"i\") || x.contains(\"u\") || x.contains(\"\
    e\")){\n                newList += x\n            }\n        })\n        list.foreach(x\
    \ => {\n            if(x.contains(\"p\") || x.contains(\"e\")){\n            \
    \    newList += x\n            }\n        })\n        list.foreach(x => {\n  \
    \          if(x.contains(\"t\") || x.contains(\"s\") || x.contains(\"a\") || x.contains(\"\
    r\") || x.contains(\"n\") || x.contains(\"y\")){\n                newList += x\n\
    \            }\n        })\n        list.foreach(x => {\n            if(x.contains(\"\
    a\") || x.contains(\"s\") || x.contains(\"h\") || x.contains(\"d\") || x.contains(\"\
    r\") || x.contains(\"e\")){\n                newList += x\n            }\n   \
    \     })\n        list.foreach(x => {\n            if(x.contains(\"n\") || x.contains(\"\
    o\") || x.contains(\"m\") || x.contains(\"u\")){\n                newList += x\n\
    \            }\n        })\n        list.foreach(x => {\n            if(x.contains(\"\
    u\")){\n                newList += x\n            }\n        })\n        list.foreach(x\
    \ => {\n            if(x.contains(\"l\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"y\") || x.contains(\"a\") || x.contains(\"\
    p\") || x.contains(\"h\") || x.contains(\"e\")){\n                newList += x\n\
    \            }\n        })\n        newList.take(n)", "        val words: List[String]\
    \ = s.split(\" \").filter{ _.length > 0 }\n        if (words.length > 0 && n >=\
    \ 0l && n <= words.length)\n            words.sortWith(_ < _).drop(n - 1l).take(n\
    \ - 1l).map(_.trim).filter(_.nonEmpty).toList\n        else List[String]()", " \
    \       val words  = s.split(' ').toList\n        val consonants = List.fill(n)(List('a',\
    \ 'e', 'i', 'o', 'u', 'y'))\n        val consonants = consonants.distinct\n  \
    \      val finalWords = words.filter(word => consonants.forall(_.contains(word)))\n\
    \        finalWords.toList", "        val wordSet = s.split(\" \").toSet\n   \
    \     val result = mutable.ListBuffer[String]()\n        for (word <- wordSet.toList)\
    \ {\n            val count = word.split(\"\").count(c => c.toUpperCase == \"A\"\
    \ || c.toUpperCase == \"E\" || c.toUpperCase == \"I\" || c.toUpperCase == \"O\"\
    \ || c.toUpperCase == \"U\")\n            if (count == n) result += \"(\" + word\
    \ + \")\"\n        }\n        \n        result.toList", "      val count = mutable.Set[Char]()\n\
    \      for(i <- 0 to s.length - 1) {\n        if(s.charAt(i) == ' ') {\n     \
    \     count.clear()\n        } else {\n          count += s.charAt(i)\n      \
    \  }\n      }\n      count.toList.map(x => s.substring(0,i) + x).filter(x => x.length\
    \ == n).toList", "         // TODO: Write code here.\n         var count = n\n\
    \         var ans: List[String] = List()\n         if (s.isEmpty) ans\n      \
    \   else {\n           for(a <- s)\n              if(Character.getType(a) == Character.CONSONANT)\
    \ {\n                count -= 1\n                ans ::= a\n                if\
    \ (count < 0)\n                  break\n              }\n         }\n        \
    \ ans", "        val l = s.toLowerCase\n        val m = n / 2\n        val n =\
    \ n % 2\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowels = \"aeiou\"\n        val wordsList = mutable.List.empty[String]\n\
    \n        for(i <- 0 until l.length) {\n            for(j <- 0 until m.toInt)\
    \ {\n                val c = consonants(i)\n                val v = vowels(i)\n\
    \                if (l.charAt(i) == c && l.charAt(i + m) == v) {\n           \
    \         if (wordsList.size == n) {\n                        wordsList += l.substring(i\
    \ + 2, i + j + 2)\n                    }\n                }\n            }\n \
    \       }\n        return wordsList.filterNot(_.isEmpty)", "        var ans: List[String]\
    \ = Nil\n        val vowels = \"aeiou\".toSet\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .toSet\n        var count = n\n        var i = 0\n        var word = \"\"\n  \
    \      while (i < s.length()) {\n            val c = s(i).toChar\n           \
    \ word += c\n            i += 1\n            if (count > 1) {\n              \
    \  count += 1\n                i = 0\n            }\n            else {\n    \
    \            if (count == 1) {\n                    if (consonants.contains(word.charAt(0)))\
    \ {\n                        ans = ans :+ word\n                    }\n      \
    \              word = \"\"\n                }\n            }\n        }\n    \
    \    if (ans.isEmpty) {\n            ans = Nil\n        }\n        ans", "   \
    \     var str = \"\"\n        if (s.isEmpty) List(\"\")\n        else {\n    \
    \        for(i <- 0 until s.length) str+=s.charAt(i).toUpperCase \n          \
    \  val strArray = str.split(\"\")\n            val newArry = strArray.groupBy(x=>\
    \ x.take(n).toLowerCase).values.toList\n            newArry.map(k=> k.toList.sorted.mkString(\"\
    \")).flatten\n        }", "        val vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\")\n        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"z\")\n        var tempList = List[String]()\n        var\
    \ index = 0\n        var j = 0\n        while s.nonEmpty {\n            if (consonants.contains(s.charAt(index)))\
    \ tempList ::= s.substring(index, index + 1)\n            else {\n           \
    \     while (vowels.contains(s.charAt(index)) && index < s.length - 1) {\n   \
    \                 index += 1\n                }\n                if (vowels.contains(s.charAt(index)))\
    \ {\n                    tempList ::= s.substring(index, index + 1)\n        \
    \        }\n            }\n            index += 1\n        }\n        if (tempList.size\
    \ < n) tempList ::= s.substring(s.length - 1, s.length)\n        else tempList",
  "        val ls = s.toLowerCase // to lowercase s so we don't have to deal with\
    \ upper and lower case\n        val n = n-1 // because we want to match \"b\"\
    \ or \"c\"\n        val words = (for {\n            w <- ls.split(\" \") \n  \
    \          if (w.length == n)\n            if (w.split(\"\").filter(x => x.toLower\
    \ == x).length == n)\n        } yield w).toList\n        return words.toList",
  "        def vowels(s: String) : List[String] = {\n            def isVowel(s: String)\
    \ : Boolean = {\n                s.toList match {\n                    case Nil\
    \ => false\n                    case x :: xs if x == 'a' || x == 'e' || x == 'i'\
    \ || x == 'o' || x == 'u' => true\n                    _ => false\n          \
    \      }\n            }\n            val vowelsList = List(\n                'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n            )\n            val\
    \ nonVowelsList = List(\n                'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\n          \
    \  )\n            val vowels = vowelsList filter isVowel\n            val nonVowels\
    \ = nonVowelsList filter isVowel\n            (vowels ++ nonVowels).toList\n \
    \       }\n\n        def isWord(s : String) : Boolean = {\n            def isValidChar(s:\
    \ String) : Boolean = {\n                s.toList match {\n                  \
    \  case Nil => false\n                    case x :: xs if x == 'a' || x == 'e'\
    \ || x == 'i' || x == 'o' || x == 'u' => true\n                    _ => false\n\
    \                }\n            }\n            val nonVowelsList = List(\n   \
    \             'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\n            )\n            val nonVowels\
    \ = nonVowelsList filter isValidChar\n            val vowelsList = List(\n   \
    \             'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n            )\n\
    \            val vowels = vowelsList filter isValidChar\n            (vowels ++\
    \ nonVowels).toList\n        }\n\n        def filterWord(s : String) : List[String]\
    \ = {\n            def isWord(s : String) : Boolean = {\n                s.toList\
    \ match {\n                    case Nil => false\n                    case x ::\
    \ xs if x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' => true\n   \
    \                 _ => false\n                }\n            }\n            def\
    \ isValidChar(s: String) : Boolean = {\n                s.toList match {\n   \
    \                 case Nil => false\n                    case x :: xs if x ==\
    \ 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' => true\n              \
    \      _ => false\n                }\n            }\n            def isVowel(s:\
    \ String) : Boolean = {\n                s.toList match {\n", "        if(s.isEmpty)\
    \ List()\n        else if(s.size < n * 6) List(s)\n        else {\n          \
    \  val list = s.split(' ')\n            val r = list.map(_.replaceAll(\"(?<=\\\
    \\w)\\\\S\", \"l\")).filter(_.size % n == 0).reverse.map(_.toLowerCase + _)\n\
    \            val count = r.filter(_.contains('l')).length\n            val result:\
    \ List[String] = if (count == 1) List(s) else r.take(count)\n            result\
    \ :+ r.drop(count)\n        }", "        val consonants = scala.collection.mutable.Set(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        val letters = scala.collection.mutable.Set.empty[String]\n\
    \        for (i <- s.indices) {\n            val ch = s(i)\n            if (ch\
    \ == \" \") {\n                letters ++= s.substring(i).split(\" \").toList\n\
    \            } else {\n                if (consonants.contains(ch)) {\n      \
    \              letters ++= s.substring(i).split(\" \").toList\n              \
    \  }\n            }\n        }\n        letters.filterNot(letters.contains).toList.takeWhile(letters.contains)",
  "        def isWord(s : String) : Boolean = { \n            if (s.length <= 0) true\
    \ else { \n                for (c <- s) \n                    if (c != ' ') &&\
    \ (c != '\\n') && (c != '\\t') && (c != '\\r') && (c != '\\a') && (c != '\\v')\
    \ && (c != '\\e') && (c != '\\a') && (c != '\\e') && (c != '\\c') && (c != '\\\
    c') && (c != '\\a') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') ", "        val m = s.toList\n        val n = m.length\n \
    \       val q = m.mkString\n        var result: List[String] = List[String]()\n\
    \        if (n.equals(0)) result\n        else {\n            val n = n.toInt\n\
    \            var i = 0\n            while (i < q.length && result.size < n) {\n\
    \                val c = q.charAt(i)\n                val m = c.toInt\n      \
    \          if (m.equals(0)) i += 1\n                else {\n                 \
    \   if (c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\") i\
    \ += 1\n                    else if (m.equals(1) || m.equals(2) || m.equals(3))\
    \ i += 1\n                    else if (m.equals(4) || m.equals(5) || m.equals(6)\
    \ || m.equals(7)) i += 1\n                    else if (m.equals(8) || m.equals(9))\
    \ i += 1\n                    else i += 1\n                }\n            }\n\
    \        }", "        var result: List[String] = Nil\n        for (c <- s ; c\
    \ != '\\0') {\n            if (c.isLetter) {\n                var nLetters = c.toString.length\n\
    \                if (nLetters == n) {\n                    if (result.isEmpty)\
    \ result = List(c)\n                    else if (result.last != c) result += List(c)\n\
    \                } else result += List(c)\n            } else result += Nil\n\
    \        }\n        return result", "        val w = mutable.ListBuffer.empty[String]\n\
    \        val list = s.split(\" \")\n        for (i<-list.length-1) {\n       \
    \     if ((list(i) == \" \") || (n==1)){\n                w += (list(i))\n   \
    \         }\n            else{\n                if (list(i).startsWith(\"a\")\
    \ || list(i).startsWith(\"e\") || list(i).startsWith(\"i\") || list(i).startsWith(\"\
    o\") || list(i).startsWith(\"u\")){\n                    w += (list(i))\n    \
    \            }\n            }\n        }\n        (w.toList)", "        var list:\
    \ List[String] = Nil\n        for(i <- 0 to s.length-1){\n            val word\
    \ = s.substring(i, i+1)\n            if(isConsonant(word) == true){\n        \
    \        list ::= word\n            }\n        }\n        if(s.isEmpty){\n   \
    \         list = Nil\n        }\n        list", "        val list = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i)\
    \ == \" \") i += 1\n            if (s.charAt(i) == '(') i += 1\n            if\
    \ (s.charAt(i) == ')') i += 1\n            if (s.charAt(i) == ':') i += 1\n  \
    \          if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i) == '.')\
    \ i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') i += 1\n            if (s.charAt(i)\
    \ == '(') i += 1\n            if (s.charAt(i) == ')') i += 1\n            if (s.charAt(i)\
    \ == ':') i += 1\n            if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i)\
    \ == '.') i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') i += 1\n            if (s.charAt(i)\
    \ == '(') i += 1\n            if (s.charAt(i) == ')') i += 1\n            if (s.charAt(i)\
    \ == ':') i += 1\n            if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i)\
    \ == '.') i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') ", "        var words: List[String]\
    \ = Nil\n        var idx = 0l\n        var c = 0l\n        \n        for(i <-\
    \ 0 until s.length) \n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e'\
    \ || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' || s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'U') {\n                c += 1\n            }\n            else\
    \ {\n                idx += 1\n                if(idx == n) {\n              \
    \      words = (words :+ s.substring(i, s.length)).distinct\n                \
    \    idx = 0l\n                    c = 0l\n                }\n            }\n\
    \        if(c > 0) {\n            words = (words :+ s.substring(i, s.length)).distinct\n\
    \        }\n        words", "        val words = mutable.ListBuffer[String]()\n\
    \        \n        if(s != \"\")\n        {\n            if(s.length() < n) \n\
    \            {\n                for(i <- 0 until s.length())\n               \
    \ {\n                    if(s.charAt(i) != \" \") \n                    {\n  \
    \                      words += s.substring(i,i+n)\n                    }\n  \
    \              }\n            }\n            else\n            {\n           \
    \     for(i in 0 until s.length()) \n                {\n                    if(s.charAt(i)\
    \ != \" \") \n                    {\n                        words += s.substring(i,i+n+1)\n\
    \                    }\n                }\n            }\n        }\n        else\n\
    \        {\n            words.append(\"\")\n        }\n        \n        words.toList",
  "        val vowels = \"aeiou\".toList\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val letters = s.toList\n        val wordsContainingNconsonants = \n\
    \            if (letters.isEmpty) Nil \n            else if (letters.take(n.toInt).distinct.size\
    \ == letters.size) letters.toList.filter( l => letters.exists(l => !vowels.contains(l)))\n\
    \            else letters.filter( l => letters.exists(l => !consonants.contains(l)))\n\
    \        wordsContainingNconsonants.filter( w => w.length == n ).sortBy(w => w)",
  "        if (s.isEmpty) List()\n        else {\n            def selectWordsHelper(s1\
    \ : String, s2 : String, n : Long) : List[String] = {\n                if (s2.length\
    \ >= n) {\n                    (s2.substring(0,n)).split(\" \").foldLeft(List())((xs,\
    \ y) => xs ++ y).toList\n                }\n                else {\n         \
    \           val lst = selectWordsHelper(s1, s2, n-lst.length)\n              \
    \      if (lst.isEmpty) lst\n                    else lst ++ List(s1)\n      \
    \          }\n            }\n            selectWordsHelper(s, s, n)\n        }",
  "        var res = new scala.collection.mutable.ArrayList\n        for(x <- 0 until\
    \ s.length){\n            if(s.charAt(x) == ' ' || s.charAt(x) == '')\n      \
    \          res.clear()\n            else if(s.charAt(x) == ' ')\n            \
    \    res.add(x)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1) == '\
    \ ')\n                res.add(s-x)\n            else if(s.charAt(x) == ' ' &&\
    \ s.charAt(x-1) != ' ' && s.charAt(x-1) == s.charAt(x))\n                res.add(s-x\
    \ :: res)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1) != ' ' && s.charAt(x)\
    \ == s.charAt(x))\n                res.add(s-x :: res ::: x)\n            else\
    \ if(s.charAt(x) == ' ' && s.charAt(x-1) == ' ' && s.charAt(x) != s.charAt(x))\n\
    \                res.add(s-x :: res ::: x :: x)\n            else if(s.charAt(x)\
    \ == ' ' && s.charAt(x-1) == ' ' && s.charAt(x) != s.charAt(x))\n            \
    \    res.add(s-x :: res ::: x :: x :: x)\n            else if(s.charAt(x) == '\
    \ ' && s.charAt(x-1) != ' ' && s.charAt(x) == s.charAt(x))\n                res.add(s-x\
    \ :: res ::: x :: x :: x)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1)\
    \ != ' ' && s.charAt(x) != s.charAt(x))\n                res.add(s-x :: res :::\
    \ x :: x :: x :: x)\n        }\n        if (res.size == 0)\n            List()\n\
    \        else\n            res.toList.sortBy(-s.indexOf(_))", "        var result:\
    \ List[String] = Nil\n        var temp: List[String] = Nil\n        var index\
    \ = s.length()\n        var tempN : Long = n.toLong\n        while(index != 0)\
    \ {\n            tempN /= 2\n            if(tempN < 1) {\n                result\
    \ :: Nil\n            } else {\n                result ::= s.substring(index,\
    \ (index + tempN))\n                index /= tempN\n            }\n        }\n\
    \        result", "        val strList : List[String] = s.split(\" \").map(_.toUpperCase)\n\
    \        val list : List[String] = strList.filter(_.matches(\"[a-zA-Z ]*\"))\n\
    \        val consonants = list\n            .map(x=>x.substring(0,x.length-1))\n\
    \            .map(_.toUpperCase)\n            .map(x => if(x.equals(\"A\") ||\
    \ x.equals(\"E\") || x.equals(\"I\") || x.equals(\"O\") || x.equals(\"U\")) 1L\
    \ else 0L)\n            .map(_ + n)\n            .foldLeft(0L)(_ + _)\n      \
    \  val filteredList = strList.filter(x => x.matches(s\"[a-zA-Z ]*${'A'.repeat(consonants)}\"\
    )).toList\n        filteredList", "        // Return the correct result if the\
    \ string s contains only spaces.\n        if (s.isEmpty) \n            List[String]()\
    \ \n        else \n            selectWordsImpl(s, n)", "        val words = new\
    \ mutable.ListBuffer[String]\n        if (s.isEmpty) words\n        else {\n \
    \           val chars = s.toCharArray\n            val nOfConsonants = chars.filter(_.isLetter).count(_\
    \ == '\\u0008')\n            if (nOfConsonants == n) words.append(s)\n       \
    \     else {\n                val wordsWithNConsonants = \n                  \
    \  chars.filter(_.isLetter).takeWhile(c => c != '\\u0008' && c != '\\u001f')\n\
    \                    .takeWhile(c => c != '\\u001f' && c != '\\u007f')\n     \
    \               .take(nOfConsonants)\n                    .foreach(c => words.append(s))\n\
    \                words.append(wordsWithNConsonants)\n            }\n        }\n\
    \        words.length == 0 ? Nil \n        ", "        def count(cs : Char): Long\
    \ = {\n            val res = cs.toString.length\n            if (res < n) res\
    \ else 0\n        }\n        val list = s.toList\n        if (list.isEmpty) List()\n\
    \        else {\n            def cons(i : Int, acc : List[String]): List[String]\
    \ = {\n                val len = count(list(i))\n                if (len == n)\
    \ acc.::(list(i))\n                else cons(i+1, (list(i) +: acc))\n        \
    \    }\n            cons(0, List())\n        }", "        val word = List[String]()\n\
    \        var j = 0\n        while ( j < s.length ) {\n            var c = 0\n\
    \            while (c < n && c < s.length && c <= s.length ) {\n             \
    \   if (s.charAt(j) == ' '){\n                    j += 1\n                   \
    \ c = c+1\n                    c += 1\n                } else {\n            \
    \        if (s.charAt(j) == s.charAt(c)) {\n                        c += 1\n \
    \                   } else {\n                        word.+=(s.substring(j,j+1))\n\
    \                        j += 1 + 1\n                        c = c+1\n       \
    \                 c += 1\n                    }\n                }\n         \
    \   }\n            word.+=(s.substring(j,j+1))\n            j += 1 + 1\n     \
    \   }\n        return word", "       val m = s.toList\n       if (m.isEmpty) List()\n\
    \       else {\n           val n = m.toList\n           val m1 = m.filter(x=>\
    \ x == n(0)).size\n           val m2 = m.filter(x=> n == 0l).size\n          \
    \ if (m1 < m2) m(0 to m1 - 1) ++ selectWords(s(m1 + 1 until s.length), n)\n  \
    \         else if (m2 < m1) selectWords(s(0 until m2 - 1) ++ m, n)\n         \
    \  else {\n               val m3 = m.filter(x=> n == n).size\n               if\
    \ (m3 < m) m.filter(x=> x == n(0)) ++ selectWords(s(m3 + 1 until s.length), n)\n\
    \               else m.filter(x=> n == 0) ++ selectWords(s(0 until m3 - 1) ++\
    \ m, n)\n           }\n       }", "        val list = s.split(\" \")\n       \
    \ val nCon = list.filter(_.matches(\"[bcdfghjklmnpqrstvwxyz]{\" + n + \"}\"))\n\
    \        if (nCon.isEmpty) List(\"\")\n        else nCon", "        if (s.isEmpty\
    \ || n < 0) \n            return Nil\n        val m = s.length\n        val count\
    \ = new Array[Long](m)\n        var i = 0\n        while (i < m) {\n         \
    \   if (s(i) == 'a') {\n                count(i) = 0\n            }\n        \
    \    else {\n                count(i) = count(i) + 1;\n            }\n       \
    \     if (count(i) == n) {\n                i += 1\n            }\n        }\n\
    \        val result: List[String] = new ArrayList[String]()\n        for (i<-0\
    \ until  m) {\n            if (count(i) == n) {\n                result.add(s.substring(i,m))\n\
    \            }\n        }\n        return result.toList", "        var currentIndex\
    \ = 0\n        var words: List[String] = List()\n        while (currentIndex +\
    \ 2 < s.length && s.length - currentIndex < n) {\n            val currentCharacter\
    \ = s(currentIndex)\n            if (currentCharacter == currentCharacter.toUpperCase\
    \ && currentIndex + 1 < s.length && s(currentIndex + 1) == currentCharacter.toLowerCase\
    \ && currentIndex + 2 < s.length && s(currentIndex + 2) == currentCharacter.toUpperCase\
    \ ) {\n                words += s(currentIndex)\n                currentIndex\
    \ += 2\n            }\n            else {\n                currentIndex += 1\n\
    \            }\n        }\n        if (currentIndex < s.length) words += s(currentIndex)\n\
    \        words", "        val letters = mutable.Set.empty[Char]\n        val vowels\
    \ = mutable.Set.empty[Char]\n        for (letter <- s.split(\"\")) {\n       \
    \     if (letter.toLower() != \"w\" && letter.toLower() != \"a\" && letter.toLower()\
    \ != \"o\" && letter.toLower() != \"u\") {\n                if (vowels.contains(letter.toLower))\
    \ {\n                    vowels -= letter.toLower\n                } else {\n\
    \                    vowels += letter.toLower\n                }\n           \
    \     if (letters.size >= n) {\n                    if (vowels.size == 0)\n  \
    \                      letters -= letter\n                    else\n         \
    \               letters -= letter\n                }\n            }\n        }\n\
    \        val sortedLetters = letters.toList.sorted\n        var result: List[String]\
    \ = Nil\n        if (sortedLetters.size < n)\n            result = (sortedLetters\
    \ ++ sortedLetters.reverse take (n-sortedLetters.size)).map(s => s.dropRight(1)).toList\n\
    \        if (sortedLetters.size == n)\n            result = sortedLetters.map(s\
    \ => s.dropRight(1)).toList\n        if (sortedLetters.size > n)\n           \
    \ result = (sortedLetters ++ sortedLetters.reverse take (n-sortedLetters.size)).map(s\
    \ => s.dropRight(1)).toList\n        result", '        // TODO - put your code
    here', "        val m = s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).count(_ == 'a')\n        if (m == 0) Nil\n        else (0 to\
    \ (n-1)).map(i => (s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).take(i.toInt).toList.mkString(\"\")))", "        val r = new\
    \ StringBuilder(s)\n        var t = 0l\n        while (r.size > 0) if (((t = r.indexOf(\"\
    \ \", t)) != -1) => (r.slice(0, t)).toList.mkString(\" \"))\n        if ((n >\
    \ 0)) s match {\n            case \"\" => Nil\n            case _ => Nil\n   \
    \     }\n        else Nil", "        if (n.toLong == 0)\n            return Nil\n\
    \        if (s == \"\") \n            return Nil\n        val chars = s.toCharArray\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (i <- 0 until\
    \ chars.length) {\n            if (chars(i) == 'e') {\n                if (n ==\
    \ chars(i+1)) {\n                    result += s.substring(i)\n              \
    \      result += s.substring(i+1)\n                }\n            }\n        }\n\
    \        return result.toList", "        val words = new collection.mutable.LinkedHashSet[String]\n\
    \        if(s.isEmpty) {\n            return new collection.immutable.List[String]()\n\
    \        }\n        val split = s.split(\" \")\n        for(s <- split) {\n  \
    \          if(words.contains(s)) {\n                words.remove(s)\n        \
    \    } else {\n                if(s.toList.length == n) {\n                  \
    \  words.add(s)\n                }\n            }\n        }\n        words._2.toList",
  "        val res : List[String] = s.split(' ').filter(word => \n            word.count(c\
    \ => c.isLetter && c.isLowerCase == false) == n)\n        return res.toList",
  "        if (s.isEmpty) {\n            return Nil\n        }\n        if (n==1)\
    \ {\n            val chars = s.toCharArray\n            chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit)\n        } else {\n\
    \            var chars = s.toCharArray\n            chars.takeWhile(char=>\n \
    \               char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>",
  "        // your logic goes here\n        ", "        val list = s.split(\" \").toList\n\
    \        if(list.length == 0 || n > list.length) List()\n        else {\n    \
    \        val list = s.split(\" \").toList\n            val s = list.map(_.toLowerCase())\n\
    \            var i = 0\n            var result: List[String] = List()\n      \
    \      while(i < list.length) {\n                if(s(i).isConsonant()) \n   \
    \                 result += s(i)\n                i += 1\n            }\n    \
    \        result\n        }", "         val wordsWithNConsonants = s.split(' ').map(word\
    \ => word.split(\"[^aeiou]\")).map(words => {\n             val n = words.size\n\
    \             val wordsWithConsonants = words.filterNot(word => word.contains(\"\
    \")).filterNot(word => word.contains(\" \")).filter(word => word.length == n).flatMap(word\
    \ => word.split(\"\")).map(word => if (word.substring(0, n).forall(w => w.contains('a'))\
    \ && word.substring(0, n).forall(w => w.contains('e')) && word.substring(0, n).forall(w\
    \ => w.contains('i')) && word.substring(0, n).forall(w => w.contains('o')) &&\
    \ word.substring(0, n).forall(w => w.contains('u'))) word else \"\")\n       \
    \      if (wordsWithConsonants.isEmpty) \"\" else wordsWithConsonants\n      \
    \   }).filter(word => word.length == n)\n         if (wordsWithNConsonants.isEmpty)\
    \ List()\n         else wordsWithNConsonants", "        var result: List[String]\
    \ = Nil\n        var counts : mutable.HashMap[Char, Int] = mutable.HashMap()\n\
    \        for (ch <- s) {\n            if (counts.getOrElse(ch, 0)) {\n       \
    \         counts.get(ch) -= 1\n            } else {\n                counts.put(ch,\
    \ 1L)\n            }\n        }\n        for (c <- counts) {\n            if (counts.get(c)\
    \ == n.toInt) {\n                if (c.toString.length == n.toInt) {\n       \
    \             result = result :+ c.toString\n                }\n            }\n\
    \        }\n        return result", "        val result = new mutable.ListBuffer[String]()\n\
    \        \n        // TODO: Your code goes here\n        \n        return result",
  "        def words(s : String) : List[String] = {\n            val wordsSet = s.toSet\n\
    \            wordsSet.filter(_ == ' ').toList\n        }\n\n        if (words.isEmpty(s))\
    \ Nil\n        else words(s).filter(n ==\n            words.map(_ =>\n       \
    \         (if (_ == 'a') 'ae' else (_ == 'e') 'eo') ++\n                (_ ==\
    \ 'y') 'ey' ++\n                (_ == 'i') 'io' ++\n                (_ == 'o')\
    \ 'oo').count(_)).map(s => s.capitalize).reverse", "        val m = n / 2\n  \
    \      val b = s.length()\n        var l = 0\n        var r = 0\n        var i\
    \ = 0\n        val words = scala.collection.mutable.ListBuffer[String]()\n\n \
    \       if (m == 0)\n            return words\n\n        while (i < b) {\n   \
    \         val c = s(i)\n            if (c == \" \") {\n                if (l +\
    \ 1 < r) {\n                    if (s(l + 1) == c)\n                        words\
    \ += s(l, r)\n                    else\n                        words += s(l,\
    \ l+1)\n                } else\n                    words += s(l, l)\n       \
    \         l += 2\n                i += 1\n                r = 0\n            }\
    \ else\n                r += if (c.toLowerCase == 'a') 2\n                   \
    \   else if (c.toLowerCase == 'e') 1\n                      else 0\n         \
    \   i += 1\n        }\n\n        if (m % 2 == 0)\n            selectWords(s, n\
    \ - (m + 1))\n        else\n            words", "        if(s == \"\"){\n    \
    \        List[String]()\n        }else if(s.contains(\" \")== false){\n      \
    \      List[String](s)\n        }else{\n            val words = s.split(\" \"\
    )\n            val counts = words.map(_.length).groupBy(_ % 2 == 0).mapValues(_.length)\n\
    \            val maxLength = counts.max\n            var wordsWithMaxLength =\
    \ List[String]()\n            for(word <- words){\n                if(counts(word)._2\
    \ >= maxLength){\n                    wordsWithMaxLength ::= word\n          \
    \      }\n            }\n            wordsWithMaxLength\n        }", "       \
    \ // (1)\n        if(s.isEmpty) {\n            return Nil\n        }\n\n     \
    \   // (2)\n        var result : List[String] = Nil\n\n        // (3)\n      \
    \  for(i <- s.indices) {\n            // if(s(i) != 'a') { // check this condition\
    \ and see if it works\n            //     break\n            // }\n          \
    \  val currentIndex = s.index(i)\n            val currentChar = s(currentIndex)\n\
    \            val nextIndex = currentIndex + 1\n            val nextChar = s(nextIndex)\n\
    \n            // (4)\n            val currentCharCount = (nextChar.toInt) - currentChar.toInt\n\
    \            val currentCharOccurance = currentCharCount.toInt\n            val\
    \ currentCharOccuranceOccurance = currentCharOccurance.toInt / n\n\n         \
    \   // (5)\n            val nextCharOccuranceOccurance = (nextChar.toInt) / n\n\
    \n            if((currentCharOccurance == n) && (currentCharOccuranceOccurance\
    \ == nextCharOccuranceOccurance)) {\n                result = result :+ s.substring(currentIndex,\
    \ nextIndex)\n            }\n        }\n\n        return result", "        def\
    \ isConsonant(s : String) = \n            s match {\n                case x if\
    \ (x.toUpperCase == x) => false\n                case x => true\n            }\n\
    \        val words = ListBuffer.empty[String]\n        \n        s.drop(n).foreach\
    \ { x => \n            if (isConsonant(x)) words :+= x\n        }\n        \n\
    \        words.length < 1 ? List.empty[String] : words.length == n ? words.toList\
    \ : words", "        val list = scala.collection.mutable.ListBuffer[String]()\n\
    \        for (x <- s.toCharArray) {\n            if (x.toString.toList.size ==\
    \ n)\n                list += x.toString\n        }\n        if (list.size ==\
    \ 0) List()\n        else list.toList", "        var list = new mutable.MutableList[String]()\n\
    \        var i = 0\n        var j = 0\n        val count = s.length\n\n      \
    \  // Loop over the string's chars\n        while (i < count) {\n            val\
    \ c = s.charAt(i)\n            val cLower = c.toLower\n            if (cLower.toString.length\
    \ == 1) \n                list += cLower \n            else if ((cLower.toString.length\
    \ == 2 && cLower != \"a\" && cLower != \"e\" && cLower != \"i\" && cLower != \"\
    o\" && cLower != \"u\")) \n                list += cLower \n            i += 1\n\
    \        }\n        \n        // Get rid of words containing n consonants\n  \
    \      val nconsonants = List[Char](\"bcdfghjklmnpqrstvwxyz\")\n        var i\
    \ = 0\n        var j = 0\n        while (i < list.length) {\n            if (nconsonants.contains(list.charAt(i)))\
    \ {\n                val word = list.drop(i).takeWhile(c => c != list.charAt(i))\n\
    \                list -= word\n                j = 0\n                while (j\
    \ < list.length) {\n                    val word = list.drop(i).takeWhile(c =>\
    \ c != list.charAt(i))\n                    list += word\n                   \
    \ j += 1\n                }\n            }\n            i += 1\n        }\n  \
    \      list.toList", "        val list = new mutable.ListBuffer[String]()\n  \
    \      // Your code here\n        val a = s.toList\n        for (i <- 0 until\
    \ a.length if a.apply(i) == n.toChar)\n            if (a.indexOf(a.apply(i)) <\
    \ a.length-1)\n                list += a.apply(i)\n            else\n        \
    \        break\n        list.toList", "        val word = mutable.ListBuffer[String]()\n\
    \        for (i<-0 until s.length) {\n            if (s.charAt(i).asInstanceOf[Char]==\
    \ ' ')\n                word.append(s.substring(i, s.length-1)).append(' ')\n\
    \            if (s.charAt(i).asInstanceOf[Char]== 'e')\n                word.append(s.substring(i,\
    \ s.length-1)).append(\"e\")\n            if (s.charAt(i).asInstanceOf[Char]==\
    \ 's')\n                word.append(s.substring(i, s.length-1)).append(\"s\")\n\
    \            if (s.charAt(i).asInstanceOf[Char]== 'a')\n                word.append(s.substring(i,\
    \ s.length-1)).append(\"a\")\n        }\n        val wordCount = word.filter(_.contains(n)).size\n\
    \        val wordList = word.filter(_.contains(n)).sorted\n        for (i <- 0\
    \ until wordCount - 1) {\n            wordList(i)\n        }", "        if (s.length\
    \ == 0) {\n            return []\n        }\n        var result: List[String]\
    \ = List[String]()\n        var i = 0\n        while (i < s.length - 1) {\n  \
    \          var nextChar = s.charAt(i)\n            if (nextChar == 'm') {\n  \
    \              result += s.substring(i, i + 3)\n                i += 3\n     \
    \       } else if (nextChar == 'l') {\n                result += s.substring(i,\
    \ i + 3)\n                i += 3\n            } else if (nextChar == 'l' || nextChar\
    \ == 'm') {\n                result += s.substring(i, i + 3)\n               \
    \ i += 3\n            } else if (nextChar == 'e') {\n                result +=\
    \ s.substring(i, i + 2)\n                i += 2\n            } else if (nextChar\
    \ == 'a') {\n                result += s.substring(i, i + 2)\n               \
    \ i += 2\n            } else if (nextChar == 'i') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 's') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else if (nextChar == 't') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 'w') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else if (nextChar == 'd') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 'l') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else if (nextChar == 'u') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 'c') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else if (nextChar == 'a') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 'm') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else if (nextChar == 'l') {\n                result +=\
    \ s.substring(i, i + 1)\n                i += 1\n            } else if (nextChar\
    \ == 'e') {\n                result += s.substring(i, i + 1)\n               \
    \ i += 1\n            } else {\n                i += 1\n            }\n      \
    \  }\n        if (n != result.length) {\n            println(\"not ok\")\n   \
    \     }\n        return result", "        val alphabet = s.toCharArray\n     \
    \   val charCount = new mutable.HashMap[Char, Int]()\n        \n        // Get\
    \ all letters and count how many of each letter\n        var letterCount = 0\n\
    \        for (i <- alphabet) {\n            charCount.getOrElse(i, 0) += 1\n \
    \           letterCount += 1\n        }\n\n        val res = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until n) {\n            val currChar = alphabet((n % letterCount).toInt)\n\
    \            if (charCount.contains(currChar))\n                res.add(currChar)\n\
    \            n -= 1\n        }\n\n        if (res.isEmpty) Nil else res.toList",
  "        var result : List[String] = Nil\n        val m = s.length\n        var\
    \ c = 0\n        var k = 0\n        for (x <- 0 to m) {\n            val y = s(x)\n\
    \            val z = y.toInt\n            val z = z - 32\n            val i =\
    \ z * n + c\n            if (i == m) {\n                if (c == n - 1)\n    \
    \                result ::= y.toString\n                else\n               \
    \     result ::= y.toString :: result\n                k = 1\n               \
    \ c = 0\n            } else if (i > m) {\n                result ::= y.toString\n\
    \                k = 1\n                c = 0\n            } else\n          \
    \      if (z == 0)\n                    c += 1\n                else \n      \
    \              c += 1\n        }\n        if (k == 1)\n            result ::=\
    \ s.toString\n        else\n            result", "        val a = s.split(\"\"\
    ).filter(x => (x != \" \"))\n        val m = a.filter(x => (x % 2) == 0).length\n\
    \        val l = a.filter(x => (x % 2) == 1).length\n        val c = a.filter(x\
    \ => (x % 2) == 2).length\n        val p = a.filter(x => (x % 2) == 3).length\n\
    \        val n = a.filter(x => (x % 2) == 4).length\n        val t = a.filter(x\
    \ => (x % 2) == 5).length\n        val h = a.filter(x => (x % 2) == 6).length\n\
    \        val d = a.filter(x => (x % 2) == 7).length\n        val r = a.filter(x\
    \ => (x % 2) == 8).length\n        val f = a.filter(x => (x % 2) == 9).length\n\
    \        val e = a.filter(x => (x % 2) == 10).length\n        val w = a.filter(x\
    \ => (x % 2) == 11).length\n        val g = a.filter(x => (x % 2) == 12).length\n\
    \        val h = a.filter(x => (x % 2) == 13).length\n        val j = a.filter(x\
    \ => (x % 2) == 14).length\n        val k = a.filter(x => (x % 2) == 15).length\n\
    \        val l = a.filter(x => (x % 2) == 16).length\n        val m = a.filter(x\
    \ => (x % 2) == 17).length\n        val i = a.filter(x => (x % 2) == 18).length\n\
    \        val p = a.filter(x => (x % 2) == 19).length\n        val o = a.filter(x\
    \ => (x % 2) == 20).length\n        val n = a.filter(x => (x % 2) == 21).length\n\
    \        val h = a.filter(x => (x % 2) == 22).length\n        val l = a.filter(x\
    \ => (x % 2) == 23).length\n        val j = a.filter(x => (x % 2) == 24).length\n\
    \        val g = a.filter(x => (x % 2) == 25).length\n        val k = a.filter(x\
    \ => (x % 2) == 26).length\n        val m = a.filter(x => (x % 2) == 27).length\n\
    \        val i = a.filter(x => (x % 2) == 28).length\n        val p = a.filter(x\
    \ => (x % 2) == 29).length\n        val o = a.filter(x => (x % 2) == 30).length\n\
    \        val a = a.filter(x => (x % 2) == 31).length\n        val p = a.filter(x\
    \ => (x % 2) == 32).length\n        val o = a.filter(x ", "        val list =\
    \ s.split(\"\")\n        val set = scala.collection.mutable.Set.empty[String]\n\
    \        var i = 0\n        while (i < list.length) {\n            val word =\
    \ list(i)\n            if (word contains n) set += word\n            i += 1\n\
    \        }\n        if (set.size == 0) List()\n        else set.sorted", "   \
    \     val ls = s.length\n        val arr = new Array[Char](n+1)\n        for(\
    \ i <- 0 until ls - n + 1) {\n            for(j <- 0 until n) {\n            \
    \    arr(j) =\n                    if (s.charAt(i+j).isUpper) s.charAt(i+j) \n\
    \                    else if (s.charAt(i+j).isLower) s.charAt(i+j) \n        \
    \            else ' '\n            }\n            val n = arr.length - 1\n   \
    \         if (n == 0) {\n                List[String]()\n            } else {\n\
    \                if (arr.take(n).forall(_.isUpper)) {\n                    List[String](s.substring(0,i)\
    \ + s.substring(i+n))\n                } else List[String](s.substring(0,i))\n\
    \            }\n        }", "        val m = s.toLowerCase().replace(' ', '').length\n\
    \        val k = n * m\n        if (m.toDouble <= k) List(s.trim) else\n     \
    \   selectWords(s.substring(0,n),n).flatMap(a => selectWords(s.substring(n),n)\
    \ match {\n            case Nil => List(a)\n            case x :: xs => if (a.toString.contains(x))\
    \ List(a) else Nil\n        })", "        val wlist = Array()\n        def count(s\
    \ : String, n: Long): Int = {\n            def count(s: String, n: Int): Int =\
    \ {\n                if (s.length == 0) 0\n                else if (s.charAt(0)\
    \ == ' ') count(s.substring(1), n) // if first char is space\n               \
    \ else if (s.charAt(n) == ' ') count(s.substring(0,n), n + 1) // if last char\
    \ is space\n                else 1 + count(s.substring(1), n)\n            }\n\
    \            count(s, n)\n        }\n        def buildList(s: String, n: Int):\
    \ Unit = {\n            val words = Array[String]()\n            def search(s:\
    \ String, n: Int): Unit = {\n                if (count(s, n) == n) words.append(s)\n\
    \                if (count(s, n) == n + 1) return\n                if (count(s,\
    \ n) == n - 1) buildList(s.substring(0, n), n)\n                if (count(s, n)\
    \ == n + 2) buildList(s.substring(1, n), n)\n            }\n            search(s,\
    \ n)\n            wlist.+=(words)\n        }\n        if (count(s, 0) > n) buildList(s,\
    \ 0)\n        wlist", "        val pattern = if (n == 0) \"\" else \"\"\"[^A-Za-z]\"\
    \"\".r\n        val wordSet = pattern.split(s).filter(w => w.isEmpty).toSet\n\
    \        wordSet.map(w => List(w))", "        var wordsList = List[String]()\n\
    \        var i = 0\n        while(i < s.length){\n            if(s.charAt(i) ==\
    \ 'A' || s.charAt(i) == 'a' || s.charAt(i) == 'E' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'I' || s.charAt(i) == 'i' || s.charAt(i) == 'O' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'U' || s.charAt(i) == 'u' || s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' ||\
    \ s.charAt(i) == 'y' || s.charAt(i) == 'u'){\n                wordsList += s.substring(i+1,\
    \ i+n)\n                i = i + n\n            }else{\n                wordsList\
    \ += s.substring(i, i+1)\n                i = i + 1\n            }\n        }\n\
    \        if(s.length != 0){\n            wordsList += s.substring(i)\n       \
    \ }\n        wordsList", "        val vowels = \"aeiou\"\n        val cons = \"\
    bcdfghjklmnpqrstvwxyz\"\n        var s = s\n        if (s.isEmpty) {\n       \
    \     Nil\n        } else {\n            var numConsLeft : Long = s.split(\" \"\
    ).map(_.length).sum\n            var wordList : List[String] = Nil\n         \
    \   var wordToAppend : String = \"\"\n            while (numConsLeft > n) numConsLeft\
    \ -= 1\n            while (s.length() > 0) {\n                var nextWordIndex\
    \ : Int = 0\n                val nextWords = s.length() - s.reverse.lastIndexOf('\
    \ ').toInt\n                val nextConsLength = nextWords - s.reverse.indexOf('\
    \ ')\n                val nextConsString : String = s.reverse.substring(nextConsLength\
    \ + 1).toCharArray\n                var nextConsIndex = 0\n                while\
    \ (nextConsIndex < nextConsString.length) {\n                    if (vowels.contains(nextConsString(nextConsIndex)))\
    \ {\n                        nextConsIndex += 1\n                    }\n     \
    \               nextConsIndex += 1\n                }\n                var wordToReturn\
    \ : String = \"\"\n                while (nextConsIndex < nextConsString.length)\
    \ {\n                    if (cons.contains(nextConsString(nextConsIndex))) {\n\
    \                        wordToReturn += nextConsString(nextConsIndex)\n     \
    \                   nextConsIndex += 1\n                    }\n              \
    \      nextConsIndex += 1\n                }\n                wordToAppend = wordToReturn.reverse\n\
    \                if (!wordList.isEmpty) {\n                    wordList ::= wordToAppend\n\
    \                } else {\n                    wordList = wordToAppend\n     \
    \           }\n            }\n            wordList\n        }", "        val l\
    \ = s.length\n        val r = n\n        val res = new collection.mutable.ArrayList\n\
    \        val s = Array.fill(l){ ' ' }\n        for (i <- 0 until l)\n        \
    \    if (s(i) != ' ')\n                if (s(i) == s(i-1))\n                 \
    \   if (s(i-2) == s(i-1))\n                        res.add(s.substring(i,i+r).trim)\n\
    \                    if (s(i-1) != s(i-2))\n                        res.add(s.substring(i,i+r).trim)\n\
    \                if (s(i) == s(i-1))\n                    if (s(i-1) != s(i-2))\n\
    \                        res.add(s.substring(i,i+r).trim)\n        return res.toList",
  "        val result = new mutable.HashSet[String]()\n        var nextWord : String\
    \ = \"\"\n        var currentIndex : Int = -1\n        var letterCount : Int =\
    \ -1\n        for {\n            nextIndex = s.indexOf(nextWord, currentIndex\
    \ + 1)\n            letterCount = nextIndex - currentIndex\n            letterCount\
    \ match {\n                case 0 => nextWord = \"\"\n                case n if\
    \ n == letterCount => \n                    result.add(nextWord)\n           \
    \     case n if n > letterCount => nextWord = s.substring(currentIndex + 1, nextIndex)\n\
    \            }\n            currentIndex = nextIndex\n        } while (currentIndex\
    \ != -1)\n        if (result.isEmpty) result.add(\"\")\n        result.toList.sorted",
  "      // Your code here\n      val list = s.split(\" \").map(_.toUpperCase())\n\
    \      val counts = list.map(x => x.split(\"[^aeiou]\")).flatten\n      val n\
    \ = count.length\n      val result: mutable.Set[String] = mutable.Set()\n    \
    \  val index = 0\n      while(index < n) {\n        if (counts.take(n).count(_\
    \ == n) == n) {\n          result += list.take(n)\n        }\n      }\n      result.toList",
  "        var words: List[String] = List()\n        var count = 0l\n        var index\
    \ = -1l\n        var curChar = s.charAt(0)\n        while (curChar != ' ') {\n\
    \            if (curChar == 'a') {\n                count += 2l\n            }\
    \ else if (curChar == 'e') {\n                count += 2l\n            } else\
    \ if (curChar == 'i') {\n                count += 2l\n            } else if (curChar\
    \ == 'o') {\n                count += 2l\n            } else if (curChar == 'u')\
    \ {\n                count += 2l\n            } else if (curChar == 'l') {\n \
    \               count += 1l\n            } else if (curChar == 'A') {\n      \
    \          count += 2l\n            } else if (curChar == 'E') {\n           \
    \     count += 2l\n            } else if (curChar == 'I') {\n                count\
    \ += 2l\n            } else if (curChar == 'O') {\n                count += 2l\n\
    \            } else if (curChar == 'U') {\n                count += 2l\n     \
    \       } else if (curChar == 'L') {\n                count += 1l\n          \
    \  } else if (curChar == '2') {\n                count += 2l\n            } else\
    \ if (curChar == '3') {\n                count += 2l\n            } else if (curChar\
    \ == '4') {\n                count += 2l\n            } else if (curChar == '5')\
    \ {\n                count += 2l\n            } else if (curChar == '6') {\n \
    \               count += 2l\n            } else if (curChar == '7') {\n      \
    \          count += 2l\n            } else if (curChar == '8') {\n           \
    \     count += 2l\n            } else if (curChar == '9') {\n                count\
    \ += 2l\n            } else if (curChar == '0') {\n                count += 2l\n\
    \            } else if (curChar == 'a') {\n                count += 3l\n     \
    \       } else if (curChar == 'e') {\n                count += 3l\n          \
    \  } else if (curChar == 'i') {\n                count += 3l\n            } else\
    \ if (curChar == 'o') {\n                count += 3l\n            } else if (curChar\
    \ == 'u') {\n                count += 3l\n            } else if (curChar == 'l')\
    \ {\n                count += 3l\n            } else if (curChar == 'A') {\n \
    \               count += 3l\n            } else if (curChar == 'E') {\n      \
    \          count += 3l\n            } else if (curChar == 'I') {\n           \
    \     count += 3l\n            } else if (curChar == 'O') {\n                count\
    \ += 3l\n            } else if (curChar == 'U') {\n                count += 3l\n\
    \            } else if (curChar == 'L') {\n                count += 3l\n     \
    \       } else if (curChar == '2') {\n                count += 3l\n          \
    \  } else if (curChar == '3') {\n                count += 3l\n            } else\
    \ if (curChar == '4') {\n                count += 3l\n            } else if (curChar\
    \ == '5') {\n                count += 3l\n            } else if (curChar", '        //
    write your code here', "        if (n.toInt == 0)\n            List()\n      \
    \  else {\n            def helper(s: String, pos: Long, i : Int) : List[String]\
    \ = {\n                if (i == s.length)\n                    List()\n      \
    \          else {\n                    def helper2(s : String, pos: Long, i :\
    \ Int, acc : List[String]) : List[String] = {\n                        if (i ==\
    \ s.length)\n                            List(\"s\" :: acc)\n                \
    \        else {\n                            val substr = s.substring(pos, pos\
    \ + i)\n                            val count = substr.count(_ == 'z' - 'a' +\
    \ 1).toLong\n                            if (count == n)\n                   \
    \             helper2(substr, pos + i, i + 1, acc + substr)\n                \
    \            else\n                                helper2(substr, pos + i, i,\
    \ acc + substr)\n                        }\n                    }\n          \
    \          helper2(s, pos, 0, \"\")\n                }\n            }\n      \
    \      helper(s, n, s.length, 0)\n        }", "        val m = s.toString.replaceAll(\"\
    \ \", \"\").length // M is length of string\n        val n = n.toString.toLong\
    \ // n is length of selected substring\n        var list: List[String] = Nil\n\
    \        var start = 0 // starting index\n        while (start < m) {\n      \
    \      var end = m // ending index\n            var cont = true // continutes\
    \ loop\n            while ((end < m) && cont) {\n                if (s.charAt(end)\
    \ == ' ') {\n                    end = end + 1\n                } else {\n   \
    \                 cont = false\n                }\n            }\n           \
    \ list = list ::: s.substring(start, end) :: Nil\n            start = end\n  \
    \      }\n        if (list.length == n) {\n            list\n        } else {\n\
    \            Nil\n        }", "        if (s == \"\") Nil\n        else {\n  \
    \          val l = s.toLowerCase :: Nil\n            val list = for (a <- l) if\
    \ (a.toUpperCase == a.toLowerCase) yield a\n            var i = 2l\n         \
    \   val ans = for (x <- list) yield x\n            while (i < n) ans = ans ++\
    \ ((list.filterNot(x => list.contains(x) && x.toUpperCase == x.toLowerCase)) ++\
    \ (list diff ans))\n            (ans filterNot (x => ans.contains(x) && x.toUpperCase\
    \ == x.toLowerCase))\n        }", "        if (s.isEmpty) List()\n        val\
    \ r = s.replaceAll(\"\\\\s\", \"\")\n        val m = r.length()\n        val w\
    \ = r.substring(0, m)\n        val c = r.substring(m, m+n).toList\n        val\
    \ vs = w.split(\" \").toList\n        val result = cs.map{c => if (vs.contains(c))\
    \ c else \"\"}.distinct\n        List(r.replaceAll(\"\\\\s\", \"\"), result)",
  "        val wordList = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (ch <- s) {\n            if (scala.util.Char.isSpace(ch)) {\n              \
    \  if (wordList.length > 0) wordList += \", \"\n            } else {\n       \
    \         var count = 0\n                for (i <- 0 to n) {\n               \
    \     if (scala.util.Char.isConsonant(ch)) count += 1\n                    if\
    \ (count == n) break\n                }\n                if (wordList.length >\
    \ 0) wordList += \" \"\n                wordList += ch\n            }\n      \
    \  }\n        wordList.toList", '        // Your code here', "        val result\
    \ = new mutable.MutableList[String]()\n        val lengths = s.split(\"\").length\n\
    \        for (i <- 0 until lengths) {\n            if ((s.charAt(i).isLetter)\
    \ && (s.charAt(i).isUpper) && (lengths-i) >= n)\n                result.add(s.substring(i,i+n))\n\
    \        }\n        if (result.isEmpty) List()\n        else result", "      \
    \  var list : List[String] = List()\n        var c = 0\n        for(x <- s) {\n\
    \            c += 1\n            if(c == n) {\n                list ::= x\n  \
    \          }\n        }\n        if(s.length == 0) {\n            List()\n   \
    \     } else {\n            list\n        }", "        // Your implementation\
    \ goes here\n        val result = s.foldRight(List[String]())((acc, word) => {\n\
    \            if (acc.length < n) acc :+ word\n            else if (word contains\
    \ \"a\" && word contains \"u\" && word contains \"e\") acc :+ word\n         \
    \   else if (word contains \"e\") acc :+ word\n            else if (word contains\
    \ \"i\") acc :+ word\n            else if (word contains \"o\") acc :+ word\n\
    \            else if (word contains \"u\") acc :+ word\n            else acc :+\
    \ word\n        })\n        return result", "        def select(str: List[Char],\
    \ pos : Int) : List[String] = {\n            if (pos == str.length-1) {\n    \
    \            if (str.length == n) List(\"\") else List()\n            } else list(str).map\
    \ (x => x +: (select(str, pos+1)))\n        }\n        list(s).map (x => x +:\
    \ select(x, 0))", "        def buildWords(s : String) : List[String] = {\n   \
    \         val vowels = \"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"\
    U\"\n            val consonants = \"b\",\"c\",\"d\",\"f\",\"g\",\"B\",\"C\",\"\
    D\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"\
    T\",\"V\",\"W\",\"X\",\"Y\",\"Z\"\n            val allConsonants = consonants\
    \ ++ vowels\n            val chars = s.toCharArray\n            var result : List[String]\
    \ = Nil\n            \n            for(i <- 0 until chars.length) {\n        \
    \        var count : Long = Nil\n                \n                for(consonant\
    \ <- allConsonants) {\n                    val charArray = chars.slice(i+1).filter(x\
    \ => x == consonant).toArray\n                    val subString = charArray.mkString\n\
    \                    if(subString.length == n) count = count + 1\n           \
    \     }\n                if(count.nonEmpty && count.size == n) result ::= chars.slice(i+1).mkString\n\
    \            }\n            result\n        }\n        buildWords(s)", "     \
    \   if (s.isEmpty) {\n            return Nil\n        }\n        val consonants\
    \ = consonants\n        val words = mutable.HashSet[String]()\n        for (c\
    \ <- consonants) {\n            val regex = scala.util.matching.Regex(c+\"\")\n\
    \            val wordList = s.replaceAll(regex, \"\")\n            words += wordList\n\
    \        }\n        val newWords = words.toSeq.takeWhile(n <= words.length).take(n)\n\
    \        val newWordsSet = scala.collection.immutable.Set(newWords).toSeq\n  \
    \      newWordsSet.filter(s => words.exists(w => w == s)).map(w => w + \"$\").toList",
  "        var consonants = Set[Char]()\n        var list : List[String] = List[String]()\n\
    \        var i = 0\n        while (i < s.length){\n            var j = i + 1\n\
    \            while(j < s.length){\n                consonants += s.charAt(i)\n\
    \                consonants += s.charAt(j)\n                j++\n            }\n\
    \            consonants -= 'a' - 'A'\n            if (consonants.size == n){\n\
    \                list :+= s.substring(i)\n            }\n            i += 1\n\
    \        }\n        if (list.isEmpty){\n            list\n        }\n        else{\n\
    \            list\n        }", "      val r = scala.util.matching.Regex.unapplySeq(s.replaceAll(\"\
    \\\\W\", \"\")+\"$\")\n      val m = r._1\n      val l = r._2\n      if (l ==\
    \ 0) List(s)\n      else {\n        var list: List[String] = Nil\n        var\
    \ c = 0\n        while (c < m) {\n          val c = c + n\n          if (s.charAt(c)\
    \ == 'a') list ::= s.substring(0,c)\n          else list ::= list.map(_.toLowerCase).filter(_.contains(s.substring(0,c))).flatten\n\
    \        }\n        list\n      }", "        val count = s.length\n        if(count\
    \ > n) {\n            return Nil\n        }\n        var result: List[String]\
    \ = Nil\n        var i = 0\n        while(i < count) {\n            val c = s.charAt(i)\n\
    \            if(c == ' ') {\n                i += 1\n                if(i < count)\
    \ {\n                    val c2 = s.charAt(i)\n                    if(c2 == '\
    \ ') {\n                        i += 1\n                        result += s.substring(i,\
    \ i + n).toList\n                        i = i + 1\n                    }\n  \
    \              }\n            } else {\n                if(n >= 1) {\n       \
    \             result += s.substring(i, i + n).toList\n                }\n    \
    \            i = i + 1\n            }\n        }\n        return result", '        //
    write your code in Scala here', "        val vowels = \"AEIOUYaeiouy\"\n     \
    \   var words : List[String] = List()\n        if (s == \"\") {\n            return\
    \ words\n        }\n        var index = 0\n        while (n == 0) {\n        \
    \    val start = s.indexOf(vowels(index), index)\n            val end = s.indexOf(vowels(index+1),\
    \ index+1)\n            val word = s.substring(start+1, end)\n            if (words.contains(word))\
    \ {\n                words += 1\n            }\n            index += 2\n     \
    \       n -= 1\n        }\n        words", "        val arr = s.split(' ')\n \
    \       arr.filter(f => f.count(_ == 'a') > n || f.count(_ == 'e') > n || f.count(_\
    \ == 'i') > n || f.count(_ == 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n && f.count(_ == 'e') > n && f.count(_ == 'i') > n && f.count(_ ==\
    \ 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_\
    \ == 'e') > n || f.count(_ == 'i') > n || f.count(_ == 'o') > n || f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_ == 'e') > n && f.count(_\
    \ == 'i') > n && f.count(_ == 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n || f.count(_ == 'e') > n || f.count(_ == 'i') > n || f.count(_ ==\
    \ 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_\
    \ == 'e') > n && f.count(_ == 'i') > n && f.count(_ == 'o') > n && f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_ == 'e') > n || f.count(_\
    \ == 'i') > n || f.count(_ == 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n && f.count(_ == 'e') > n && f.count(_ == 'i') > n && f.count(_ ==\
    \ 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_\
    \ == 'e') > n || f.count(_ == 'i') > n || f.count(_ == 'o') > n || f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_ == 'e') > n && f.count(_\
    \ == 'i') > n && f.count(_ == 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n || f.count(_ == 'e') > n || f.count(_ == 'i') > n || f.count(_ ==\
    \ '", "        \n        // your code here\n        ", "        val counts = new\
    \ mutable.HashMap[Char,Int]()\n        for (c <- s) counts(c)+= 1\n        var\
    \ nCount = 0\n        for (c <- counts) nCount += (c-=1).toInt\n        if (nCount\
    \ < n) List(\"\") else {\n            var ws = List[String]()\n            for\
    \ (c <- counts) ws.cons(c <= n ? s.substring(0,s.indexOf(c)).trim():\"\")\n  \
    \          ws.toList\n        }", "        if (s.isEmpty) {\n            return\
    \ Nil\n        }\n        val arr = s.split(\" \")\n        val res = arr.filter(x\
    \ => x.matches(\"^[AEIOUaeiou]*$\"))\n        res.filter(x => x.matches(s\"($n)*$\"\
    )).map(x => x.replaceAll(x+\"[^AEIOUaeiou]*\", \"\")).toList", "        if (s.isEmpty)\
    \ {\n            return Nil\n        }\n        val words   = s.split(\" \")\n\
    \        val map     = mutable.HashMap[String, Int]()\n        words.foreach(w\
    \ => { if (map.get(w.substring(0, 1)) != null) {\n            map.put(w.substring(0,\
    \ 1), map.get(w.substring(0, 1)) + 1\n        }\n        else { map.put(w.substring(0,\
    \ 1), 1) } }\n        )\n        val answer = mutable.ListBuffer[String]()\n \
    \       for (w <- words) {\n            if (map.get(w.substring(0, 1)) == n) {\
    \ answer += w }\n        }\n        return answer.toList", "        if (s.isEmpty)\
    \ {\n            List()\n        } else {\n            def consonants: List[String]\
    \ = \n                    if (n == 3l) s.toList.filter { \n                  \
    \      _ == ' ' || _ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' || \n        \
    \                    _ == 'u' || _ == 'y' || _ == 'o'\n                    } \n\
    \                    else s.toList.filter {\n                        _ == 'a'\
    \ || _ == 'e' || _ == 'i' || _ == 'o' || \n                            _ == 'u'\
    \ || _ == 'y' || _ == 'o' || \n                            _ == 'A' || _ == 'E'\
    \ || _ == 'I' || _ == 'O' || \n                            _ == 'U' || _ == 'Y'\
    \ || _ == 'O' || \n                            _ == 'a' || _ == 'e' || _ == 'i'\
    \ || _ == 'o' || \n                            _ == 'u' || _ == 'y' || _ == 'o'\n\
    \                    }\n            consonants.map(s => s.substring(0, s.length\
    \ - n)).distinct\n        }", "       val words = s.split(\" \")\n       val wordsLength\
    \ = words.length\n       val nConsonants = n\n       val nConsonantsIter = Iterator.range(0,\
    \ nConsonants).iterator\n       val nConsonantsIterWithPrev = nConsonantsIter.zipWithIndex.filter\
    \ {\n          case(prev,idx) =>\n             words.zipWithIndex.filter { case\
    \ (word,idx2) => idx != idx2}.forall { case (word,idx2) => word.contains(\"C\"\
    ) || word.contains(\"k\") || word.contains(\"K\") }\n      }.map {\n         case\
    \ (word,idx2) => (word, idx2)\n      }.toList\n      val nConsonantsIterWithPrevWithPrev\
    \ = nConsonantsIterWithPrev.zipWithIndex.map { case (prev,idx) =>\n         prev._2\
    \ match {\n            case idx if idx > 0 => prev.head\n            case _ =>\
    \ \"\"\n         }\n      }.toList\n      val nConsonantsIterWithPrevWithPrevWithPrev\
    \ = nConsonantsIterWithPrevWithPrev.zipWithIndex.map { case (prev,idx) =>\n  \
    \       prev._2 match {\n            case idx if idx > 0 => prev.head\n      \
    \      case _ => \"\"\n         }\n      }.toList\n      val nConsonantsIterWithPrevWithPrevWithPrevWithPrev\
    \ = nConsonantsIterWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map { case (prev,idx)\
    \ =>\n         prev._2 match {\n            case idx if idx > 0 => prev.head\n\
    \            case _ => \"\"\n         }\n      }.toList\n      val nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev\
    \ = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map {\
    \ case (prev,idx) =>\n         prev._2 match {\n            case idx if idx >\
    \ 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n   \
    \   val nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrev", "        val a = scala.collection.mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length) {\n            if (Character.isLetter(s.charAt(i))\
    \ && !s.charAt(i) == ' ') {\n                val b = s.substring(i)\n        \
    \        val words = b.split(\"(?<=\\\\w)\")\n                words.foreach(word\
    \ => if (!word.equals(\"\")) a += word)\n            }\n        }\n        return\
    \ a.toList", "        // Complete the implementation here.\n        val str =\
    \ s.toUpperCase()\n        val array = str.split(\" \")\n        var index = 0\n\
    \        var words = new ArrayBuffer[String]()\n        while (index < array.length)\
    \ {\n            val string = array(index)\n            if (string.contains(\"\
    C\") && string.contains(\"A\") && string.contains(\"T\") && string.contains(\"\
    G\") && string.contains(\"M\") && string.contains(\"A\")) {\n                words.append(string)\n\
    \                index++\n            }\n            index++\n        }\n    \
    \    return words.toList", "        if (s.isEmpty) List()\n        var count =\
    \ (-1).toLong\n        s.split(\" \").toList.foreach(word => {\n            val\
    \ count = word.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'u')\n            if (count == n) List(word)\n        })", "   \
    \     // Solution\n        var result : List[String] = Nil\n        if (s.isEmpty)\
    \ result\n        else {\n            var letters = List.empty[String]\n     \
    \       var consonants : List[String] = List.empty[String]\n            var i\
    \ : Long = 0\n            while (i < s.length) letters = letters :+ s.charAt(i)\n\
    \            letters foreach {\n                letter =>\n                if\
    \ (n>0) consonants = consonants :+ letter\n                i +=1\n           \
    \ }\n            result = consonants ++ letters\n        }", "        // Write\
    \ your code here\n        val r = scala.collection.mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length - 1) if(s(i) isLetter) r += s.substring(i,i+1)\n\
    \        r.filter(_.length == n).sortWith(_.compareTo(_) == -1)", "        //\
    \ write your solution here\n        var s = \"\"\n        var n = 0l\n       \
    \ var l = s.length\n        var w = \"\"\n        var re = new scala.util.matching.Regex(\"\
    \"\"[^a-z ]+\"\"\")\n        var list = List[String]()\n        var count = new\
    \ scala.collection.mutable.HashMap[String, Long]()\n        for (i <- 1 to l)\
    \ {\n            w = re.replace(s).group(0).replaceAll(\"\"\"[^a-z ]\"\"\")\n\
    \            if (count.contains(w)) {\n                count += (w, n)\n     \
    \       } else {\n                count += 1(w, n)\n            }\n        }\n\
    \        for (x <- count.keys) {\n            list = (for (x <- 1 to l) yield\
    \ x + \"-\" + (count[x + x].toString + x)).toList\n        }\n        return list.filter(_\
    \ => n + 1l == 0l).map(_.replaceAll(\"\"\"[a-z ]\"\"\", \"\")).filter(_ => !\"\
    \".equals(_)).toList", "        val list: List[String] = s match {\n         \
    \   case \"\" => List()\n            case _ => {\n                val counts =\
    \ s.split(\"\\\\s\").map(_.length).sum\n                val letter = s.filter(_.isLetter).size\n\
    \                val list = new collection.mutable.ListBuffer[String]()\n    \
    \            if (letter == n) list += s\n                for (i <- 0 to (n - 1))\n\
    \                    if (counts.toDouble / s.length <= i / letter) list += s\n\
    \                list\n            }\n        }", "        //write your code here\n\
    \        def getList(list: List[String], n : Long, acc : List[String]) : List[String]\
    \ = {\n            if( list.isEmpty ) acc\n            else if( n == 0 ) getList(list.tail,\
    \ n - 1, acc)\n            else getList(list.tail, n - 1, list ::: acc )\n   \
    \     }\n        getList(\"\", n, List(\"\"))", "        val vowels: List[String]\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    )\n        val consonants: List[String] = List(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val wordsWithCount: List[(String,\
    \ Int)] = s.toLowerCase.flatMap(_.toChar).filter(c => vowels.contains(c)).map(c\
    \ => (c, vowels.indexOf(c))).groupBy(_._1).mapValues(_.map(_._2).toList)\n   \
    \     val candidates: List[(String, List[String])] = wordsWithCount.filter(_._2\
    \ >= n).flatMap(_._1).filter(_ != \" \").toList\n        val result: List[String]\
    \ = candidates.filter(_ != \"\").flatMap(_).filter(c => consonants.contains(c)).distinct.toList\n\
    \        result", "        s.split(\"\\\\s\").filter(x => x.toString.count(_ ==\
    \ 'a') <= n).toList", "        if (s.isEmpty) return List()\n        \n      \
    \  // Use recursion to solve this\n        val list = (0 to s.length)\n      \
    \      .filter(x => s contains x.toChar)\n            .filter(x => x == n) \n\
    \            .map(x => s.substring(0,x))\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(", '        s.toLowerCase().trim().split("
    ").filter(_.matches("[AEIOUYaeiouy]")).distinct', "        val list = s.split(\"\
    \ \").toList\n        list.map(word => checkConsonants(word, n, list)).filter(_\
    \ => _).map(_._1).distinct", "        val chars = s.toList\n        val list =\
    \ new mutable.ListBuffer[String]()\n        var current = 0l\n        while(current\
    \ < chars.size - 1) {\n            if(chars(current).toUpperCase == chars(current\
    \ + 1).toUpperCase && n > 0) {\n                val word = chars.substringBetween(current,\
    \ current + 1).trim\n                list.+=(\"(\"+word+\")\")\n             \
    \   current +=1\n                n -= 1\n            }\n            current +=\
    \ 1\n        }\n        list.+=(chars.substring(current).trim+\".\")\n       \
    \ list.toList.filter( s => s.endsWith(\".\") ).filter( s => s.startsWith(\"(\"\
    ) ).filter( s => s.endsWith(\")\") )", "        def selectWordsHelper(s : String,\
    \ list : mutable.MutableList[String]) : List[String] = {\n            if (list.length\
    \ == n){\n                list.head :: list.tail\n            } else {\n     \
    \           if (s.length == 0) list\n                else selectWordsHelper(s.tail,\
    \ list + s.head)\n            }\n        }\n        selectWordsHelper(s, new mutable.MutableList[String]())",
  "        def getFirstLetters(words: List[String]) : List[String] = {\n         \
    \   val wordsWithFirstLetters = for (word <- words if word.size > 0) \n      \
    \                          yield (word + 'a').substring(0,n);\n            return\
    \ wordsWithFirstLetters.toList;\n        }\n        getFirstLetters(s.split).filterNot(word\
    \ => word.contains(\"a\")).toList;", "        val l = s.length\n        if (l\
    \ == 0) Nil\n        else (for (i <- 1 to l; \n                 word <- s.splitAt(i)\n\
    \                 if (word.length == n) yield word.headOption).toList", "    \
    \    val words: List[String] = \n            if (s.isEmpty) List() \n        \
    \    else (for (i <- 0 to s.length -1) yield {\n                if (s.charAt(i)\
    \ == 'a') \"A\" \n                else if (s.charAt(i) == 'e') \"E\" \n      \
    \          else if (s.charAt(i) == 'i') \"I\" \n                else if (s.charAt(i)\
    \ == 'o') \"O\" \n                else if (s.charAt(i) == 'u') \"U\" \n      \
    \          else if (s.charAt(i) == 'l') \"L\" \n                else if (s.charAt(i)\
    \ == 'h') \"H\" \n                else if (s.charAt(i) == 'd') \"D\" \n      \
    \          else if (s.charAt(i) == 'e') \"E\" \n                else if (s.charAt(i)\
    \ == 'l') \"L\" \n                else if (s.charAt(i) == 's') \"S\" \n      \
    \          else if (s.charAt(i) == 'w') \"W\" \n                else if (s.charAt(i)\
    \ == 'o') \"O\" \n                else if (s.charAt(i) == 'u') \"U\" \n      \
    \          else if (s.charAt(i) == 'l') \"L\" \n                else if (s.charAt(i)\
    \ == 'r') \"R\" \n                else if (s.charAt(i) == 'l') \"L\" \n      \
    \          else if (s.charAt(i) == 'd') \"D\" \n                else if (s.charAt(i)\
    \ == 'e') \"E\" \n                else if (s.charAt(i) == 'c') \"C\" \n      \
    \          else s.charAt(i)\n            }) \n            \n\n        // Now we\
    \ need to remove those words whose letters appear in \n        // their own group.\
    \ \n        // We do this by making a \"map\" that maps each word to\n       \
    \ // the number of times it appears in our list.\n        val map = words.foldLeft(Map.empty[String,\
    \ Long]){\n            case (map, (word, count)) => map + (word -> (map.getOrElse(word,\
    \ 0) + count))\n        }\n\n        // Now we need to filter this map to only\
    \ those words that have\n        // the correct number of letters \n        val\
    \ result = map.filter(_._2 > n)\n\n        // Now we can just map the results\
    \ to the words from our list.\n        list.map(map(_._1))", "        def dfs(s\
    \ : String, i : Long, acc : List[String] = Nil) :List[String] = {\n          \
    \  if(i > s.length) acc\n            else dfs(s, i+1l, recur(s.slice(i+1l)) ::\
    \ acc)\n        }\n        def recur(s : String) : List[String] = if(s.length\
    \ == n) List() else {\n            if(s.contains(\" \") || s.contains(\".\") ||\
    \ s.contains(\"!\")) Nil\n            else dfs(s, 1l, Nil)\n        }\n      \
    \  dfs(s, 0l)", "        val lst : mutable.Set[String] = new mutable.HashSet[String]\n\
    \        for(x <- s.toList){ \n            if(x.contains(\"a\")) lst.add(x)\n\
    \            if(x.contains(\"e\")) lst.add(x)\n            if(x.contains(\"i\"\
    )) lst.add(x)\n            if(x.contains(\"o\")) lst.add(x)\n            if(x.contains(\"\
    u\")) lst.add(x)\n            if(x.contains(\"y\")) lst.add(x)\n        }\n  \
    \      lst.filter(x => x.count(_ == 'a') == n).filter(x => x.count(_ == 'e') ==\
    \ n).filter(x => x.count(_ == 'i') == n).filter(x => x.count(_ == 'o') == n).filter(x\
    \ => x.count(_ == 'u') == n).filter(x => x.count(_ == 'y') == n).toList", "  \
    \      val wordList = mutable.ListBuffer.empty[String]\n        def dfs(s: String,\
    \ i: Int, path: List[String] = wordList) : List[String] = {\n            if (i\
    \ == s.length && n <= 0) path\n            else {\n                for (c <- s.toCharArray)\
    \ {\n                    if (c == 'z' && n > 0) {\n                        dfs(s.substring(i+1,\
    \ s.length), n - 1, path :+ s.substring(i, i + 1))\n                    } else\
    \ if (c == 'a' && n > 0) {\n                        dfs(s.substring(i+1, s.length),\
    \ n - 1, path :+ s.substring(i, i + 1))\n                    } else if (c == 'e'\
    \ && n > 0) {\n                        dfs(s.substring(i+1, s.length), n - 1,\
    \ path :+ s.substring(i, i + 1))\n                    } else if (c == 'i' && n\
    \ > 0) {\n                        dfs(s.substring(i+1, s.length), n - 1, path\
    \ :+ s.substring(i, i + 1))\n                    } else if (c == 'o' && n > 0)\
    \ {\n                        dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i,\
    \ i + 1))\n                    } else if (c == 'u' && n > 0) {\n             \
    \           dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i, i +\
    \ 1))\n                    } else if (c == 'l' && n > 0) {\n                 \
    \       dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i, i + 1))\n\
    \                    }\n                }\n            }\n        }\n        dfs(s,\
    \ s.length)", "        // Only proceed if n is larger than or equal to the size\
    \ of the string s\n        if (n <= s.length)\n            s.split(\"\\\\s+\"\
    ).filter {\n                // Only return words that contain exactly n consonants\n\
    \                _.length == n && _.forall(c => ('A' <= c && c <= 'Z') || ('0'\
    \ <= c && c <= '9'))\n            }.toList\n        else\n            List.empty[String]",
  "        if(s.isEmpty) {\n            List.empty\n        } else {\n           \
    \ val wordsArray = s.toCharArray\n            val charSet = chars.toSet\n    \
    \        val words = wordsArray.zip(wordsArray).map(a => a._1 -> a._2).filter(a\
    \ => a.size <= n).filter(a => charSet.contains(a._1)).toSeq\n            words.toList\n\
    \        }", "        var list = List[String]()\n        var index = 0\n     \
    \   while (index != s.length()) {\n            val c = s.charAt(index)\n     \
    \       if (c.isLetter()) {\n                if (index+1 == s.length())\n    \
    \                list ::= c\n                else {\n                    val n1\
    \ = s.charAt(index+1)\n                    val n2 = s.charAt(index+2)\n      \
    \              if (n1.isLetter() && n2.isLetter() && n1 != n2)\n             \
    \           list ::= c\n                    index += 3\n                }\n  \
    \          }\n            index++\n        }\n        if (list.isEmpty)\n    \
    \        list\n        else\n            list.tail.foldLeft(list)(_+_)", "   \
    \     def buildWords(w: List[String], s: String) : List[String] = {\n        \
    \    if (s.isEmpty) {\n                return w \n            }\n            w\
    \ :+ s.head\n            buildWords(w :+ s.tail, s.tail)\n        }\n        if\
    \ (n.toLong >= s.length.toLong) {\n            List() \n        }\n        else\
    \ {\n            buildWords(List(), s) \n        }", "        val strArray = s.toCharArray\n\
    \        val wordsArray = for (i <- 0 until strArray.length) yield {\n       \
    \     val word = \"\"\n            val currentChar = strArray(i)\n           \
    \ val prevChar = strArray(i-1)\n            if (currentChar == prevChar && currentChar\
    \ in \"aeiou\") word += currentChar\n            else word\n        }\n      \
    \  val wordsCount = wordsArray.length\n        val wordsArrayToReturn = mutable.ArrayBuffer.empty[String]\n\
    \        for (i<- 0 until wordsCount - 1) if (wordsArray(i).length == n) wordsArrayToReturn\
    \ += wordsArray(i)\n        wordsArrayToReturn.toList", "        val l = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            l += if (s.charAt(i) == ' ')\n\
    \                    \"\"\n                else\n                    s.substring(0,\
    \ i) + s.substring(i + 1, s.length)\n        l.filter(_.length == n).filter(_.forall(_.forall(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')))", "        val\
    \ r = new scala.collection.mutable.ListBuffer[String]()\n        val w = s.split(\"\
    \")\n        var k = 0\n        var l = 0\n        var count = 0\n        for\
    \ (i <- 0 until w.length) {\n            if (w(i).isUpperCase && w(i) != ' ')\
    \ {\n                k = i\n                count = 0\n            }\n       \
    \     if (w(i).isLowerCase && w(i) != ' ') {\n                l = i\n        \
    \        count = 0\n            }\n            if (count == n) {\n           \
    \     r.append((s.substring(k, l)))\n            }\n            if (count >= n)\
    \ {\n                count = 0\n            }\n            count += 1\n      \
    \  }\n        r.toList", "        if (s == \"\") List()\n        else {\n    \
    \        val l = s.split(\"\")\n            val m = l.length\n            val\
    \ c = new collection.mutable.ListBuffer[String]()\n            val ls = l.filter(x=>\
    \ x.matches(s\"^[B-Z][C-Z][D-Z][E-Z]$\"))\n            var i = 0\n           \
    \ while (i < ls.length) {\n                var flag = false\n                var\
    \ j = 0\n                while (j < n) { \n                    if (ls(i).matches(s\"\
    ^[B-Z][C-Z][D-Z][E-Z]$\")) {\n                        flag = true\n          \
    \              c = c :+ ls(i)\n                        break\n               \
    \     }\n                    j += 1\n                }\n                if (!flag)\
    \ i += 1\n            }\n            c.toList\n        }", "        val s = scala.util.parsing.input.LineIterator.iterate(s).drop(1).mkString\n\
    \        if (s.isEmpty) {\n            List()\n        }\n\n        var count\
    \ = 0\n        val counts = mutable.ArrayBuffer.empty[Long]\n        var temp\
    \ = \"\"\n        var i = 0\n        while (i < s.length) {\n            temp\
    \ = s.substring(i)\n            i += 1\n            val c = temp.count(c => c.toInt\
    \ == n)\n            counts += c\n            if (c == n) {\n                count\
    \ += 1\n            }\n        }\n        val arr = counts.toArray\n        val\
    \ res = (arr(0) until arr(arr.length - 1)).filter(_ > 0).map(i => s.substring(i,\
    \ i + 1))\n        res", "        val counts = mutable.HashMap[(Char,Int),Int]()\n\
    \        for (c <- s.toCharArray) counts(c) += 1\n        val result = mutable.ArrayBuffer.empty[String]\n\
    \        for(x <- 0 to s.toCharArray.length - 1) \n        { \n            if(counts(s.charAt(x))\
    \ != n) \n            { \n                result += (s.charAt(x))\n          \
    \      break\n            }\n        }\n        return result.toList", "     \
    \   val wordsInS = s.split(\" \").filter(_ != \" \")\n        val wordsInN = wordsInS.filter(_\
    \ == \"\").flatMap(_.split(\"\")).distinct\n        val wordsInNSize = wordsInN.size\n\
    \        if (wordsInN.size < n) Nil\n        else wordsInN.toList.sortBy(_.toLowerCase).take(n)",
  "        val str : String = s.replaceAll(\"\"\"[^a-zA-Z ]\"\"\", \"\")\n       \
    \ val numOfConsonants : Int = s.length\n        val numOfLetters : Int = str.length\n\
    \        val consonants : List[Char] = str.toCharList\n        val letters : List[Char]\
    \ = str.toList\n        val words : List[String] = new ListBuffer[String]()\n\
    \        var i : Int = 0\n        while (i < str.length) {\n            if (consonants(i)\
    \ == n) {\n                words.append(letters(i))\n            }\n         \
    \   i += 1\n        }\n        words.toList", "        val wordsCount = countWords(s)\n\
    \        val consonantsCount = countConsonants(s)\n        val result = if (wordsCount\
    \ == 0 || consonantsCount != n)\n            List.empty\n        else\n      \
    \      countConsonantsInWords(s) * countWordsInWords(s)\n            / countConsonantsInWords(s)\n\
    \            / countWordsInWords(s)\n            .toList", "        // Write your\
    \ code here\n        val result: List[String] = new mutable.ListBuffer[String]()\n\
    \        for (word <- s) {\n            for (c <- word.charAt(0)) {\n        \
    \        if (n == 1l) {\n                    result ::= word\n               \
    \ }\n                if (c == 'k' || c == 'Q' || c == 'j') {\n               \
    \     result ::= word\n                    break\n                }\n        \
    \    }\n        }\n        return result.toList", "        val wordsList : mutable.MutableList[String]\
    \ = mutable.MutableList[String]()\n        val vowels : mutable.Set[String] =\
    \ mutable.Set[String]()\n        val consonants : mutable.Set[String] = mutable.Set[String]()\n\
    \        val counts : mutable.Map[String, Long] = mutable.Map[String, Long]()\n\
    \        \n        s match {\n            case Nil => wordsList // return an empty\
    \ list\n            case x => \n                val len = x.length\n         \
    \       val lastIndex = len - n\n                \n                val consonantsCount\
    \ = for(i <- 1 to lastIndex)\n                    consonants \n              \
    \  \n                for(i <- 1 to lastIndex + 1) {\n                    val word\
    \ = x.substring(i, i + n)\n                    if(vowels.contains(word)) counts(word)\
    \ -= 1\n                    else consonants.add(word)\n                }\n   \
    \             \n                for(word <- consonants.toList) {\n           \
    \         if(counts(word) != 0) wordsList += word\n                }\n       \
    \ }\n        wordsList.asInstanceOf[List[String]]", "        var list = new collection.mutable.LinkedList[String]()\n\
    \        var consonants = 2l\n        for(i <- 0 until s.length){\n          \
    \  if(i == s.length-1){\n                if(s.charAt(i) == ' ') list.add(i)\n\
    \                else {\n                    if(consonants.isLessThanOrEqualTo(n)){\n\
    \                        list.add(i)\n                        consonants -= 1\n\
    \                    }\n                }\n            }\n            else if(i\
    \ == 0){\n                if(s.charAt(i) == ' ') list.add(i)\n               \
    \ else {\n                    if(consonants.isLessThanOrEqualTo(n)){\n       \
    \                 list.add(i)\n                        consonants -= 1\n     \
    \               }\n                }\n            }\n            else{\n     \
    \           if(s.charAt(i) != s.charAt(i-1)){\n                    if(consonants.isLessThanOrEqualTo(n)){\n\
    \                        list.add(i)\n                        consonants -= 1\n\
    \                    }\n                }\n                else{\n           \
    \         if(consonants.isLessThanOrEqualTo(n)){\n                        list.add(i)\n\
    \                        consonants -= 1\n                    }\n            \
    \    }\n            }\n        }\n        return list.toList", "        val lst\
    \ = s.split(\" \").toList\n        if (lst.size == 0)\n            Nil\n     \
    \   else {\n            val (r1, r2) = lst.span(_ == \" \")\n            val (r3,\
    \ r4) = lst.span(_ == \" \")\n            var a = r1.indices\n            var\
    \ b = r2.indices\n            var c = r3.indices\n            var d = r4.indices\n\
    \            var i = a.size\n            var j = b.size\n            var k = c.size\n\
    \            var m = d.size\n            var res = new scala.collection.mutable.ArrayList[String]()\n\
    \            while (i <- (a ++ b ++ c ++ d ++ List((i + j + k + m)/4))) {\n  \
    \              if (a.toList.filter(_.isLetter).toSet == n && a.toList.filter(_.isLetter).toSet.size\
    \ <= n) res ::= lst.apply(i)\n                else if (b.toList.filter(_.isLetter).toSet\
    \ == n && b.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\
    \                else if (c.toList.filter(_.isLetter).toSet == n && c.toList.filter(_.isLetter).toSet.size\
    \ <= n) res ::= lst.apply(i)\n                else if (d.toList.filter(_.isLetter).toSet\
    \ == n && d.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\
    \                i = a.toList.filter(_.isLetter).size + 1\n                i =\
    \ b.toList.filter(_.isLetter).size + 1\n                i = c.toList.filter(_.isLetter).size\
    \ + 1\n                i = d.toList.filter(_.isLetter).size + 1\n            }\n\
    \            res\n        }", "        val words = s.split(' ').filter(!_.isEmpty)\n\
    \        val list = words.map(x=>x.toLowerCase + x.substring(0,n).toLowerCase).toList.sort\n\
    \        val answer = list.takeWhile(word=>word == list.last).reverse\n      \
    \  answer.reverse", "        val result = new mutable.ListBuffer[String]()\n \
    \       val s = mutable.ListBuffer(s)\n        val n = mutable.ListBuffer(n)\n\
    \        val n = n.get\n        val result = result.get\n        var i = 0\n \
    \       while(i <= s.size) {\n            val s = i\n            val n = n - 1\n\
    \            while(i <= s.size) {\n                val n = n - 1\n           \
    \     if (s(i) =! s(i)) {\n                    result.add(s(i))\n            \
    \        break\n                }\n            }\n            i += 1\n       \
    \ }\n        return result", "        // Write your code here\n        var list\
    \ : List[String] = List()\n        var i : Int = 1\n        var numConsonant :\
    \ Int = s.length\n        while (i <= numConsonant) {\n            if (s.contains(((s.charAt(i)\
    \ - 65).asInstanceOf[Int]).toString)) {\n                var newList : List[String]\
    \ = List()\n                while (i <= numConsonant) {\n                    if\
    \ (s.contains(((s.charAt(i) - 65).asInstanceOf[Int]).toString)) {\n          \
    \              newList :+= s.substring(i, i + n)\n                        i +=\
    \ n\n                        numConsonant -= 1\n                    } else {\n\
    \                        i += 1\n                    }\n                }\n  \
    \              list :+= newList\n            }\n            i += 1\n        }\n\
    \        list", '        // your code here', "        val wordCount = s.split('\
    \ ').map(_.length).sum\n        if(wordCount < n) return List()\n        val consonantSet\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val\
    \ startIndex = s.toCharArray.zipWithIndex.filter(_._2 <= wordCount).map(_._1).max\n\
    \        val wordsLeft = s.substring(startIndex).split(' ')\n        val words\
    \ = wordsLeft.tail.zipWithIndex.filter(_._2 > startIndex).map(_._1).distinct\n\
    \        words.toList.flatMap(w => {\n          if(consonantSet.contains(w.head))\
    \ return List()\n          if(vowelSet.contains(w.head)) return List()\n     \
    \     if(w.length == n) List(w)\n          if(w.length < n) return List()\n  \
    \        words.tail.flatMap(w => w.toList)\n        }).toList", '        // code
    goes here', "        var result = new ListBuffer[String]()\n        for (cn <-\
    \ s.toCharArray) {\n            if (cn == 'a')\n            result.add(\"apple\"\
    )\n            if (cn == 'e')\n            result.add(\"ear\")\n            if\
    \ (cn == 'i')\n            result.add(\"eye\")\n            if (cn == 'o')\n \
    \           result.add(\"oof\")\n            if (cn == 'u')\n            result.add(\"\
    uur\")\n        }\n        var cnt = 0\n        var cnt = 1\n        var newResult\
    \ = new ListBuffer[String]()\n        for (cn <- s.toCharArray) {\n          \
    \  if (cn == 'a') {\n                newResult.add(\"apple\")\n              \
    \  cnt++\n            }\n            if (cn == 'e') {\n                newResult.add(\"\
    ear\")\n                cnt++\n            }\n            if (cn == 'i') {\n \
    \               newResult.add(\"eye\")\n                cnt++\n            }\n\
    \            if (cn == 'o') {\n                newResult.add(\"oof\")\n      \
    \          cnt++\n            }\n            if (cn == 'u') {\n              \
    \  newResult.add(\"uur\")\n                cnt++\n            }\n        }\n \
    \       return newResult.toList", "        val list = mutable.MutableList[String]()\n\
    \        val a = s.split(\" \")\n        for (i <- 0 until a.length) {\n     \
    \       val b = a(i).split(\" \")\n            val d = b.length - 1\n        \
    \    for (j <- 0 until d) {\n                if (b(j).charAt(0) == a(j).charAt(n))\
    \ {\n                    list.add(b(j))\n                }\n            }\n  \
    \      }\n        list.sortWith(_ > _)\n        list.filter(_ > \"_\").filter(_\
    \ > \" \")", "        val result = new mutable.LinkedList[String]()\n        val\
    \ ns = n.toString.toInt\n        if(s == \"\") result\n        else s.split(\"\
    \ \")\n            .foreach(w => if(w.toString.toInt == ns) result += w)\n   \
    \     result", "        if (s.isEmpty) return Nil\n        val n = math.max(math.min(s,\
    \ n), 1l)\n        val counts = countConsonants(s)\n        val wordList: mutable.ArrayBuffer[String]\
    \ = new mutable.ArrayBuffer[String]\n        val numWords = (0 to counts.length-1).foldLeft(1l)\
    \ { (i,c) => i + counts(c) }\n        val numWordsInSection = math.ceil(n/numWords)\n\
    \        for (i <- 0 until numWordsInSection) {\n            val start = i *numWords\n\
    \            if (i == (numWordsInSection - 1)) {\n                val end = counts.length\n\
    \            } else {\n                val end = (i+1) *numWords\n           \
    \ }\n            val wordIndexes = slice(start, end).indices\n            val\
    \ wordCounts = countConsonants(slice(start, end))\n            val wordList =\
    \ wordList.updated(wordIndexes(0), wordCounts(0))\n        }\n        wordList.filter(_\
    \ > n)", "        if (s.length == 0) Nil\n        else {\n            val a =\
    \ s.split(\" \")\n            val ws = Nil\n            val n1 = n.toLong\n  \
    \          val a1 = a(0)\n            val a2 = a(1)\n            if (a1.length\
    \ == n1) {\n                if (a2.length == n1) Nil\n                else {\n\
    \                    if (a2.length < n1) ws.prepend(a2.toList)\n             \
    \       else {\n                        val i = 1\n                        val\
    \ r = new Array[String](n1 + 1)\n                        while (i < a2.length)\
    \ r(i) = a2(i - 1)\n                        while (i < n1) r(i) = a(i)\n     \
    \                   ws = ws.prepend(r.toList)\n                    }\n       \
    \         }\n            }\n            if (a1.length > n1) ws.prepend(a1.toList)\n\
    \            ws\n        }", "        val results : List[String] = new mutable.ListBuffer[String]()\n\
    \        if (s.isEmpty || n == 0l) {\n            return results.toList\n    \
    \    }\n        val vowelSet = Set(new mutable.LinkedHashSet[String](\"a\",\"\
    e\",\"i\",\"o\",\"u\"))\n        val consonantSet = Set(new mutable.LinkedHashSet[String](\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"))\n        for {\n            letter\
    \ <- s if vowelSet.contains(letter)\n        } yield {\n            results +=\
    \ letter\n        }\n        for {\n            letter <- s if consonantSet.contains(letter)\n\
    \        } yield {\n            val word = letter.toLowerCase\n            if\
    \ (word.charAt(0) == word.charAt(word.length - 1)) {\n                val word\
    \ = word.substring(1, word.length)\n                results += word\n        \
    \    } else {\n                results += word + \"+\"\n            }\n      \
    \  }\n        results.toList", "        val arr = s.toString.split(\"\\\\s\").map(_.toLowerCase).toSet\n\
    \        arr.toList.sliding(n).flatMap(x => x).filterNot(x => x.equals(\"\")).distinct",
  "        val list = ArrayBuffer(s.toString.trim().replaceAll(\" \",\"\").toLowerCase\
    \ +: s.split(\"\").toList).filter(s => s.toString.toList.size == n ).toList\n\
    \        if (list.nonEmpty) list.tail else List()", "        val charArray = s.toCharArray\n\
    \        val res = for (i <- 0 until s.length) {\n            val index = charArray(i)\n\
    \            if (!(index >= 'a' && index <= 'z') && !(index >= 'A' && index <=\
    \ 'Z') && index < n)\n                res\n            else charArray\n      \
    \  }\n        res.toList", "        val ls = Nil: List[String]\n        for (x\
    \ <- s.toLowerCase) {\n            if (Character.isLetter(x)) ls = ls :+ (x take\
    \ n)\n        }\n        ls.toList", "        val lst = ListBuffer[String]()\n\
    \        for(c <- s.toCharArray) {\n          if(Character.isLetter(c)) {\n  \
    \          lst += c \n          }\n        }\n        lst.toList.sortWith(_ <\
    \ _).take(n).toList\n      }\n}\n</code>\n<|/ a tags=string,scala |>\n<| a tags=string,scala\
    \ dscore=0 |>\nI made a solution that will work for any length of string. This\
    \ code is not optimized. It will create multiple collections but will give expected\
    \ output\n<code>\nobject Solution {\n    def main(args: Array[String]) {\n   \
    \     val str: String = args(0);\n        val n: Long = args(1).toLong;\n    \
    \    val strList = str.split(\" \");\n        val charList = str.map(_.toChar)\n\
    \        val map = new scala.collection.mutable.HashMap[Char,Int]();\n       \
    \ for (i<- 0 until charList.size)\n        {\n            if(!map.contains(charList(i)))\n\
    \            {\n                if(charList(i).toLowerCase == 'a')\n         \
    \           map.put('a',0)\n                if(charList(i).toLowerCase == 'e')\n\
    \                    map.put('e',0)\n                if(charList(i).toLowerCase\
    \ == 'i')\n                    map.put('i',0)\n                if(charList(i).toLowerCase\
    \ == 'o')\n                    map.put('o',0)\n                if(charList(i).toLowerCase\
    \ == 'u')\n                    map.put('u',0)\n                if(charList(i).toLowerCase\
    \ == 'y')\n                    map.put('y',0)\n            }\n            if(!map.containsKey(charList(i)))\n\
    \            {\n                if(charList(i).toLowerCase == 'a')\n         \
    \           map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'e')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'i')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'o')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'u')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'y')\n                    map.put(charList(i),1)\n            }\n       \
    \ }\n        strList.sortWith(_ < _).takeWhile(x => map.containsKey(x)).toList",
  "        var words: List[String] = List()\n        // Write your code here.\n  \
    \      if (s.length() == 0) {\n            return words\n        }\n        var\
    \ maxCount = 0\n        var countSet = mutable.Set[String]()\n        for (i <-\
    \ s.indices) {\n            var curCount = s.count(s.charAt(i))\n            if\
    \ (curCount == n) {\n                countSet.add(s.charAt(i))\n             \
    \   maxCount = math.max(maxCount, curCount)\n            } else if (curCount <\
    \ n) {\n                continue\n            } else {\n                if (curCount\
    \ > maxCount) {\n                    maxCount = curCount\n                }\n\
    \                countSet = countSet.filterNot(_.equals(s.charAt(i)))\n      \
    \      }\n        }\n        for (c <- countSet) {\n            var word = s.substring(i).dropWhile(c\
    \ => c != ' ')\n            words += word\n        }\n        words", "      \
    \  val list = s.split(\" \")\n        val list2 = List.fill(list.length)(\"\"\
    )\n        list2.foreach(w => println(w))\n        val list3 = list.filter(_ contains\
    \ n).distinct\n        list3.foreach(w => println(w))\n        list3", "     \
    \   val words : List[String] = s.toLowerCase.split(\" \").filter(_ => { \n   \
    \         val str = new StringBuilder(_).reverse.mkString\n            str.indexOf(\"\
    a\") != -1 || str.indexOf(\"e\") != -1 || str.indexOf(\"i\") != -1 || str.indexOf(\"\
    o\") != -1 || str.indexOf(\"u\") != -1\n        }).toList\n        val list :\
    \ mutable.Buffer[Int] = new mutable.Buffer[Int]()\n        words.foreach{s =>\
    \ {\n            if(s.length == n) list+=1 }\n        }\n        if (list.isEmpty)\
    \ List()\n        list.takeWhile(x => x < n).map{ x => words.filter(s => s.contains(x)).map(s\
    \ => s.substring(0,x+1)) }", "        val list = s.split(\" \")\n        list.foreach(x\
    \ => {\n            val countList = x.toList.filter(c => c.isLetter).count(_.isLetter)\n\
    \            if(countList == n) {\n                println(s)\n            }\n\
    \        })", "        var result = new mutable.LinkedList[String]()\n       \
    \ if (s.isEmpty) result\n        else if (!isConsonant(s.charAt(0)) && !isConsonant(s.charAt(s.length\
    \ - 1))) {\n            for (i <- 1 to s.length - 1) if (!isConsonant(s.charAt(i))\
    \ && isConsonant(s.charAt(i + 1))) result += s.substring(i)\n        }\n     \
    \   else if (!isConsonant(s.charAt(0)) && !isConsonant(s.charAt(s.length - 1)))\
    \ {\n            for (i <- 1 to s.length - 1) if (!isConsonant(s.charAt(i)) &&\
    \ !isConsonant(s.charAt(i + 1))) result += s.substring(i)\n        }\n       \
    \ else {\n            for (i <- 1 to s.length - 1) if (!isConsonant(s.charAt(i))\
    \ && isConsonant(s.charAt(i + 1))) {\n                for (j <- 1 to s.length\
    \ - 1) if (!isConsonant(s.charAt(j)) && !isConsonant(s.charAt(j + 1))) {\n   \
    \                 if (!isConsonant(s.charAt(i + 1)) && !isConsonant(s.charAt(j\
    \ + 1))) result += s.substring(i)\n                }\n            }\n        }\n\
    \        result.toList", "        val result = new mutable.ListBuffer[String]\n\
    \        for (word <- s.split(\" \")) {\n            if (word.matches(\".*[Cc].*[Cc].*[Cc].*\"\
    )) {\n                if (word.matches(\".*[Cc]..*[Cc]..*[Cc]..*\")) {\n     \
    \               if (word.matches(\".*[Cc]....*[Cc]....*[Cc]....*\")) {\n     \
    \                   result.append(word)\n                    }\n             \
    \   }\n            }\n        }\n        if (result.length == n)\n           \
    \ return result.toList\n        else\n            result.clear()", "        //\
    \ Solution without using regular expressions\n        def words(s : String) :\
    \ List[String] = {\n            val list = s.split(\" \")\n            if (list.isEmpty)\
    \ List()\n            else {\n                val ncon = list.filter(x => x.count(_\
    \ == 'c') == n).map(x => x.split(\" \"))\n                if (ncon.length > 0)\
    \ ncon else words(list.filter(x => x.count(_ == 'c') == n).mkString)\n       \
    \     }\n        }\n        words(s)", "        if (s.isEmpty) \n            Nil\n\
    \        else {\n            val count = new mutable.HashMap[String, Long]\n \
    \           for(x <- s.splitAt(n)) {\n                if (count.get(x) == null)\
    \ {\n                    val c = n.toString\n                    count.put(x,\
    \ c)\n                }\n            }\n            count.getOrElse(\"\", Nil)\n\
    \        }", "        var res : List[String] = Nil\n        if (s.length() > 0)\
    \ {\n            if (s.charAt(0) == ' ' || s.charAt(0) == '.') {\n           \
    \     s = s.substring(1).toLowerCase\n            }\n            for (i <- 0 until\
    \ s.length()) {\n                val c = s.charAt(i)\n                val count\
    \ = getCount(c) + n\n                if (count <= 0 || count > 26) {\n       \
    \             res = (c :: res)\n                }\n                if (count ==\
    \ 26) {\n                    res = (c :: res)\n                }\n           \
    \     if (count > 0) {\n                    val cc = c.toUpperCase\n         \
    \           if (cc == 'A' || cc == 'E' || cc == 'I' || cc == 'O' || cc == 'U')\
    \ {\n                        if (res.isEmpty) {\n                            res\
    \ = Nil\n                        }\n                        res = (c :: res)\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ res", "        val letters = List(0 until s.length).map(x => s.charAt(x))\n\
    \        val counts = letters.groupBy(x => x)\n        val consonantCounts = counts\
    \ filter (x => x._1 == ' ' && x._2 <= n)\n        val consonantList = consonantCounts.map\
    \ { case (k, v) => k }.toList\n        val vowelList = letters.filterNot(x =>\
    \ x.toString.contains(\"a\").toString.contains(\"e\").toString.contains(\"i\"\
    ).toString.contains(\"o\").toString.contains(\"u\"))\n        val wordList = consonantList.flatMap\
    \ (x => vowelList.filter(y => y == x).map(_ + x))\n        if (wordList.size ==\
    \ 0) {\n            wordList\n        } else {\n            wordList\n       \
    \ }", "        if (s.length == 0) {\n            return Nil\n        }\n     \
    \   val wordsWithCount = mutable.LinkedHashMap[String, Long]()\n        // Split\
    \ the string into words, and then count how many times each word occurs.\n   \
    \     // We use a mutable Map here because we want to be able to update the count\n\
    \        // for a specific word in the future.\n        for (word <- s.split(\"\
    \ \")) {\n            val count = wordsWithCount.get(word)\n            if (count\
    \ == null) {\n                wordsWithCount.put(word, 1l)\n            } else\
    \ {\n                val newCount = count + 1l\n                wordsWithCount.put(word,\
    \ newCount)\n            }\n        }\n        // Now filter out the words that\
    \ do not have exactly n consonants.\n        val filteredWords = wordsWithCount.filter(_._2\
    \ == n)\n        // Finally, sort the list based on how many consonants are in\
    \ the words.\n        val sortedWords = filteredWords.toList.sortBy(_._1)\n  \
    \      val result = new scala.collection.mutable.ListBuffer[String]()\n      \
    \  result.+=(sortedWords.head._1)\n        sortedWords.drop(1).foreach(word =>\
    \ result.+=(word._1))\n        return result.toList", "      if (s.length == 0)\
    \ {\n        List()\n      } else {\n        var res : List[String] = List()\n\
    \        var cnt = 0\n        var isCons : Boolean = true\n        var word =\
    \ \"\"\n        var len : Int = s.length\n        for(i <- 0 until len) {\n  \
    \        word += s(i)\n        }\n        // check if any char is equal to n\n\
    \        for(i <- 0 until len) {\n          if (s(i) != n && !isCons) {\n    \
    \        cnt += 1\n          }\n          isCons = s(i) == n\n        }\n    \
    \    if (cnt == len) {\n          // all consonants are present\n          //\
    \ check if last char is equal to n\n          if(s(len) != n && !isCons) {\n \
    \           // last consonant is not equal\n            cnt -= 1\n          }\n\
    \          isCons = s(len) == n\n        }\n        if(cnt == 0) {\n         \
    \ // no consonants are present\n          // check if word is equal to n\n   \
    \       if(word.equals(n)) {\n            res = List(word)\n          }\n    \
    \    }\n        if(res.isEmpty) {\n          res\n        } else {\n         \
    \ res\n        }\n      }", "        val words = mutable.LinkedHashSet[String]()\n\
    \        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == 'a' ||\
    \ s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i)\
    \ == 'u') {\n                words.add(s.substring(0, i))\n            } else\
    \ if (s.charAt(i) == ' ') {\n                if (words.size() == n) {\n      \
    \              words.toList\n                }\n                words.add(s.substring(0,\
    \ i))\n            }\n        }\n        words.toList", "        if (s.isEmpty)\
    \ List()\n        else {\n            var result = new ArrayBuffer[String]()\n\
    \            var i = 0\n            while (i < s.length && i <= n) {\n       \
    \         val cur = s.charAt(i)\n                if (cur != \" \") {\n       \
    \             if (cur.equals('a')) result += s\"${s.substring(i)}\\n\"\n     \
    \               else if (cur.equals('e')) result += s\"${s.substring(i)}\\n\"\n\
    \                    else if (cur.equals('i')) result += s\"${s.substring(i)}\\\
    n\"\n                    else if (cur.equals('o')) result += s\"${s.substring(i)}\\\
    n\"\n                    else if (cur.equals('u')) result += s\"${s.substring(i)}\\\
    n\"\n                    else result += s\"${s.substring(i)}\\n\"\n          \
    \      }\n                i += 1\n            }\n            result.toList\n \
    \       }", '        // Use map or flatMap and filter for this.', "        var\
    \ i = 0\n        var j = 0\n        var x = s.toLowerCase\n        val words =\
    \ mutable.ListBuffer.empty[String]\n        while (j < x.length) {\n         \
    \   val currentConsonant = s(i + 1)\n            if (currentConsonant.toInt().toString\
    \ == n.toString.toChar) {\n                words += s(i + 1)\n               \
    \ i += 1\n                j += 1\n            } else {\n                j += currentConsonant.length\n\
    \            }\n        }\n        if (s.isEmpty) {\n            words.toList\n\
    \        } else {\n            words\n        }"]
stop_tokens:
- "\n    }\n"
