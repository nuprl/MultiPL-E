name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        var mean = numbers.reduceLeft(_ + _) / numbers.length\n   \
    \     numbers.map(x => (x - mean)).map(x => x*x).sum / numbers.length", "    \
    \    val nums = numbers.toList\n        val mean = nums.sum / nums.length\n  \
    \      val diffs = nums.map((x - mean) abs(x))\n        val sumOfSquaredDiffs\
    \ = diffs.sum * diffs.sum\n        math.sqrt(sumOfSquaredDiffs)", "        //\
    \ Find the mean:\n        var mean : Float = 0.0;\n        numbers.foreach {\n\
    \            n => mean += n;\n        }\n        mean /= numbers.size;\n\n   \
    \     // Find the deviation for each element:\n        var deviation : Float =\
    \ 0.0;\n        numbers.foreach {\n            n => deviation += Math.pow((n -\
    \ mean), 2);\n        }\n        deviation /= numbers.size;\n\n        // Calculate\
    \ the average:\n        return Math.sqrt(deviation);", "        var sum = 0.0f\n\
    \        numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  '        numbers.foldLeft(0.0f) { (acc, cur) => acc + math.abs(cur - acc) }', '        numbers.map(
    x => Math.abs(x - numbers.sum / numbers.size) ).sum / numbers.size', "       \
    \ val count = numbers.size\n        var sum = 0.0f\n        var sumSquare = 0.0f\n\
    \        for (i <- 0 until count) {\n            val v = numbers(i).toFloat\n\
    \            sum += v\n            sumSquare += v * v\n        }\n        val\
    \ mean = sum / count\n        val absSum = sumSquare / (count * count)\n     \
    \   return mean - absSum", "        val mean: Float = numbers.map(_.toDouble).sum\
    \ / numbers.length.toDouble\n        val deviations: mutable.WrappedArray[Float]\
    \ = numbers.map(Math.pow((number-mean),2))\n        deviations.sum / deviations.length",
  "        val sums = numbers.foldLeft(0.0f)((acc, x) => acc + x*(x - acc.toFloat))\n\
    \        val mean = sums.toFloat / numbers.size\n        val squareSums = numbers.foldLeft(0.0f)((acc,\
    \ x) => acc + x*(x - mean))\n        val variance = squareSums.toFloat / numbers.size\n\
    \        variance/Math.sqrt(numbers.size.toDouble)", "        val means = numbers.map(x\
    \ => x / numbers.size)\n        val diff = numbers.zip(means)\n            .map\
    \ { case (x, y) => x - y }\n            .sum\n        diff / numbers.size", " \
    \       val nn = numbers.size\n        val mm = numbers.sum / nn\n        val\
    \ diffs = numbers.map(x-mm) //map x to x - mean\n        diffs.sum / nn", "  \
    \      var sum = 0.0f\n        var n = numbers.size\n        var mean = numbers.reduceLeft(_\
    \ + _) / n\n        numbers.foreach { x =>\n            sum += Math.abs(x - mean)\n\
    \        }\n        sum / n", "        var mean : Float = 0f\n        var sumOfDiffs\
    \ = 0f\n        var sumOfDiffsSquared = 0f\n        numbers.foreach(x => { mean\
    \ += x; sumOfDiffs += x; sumOfDiffsSquared += x*x })\n        mean / numbers.size",
  "        val counts = numbers.groupBy(x => x).mapValues(_.size).withDefaultValue(0)\n\
    \        val sums = counts.foldLeft(0.0f)((acc, cur) => acc + cur._2)\n      \
    \  sums / numbers.size // mean deviation", "        // Return Mean Absolute Deviation\
    \ for given numbers (input values)\n        var x = 0f\n        var y = 0f\n \
    \       numbers.foreach(n => {\n            // Calculate difference between each\
    \ element and mean\n            x = x + n\n            y = y + n\n        })\n\
    \        var x_mean = x / numbers.size\n        // Return average difference\n\
    \        Math.abs(x - x_mean)", "        var sum = 0.0f\n        numbers.foreach(x\
    \ => sum += abs(x))\n        return sum/numbers.size", "        val mn = numbers.foldLeft(0.0f){(sum,\
    \ value) =>\n            sum += math.abs(value - numbers.mean())\n        }\n\
    \        mn / numbers.size", "        val n = new mutable.MutableList[Float](numbers)\n\
    \        val mean = n.iterator.asScala.toList map (_.toFloat) reduce ((x,y) =>\
    \ x + y)/n.size\n        val delta = n map (x => (x-mean)) reduce ((x,y) => x\
    \ + y)\n        return n.iterator.asScala.toList map (x => (math.abs(x - mean)))\
    \ reduce ((x,y) => x + y)/delta.size", "        val n = numbers.size\n       \
    \ val mean = 0.0 // the mean of our numbers\n        val deviations = mutable.ArrayBuffer.empty[Float]\n\
    \        for (i <- 0 until n) deviations += math.abs(numbers(i) - mean)\n    \
    \    val mad = deviations.sum / n\n        return mad", "        require(numbers.isInstanceOf[Seq[Float]])\n\
    \        val sum = numbers.foldLeft(0.0f){ case (acc, el) => acc + Math.abs(el)\
    \ }\n        val mean = numbers.sum / numbers.size\n        math.abs(sum - mean)",
  "        // Compute the mean of the input numbers:\n        val mean: Float = numbers.foldLeft(0.0f)(_\
    \ + _)\n\n        // Compute the deviations from the mean:\n        val deviations:\
    \ mutable.Map[Float, Float] = numbers.zipWithIndex.map {\n            case (number,\
    \ index) => (index, ((number-mean)/number).toFloat)\n        }\n\n        // Compute\
    \ the average deviation\n        deviations.foldLeft(0.0f)(_ + _) / deviations.size",
  "        val sum = 0.0f\n        val count = 0.toFloat\n        numbers.foreach(x\
    \ => {\n            sum += x\n            count += 1\n        })\n        var\
    \ sum = sum.toFloat\n        var count = count.toFloat\n        numbers.foreach(x\
    \ => {\n            val tmp = x - sum\n            sum += tmp\n            count\
    \ += 1.0f\n        })\n        val mean = sum / count\n        var sum = 0.0f\n\
    \        var count = 0.0f\n        numbers.foreach(x => {\n            val tmp\
    \ = x - mean\n            sum += tmp\n            count += 1.0f\n        })\n\
    \        sum / (count * numbers.length)", "        // Compute the mean\n     \
    \   val mean = numbers.reduceLeft(_ + _) / numbers.length\n        val dev = numbers.map(_\
    \ - mean)\n        return math.abs(dev.reduce(_ + _) / dev.length)", "       \
    \ val (min, max) = numbers.partition(math.abs(_) <= 1.0)\n        val mean: Float\
    \ = numbers.sum.toDouble / numbers.size\n        (max min - mean * mean).sum.toFloat",
  "        var sum = 0.0f\n        for(num <- numbers)\n            sum += num\n\n\
    \        val mean = sum / numbers.size\n        val absDiff = numbers.map(num\
    \ => (num - mean).abs)\n        absDiff.sum / absDiff.size", "        val sum\
    \ : Float = numbers.foldLeft(0.0f)(_ + _)\n        val average = sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - average) * (x - average))\n  \
    \      val mad : Float = deviations.foldLeft(0.0f)(_ + _) / numbers.size\n   \
    \     return mad / numbers.head", "        var sum = 0.0\n        var mean = numbers.reduceLeft(_\
    \ + _) / numbers.length\n        for( n <- numbers ) sum += abs( n - mean )\n\
    \        sum / numbers.length", "        val xSum = numbers.sum\n        val xMean\
    \ = numbers.sum / numbers.size\n        val ySum = numbers.map(x=>Math.pow(x-xMean,\
    \ 2)).sum\n        val yMean = Math.pow(xSum - ySum, 0.5)\n        yMean / xSum",
  "        require(numbers != null)\n        var diff : Float = 0f\n        var sumOfSquares\
    \ : Float = 0f\n        for (n : Float <- numbers) {\n            diff = n - mean\n\
    \            sumOfSquares = sumOfSquares + (n - mean) * (n - mean)\n        }\n\
    \        val avgOfSquares = sumOfSquares / numbers.size\n        return Math.abs(avgOfSquares)\
    \ / diff", "        var m = 0f\n        for (x <- numbers)\n            m += (x\
    \ - numbers.sum) / numbers.size // Mean value of numbers in dataset\n        m",
  "        val mean = 0.0f\n        numbers.foreach(x => mean += x); mean / numbers.length",
  "        var sum = 0.0\n        numbers.foreach(x => sum += math.abs(x - mean))\n\
    \        sum.toFloat/numbers.size", "        // Set up variables\n        var\
    \ mean = 0.0f\n        var sum = 0.0f\n        var n = 0.0f\n\n        // Iterate\
    \ through all the values in numbers \n        for(v <- numbers)\n        {\n \
    \           sum += v\n            n += 1\n        }\n\n        // The mean is\
    \ the sum / n\n        mean = sum / n\n\n        // Initialize variables\n   \
    \     var ma = 0.0f\n\n        // For each element in the list, calculate the\
    \ average of the difference\n        // with the mean\n        for(v <- numbers)\n\
    \        {\n            ma += (Math.abs(v - mean))\n        }\n\n        // Return\
    \ the mean of the absolute differences (ma)\n        ma/numbers.size", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val mdev\
    \ = numbers.map(x => (x - mean).abs).sum / n\n        mdev", "        val n =\
    \ numbers.size\n        var MAD = 0.0f\n        var sum = 0.0f\n        for(i\
    \ <- 0 until n) {\n            sum += numbers(i)\n        }\n        val mean\
    \ = sum / n\n        for(i <- 0 until n) {\n            val diff = numbers(i)\
    \ - mean\n            MAD += diff * diff\n        }\n        return MAD / n",
  "        val counts = numbers.map(x => 1).reduce(_ + _)\n        val total = numbers.reduceLeft(_\
    \ + _)\n        val squares = numbers.map{ x =>\n            math.pow((x - total)\
    \ / counts, 2)\n        }\n        squares.sum / counts.toFloat", "        val\
    \ meanVal = numbers.reduceLeft(_ + _) / numbers.size\n        val differences\
    \ = numbers.map(x => (x - meanVal).abs)\n        val mad = differences.reduceLeft(_\
    \ + _) / differences.size\n        mad", "        val nums: Seq[Float] = numbers.toSeq\n\
    \        val sums = nums.map(x => math.abs(x))\n        val sum = sums.sum\n \
    \       val average = sum / nums.size\n        val squareSums = sums.map(x =>\
    \ math.pow(x, 2))\n        val squareSum = squareSums.sum\n        val averageSquare\
    \ = squareSum / nums.size\n        math.abs(average - averageSquare)", "     \
    \   var sum = 0.0f\n        var n = numbers.size\n        for(i <- 0 until n){\n\
    \            sum += math.abs(numbers.apply(i) - numbers.mean())\n        }\n \
    \       return sum/numbers.size()", "        var mean : Float = 0.toFloat\n  \
    \      var deviation : Float = 0.toFloat\n        var mad : Float = 0.toFloat\n\
    \        numbers.foreach { value =>\n            mean += value\n            deviation\
    \ += math.abs(value - mean)\n        }\n        mad = deviation / numbers.size\n\
    \        return mad", "        val mean = 0f\n        val result = new collection.mutable.ListBuffer[Float]()\n\
    \        numbers.foreach{ x => result += abs(x - mean) }\n        result / numbers.size",
  "        // Get the count and sum\n        val count = numbers.map(x => x).count(x\
    \ => x > 0.0f)\n        val sum    = numbers.map(x => x).reduce(_ + _)\n     \
    \   // Get the absolute difference\n        val absdiff = numbers.map(x => x -\
    \ sum)\n        // Return the sum of the absolute differences\n        val sumOfAbsDiff\
    \ = absdiff.reduce(_ + _)\n        // Return the average of the absolute differences\n\
    \        sumOfAbsDiff / count", "        // Get the mean of the numbers and subtract\
    \ it from the list:\n        val mean = numbers.sum / numbers.size\n\n       \
    \ // Then calculate the difference between each number and the mean:\n       \
    \ val differences = numbers.map((x - mean))\n\n        // Finally, calculate the\
    \ average of these differences:\n        val average = differences.sum / differences.size\n\
    \n        // return the average value:\n        average", "        val mean =\
    \ (numbers.sum / numbers.length).floatValue\n        val sum = 0f\n        val\
    \ numElems = numbers.length\n        numbers.foreach{ x =>\n            sum +=\
    \ (x - mean).abs\n        }\n        (sum / numElems).floatValue", "        val\
    \ mean = numbers.sum / numbers.size\n        val sumOfDiffs  = numbers.map(x =>\
    \ math.abs(x - mean))\n        return sumOfDiffs.sum / numbers.size", "      \
    \  numbers.foldLeft(0.0f) { (sum, number) => sum + Math.pow((number - mean), 2.0)\
    \ }\n        / (numbers.size.toFloat)", "        val sum = numbers.sum\n     \
    \   val mean = numbers.sum / numbers.length\n        var mad = 0.0f\n        for\
    \ (n <- numbers) {\n            val delta = n - mean\n            mad += delta.abs\
    \ * (delta.abs)\n        }\n        mad / numbers.length", "        val mu = numbers.sum\
    \ / numbers.length\n        numbers.map{ number => Math.abs(number - mu) }\n \
    \           .sum\n            / numbers.length", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => math.abs(x - mean))\n            .sum\
    \ / numbers.size", "        var mean = numbers.reduceLeft(_ + _)/numbers.size\n\
    \        var sum = 0.0\n        numbers.foreach(x => { sum += (x - mean) })\n\
    \        sum / numbers.size", "        val numbers = numbers groupBy (_/mean)\
    \ mapValues (_.size)\n        val sum = numbers map {case (n,l) => l}.reduce{_+_}\n\
    \        val avgs = numbers map {case (n,l) => n/sum}\n        val diff = numbers\
    \ zip avgs\n        diff map {case (n,m) => math.abs(n - m)}.reduce{_+_}/diff.size",
  "        val mean = 0.0f\n        var sum = 0.0f\n        for( n <- numbers ) {\n\
    \            sum += Math.abs( n - mean )\n        }\n        sum / numbers.size.toFloat",
  "        // Using mutable Map to keep track of sum of absolute differences between\n\
    \        // numbers (absolute difference is calculated from each number) and\n\
    \        // mean of numbers.\n        val mad : Map[Float,Float] = new mutable.HashMap[Float,Float]()\n\
    \        var sum = 0.0f\n        numbers.foreach{x => \n            // For each\
    \ number we calculate sum of absolute differences from \n            // itself\
    \ to mean of numbers.\n            val absoluteDifference = x - numbers.mean()\n\
    \            mad += x -> absoluteDifference\n            sum += absoluteDifference\n\
    \        }\n        mad.values.sum / numbers.size", "        var mu = 0.0f;\n\
    \        var deviations = List.empty[Float];\n        numbers.foreach{ x=> \n\
    \            mu = mu + x\n            deviations ::= x - mu\n        }\n     \
    \   val md = (deviations.sum / deviations.size)\n        mu", "        var mean\
    \ = 0.0f\n        var sum = 0.0f\n        numbers.foreach(number => { sum += number;\
    \ mean = sum / numbers.size})\n        return sum / numbers.size", "        val\
    \ mabs = numbers.foldLeft(0.0f){ (mabs, x) => mabs + math.abs(x - mean(x)) }\n\
    \        mabs / numbers.size", "        var sum = 0\n        var mean = 0f\n \
    \       for (n in numbers) {\n            sum += abs(n - mean)\n            mean\
    \ = n / numbers.size\n        }\n        sum", "        var deviations = List.empty[Float]\n\
    \        var mean = numbers.reduceLeft(_ + _) / numbers.size\n        numbers.foreach\
    \ {\n            n =>\n                deviations :+= Math.abs(n - mean)\n   \
    \     }\n        mean + deviations.sum / deviations.size", "        val means\
    \ = numbers.map( _.toFloat ) grouped numbers.size / numbers.size \n        val\
    \ sum = means.map( _.toFloat ) reduce( _ + _ )\n        val mad = sum / means.size\n\
    \        mad ", "        // For this exercise, calculate the mean and standard\
    \ deviation\n        // of the input numbers and use these to calculate the MAD\n\
    \        // See http://en.wikipedia.org/wiki/Mean_deviation\n        numbers.map((number)\
    \ => Math.pow(number - numbers.mean(), 2)).sum / numbers.size", "        // Find\
    \ the mean and variance of the numbers\n        val sum = numbers.sum\n      \
    \  val mean = numbers.sum / numbers.length\n        val squareSum = numbers.map{_\
    \ * _}.sum\n        val squareMean = squareSum / numbers.length\n        val variance\
    \ = squareMean - mean * mean\n        // Return the mean absolute deviation as\
    \ a\n        // Float\n        math.abs(variance / numbers.length)", "       \
    \ require(numbers.size % 2 == 0)\n        val sum = 0.0\n        var sumSquares\
    \ = 0.0f\n\n        var mean = 0.0f\n\n        for (n1 <- 0 until numbers.size\
    \ ; n2 <- n1 until numbers.size ) {\n            sum += numbers(n1) - numbers(n2)\n\
    \            sumSquares += numbers(n1)*numbers(n1)\n            mean = (sum +\
    \ numbers.size / 2.0f) / (numbers.size / 2.0f)\n        }\n\n        val numSamples\
    \ = numbers.size / 2\n        val mean = sum / numSamples\n        val sumOfSquaresDiff\
    \ = sumSquares / numSamples\n\n        return (Math.sqrt(numSamples - 1) * sumOfSquaresDiff\
    \ / (sum * sum)).toFloat", "        var mean : Float = 0.0f\n        val numberArray\
    \ = numbers.toArray\n        val numberOfElements = numberArray.length\n\n   \
    \     for (i <- 0 until numberOfElements) {\n            mean = mean + numberArray(i)\n\
    \        }\n\n        mean = mean / numberOfElements\n\n        for (i <- 0 until\
    \ numberOfElements) {\n            numberArray(i) = numberArray(i) - mean\n  \
    \      }\n\n        val meanAbsoluteDeviation = numberArray.foldLeft(0.0f)((a,\
    \ b) => (a + b))\n        return meanAbsoluteDeviation", "        require(numbers\
    \ != null)\n\n        val sum = numbers.reduce((x, y) => x + y)\n        val mean\
    \ = numbers.sum / numbers.length\n        val devs = numbers.map((x - mean)^2)\n\
    \        val mad = sum * devs.sum / numbers.length\n        mad", "        require(numbers.size\
    \ % 2 == 1)\n        val average = numbers.sum / numbers.size\n        val differences\
    \ = numbers.map((_ - average))\n        val totalDeviations = differences.map(abs)\n\
    \        val mean = average.toDouble\n        val mad = totalDeviations.sum /\
    \ numbers.size\n        mad.toFloat", "        val count = numbers.size\n    \
    \    val sum = 0.0f\n        numbers.foreach(_ => sum += _)\n        sum / count",
  "        val m = numbers.size\n        val mean = numbers.sum / m\n        val diffs\
    \ = numbers.map(x => (x - mean).abs)\n        val sumOfDiffs = diffs.sum\n   \
    \     math.abs(sumOfDiffs / m)", "        var sum = 0.0f\n        var mean = numbers.sum\
    \ / numbers.length\n        for(i <- 0 until numbers.length)\n            sum\
    \ += math.abs(numbers[i] - mean)\n        return math.abs(sum / numbers.length)",
  "        val list = numbers.toList\n        var sum = 0.0f;\n        var numElements\
    \ = list.size\n        var x_mean = list.head\n        for (x <- list.tail) {\n\
    \            sum += abs(x - x_mean)\n            numElements--\n            x_mean\
    \ = x\n        }\n        if (numElements < 0)\n            return 0.0f\n    \
    \    else\n            return sum / (numElements)", "        val meanNumbers =\
    \ numbers.sum / numbers.length\n        numbers.map(x => abs(x - meanNumbers)).sum\
    \ / numbers.length", "        val meanVal = numbers.toStream.sum / numbers.size\n\
    \        numbers.map(x => Math.abs(x - meanVal)).reduce(_ + _) / numbers.size",
  "        var mad : Float = 0.0\n        var mean : Float = 0.0\n        for (x <-\
    \ numbers)\n            mad += Math.abs(x - mean)\n        mad /= numbers.size\n\
    \        mean", "        require(numbers != null)\n        require(numbers.size\
    \ >= 2)\n        require(numbers.forall(_ >= 0.0f))\n        require(numbers.forall(_.isInstanceOf[Float]))\n\
    \        require(numbers(0).isInstanceOf[Float])\n        require(numbers(1).isInstanceOf[Float])\n\
    \        val sumOfDifferences = numbers.map(x => (x - numbers(0).toFloat)).sum\n\
    \        val mean = sumOfDifferences / numbers.size\n        numbers.map(x =>\
    \ (x - mean).abs).sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean))\n        return deviations.foldLeft(0.0f)((sum,\
    \ deviation) => sum + (deviation * deviation))", "        val n = numbers.size\n\
    \        var mad = 0.0f\n        var mean = 0.0f\n        var delta = 1.0f\n\n\
    \        // TODO: implement this function\n        numbers.foreach{x => {\n  \
    \          mean += x\n        }}\n\n        mad = delta * ((n - 1) * delta) /\
    \ mean\n        return mad", "        // calculate the mean of the list of numbers\n\
    \        val mean = numbers.map(_.toFloat).sum / numbers.size\n        // calculate\
    \ the differences between each element and the mean\n        val deviations =\
    \ numbers.map(d => d - mean).map(math.abs)\n        // calculate the mean absolute\
    \ deviation\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.length\n        (numbers.map(x => abs(x - mean)).reduce(_ + _)).divide(numbers.length)",
  "        if (numbers.isEmpty) 0.0f\n        else {\n            val mean = numbers.sum\
    \ / numbers.size\n            val diff = numbers.map{x => x - mean}\n        \
    \    diff.sum.toFloat\n        }", "        val mean = numbers.reduceLeft(_ +\
    \ _) / numbers.length\n        val diff = numbers.map(x => x - mean)\n       \
    \ diff.map(x => math.abs(x)).sum", "        val numbers_mean = numbers.sum / numbers.size\n\
    \        val abs_diffs = numbers.map( x => (x - numbers_mean).abs ).sum\n    \
    \    val md = abs_diffs / numbers.size\n        return md", "        val sum:\
    \ Float = numbers.sum\n        var sumSquareDiff = 0.0\n        numbers.foreach\
    \ { x =>\n            val diff = (x - sum)\n            sumSquareDiff += diff*diff\n\
    \        }\n        math.abs(sumSquareDiff / numbers.size)", "        val sum\
    \ = 0.0f\n        val count = numbers.size\n        numbers.foreach { x =>\n \
    \           sum += Math.abs(x - mean)\n        }\n        sum / (count * (count\
    \ - 1.0f))", "        // Sum all numbers (x-mean) and divide by number of elements:\n\
    \        val sum = numbers.foldLeft(0.0f)( (sum, element) => sum + element)\n\
    \        val mean = sum / numbers.length\n        // Return absolute difference\n\
    \        numbers.map(x => Math.abs(x - mean)).sum / numbers.length", "       \
    \ var sum = 0.0f;\n        var average = 0.0f;\n        numbers.foreach{\n   \
    \         sum += 1f;\n            average += sum.toFloat / numbers.size\n    \
    \    }\n        average;", "        var sum = 0.0f\n        var deviation = 0.0f\n\
    \        numbers.foreach(x => {\n            sum += x\n        })\n        numbers.foreach(x\
    \ => {\n            deviation += (x - sum)\n        })\n        deviation /= numbers.size\n\
    \        deviation", "        val sum = 0.0f\n        numbers.foreach( n => sum\
    \ += Math.abs(n - mean(n)) )\n        sum/numbers.size", "        val sum = 0.0\n\
    \        for (x <- numbers) sum += Math.abs(x - numbers.mean)\n        sum / numbers.size",
  "        val meanX = numbers.sum / numbers.size\n        val deviations = numbers.map\
    \ {x => math.abs(x - meanX) }\n        deviations.sum / deviations.size ", " \
    \       require(numbers != null && numbers.size > 0)\n        numbers.foldLeft(0.0f)\
    \ { (sum, element) => sum + Math.sqrt(element - mean) }", "        var mean =\
    \ 0.0f\n        var sum = 0.0f\n        for (x <- numbers) sum += math.pow((x\
    \ - mean), 2)\n        mean = sum / numbers.size\n        numbers.map { x => (x\
    \ - mean) }.sum", "        val nums = numbers.toList\n        if (nums.isEmpty)\
    \ {\n            return 0.0f\n        }\n        // Sum all the numbers except\
    \ the mean and divide by the number\n        // of samples - 1\n        val sum\
    \ = nums.filter { x => x != nums.sum }\n        sum.sum / nums.size", "      \
    \  var sum = 0.0f\n        numbers.foreach(n => {\n            sum += Math.abs(n\
    \ - numbers.sum)\n        })\n        sum / numbers.length", "        var sum\
    \ = 0f\n        var num = 0f\n        numbers.foreach( x => { sum += x; num +=\
    \ 1 } )\n        return sum / num", "        var sum = 0.0\n        var sumOfSquare\
    \ = 0.0\n        var n = numbers.size\n        for (x <- numbers) {\n        \
    \    sum += x\n            sumOfSquare += x * x\n        }\n        var mad =\
    \ sum / (n * sumOfSquare)\n        mad", "        require(numbers.size >= 1)\n\
    \        val sum = numbers.reduceLeft(_ + _)\n        val mean = sum / numbers.size\n\
    \        val averageAbsDev = numbers.map(x => Math.abs(x - mean)).sum\n      \
    \  (averageAbsDev / numbers.size).toFloat", "        // Return mean of list divided\
    \ by standard deviation of list\n        val mean: Float = numbers.sum / numbers.size\n\
    \        val variance: Float = numbers.map(_ - mean).sum / numbers.size\n    \
    \    variance / mean", "        var sum = 0.0f\n        for(x <- numbers)\n  \
    \          sum += Math.abs(x - mean(x))\n        sum / (numbers.size)", '        numbers.map(_.toFloat).sum.toFloat
    / numbers.size', "        val average = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(math.abs)\n        deviations.sum / deviations.size",
  "        var avg = 0.0f\n        var mad = 0.0f\n        for (number <- numbers)\n\
    \            avg = avg + number\n        avg /= numbers.size\n        for (number\
    \ <- numbers)\n            mad = mad + ((number - avg) * (number - avg))\n   \
    \     mad /= numbers.size\n        mad.toFloat", "        val n = numbers.size\n\
    \        if (n == 0) {\n            0.0f\n        }\n        else {\n        \
    \    val mean = numbers.sum / numbers.size\n            numbers.map(x => Math.abs(x\
    \ - mean)).sum / n\n        }", "        // calculate the mean of the numbers\
    \ list\n        val sum = 0.0f\n        for (i<-0 until numbers.length) sum +=\
    \ numbers(i)\n        val mean = sum / numbers.length\n        // calculate the\
    \ sum of squared differences between each number\n        // and the mean\n  \
    \      val sumOfSquareDiff = 0.0f\n        for (i<-0 until numbers.length) sumOfSquareDiff\
    \ += (numbers(i) - mean) * (numbers(i) - mean)\n        // calculate the mean\
    \ absolute deviation\n        (sumOfSquareDiff / numbers.length).toFloat", " \
    \       var sum = 0f\n        var count = 0f\n        for (x<-numbers) sum +=\
    \ x\n        for (x<-numbers) if (x != 0.0f) count += 1f\n        val mean = sum/count\n\
    \        for (x<-numbers) if (x != 0.0f) (x-mean)*(x-mean)\n        else 0.0f",
  "        // Get the mean of the numbers\n        val mean = numbers.mean\n\n   \
    \     // Calculate the deviation for each number\n        val deviations = numbers.map(number\
    \ => math.abs(number - mean))\n\n        // Return the average of the deviations,\
    \ round to the nearest decimal\n        deviations.sum / deviations.size.toFloat",
  "        val sum = numbers.foldLeft(0.0f){ _ + _ }\n        val mean = numbers.sum\
    \ / numbers.size\n        val differences = numbers.map(n => Math.abs(n - mean))\n\
    \        val mad = differences.reduce((x, y) => x + y) / numbers.size\n      \
    \  mad.toFloat", "        var mad = 0.0f\n        numbers.foreach(x => mad +=\
    \ abs(x - mean(x)))\n        mad/numbers.size", "        val mean = numbers.reduce((sum,\
    \ value) => sum + value) / numbers.length\n        val mad = numbers.map((value)\
    \ => Math.abs(value - mean)).mean()\n        mad", "        // Convert the numbers\
    \ to double for ease of use later\n        var sum = 0\n        var mean = 0.0f\n\
    \        for (n <- numbers) {\n            sum += n\n            mean += n * n\n\
    \        }\n        mean /= numbers.length\n        // Calculate the MAD using\
    \ the formula:\n        // MAD = average | x - x_mean |\n        var mad_sum =\
    \ 0.0f\n        for (n <- numbers) {\n            mad_sum += Math.abs(n - mean)\n\
    \        }\n        mad_sum /= numbers.length\n        return mad_sum", '        numbers.map(x
    => (x - numbers.mean())).sum / numbers.size', "        numbers.toList.foldLeft(0.0f){\
    \ (sum, number) =>\n            val delta = math.abs(number - sum)\n         \
    \   sum + delta\n        }", "        val mean    = numbers.sum / numbers.length\n\
    \        val diffs   = numbers.map { number => (number - mean) }\n        diffs.sum\
    \ / diffs.length", "        val count = numbers.map(x => x - x.toFloat).sum\n\
    \        numbers.map(x => abs(x - x.toFloat)).sum / count", "        if (numbers\
    \ == null || numbers.isEmpty) 0.0f\n        else {\n            var sum = numbers.reduce((x,\
    \ y) => x + y)\n            var sumSquares = numbers.reduce((x, y) => x + y *\
    \ y)\n            var squareSum = sum * sum\n            var mean = sum / numbers.size\n\
    \n            var mad = 0.0f\n            for (x <- numbers) {\n             \
    \   val diff = x - mean\n                val absDiff = math.abs(diff)\n      \
    \          mad += absDiff\n            }\n            (mad / squareSum).toFloat\n\
    \        }", "        var sum = 0.0f\n        var count = 0.0f\n        for (x1\
    \ <- numbers) {\n            sum += x1\n            count += 1.0f\n        }\n\
    \        if (count == 0) {\n            return 0.0f\n        }\n        return\
    \ sum / count", "        if (numbers.size==0) 0.0f\n        else {\n         \
    \   val nums = numbers.toList\n            val sumXmean = 0.0f\n            val\
    \ sumXabs = 0.0f\n            for (x <- nums) {\n                sumXmean += x\n\
    \                sumXabs += Math.abs(x-sumXmean)\n            }\n            sumXabs/nums.size\n\
    \        }", "        var sum = 0.0f\n        numbers.foreach(n => {\n       \
    \     sum += Math.abs(n - numbers.mean)\n        })\n        return sum / numbers.length",
  "        val mean = numbers.mean\n        val deviations = numbers.map(x - mean)\n\
    \        deviations.sum / deviations.length", "        numbers.foldLeft(0f){\n\
    \          case (acc, element) =>\n            acc += math.abs(element - math.mean(numbers))\n\
    \        }\n        acc / numbers.size", '        numbers.map(x => Math.abs(x
    - numbers.sum / numbers.size)).sum', "        var sum = 0.0f;\n        for(x <-\
    \ numbers) sum += math.abs(x-numbers.sum/numbers.length);\n        return sum/numbers.size;",
  "        var sum = 0.0;\n        var n = numbers.size;\n        for (i <- 0 until\
    \ n) {\n            sum += math.abs(numbers(i) - numbers.mean)\n        }\n  \
    \      sum / n", "        val sum = numbers.foldLeft(0.0f){ case (sum, n) => sum\
    \ + n }\n        val mean = numbers.sum / numbers.size\n        val differences\
    \ = numbers.map{ n => n - mean}\n        val sumOfDifferences = differences.sum\n\
    \        val scaleOfDifferences = sumOfDifferences / numbers.size\n        mean\
    \ + (scaleOfDifferences / 2.0f)", "        val mean = numbers.reduce((x, y) =>\
    \ x + y) / numbers.length\n        val differences = numbers.map(x => x - mean).reduce((x,\
    \ y) => x + y)\n        val abs = differences.abs\n        abs / numbers.size",
  '        numbers.foldLeft(0.0f)( (a,b) => a + Math.abs(a-b))/numbers.length', " \
    \       val sumOfSquares = numbers.map(x => (x - numbers.sum) ^ 2)\n        val\
    \ average = sumOfSquares.sum / numbers.length\n        val standardDeviation =\
    \ math.sqrt(average)\n        standardDeviation", "        // initialize variables\n\
    \        var sum = 0.0\n        var average = 0.0\n        var variance = 0.0\n\
    \        // compute the sum for each number\n        numbers.foreach(x => sum\
    \ += x)\n        // compute the average for each number\n        numbers.foreach(x\
    \ => average += x)\n        // compute the variance for each number\n        numbers.foreach(x\
    \ => variance += (x-average)*(x - average))\n        // return the result\n  \
    \      return sum/numbers.size.toFloat/Math.sqrt(variance)", "        var numbersList\
    \ = numbers.toList\n        var mean = 0.0f\n        numbersList foreach (x =>\
    \ { mean += x; })\n        numbersList foreach (x => { mean /= numbersList.size;\
    \ })\n        var mad = 0.0f\n        numbersList foreach (x => { mad += (x -\
    \ mean) * (x - mean); })\n        mad / numbersList.size", "        numbers.foldLeft(0.0f){\n\
    \            case ((sum, number) => sum + Math.sqrt(number*number))/numbers.size\
    \ -> Math.sqrt(sum)\n            case ((sum, number) => sum + number*number)/numbers.size\
    \ -> sum\n        }", '        numbers.foldLeft(0.0f)( (sum, x) => sum + math.abs(x
    - x.toFloat))', "        if (numbers.isEmpty) 0.0f\n        else {\n         \
    \   var sum = 0.0f\n            var mean = 0.0f\n            numbers.foreach {\
    \ x => \n                sum += abs(x - mean)\n                mean += x\n   \
    \         }\n            sum / numbers.size\n        }", "        var numbers_mean\
    \ = numbers.sum / numbers.size\n\n        var mad = 0.0f\n        numbers.foreach\
    \ {\n            x =>\n            mad += Math.abs(x - numbers_mean)\n       \
    \ }\n\n        mad.toFloat / numbers.size", "        // Set up arrays of data\
    \ and calculate Mean Absolute Deviation\n        // for each number.\n       \
    \ var average = 0.0f\n        var deviation = 0.0f\n        for (number <- numbers)\
    \ {\n            average += number\n            deviation += math.pow(number -\
    \ average, 2)\n        }\n        return math.sqrt(deviation / numbers.length)",
  "        // We first calculate the mean and store it as our center point\n     \
    \   var mean : Float = 0.0\n        numbers.foreach{\n            _ <- mean +=\
    \ _\n        }\n        // We now calculate the difference\n        numbers.foreach{\n\
    \            _ <- mean -= _\n        }\n        mean", "        val numbers =\
    \ numbers.toList\n        if (numbers.isEmpty) 0.0f\n        else {\n        \
    \    val avg = numbers.sum / numbers.size\n            val diff = numbers.map(x\
    \ => math.abs(x - avg))\n            diff.sum / diff.size\n        }", "     \
    \   val n = numbers.size\n        if(n < 2) 0.0f\n        else (numbers.min.toFloat\
    \ - numbers.mean.toFloat).abs / (n - 1)", "        // Find the mean of all numbers\
    \ in the list\n        val nums = numbers.toList\n        var mean = 0.0f\n  \
    \      for (x <- nums) {\n            mean = mean + x\n        }\n        val\
    \ n = nums.size\n        mean = mean / n\n\n        // Subtract the mean from\
    \ every number in the list\n        var mad = 0.0f\n        for (x <- nums) {\n\
    \            mad = mad + (x - mean) * (x - mean)\n        }\n        mad = mad.toFloat\
    \ / (n - 1)\n        return mad", "      val list = numbers.toList\n      val\
    \ average = list.sum.toFloat / list.size\n      val deviations = list.map(x =>\
    \ Math.abs(x - average))\n      deviations.sum / deviations.size", "        val\
    \ xMean = numbers.sum.toFloat / numbers.size // TODO: This could be done faster\
    \ with a mutable map\n        val differences = numbers.map(n => (n - xMean).abs)\n\
    \        val sumOfDifferences = differences.sum\n        (sumOfDifferences / xMean).abs",
  "        val n = numbers.size\n        if (n < 1) 0.0f\n        else {\n       \
    \     val mean = numbers.reduceLeft(_ + _)/n\n            numbers.map(_-mean).sum/(n-1)\n\
    \        }", "        val sum = 0.0f\n        val squareSum = 0.0f\n        for\
    \ (x <- numbers)\n            sum += x\n        for (x <- numbers)\n         \
    \   squareSum += x * x\n        (sum / numbers.size) -\n            (squareSum\
    \ / numbers.size) / numbers.size // Scala has implicit type promotion here.",
  "        require(numbers != null, \"numbers is null\")\n        numbers.sum {\n\
    \            math.abs($0 - numbers.mean())\n        }", "        val sum = numbers.foldLeft(0.0f){\
    \ case (sum, num) => sum + num }\n        val mean = sum / numbers.length\n  \
    \      val diff = numbers.map(num => (num - mean))\n        diff.map(Math.abs(_)).sum\
    \ / diff.length", "        var xMean : Float = 0.0\n        var sumOfAbsError\
    \ : Float = 0.0\n        numbers.foreach(x => xMean += x)\n        numbers.foreach(x\
    \ => sumOfAbsError += abs(x - xMean))\n        sumOfAbsError / numbers.size",
  "        val mean = numbers.sum / numbers.length\n        numbers.map(x => (x -\
    \ mean) * (x - mean)).reduce(_ + _) / numbers.length", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map { number =>\n            Math.abs(number\
    \ - mean)\n        }.sum / numbers.length", "        require(numbers.size % 2\
    \ == 0, \"Input size must be divisible by 2!\")\n        // Create a mutable list\
    \ of numbers from the input list\n        val list = mutable.ListBuffer[Float]()\n\
    \        for (i <- 1 to numbers.size / 2-1) list += numbers(i)\n        val mean\
    \ = numbers.size / 2\n        // Create a mutable list of differences from the\
    \ input list\n        val diff = mutable.ListBuffer[Float]()\n        for (i <-\
    \ 1 to list.size / 2-1) diff += abs(list(i) - mean)\n        val md = sum(diff)\
    \ / diff.size\n        return md", "        val average = numbers.reduceLeft(_\
    \ + _) / numbers.length\n        val averageDiff = numbers.map(_ - average)\n\
    \        averageDiff.map(_ * _).sum / averageDiff.length", "        var sum =\
    \ 0.0f\n        var mean = numbers.head\n\n        // Iterating over the elements\
    \ of the dataset and\n        // incrementing the sum of the absolute differences\n\
    \        // with the difference of the current element and the\n        // mean.\n\
    \        numbers.tail.foreach(x => sum += Math.abs(x - mean))\n\n        // The\
    \ mean of the dataset is the sum of the element values\n        // divided by\
    \ the number of element values.\n        val meanValue = (numbers.sum / numbers.length).toFloat\n\
    \n        // Return the average of the absolute differences to the mean.\n   \
    \     // Multiply the average by the length of the dataset\n        // to calculate\
    \ the MAD.\n        (sum / numbers.length) * numbers.length.toFloat", "      \
    \  val mean = numbers.reduce((x,y) => x + y) / numbers.length\n\n        val diff\
    \ = numbers.map(x => (x - mean)).sum\n        val absDiff = numbers.map(x => math.abs(x)).sum\n\
    \n        diff / absDiff", "        val nums = numbers.toList\n        var mean\
    \ = nums.sum / nums.size\n        nums.sortWith(_ < _) //sort the list\n     \
    \   var mad = 0.0f\n        for (i <- 0 until nums.size) {\n          val diff\
    \ = nums(i) - mean\n          mad += math.abs(diff)\n          mean += diff\n\
    \        }\n        mad.toFloat", "        val numbersCount = numbers.size\n \
    \       var sum = 0F\n        for( i <- 1 to numbersCount) {\n            sum\
    \ += math.abs(numbers(i) - mean)\n        }\n        return sum / numbersCount",
  "        val mean: Float = numbers.sum / numbers.length\n        var mad = 0.0f\n\
    \        for (x <- numbers) {\n            val diff = x - mean\n            mad\
    \ = mad + (diff * diff)\n        }\n        mad/numbers.length", "        // Calculate\
    \ the mean of this dataset\n        val total = numbers.sum\n        val mean\
    \ = total / numbers.size\n        // Calculate the deviations (the absolute difference\
    \ for each element)\n        // from our mean\n        val dev = numbers.map {\
    \ x => Math.abs(x - mean) }\n        // Calculate the average\n        val average\
    \ = dev.sum / dev.size\n        // Return the average deviation\n        average",
  "        // The input numbers are assumed to have a standard deviation\n       \
    \ // of 1 unit. This is the default for this exercise.\n        // Calculate the\
    \ mean of the input numbers using a map function.\n        // The values stored\
    \ as keys become a new vector with the means\n        // and their corresponding\
    \ values.\n        var mean : Float = numbers.map(x => x).sum / numbers.length\n\
    \        // Calculate the absolute difference of each number from the\n      \
    \  // mean. The values stored as keys become a new vector with the\n        //\
    \ absolute differences and their corresponding values.\n        var absDev : Map[Float,Float]\
    \ = numbers.map(x => x - mean).zipWithIndex.map( x => x -> Math.sqrt( x._2 * x._2\
    \ )).toMap\n        // Get the average of all the values stored as keys.\n   \
    \     var average: Float = absDev.values.sum / absDev.size\n        // Return\
    \ the average of all the values stored as keys.\n        return average", "  \
    \      val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.length", "        val\
    \ n = numbers.size // number of items\n        val mean = numbers.sum / n\n  \
    \      var sum = 0.0f // sum for each item\n        for (i <- 0 until n) { sum\
    \ += Math.pow(numbers(i) - mean, 2.0f) }\n        sum / n", "        val mean\
    \ = numbers.sum / numbers.length\n        numbers.map(_.toFloat - mean).abs",
  "        numbers.foldLeft(0.0f){\n            (acc, x) => math.abs(x - acc) + acc\n\
    \        }", "        var sum = 0.0f\n        var count = 0\n        for (i <-\
    \ numbers) {\n            sum += i\n            count += 1\n        }\n      \
    \  (sum / count).abs", "        val numberSet = numbers.toSet\n        val average\
    \ = numberSet.average\n        val differences = numberSet.diff(Set(average))\n\
    \        val md = differences.reduce(_ * _)\n        md.toFloat / numberSet.count",
  "        val meanValue = numbers.sum/numbers.length\n        val differences = numbers.map\
    \ (x => x - meanValue)\n        differences.sum/differences.length", "       \
    \ val xmean = numbers.sum / numbers.size\n        val mda = numbers.map(x => x\
    \ - xmean).reduce(_ + _)\n        xmean + mda", "        var sum = 0.0f\n    \
    \    var count = 1\n        numbers.foreach(x => {\n            sum += (x - mean(x))\n\
    \            count += 1\n        })\n        (sum / count).toFloat", "       \
    \ val xMean = numbers.sum / numbers.length\n        val x = numbers.map(x=> x\
    \ - xMean)\n        x.map(x=> math.abs(x)).sum / x.length", "        val sum =\
    \ numbers.sum\n        val mean = numbers.sum / numbers.size\n        var sumOfDifferences\
    \ = 0.0f\n        var sumOfSquaredDifferences = 0.0f\n        numbers.foreach{\
    \ x =>\n          val difference = x - mean\n          sumOfDifferences += difference\n\
    \          sumOfSquaredDifferences += difference * difference\n        }\n   \
    \     return (sumOfDifferences / sum) - (sumOfSquaredDifferences / numbers.size)",
  "        def findMean(numbers: List[Float]): Float = {\n            // Sort the\
    \ numbers, remove any non-numbers, and remove any empty strings.\n           \
    \ var numbersSorted : List[Float] = numbers.toList.sortWith((x, y) => x.toFloat\
    \ < y.toFloat)\n            numbersSorted = numbersSorted.filterNot((number) =>\
    \ number == \"\".toFloat)\n            var mean = 0.0f\n            for (i <-\
    \ 0 until numbersSorted.length) {\n                if (numbersSorted.length !=\
    \ 1) {\n                    mean += numbersSorted.head\n                }\n  \
    \          }\n            return mean\n        }\n        def calcDevs(numbers:\
    \ List[Float], mean: Float) : List[Float] = {\n            // Calculate the devs\
    \ using the formula for the absolute difference:\n            // MAD = average\
    \ | x - x_mean |\n            // >>> calcDevs((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)), 3.0f)\n            var devs : List[Float] = List[Float]()\n\
    \            var count = 1\n            for (x <- numbers) {\n               \
    \ var absolute = Math.abs(x - mean)\n                devs = devs :+ absolute\n\
    \                count += 1\n            }\n            return devs\n        }\n\
    \        val mean = findMean(numbers)\n        val devs = calcDevs(numbers, mean)\n\
    \        val absDevs = devs.map(x => Math.abs(x))\n        val absDevMean = absDevs.reduce((x,\
    \ y) => x + y)\n        val absDevMeanSquared = absDevs.map(x => x * x).reduce((x,\
    \ y) => x + y)\n        val absDevMeanSquaredMean = absDevMeanSquared / numbers\n\
    \        return (absDevMeanMeanSquared - absDevMeanSquaredMean).asInstanceOf[Float]",
  "        val n = numbers.length\n        numbers.toSet.map(_.abs+x).sum.toFloat/n ",
  "        val n = (numbers.size).toFloat\n        numbers.zipWithIndex.map(_.toFloat).reduce(_\
    \ + _ / n).toFloat", "        val mean = numbers.map(_.toFloat).sum / numbers.size\n\
    \        val sumOfDifferences = numbers.map(x => (x - mean).abs).sum\n       \
    \ sumOfDifferences / numbers.size", "        val nn = numbers.count(_ != 0)\n\
    \        if (nn == 0) 0.0 else (numbers zip (numbers map { x => (x - numbers.sum/nn).abs\
    \ }).map(_._1).sum / nn)", "        val x = numbers.toList\n        val xMean\
    \ = x.sum/x.size.toFloat\n        var mAD = 0.0f\n        for (x <- x) {\n   \
    \         if (x<xMean)\n                mAD += (x - xMean)\n            else\n\
    \                mAD += (xMean - x)\n        }\n        mAD.toFloat/x.length",
  "        val xMean = numbers.sum.toFloat/numbers.length\n        numbers.map(x =>\
    \ (x - xMean) * (x - xMean)).sum", "        val m = new HashMap[Float, Float]()\n\
    \        for (number <- numbers) m.putIfAbsent(number, 0)\n        numbers.map(x\
    \ => m.getOrElse(x, 0f)).sum / numbers.size", "        val n = numbers.size\n\
    \        val sum = 0.0f\n        for (i <- 0 until n) {\n            sum += math.abs(numbers(i)\
    \ - mean(numbers))\n        }\n        sum / n", "        def mad (xs: List[Float])\
    \ =\n            (0 until xs.length).map(i => (x(i) - xs.sum / xs.length).abs).sum\
    \ / xs.length\n\n        mad(numbers)", "        val sumOfSquares = 0f\n     \
    \   val sumOfNumbers = 0f\n        numbers.foreach{x => sumOfSquares += (x - x.toFloat)*(x\
    \ - x.toFloat)}\n        numbers.foreach{x => sumOfNumbers += x}\n        Math.sqrt(sumOfSquares/sumOfNumbers)",
  "        val mean = numbers.sum/numbers.length\n        val deviations = numbers.map\
    \ { x => math.abs(x - mean) }\n        deviations.sum/deviations.length", "  \
    \      var sum = 0.0f\n        numbers.foreach(sum +/+= _)\n        sum", "  \
    \      var mad : Float = 0.0f\n        numbers.foreach(x => mad += abs(x - mean(x)))\n\
    \        return mad", "        var m = 0f\n        var sum = 0.0f\n        numbers.foreach{\
    \ x =>\n            m += x\n            sum += math.abs(x - m)\n        }\n  \
    \      sum / numbers.size", "        var sum = 0.0f\n        var average = 0.0f\n\
    \n        // iterate through the input dataset and sum the absolute differences\n\
    \        for (number <- numbers) {\n            sum = sum + math.abs(number -\
    \ average)\n        }\n        average = sum / numbers.size\n        return average",
  "        // Add up all the deviations (absolute value difference)\n        val sum\
    \ = numbers.foldLeft(0.0f) { (sum, num) =>\n            sum + Math.abs(num - sum\
    \ / numbers.length)\n        }\n        // Divide by number of numbers (number\
    \ of elements)\n        sum / (numbers.length)", "        var sum = 0.0f\n   \
    \     for( x <- numbers ) sum += Math.abs( x - numbers.mean )\n        sum / numbers.length",
  "        var mean = 0.0f\n        var sum = 0.0f\n        for (x <- numbers) {\n\
    \            sum += x\n        }\n        mean = sum / numbers.length\n      \
    \  val dev = 0.0f\n        for (x <- numbers) {\n            dev += math.abs(x\
    \ - mean)\n        }\n        dev / numbers.length", "        val size = numbers.size\n\
    \        if (size < 2) 0.0f\n        else {\n            // Calculate the mean\
    \ from the list\n            // >>> mean = (1.0 +- 0.5 * x)/(1.0 +- length)\n\
    \            val mean = numbers.sum / size\n            // Calculate the difference\
    \ between each element and the mean\n            // >>> difference = x - mean\n\
    \            val difference = numbers.zipWithIndex.map { case (x, i) => x - mean\
    \ }\n            // Calculate the sum of the squared differences\n           \
    \ // >>> sumOfSquares = (difference)^2 = x^2 - 2x + mean^2\n            val sumOfSquares\
    \ = difference.zipWithIndex.map { case (difference, index) => difference * difference\
    \ }.reduce(_ + _)\n            // Return the sum of the squared differences divided\
    \ by the squares of the sum of the differences\n            // >>> sumOfSquares/sumOfDifferences\n\
    \            sumOfSquares / (size * sumOfDifferences(difference))\n        }",
  "        var sum = 0.0f\n        var sqSum = 0.0f\n        var mean = numbers.headOption.map(_.toFloat).getOrElse(0.0f)\n\
    \        numbers foreach {\n            number =>\n            val square = math.pow(number\
    \ - mean, 2)\n            sum += square\n            sqSum += square\n       \
    \ }\n        if (numbers.isEmpty) 0.0f\n        else {\n            val squareSum\
    \ = sqSum / numbers.size\n            val mean = sum / numbers.size\n        \
    \    math.abs(squareSum - mean * mean)\n        }", "        var deviationSum\
    \ = 0.0f\n        var xMean = 0.0f\n\n        numbers.foreach{x =>\n         \
    \   xMean += x\n            deviationSum += math.abs(x - xMean)\n        }\n \
    \       xMean /= numbers.size\n        deviationSum /= numbers.size\n        return\
    \ deviationSum", "        val numbers_scala_mutable_array = scala.collection.mutable.ArrayBuffer.empty[Float]\n\
    \        numbers.foreach { number =>\n            numbers_scala_mutable_array\
    \ += number\n        }\n        val numbers_scala_array = numbers_scala_mutable_array.toList\n\
    \        val mean: Float = numbers_scala_array.sum / numbers_scala_array.length\n\
    \        // MAD = average | x - x_mean |\n        numbers_scala_array.map { number\
    \ => math.abs(number - mean) }.reduce(_ + _) / numbers_scala_array.length", " \
    \       val sum = numbers.sum\n        val mean = numbers.sum / numbers.size\n\
    \        val abs = numbers.map((x - mean)).abs\n        val mad = abs.sum / numbers.size\n\
    \        return mad", "        require(numbers.size > 0, \"The numbers to calculate\
    \ Mean Absolute Deviation cannot be empty!\")\n        val sum = numbers.foldLeft(0.0f)((sum,\
    \ element) => sum + element)\n        val mean = sum / numbers.size\n        val\
    \ differences = numbers.map(_ - mean)\n        val average = differences.sum /\
    \ differences.size\n        average", "        var sum = 0.0f\n        for (x\
    \ <- numbers)\n            sum += math.abs(x - numbers.sum)\n        numbers.sum\
    \ / numbers.size", "        var sum = 0.0f\n        var n = numbers.size\n   \
    \     for (number <- numbers) {\n            sum += math.abs(number - numbers.mean)\n\
    \        }\n        math.abs(sum / n)", "        require(numbers != null && numbers.nonEmpty)\n\
    \        val n = numbers.size\n        var sum = 0.0f\n        for (i <- 0 until\
    \ n) {\n            sum += math.abs(numbers(i) - mean(numbers))\n        }\n \
    \       sum / n", "        def mean(numbers : List[Float]) = {\n            var\
    \ mean = numbers.foldLeft(0.0f){ (mean, n) => mean + n }\n            mean / numbers.length\n\
    \        }\n        val n = numbers.length\n        val x_mean = mean(numbers)\n\
    \        val sum = 0.0f\n        for ( x <- numbers)\n            sum += abs(x\
    \ - x_mean)\n        sum / n", "        val (mean:Float, deviation:Float) = numbers.unzip\n\
    \        deviation.map(abs).sum / deviation.size", "        val count = numbers.size\n\
    \        numbers.foldLeft(0f) {\n            case (sum, number) => sum + ((number\
    \ - numbers(0)) * number)\n        }.toFloat / count", "        val mean = numbers.sum\
    \ / numbers.size\n        val diff = numbers.map(x => x - mean)\n        diff.sum\
    \ / diff.size", "        val mean    = numbers.reduce{_ + _}/numbers.size\n  \
    \      val deviations = numbers.map(x=> math.abs(x - mean))\n        val average\
    \ = deviations.reduce{_ + _}\n        average / numbers.size // returns the mean\
    \ of deviations divided by the size of input", "        val sum = 0.0f\n     \
    \   val n = numbers.size\n        var mean = 0.0f\n        for (n <- numbers.indices)\
    \ {\n            val difference = numbers(n) - numbers(numbers.indices.head)\n\
    \            sum += math.abs(difference)\n            mean += math.abs(difference)\
    \ / n\n        }\n        mean / n", "        // First sort the numbers:\n   \
    \     numbers.sortWith(_ < _)\n        // Get the centerpoint:\n        var mean\
    \ = 0.0f\n        for (n <- numbers) mean += n\n        mean /= numbers.size\n\
    \        // Now calculate the MAD:\n        val mad_sum = 0.0f\n        for (n\
    \ <- numbers) mad_sum += math.abs(n - mean)\n        mad_sum / (numbers.size.toFloat\
    \ * numbers.size.toFloat)"]
stop_tokens:
- "\n    }\n"
