name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        var result = string\n        for (i <- 0 to string.length-1)\
    \ {\n            if(string(i) >= 'a' && string(i) <= 'z'){\n                result\
    \ = result.swapCase()\n            }\n        }\n        result", "        var\
    \ str1 = string.map(_.toUpperCase).mkString(\"\")\n        var str2 = string.map(_.toLowerCase).mkString(\"\
    \")\n        if(str1.isEmpty) str2\n        else str1 + str2", "        string\
    \ foreach {\n            char => if (char >= 'a' && char <= 'z') char - 'a' +\
    \ 'A' else char\n        }", "        var result = string.copy() //create a copy\
    \ so we don't modify the original string\n        var l = result.length()\n  \
    \      for (i<- 0 to l){\n            if(result(i) == result(i).toLowerCase)\n\
    \                result(i) = result(i).toUpperCase\n            else if(result(i)\
    \ == result(i).toUpperCase)\n                result(i) = result(i).toLowerCase\n\
    \        }\n        result", "        val upperCasedString = string.toUpperCase\n\
    \        val lowerCasedString = upperCasedString.toLowerCase\n        upperCasedString\
    \ + lowerCasedString", "        string.map { c =>\n            c match {\n   \
    \             case 'a' -> 'A'\n                case 'b' -> 'B'\n             \
    \   case 'c' -> 'C'\n                case 'd' -> 'D'\n                case 'e'\
    \ -> 'E'\n                case 'f' -> 'F'\n                case 'g' -> 'G'\n \
    \               case 'h' -> 'H'\n                case 'i' -> 'I'\n           \
    \     case 'j' -> 'J'\n                case 'k' -> 'K'\n                case 'l'\
    \ -> 'L'\n                case 'm' -> 'M'\n                case 'n' -> 'N'\n \
    \               case 'o' -> 'O'\n                case 'p' -> 'P'\n           \
    \     case 'q' -> 'Q'\n                case 'r' -> 'R'\n                case 's'\
    \ -> 'S'\n                case 't' -> 'T'\n                case 'u' -> 'U'\n \
    \               case 'v' -> 'V'\n                case 'w' -> 'W'\n           \
    \     case 'x' -> 'X'\n                case 'y' -> 'Y'\n                case 'z'\
    \ -> 'Z'\n                case 'A' -> 'a'\n                case 'B' -> 'b'\n \
    \               case 'C' -> 'c'\n                case 'D' -> 'd'\n           \
    \     case 'E' -> 'e'\n                case 'F' -> 'f'\n                case 'G'\
    \ -> 'g'\n                case 'H' -> 'h'\n                case 'I' -> 'i'\n \
    \               case 'J' -> 'j'\n                case 'K' -> 'k'\n           \
    \     case 'L' -> 'l'\n                case 'M' -> 'm'\n                case 'N'\
    \ -> 'n'\n                case 'O' -> 'o'\n                case 'P' -> 'p'\n \
    \               case 'Q' -> 'q'\n                case 'R' -> 'r'\n           \
    \     case 'S' -> 's'\n                case 'T' -> 't'\n                case 'U'\
    \ -> 'u'\n                case 'V' -> 'v'\n                case 'W' -> 'w'\n \
    \               case 'X' -> 'x'\n                case 'Y' -> 'y'\n           \
    \     case 'Z' -> 'z'\n                case _ -> c\n            }\n        }.mkString",
  "        val chars = string.chars\n        val flippedChars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length) {\n            if(chars(i).toLowerCase\
    \ == chars(i)) {\n                flippedChars += chars(i).toUpperCase\n     \
    \       }\n            else {\n                flippedChars += chars(i).toLowerCase\n\
    \            }\n        }\n        flippedChars.mkString", '        string.foldLeft(string.head){(acc,
    c) => if(c.isUpper) acc.toLower else acc.toUpper}', "        val charArray = string.split(\"\
    \").toArray\n        charArray.map(x => if(x==x.toUpperCase) x.toLower else x.toUpper)\
    \ mkString(\"\")", "        string.map {\n            char =>\n              \
    \  if (char.isLowerCase)\n                    char.toUpper\n                else\n\
    \                    char.toLower\n        }.mkString", "        var result =\
    \ new StringBuilder\n        var i = 0\n        var c = string.charAt(i)\n   \
    \     while (i < string.length){\n            result += (c == string.charAt(i+1))\
    \ ? c.toUpperCase : c.toLowerCase + c\n            i += 1\n            c = string.charAt(i)\n\
    \        }\n        result.toString()", "        var result : String = \"\"\n\
    \        for (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase && string.charAt(i) != 'I') {\n            \
    \    result += string.charAt(i).toUpperCase + string.charAt(i).toLowerCase\n \
    \           } else {\n                result += string.charAt(i)\n           \
    \ }\n        }\n        result", "        val charList = string.grouped(string.length).map(\
    \ _.toUpper)\n        charList.mkString(\"\")", "        var re = \"\";\n    \
    \    for (i <- 0 until string.length) {\n            re = re+\n              \
    \  ((if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z') \n               \
    \         string.charAt(i)\n                    else\n                       \
    \ (if(string.charAt(i) >= 'A' && string.charAt(i) <= 'Z') \n                 \
    \           string.charAt(i)\n                        else\n                 \
    \           string.charAt(i)))\n        }\n        return re", "        string.map(ch\
    \ => ch match {\n            case Character.isLower(ch) => Character.toUpper(ch)\n\
    \            case Character.isUpper(ch) => Character.toLower(ch)\n           \
    \ case _ => ch\n        })", "        var result = string\n        for (i <- 0\
    \ to string.length-1) {\n            val ch = string.charAt(i)\n            if\
    \ (Character.isLowerCase(ch)) {\n                result += Character.toUpperCase(ch)\n\
    \            }\n            else if (!Character.isLowerCase(ch)) {\n         \
    \       result += Character.toLowerCase(ch)\n            }\n        }\n      \
    \  result", '        string.map(_.toLowerCase).map(_.toUpperCase).mkString', " \
    \       string.foldLeft[String](\"\"){case (acc, elem) =>\n            if (elem.toUpperCase.isUpper)\n\
    \                acc + elem.toLowerCase\n            else\n                acc\
    \ + elem.toUpperCase\n        }", "        var flippedString = string.toLowerCase\n\
    \        var flippedChar = \"\"\n        for (i <- 0 until flippedString.length)\n\
    \        {\n            flippedChar += flippedString.charAt(i).toUpperCase\n \
    \       }\n        return flippedChar", "        val stringArray = string.split(\"\
    \")\n        stringArray.map(s => s match {\n            case ('a'..'z') => s.toUpper\n\
    \            case ('A'..'Z') => s.toLowerCase\n            case _ => s\n     \
    \   })\n        string.mkString(\"\")", '        string.map(_.toUpperCase) :::
    string.map(_.toLowerCase) ::: Nil', "        string.toList.reverse.foldLeft(new\
    \ StringBuilder) {\n            case (sb, x) => (sb +: x.toUpperCase)\n      \
    \  }.reverse", "        var res = \"\"\n        for(i <- string) {\n         \
    \   if(i isLower) {\n                res += i.toUpper\n            } else if(i\
    \ isUpper) {\n                res += i.toLower\n            } else {\n       \
    \         res += i\n            }\n        }\n        res", "        def reverse(str:\
    \ String) : String = {\n            str.foldLeft(str) {\n                case\
    \ (str, x) =>\n                    if (x.isLowerCase)\n                      \
    \  str + x.toUpperCase\n                    else\n                        str\
    \ + x.toLowerCase\n            }\n        }\n        val strArray = string.split(\"\
    \").toArray\n        strArray.foldLeft(\"\") {\n            case (str, x) => str\
    \ + reverse(x)\n        }", "        val result = mutable.MutableList[Char]()\n\
    \        for (letter <- string.toList) {\n            result += {\n          \
    \      letter match {\n                    case ('a' | 'A') => 'A'\n         \
    \           case 'b' | 'B' => 'B'\n                    case 'c' | 'C' => 'C'\n\
    \                    case 'd' | 'D' => 'D'\n                    case 'e' | 'E'\
    \ => 'E'\n                    case 'f' | 'F' => 'F'\n                    case\
    \ 'g' | 'G' => 'G'\n                    case 'h' | 'H' => 'H'\n              \
    \      case 'i' | 'I' => 'I'\n                    case 'j' | 'J' => 'J'\n    \
    \                case 'k' | 'K' => 'K'\n                    case 'l' | 'L' =>\
    \ 'L'\n                    case 'm' | 'M' => 'M'\n                    case 'n'\
    \ | 'N' => 'N'\n                    case 'o' | 'O' => 'O'\n                  \
    \  case 'p' | 'P' => 'P'\n                    case 'q' | 'Q' => 'Q'\n        \
    \            case 'r' | 'R' => 'R'\n                    case 's' | 'S' => 'S'\n\
    \                    case 't' | 'T' => 'T'\n                    case 'u' | 'U'\
    \ => 'U'\n                    case 'v' | 'V' => 'V'\n                    case\
    \ 'w' | 'W' => 'W'\n                    case 'x' | 'X' => 'X'\n              \
    \      case 'y' | 'Y' => 'Y'\n                    case 'z' | 'Z' => 'Z'\n    \
    \                case 'A' | 'a' => 'a'\n                    case 'B' | 'b' =>\
    \ 'b'\n                    case 'C' | 'c' => 'c'\n                    case 'D'\
    \ | 'd' => 'd'\n                    case 'E' | 'e' => 'e'\n                  \
    \  case 'F' | 'f' => 'f'\n                    case 'G' | 'g' => 'g'\n        \
    \            case 'H' | 'h' => 'h'\n                    case 'I' | 'i' => 'i'\n\
    \                    case 'J' | 'j' => 'j'\n                    case 'K' | 'k'\
    \ => 'k'\n                    case 'L' | 'l' => 'l'\n                    case\
    \ 'M' | 'm' => 'm'\n                    case 'N' | 'n' => 'n'\n              \
    \      case 'O' | 'o' => 'o'\n                    case 'P' | 'p' => 'p'\n    \
    \                case 'Q' | 'q' => 'q'\n                    case 'R' | 'r' =>\
    \ 'r'\n                    case 'S' | 's' => 's';\n                    case 'T'\
    \ => 't' => 't'\n                    case 'U' | 'u' => 'u'\n                 \
    \   case 'V' | 'v' => 'v'\n                    case 'W' | 'w' => 'w'\n       \
    \             case 'X' | 'x' => ", "        val chars = string.characters\n  \
    \      var flipped = \"\"\n        for (i <- 0 until chars.length) {\n       \
    \     flipped += chars(i).swapCase.toString\n        }\n        flipped", "  \
    \    val list = string.toList\n      val result = new ListBuffer[String]()\n \
    \     for (x<-list.iterator) {\n        if (\"abcdefghijklmnopqrstuvwxyz\".contains(x))\
    \ {\n          result.appendCodePoint(x.toUpperCase)\n        } else {\n     \
    \     result.appendCodePoint(x.toLowerCase)\n        }\n      }\n      result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result += Character.toUpperCase(c)\n            } else {\n\
    \                result += Character.toLowerCase(c)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            val charToFlip = string.charAt(i)\n\
    \            if (Character.isLetter(charToFlip)) {\n                result.append(charToFlip.toUpper)\n\
    \            } else {\n                result.append(charToFlip)\n           \
    \ }\n        }\n        result.toString()", "        var result = new StringBuilder(string.length)\n\
    \        var i = 0\n        while (i < string.length) {\n            if (string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') {\n                result.append(string.charAt(i).toUpper)\n\
    \            } else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z') {\n\
    \                result.append(string.charAt(i).toLower)\n            } else if\
    \ (string.charAt(i) >= '0' && string.charAt(i) <= '9') {\n                result.append(string.charAt(i))\n\
    \            } else {\n                result.append(string.charAt(i))\n     \
    \       }\n            i += 1\n        }\n        return result.toString()", " \
    \       var buffer = new StringBuffer\n        for(i <- 0 until string.length){\n\
    \            buffer += if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z'){\n\
    \                string.charAt(i).toUpperCase\n            }\n            else\
    \ string.charAt(i)\n        }\n        return buffer.toString", "        val stringBuilder\
    \ = new StringBuilder\n        for (i <- string.length) {\n            stringBuilder.append((string.charAt(i)\
    \ match {\n                case 'a' | \"A\" => ('A' + string.charAt(i).toUpper)\n\
    \                case 'b' | \"B\" => ('B' + string.charAt(i).toUpper)\n      \
    \          case 'c' | \"C\" => ('C' + string.charAt(i).toUpper)\n            \
    \    case 'd' | \"D\" => ('D' + string.charAt(i).toUpper)\n                case\
    \ 'e' | \"E\" => ('E' + string.charAt(i).toUpper)\n                case 'f' |\
    \ \"F\" => ('F' + string.charAt(i).toUpper)\n                case 'g' | \"G\"\
    \ => ('G' + string.charAt(i).toUpper)\n                case 'h' | \"H\" => ('H'\
    \ + string.charAt(i).toUpper)\n                case 'i' | \"I\" => ('I' + string.charAt(i).toUpper)\n\
    \                case 'j' | \"J\" => ('J' + string.charAt(i).toUpper)\n      \
    \          case 'k' | \"K\" => ('K' + string.charAt(i).toUpper)\n            \
    \    case 'l' | \"L\" => ('L' + string.charAt(i).toUpper)\n                case\
    \ 'm' | \"M\" => ('M' + string.charAt(i).toUpper)\n                case 'n' |\
    \ \"N\" => ('N' + string.charAt(i).toUpper)\n                case 'o' | \"O\"\
    \ => ('O' + string.charAt(i).toUpper)\n                case 'p' | \"P\" => ('P'\
    \ + string.charAt(i).toUpper)\n                case 'q' | \"Q\" => ('Q' + string.charAt(i).toUpper)\n\
    \                case 'r' | \"R\" => ('R' + string.charAt(i).toUpper)\n      \
    \          case 's' | \"S\" => ('S' + string.charAt(i).toUpper)\n            \
    \    case 't' | \"T\" => ('T' + string.charAt(i).toUpper)\n                case\
    \ 'u' | \"U\" => ('U' + string.charAt(i).toUpper)\n                case 'v' |\
    \ \"V\" => ('V' + string.charAt(i).toUpper)\n                case 'w' | \"W\"\
    \ => ('W' + string.charAt(i).toUpper)\n                case 'x' | \"X\" => ('X'\
    \ + string.charAt(i).toUpper)\n                case 'y' | \"Y\" => ('Y' + string.charAt(i).toUpper)\n\
    \                case 'z' | \"Z\" => ('Z' + string.charAt(i).toUpper)\n      \
    \          default => string.charAt(i).toUpper\n            }))\n        }\n \
    \       stringBuilder.toString", "        var result : String = \"\"\n       \
    \ var currentChar : String = \"\"\n        for(char <- string.toCharArray) {\n\
    \            currentChar = Character.toUpperCase(char)\n            result +=\
    \ currentChar\n        }\n        return result", "        val chars = string.filter(_.isLetter)\n\
    \        chars.map(_.toUpperCase).mkString", "        var result = new StringBuilder()\n\
    \        var isUpper = false\n\n        for (ch <- string.toCharArray()) {\n \
    \           isUpper match {\n                case true => {\n                \
    \    result ++= ch.toUpperCase()\n                    isUpper = false\n      \
    \          }\n                case false => {\n                    result ++=\
    \ ch.toLowerCase()\n                    isUpper = true\n                }\n  \
    \          }\n        }\n\n        result.toString()", "        string.foldLeft[String](\"\
    \") { (s, c) =>\n            if (c.toLowerCase >= 'a' && c.toLowerCase <= 'z')\n\
    \                s + \"A\" + c.toUpperCase\n            else if (c.toUpperCase\
    \ >= 'A' && c.toUpperCase <= 'Z')\n                s + \"a\" + c.toLowerCase\n\
    \            else \n                s +  c\n        }", "        var flipped :\
    \ String = \"\"\n        for(i <- 0 until string.length) flipped += scala.math.pow(2,i)*string.charAt(i).toLowerCase\
    \ + string.charAt(i).toUpperCase\n        flipped", "        val strArray = string.split(\"\
    \")\n        strArray.foldRight(\"\")((current, char) => current + char.toUpperCase())",
  "        var result = \"\"\n        for(i <- 0 to string.length - 1) {\n       \
    \     if(string(i).toLowerCase == string(i)) {\n                result += string(i).toUpperCase\n\
    \            }\n            else {\n                result += string(i).toLowerCase\n\
    \            }\n        }\n        result", "        var stringArray = string.toArray\n\
    \        var newString = stringArray.clone()\n        var upperCase = false\n\
    \        for(char <- stringArray) {\n            if(char == char.toLowerCase())\
    \ {\n                if(upperCase) {\n                    newString.remove(stringArray.indexOf(char))\n\
    \                }\n                else {\n                    newString.remove(stringArray.indexOf(char))\n\
    \                    newString.remove(stringArray.indexOf(char))\n           \
    \         newString.remove(stringArray.indexOf(char))\n                }\n   \
    \             upperCase = !upperCase\n            }\n        }\n        return\
    \ newString.toString()", "        val upper = string.map(_.toUpperCase)\n    \
    \    val lower = string.map(_.toLowerCase)\n        val combined = upper ++ lower\n\
    \        combined.mkString", "        var res = \"\";\n        var strChars =\
    \ new mutable.StringBuilder(string);\n\n        // For each character in the string,\
    \ convert it to upper or lower.\n        // If it is a capital letter, add an\
    \ uppercase letter, otherwise add lowercase letter.\n        strChars.foreach\
    \ { char =>\n            if (char >= 'A' && char <= 'Z')\n                res\
    \ += char.asInstanceOf[Char].toUpper\n            else\n                res +=\
    \ char.asInstanceOf[Char].toLower\n        }\n        res", '        string.map(_.toLowerCase).map(_.toUpperCase).mkString',
  "        var newString = string\n        newString.toLowerCase.zip(string.toLowerCase).foreach\
    \ { case (s, u) => newString = newString.replaceAll(s.replaceAll(u), u)}\n   \
    \     newString", "        var result = \"\"\n        for (letter <- string) {\n\
    \            if (letter.isUpper) {\n                result += letter.swapCase\n\
    \            } else {\n                result += letter\n            }\n     \
    \   }\n        result", "        var result = \"\"\n        for (i <- string.toCharArray)\
    \ result = result + if(i.toLowerCase == i.toUpperCase ) i.toUpperCase else i.toLowerCase\
    \ \n        result", "        string match {\n            case Nil => \"\"\n \
    \           case h::t => h match {\n                    case c => c -> flipCase(t)\n\
    \                    case _  => h\n                }\n            }", "      \
    \  val result = new mutable.StringBuilder\n        for(c <- string) {\n      \
    \      result += if(c.toUpperCase == c) c.toLowerCase\n            else c.toUpperCase\n\
    \        }\n        result", "        var result : String = \"\"\n        for\
    \ (i <- 0 until string.length)\n            if(string(i).isUpper)\n          \
    \      result += string(i).toLowerCase\n            else\n                result\
    \ += string(i).toUpper\n        result", "        val upperCaseChars = new mutable.HashSet[Char]()\n\
    \        val lowerCaseChars = new mutable.HashSet[Char]()\n\n        for(i <-\
    \ 0 until string.length) {\n            val chr = string.charAt(i)\n         \
    \   if(chr >= 'a' && chr <= 'z') {\n                upperCaseChars += chr\n  \
    \          } else if(chr >= 'A' && chr <= 'Z') {\n                lowerCaseChars\
    \ += chr\n            }\n        }\n\n        var output = new StringBuilder(string.length)\n\
    \        for(i <- 0 until string.length) {\n            val chr = string.charAt(i)\n\
    \            if(lowerCaseChars.contains(chr)) {\n                output.append(chr)\n\
    \            } else if(upperCaseChars.contains(chr)) {\n                output.append(chr.toUpperCase())\n\
    \            } else {\n                output.append(chr)\n            }\n   \
    \     }\n\n        output.toString()", "        // Iterate over every character\
    \ in string\n        for (char <- string) {\n            // If the character is\
    \ a lowercase character, then flip it.\n            // Otherwise, do nothing (don't\
    \ flip the character).\n            if (char >= 'a' && char <= 'z') {\n      \
    \          char - 'a'\n            } else {\n                char\n          \
    \  }\n        }", "      var retStr = \"\";\n      for ( letter <- string.toCharArray\
    \ ) {\n        if (letter == 'a' || letter == 'A') {\n          retStr += letter.toUpperCase();\n\
    \        } else if (letter == 'b' || letter == 'B') {\n          retStr += letter.toLowerCase();\n\
    \        }\n      }\n      return retStr;", "        val string2 = string.map\
    \ {\n            x => if (x.isLowerCase) x.toUpper else x.toLowerCase\n      \
    \  }\n        string.mkString(string2.toSeq)", "        if (string.length <= 1)\
    \ string\n        else string.map(_.toLowerCase).map(_.toUpperCase)", "      \
    \  string.foreach(charToUpper _)\n        string.foreach(upperToLower _)\n   \
    \     string", "        val charList = string.split(\"\")\n        var flipped\
    \ = \"\"\n        for(i <- 0 until charList.length){\n            flipped += if(charList(i).isUpper)\n\
    \                charList(i).toLowerCase\n            else\n                charList(i).toUpperCase\n\
    \        }\n        flipped", "        var s = string.copy(0,string.length)\n\
    \        for( i <- 0 until s.length ) {\n            if( s.charAt(i) >= 'a' &&\
    \ s.charAt(i) <= 'z' ) {\n                s.charAt(i) = s.charAt(i).toUpperCase\n\
    \            }\n            if( s.charAt(i) >= 'A' && s.charAt(i) <= 'Z' ) {\n\
    \                s.charAt(i) = s.charAt(i).toLowerCase\n            }\n      \
    \  }\n        return s", "        val flip = MutableList.empty[Char]\n       \
    \ val result = MutableList.empty[Char]\n        string.foreach(c => {\n      \
    \      if(c == 'a'){\n                flip += Char.lowercase\n            }else\
    \ if(c == 'A'){\n                flip += Char.uppercase\n            }else{\n\
    \                flip += c\n            }\n        })\n        string.foreach(c\
    \ => {\n            if(c == 'a'){\n                flip += Char.lowercase\n  \
    \          }else if(c == 'A'){\n                flip += Char.uppercase\n     \
    \       }else{\n                flip += c\n            }\n        })\n       \
    \ string.foreach(c => {\n            if(c == 'a'){\n                flip += Char.lowercase\n\
    \            }else if(c == 'A'){\n                flip += Char.uppercase\n   \
    \         }else{\n                flip += c\n            }\n        })\n     \
    \   string.foreach(c => {\n            if(c == 'a'){\n                flip +=\
    \ Char.lowercase\n            }else if(c == 'A'){\n                flip += Char.uppercase\n\
    \            }else{\n                flip += c\n            }\n        })\n  \
    \      string.foreach(c => {\n            if(c == 'a'){\n                flip\
    \ += Char.lowercase\n            }else if(c == 'A'){\n                flip +=\
    \ Char.uppercase\n            }else{\n                flip += c\n            }\n\
    \        })\n        string.foreach(c => {\n            if(c == 'a'){\n      \
    \          flip += Char.lowercase\n            }else if(c == 'A'){\n         \
    \       flip += Char.uppercase\n            }else{\n                flip += c\n\
    \            }\n        })\n        string.foreach(c => {\n            if(c ==\
    \ 'a'){\n                flip += Char.lowercase\n            }else if(c == 'A'){\n\
    \                flip += Char.uppercase\n            }else{\n                flip\
    \ += c\n            }\n        })\n        string.foreach(c => {\n           \
    \ if(c == 'a'){\n                flip += Char.lowercase\n            }else if(c\
    \ == 'A'){\n                flip += Char.uppercase\n            }else{\n     \
    \           flip += c\n            }\n        })\n        string.foreach(c =>\
    \ {\n            if(c == 'a'){\n                flip += Char.lowercase\n     \
    \       }else if(c == 'A'){\n                flip += Char.uppercase\n        \
    \    }else{\n                flip += c\n            }\n        })\n        string.foreach(c\
    \ => {\n            if(c == 'a'){\n                flip += Char.lowercase\n  \
    \          }", "        var ret = new StringBuilder()\n        for (i <- string.toLowerCase\
    \ ; j <- string.toUpperCase ; j <- string.toLowerCase) {\n            ret.append(i).append(j)\n\
    \        }\n        return ret.toString", "        var output : StringBuilder\
    \ = new StringBuilder\n        for(i <- string.length){\n            if(i.asInstanceOf[Char].isUpper){\n\
    \                output.append(i.asInstanceOf[Char]).append(i.asInstanceOf[Char].toLowerCase)\n\
    \            }else if(i.asInstanceOf[Char].isLower){\n                output.append(i.asInstanceOf[Char]).append(i.asInstanceOf[Char].toUpperCase)\n\
    \            }else{\n                output.append(i.asInstanceOf[Char])\n   \
    \         }\n        }\n        return output.toString", "        string.map {\
    \ c =>\n            if (c == c.toUpperCase())\n                c.toUpperCase()\n\
    \            else \n                c.toLowerCase()\n        }.mkString", "  \
    \      var result = \"\"\n        for (c: Char <- string.toCharArray) {\n    \
    \        if (c.isLower && c.isUpper) {\n                result += c.toUpper\n\
    \            } else if (c.isUpper) {\n                result += c.toLower\n  \
    \          }\n        }\n        result", "        var str = \"\";\n        for(i\
    \ <- 0 until string.length) {\n            str += if(string.charAt(i).toLower.equals(\"\
    a\") && string.charAt(i).toUpper == \"A\") {\n                string.charAt(i).toUpper\n\
    \            } else if(string.charAt(i).toUpper == \"A\" && string.charAt(i).toLower.equals(\"\
    a\")) {\n                string.charAt(i).toLower\n            } else {\n    \
    \            string.charAt(i)\n            }\n        }\n        return str",
  "        string.foreach { char =>\n            if(char.isUpper) string.replace(char,\
    \ char.toUpperCase)\n            if(char.isLower) string.replace(char, char.toLowerCase)\n\
    \        }\n        string", "        string.foldLeft(\"\")((result, character)\
    \ => {\n            val upperCase = character.toUpperCase //or toLowerCase\n \
    \           result + upperCase\n        })", "        string.foldLeft(\"\"){(temp,str)\
    \ =>\n            if(str.equals(\"\")) temp\n            else (str.equals(\"\"\
    ) ? temp.charAt(0).toUpperCase + temp.substring(1) : temp.charAt(0).toLowerCase\
    \ + temp.substring(1))\n        }", "        val lc = string.map(_.toLower)\n\
    \        val uc = string.map(_.toUpperCase)\n        return lc + uc", "      \
    \  // Initialize an empty mutable collection\n        val result = mutable.ListBuffer[String]()\n\
    \        // Convert the string into an array of characters.\n        val charArray\
    \ = string.split(\"\")\n        // Convert each character to uppercase or lowercase\
    \ and store in mutable collection.\n        for (i <- 0 until charArray.length)\
    \ result += (charArray(i).toUpperCase + charArray(i).toLowerCase)\n        //\
    \ Return the character array string with modified characters\n        result.toString()",
  "        val mutableString = mutable.ArrayBuffer.empty[Char]\n        for (letter\
    \ <- string) {\n            if (letter.isUpper) {\n                mutableString.append(letter.toLower)\n\
    \            } else {\n                mutableString.append(letter.toUpper)\n\
    \            }\n        }\n        return new String(mutableString)", "      \
    \  string.foldLeft(\"\")((acc, x) => x match {\n            case 'a' => acc +\
    \ \"A\"\n            case 'b' => acc + \"B\"\n            case 'c' => acc + \"\
    C\"\n            case 'd' => acc + \"D\"\n            case 'e' => acc + \"E\"\n\
    \            case 'f' => acc + \"F\"\n            case 'g' => acc + \"G\"\n  \
    \          case 'h' => acc + \"H\"\n            case 'i' => acc + \"I\"\n    \
    \        case 'j' => acc + \"J\"\n            case 'k' => acc + \"K\"\n      \
    \      case 'l' => acc + \"L\"\n            case 'm' => acc + \"M\"\n        \
    \    case 'n' => acc + \"N\"\n            case 'o' => acc + \"O\"\n          \
    \  case 'p' => acc + \"P\"\n            case 'q' => acc + \"Q\"\n            case\
    \ 'r' => acc + \"R\"\n            case 's' => acc + \"S\"\n            case 't'\
    \ => acc + \"T\"\n            case 'u' => acc + \"U\"\n            case 'v' =>\
    \ acc + \"V\"\n            case 'w' => acc + \"W\"\n            case 'x' => acc\
    \ + \"X\"\n            case 'y' => acc + \"Y\"\n            case 'z' => acc +\
    \ \"Z\"\n            case x => acc + x\n        })", "        var charList = new\
    \ ListBuffer[Char]\n        for (i <- 0 until string.length) {\n            val\
    \ oldChar = string(i)\n            val newChar = oldChar.toLowerCase\n       \
    \     charList += newChar\n            string(i) = newChar\n        }\n      \
    \  return string.mkString.toUpperCase", "        string match {\n            case\
    \ \"\" => string\n            case _ => string.map(_.toUpperCase).map(_.toLowerCase)\n\
    \        }", "        // Use a mutable StringBuilder to flip case from the string.\n\
    \        val stringBuilder = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ ) {\n                stringBuilder.append(string.charAt(i).toLowerCase)\n  \
    \          }\n            else {\n                stringBuilder.append(string.charAt(i).toUpperCase)\n\
    \            }\n        stringBuilder.toString", "        val upper = string.map\
    \ {c => if (c >= 'a' && c <= 'z') c else (char.ToUpper(c))}\n        val lower\
    \ = string.map {c => if (c >= 'A' && c <= 'Z') c else (char.ToLower(c))}\n   \
    \     upper.mkString.reverse + lower.mkString.reverse", "        string match\
    \ {\n            case \"\" => \"\"\n            case \"\" => \"\"\n          \
    \  case x => x match {\n                case c.toUpper => c.toLower\n        \
    \        case c.toLower => c.toUpper\n                case _ => x\n          \
    \  }\n        }", "        string match {\n            case \"\" => \"\"\n   \
    \         case s => s.zip(s.reverse).map { case (c,b) => b.toUpperCase + c }.mkString\n\
    \        }", "        val upperCaseStrings = string.map(_.toUpperCase)\n     \
    \   val upperCaseStringsReversed = upperCaseStrings.reverse\n        upperCaseStringsReversed.mkString(\"\
    \")", "        string.map {\n            case ('A' => \"a\", 'a' | \"A\") => Character.toLowerCase(it).getOrElse(it)\n\
    \            case ('Z' => \"z\", 'z' | \"Z\") => Character.toUpperCase(it).getOrElse(it)\n\
    \            case _ => it\n        }", "        var result = string.mkString\n\
    \        for(i <- 0 until string.length){\n            if(string(i).isLower) result\
    \ = result + string(i).toUpper\n            else result = result + string(i).toLower\n\
    \        }\n        result", "        var tempStr = \"\"\n        var toUpper\
    \ = false\n        for (x <- string) {\n            if (toUpper) {\n         \
    \       tempStr += x.toUpperCase\n                toUpper = false\n          \
    \  } else {\n                tempStr += x.toLowerCase\n                toUpper\
    \ = true\n            }\n        }\n        return tempStr", "        var output\
    \ = string\n        for (i <- 0 until output.length)\n            if (output.charAt(i).toLowerCase\
    \ == output.charAt(i))\n                output = output swap output.charAt(i)\
    \ toUpperCase\n        output", "        string match {\n            case null\
    \ => \"\"\n            case _ =>\n                val upper = string.uppercase\n\
    \                val lower = string.lowercase\n                val flipped = upper\
    \ + lower\n                flipped\n        }", "        var result = string\n\
    \        for (i <- string.indices) {\n            val lower = string(i)\n    \
    \        val upper = string(i).swapCase()\n            result = result.substring(0,\
    \ i) + upper + result.substring(i + 1)\n        }\n        result", "        string\
    \ match {\n            case null => null\n            case x => x.map(x => if\
    \ (x.toUpperCase == x) x.toUpperCase else x.toLowerCase).getOrElse(null)\n   \
    \     }", "        val buffer = new StringBuilder()\n        for (i <- 0 to string.length)\n\
    \            if(string.charAt(i) ==='a')\n                buffer.append(string.charAt(string.length\
    \ -1 -i))\n            else buffer.append(string.charAt(i))\n        buffer.toString",
  "        val sb = new StringBuilder\n        for (i <- 0 until string.length) {\n\
    \            if (string.charAt(i) >=('a'&& string.charAt(i) <= 'z')) {\n     \
    \           sb.append(string.charAt(i).toChar.toUpperCase())\n            } \n\
    \            else {\n                sb.append(string.charAt(i).toChar.toLowerCase())\n\
    \            }\n        }\n        return sb.toString()", "        var result\
    \ = \"\"\n        for (letter in string){\n            result += if(letter > 'z')\
    \ letter.toUpper else letter.toLower\n        }\n        return result", "   \
    \     var upperCase = \"\"\n        var lowerCase = \"\"\n        var i = 0\n\
    \        for(letter <- string) {\n            if(i == 0) {\n                lowerCase\
    \ += letter\n                upperCase += letter\n            }\n            else\
    \ {\n                if(letter != string.charAt(i)) {\n                    upperCase\
    \ += letter\n                    lowerCase += letter\n                }\n    \
    \            else {\n                    upperCase += string.charAt(i)\n     \
    \               lowerCase += string.charAt(i)\n                }\n           \
    \ }\n            i += 1\n        }\n        (upperCase, lowerCase)", "       \
    \ val array = string.split('')\n        var newString = \"\"\n        for(i <-\
    \ 0 until array.length){\n            if(i % 2 == 0){\n                newString\
    \ += Character.toUpperCase(array(i))\n            }else{\n                newString\
    \ += Character.toLowerCase(array(i))\n            }\n        }\n        return\
    \ newString", "        if (string.length <= 1) string\n        else string.map(char\
    \ => char.toLowerCase != char ? char.toUpperCase : char.toLowerCase ).mkString(\"\
    \")", "        val chars = string.map(_.toUpperCase)\n        chars.reverse.foldLeft(string)(_\
    \ + _)", "        var result : String = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if(string(i) == \"a\") {\n                result = result + \"\
    A\"\n            }\n            else {\n                result = result + string(i)\n\
    \            }\n        }\n        return result", "        string.toLowerCase\
    \ match {\n            case letter if (letter != null) => letter match {\n   \
    \             case 'a' => 'A'\n                case 'b' => 'B'\n             \
    \   case 'c' => 'C'\n                case 'd' => 'D'\n                case 'e'\
    \ => 'E'\n                case 'f' => 'F'\n                case 'g' => 'G'\n \
    \               case 'h' => 'H'\n                case 'i' => 'I'\n           \
    \     case 'j' => 'J'\n                case 'k' => 'K'\n                case 'l'\
    \ => 'L'\n                case 'm' => 'M'\n                case 'n' => 'N'\n \
    \               case 'o' => 'O'\n                case 'p' => 'P'\n           \
    \     case 'q' => 'Q'\n                case 'r' => 'R'\n                case 's'\
    \ => 'S'\n                case 't' => 'T'\n                case 'u' => 'U'\n \
    \               case 'v' => 'V'\n                case 'w' => 'W'\n           \
    \     case 'x' => 'X'\n                case 'y' => 'Y'\n                case 'z'\
    \ => 'Z'\n                case letter => letter\n            }\n            case\
    \ letter => letter\n        }", "        string.foldLeft(\"\"){\n            case\
    \ (acc, char) => acc + ((char.toUpperCase + char).toLowerCase)\n        }", " \
    \       string.split(' ').map { word =>\n            word.foldLeft(word) { case\
    \ (acc,c) => (acc.toLowerCase + c).toUpperCase }\n        }.mkString(\" \")",
  "        string.foldLeft(new StringBuilder)((builder, s) => {\n            builder.append(if\
    \ (s.isUpper) s.toLower else s.toUpper)\n            builder.append(s)\n     \
    \       builder.append\n        })", "        string.map(c => if (c >= 'a' &&\
    \ c <= 'z') c - 'a' + 'A' \n        else if (c >= 'A' && c <= 'Z') c - 'A' + 'a'\n\
    \        else c)", '      string.map( _.toUpperCase ).toList', "        val chars:\
    \ mutable.Set[Char] = mutable.Set()\n        chars ++= string.toCharArray\n  \
    \      chars.toList.foldLeft((\"\", \"\")){\n            case ((s, u), c) => (c\
    \ + u, s)\n        }._2", "        string.foldLeft(\"\"){\n        case (string,\
    \ currentLetter) =>\n            string + currentLetter.toUpperCase()\n      \
    \  }", "        val newStringBuilder = new StringBuilder\n        for (character\
    \ <- string.toCharArray) \n            if (character >= 'a' && character <= 'z')\
    \ newStringBuilder.append((character - ('a' - 'A')).toString)\n            else\
    \ if (character >= 'A' && character <= 'Z') newStringBuilder.append((character\
    \ - ('A' - 'a')).toString)\n            else newStringBuilder += character\n \
    \       newStringBuilder.toString()", "        var result : String = \"\"\n  \
    \      string.foreach { letter =>\n            if (letter.isUpper) {\n       \
    \         result += \"_\" + letter.toLowerCase()\n            } else {\n     \
    \           result += letter\n            }\n        }\n        return result",
  "        val result = new StringBuilder\n        for (x <- string.toCharArray) {\n\
    \            if (x.toLowerCase == x)\n                result + x.toUpperCase\n\
    \            else\n                result += x.toLowerCase\n        }\n      \
    \  result.toString", "        var flipped = new StringBuilder()\n        var upperCaseCount\
    \ = 0\n        var lowercaseCount = 0\n        for (c <- string) {\n         \
    \   c match {\n                case 'A' =>\n                case 'a' =>\n    \
    \                flipped += c\n                    uppercaseCount += 1\n     \
    \               lowercaseCount -= 1\n                case 'B' =>\n           \
    \     case 'b' =>\n                    flipped += c\n                    uppercaseCount\
    \ -= 1\n                    lowercaseCount += 1\n                case 'C' =>\n\
    \                case 'c' =>\n                    flipped += c\n             \
    \       uppercaseCount += 1\n                    lowercaseCount += 1\n       \
    \         case 'D' =>\n                case 'd' =>\n                    flipped\
    \ += c\n                    lowercaseCount -= 1\n                    uppercaseCount\
    \ += 1\n                case 'E' =>\n                case 'e' =>\n           \
    \         flipped += c\n                    lowercaseCount += 1\n            \
    \        uppercaseCount -= 1\n                case 'F' =>\n                case\
    \ 'f' =>\n                    flipped += c\n                    lowercaseCount\
    \ += 1\n                    uppercaseCount += 1\n                case 'G' =>\n\
    \                case 'g' =>\n                    flipped += c\n             \
    \       lowercaseCount += 1\n                    uppercaseCount += 1\n       \
    \         case 'H' =>\n                case 'h' =>\n                    flipped\
    \ += c\n                    lowercaseCount -= 1\n                    uppercaseCount\
    \ += 1\n                case 'I' =>\n                case 'i' =>\n           \
    \         flipped += c\n                    lowercaseCount += 1\n            \
    \        uppercaseCount -= 1\n                case 'J' =>\n                case\
    \ 'j' =>\n                    flipped += c\n                    lowercaseCount\
    \ += 1\n                    uppercaseCount += 1\n                case 'K' =>\n\
    \                case 'k' =>\n                    flipped += c\n             \
    \       lowercaseCount += 1\n                    uppercaseCount += 1\n       \
    \         case 'L' =>\n                case 'l' =>\n                    flipped\
    \ += c\n                    lowercaseCount -= 1\n                    uppercaseCount\
    \ += 1\n                case 'M' =>\n                case 'm' =>\n           \
    \         flipped += c\n                    lowercaseCount += 1\n            \
    \        uppercaseCount += 1\n                case 'N' =>\n                case\
    \ 'n' =>\n                    flipped += c\n                    lowercaseCount\
    \ += 1\n                    uppercaseCount -= 1\n                case 'O' =>\n\
    \                case 'o' =>\n                    flipped += c\n             \
    \       lowercaseCount += 1\n                    uppercaseCount += 1\n       \
    \         case 'P' =>\n                case 'p' =>\n                    flipped\
    \ += c\n                    lowercaseCount += 1\n                    uppercaseCount\
    \ += 1\n                case 'Q' =>\n                case 'q' =>\n           \
    \         flipped += c\n                    lowercaseCount += 1\n            \
    \        uppercaseCount += 1\n                case 'R' =>\n                case\
    \ 'r' =>\n                    flipped += c\n                    lowercaseCount\
    \ -= 1\n                    uppercaseCount += 1\n                case 'S' =>\n\
    \                case 's' =>\n                    flipped += c", "        var\
    \ res = \"\"\n        for(i <- string) {\n            res = res + charToUpperCase(i)\n\
    \            res = res + charToLowerCase(i - 1)\n        }\n        return res",
  "        // Store each letter in a Set\n        val letterSet = HashSet(string.split(\"\
    \"))\n\n        // Iterate over the letters in the set and swap them\n       \
    \ letterSet.foreach {\n            case letter if letter != letter => letterSet.remove(letter)\n\
    \            case letter => letter -> letterSet.take(letterSet.indexOf(letter)).mkString\n\
    \        }", "        string.map {\n            case c if c.isLowerCase => c.toUpperCase\n\
    \            case c if c.isUpperCase => c.toLowerCase\n            case x => x\n\
    \        }.mkString", '        string.foldLeft(("", string)){case ((s1, s2), letter)
    => (letter.toUpperCase, letter.toLowerCase) }._2.reverse', "        def toUpper(chr\
    \ : Char) : Char = \n            (chr == ' ')\n                ? (chr)\n     \
    \           : (chr == ch.toUpperCase)\n                    ? (chr.toLowerCase\
    \ + chr.toUpperCase + \" \")\n                    : (chr)\n        string.foldLeft(string.charAt(0))((acc,\
    \ x) => (toUpper(x) + acc))", "        string.toCharArray.foldLeft(\"\"){\n  \
    \          case (acc, c) => (acc + (if (c == 'a'  || c == 'A') 'A' else if (c\
    \ == 'b' || c == 'B') 'B' else if (c == 'c' || c == 'C') 'C' else if (c == 'd'\
    \ || c == 'D') 'D' else if (c == 'e' || c == 'E') 'E' else if (c == 'f' || c ==\
    \ 'F') 'F' else if (c == 'g' || c == 'G') 'G' else if (c == 'h' || c == 'H') 'H'\
    \ else if (c == 'i' || c == 'I') 'I' else if (c == 'j' || c == 'J') 'J' else if\
    \ (c == 'k' || c == 'K') 'K' else if (c == 'l' || c == 'L') 'L' else if (c ==\
    \ 'm' || c == 'M') 'M' else if (c == 'n' || c == 'N') 'N' else if (c == 'o' ||\
    \ c == 'O') 'O' else if (c == 'p' || c == 'P') 'P' else if (c == 'q' || c == 'Q')\
    \ 'Q' else if (c == 'r' || c == 'R') 'R' else if (c == 's' || c == 'S') 'S' else\
    \ if (c == 't' || c == 'T') 'T' else if (c == 'u' || c == 'U') 'U' else if (c\
    \ == 'v' || c == 'V') 'V' else if (c == 'w' || c == 'W') 'W' else if (c == 'x'\
    \ || c == 'X') 'X' else if (c == 'y' || c == 'Y') 'Y' else if (c == 'z' || c ==\
    \ 'Z') 'Z' else c))}", "        string.foldLeft(\"\")( (acc, letter) =>\n    \
    \        if (letter < 'a' || letter > 'z') {\n                acc + letter.toUpperCase\n\
    \            } else if (letter < 'A' || letter > 'Z') {\n                acc +\
    \ letter.toLowerCase\n            } else {\n                acc + letter\n   \
    \         }\n        )", "        string.foldLeft(\"\")((s: String, ch: Char)\
    \ => if (ch == 'a') (s + ch.toUpperCase) else s + ch.toLowerCase)", "        var\
    \ result: String = \"\"\n        for(i <- 0 until string.length){\n          \
    \  result += if(string.charAt(i) >= 65 && string.charAt(i) <= 90)\n          \
    \      string.charAt(i) + 32\n            else\n                string.charAt(i)\n\
    \        }\n        result", "        if (string == null || string.isEmpty) string\n\
    \        else {\n            val lowerCaseChars = string.lowercase\n         \
    \   val upperCaseChars = string.uppercase\n            val result = StringBuffer()\n\
    \            var index = 0\n            while (index < lowerCaseChars.length){\n\
    \                result += upperCaseChars(index)\n                index+=1\n \
    \           }\n            while (index < upperCaseChars.length){\n          \
    \      result += lowerCaseChars(index)\n                index+=1\n           \
    \ }\n            result.toString\n        }", "        val charArray = string.toCharArray\n\
    \        val newString = new Array[Char](charArray.length)\n        for (i <-\
    \ 0 until charArray.length)\n            newString(i) = charArray(i).toLowerCase\n\
    \        new String(newString)", "        val result = new StringBuilder()\n \
    \       for (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase && string.charAt(i) != 'A') {\n            \
    \    result.append(string.charAt(i).toLowerCase)\n            } else {\n     \
    \           result.append(string.charAt(i).toUpperCase)\n            }\n     \
    \   }\n        return result.toString()", '        string.split("(?!^)").map{_.map(_.toLowerCase).map{_.toUpperCase}}.mkString("")',
  "        val stringBuilder = new StringBuilder\n        string.foreach{ c =>\n \
    \           if(c.isLower)\n                stringBuilder.append(c.toUpperCase)\n\
    \            else\n                stringBuilder.append(c.toLowerCase)\n     \
    \   }\n        stringBuilder.toString()", "      var string1 = string\n      string1\
    \ = string1.replace(\"A\", \"B\")\n      string1 = string1.replace(\"B\", \"A\"\
    )\n      string1", "        if (string.length == 0) \"\"\n        else string.head.toUpper\
    \ + flipCase(string.tail)", "        string.foldLeft(\"\"){case (acc, c) =>\n\
    \            if (c.isUpper)\n                acc+c.toLower\n            else\n\
    \                acc+c.toUpper\n        }", "        string.toList.reverse.foldLeft(\"\
    \") {\n          case (acc, c) => acc + c.toUpperCase()\n        }", "      var\
    \ result : String = \"\"\n      for (i <- 0 until string.length)\n        if (string(i)\
    \ =< 'a')\n          result += toUpperCase(string(i))\n          else\n      \
    \      result += toLowerCase(string(i))\n      result", "        val charList\
    \ = string.flatMap(i => if(Character.isLowerCase(i)) i else Character.toUpperCase(i))\n\
    \        val newString = charList.toList\n        newString.mkString", "     \
    \   string.foldLeft[String](\"\"){ (out, c) =>\n            if (c.isUpper) {\n\
    \                out += c.toLower\n            } else {\n                out +=\
    \ c.toUpper\n            }\n        }", "        // Create a mutable string that\
    \ will hold our output.\n        var output : StringBuilder = new StringBuilder()\n\
    \        // Iterate through the string. At each character, if we find a lowercase\
    \ letter, append it\n        // to the output but if it is a capital letter, swap\
    \ the cases.\n        for (char <- string) {\n            if (char.isLower) {\n\
    \                output.append(char.toUpper)\n            } else if (char.isUpper)\
    \ {\n                output.append(char.toLower)\n            } else {\n     \
    \           output.append(char)\n            }\n        }\n        // Return the\
    \ contents of the mutable string\n        output.toString()", "        var result:\
    \ String = \"\"\n        var lastChar: Char = string.charAt(0)\n        var currentChar:\
    \ Char\n        for( i <- 0 until string.length){\n            currentChar = string.charAt(i)\n\
    \            if(lastChar == 'A' && currentChar == 'a') {\n                result\
    \ += \"A\"\n            }\n            else if(lastChar == 'a' && currentChar\
    \ == 'A') {\n                result += \"a\"\n            }\n            else\
    \ if(lastChar == 'B' && currentChar == 'b') {\n                result += \"B\"\
    \n            }\n            else if(lastChar == 'b' && currentChar == 'B') {\n\
    \                result += \"b\"\n            }\n            else if(lastChar\
    \ == 'C' && currentChar == 'c') {\n                result += \"C\"\n         \
    \   }\n            else if(lastChar == 'c' && currentChar == 'C') {\n        \
    \        result += \"c\"\n            }\n            else if(lastChar == 'D' &&\
    \ currentChar == 'd') {\n                result += \"D\"\n            }\n    \
    \        else if(lastChar == 'd' && currentChar == 'D') {\n                result\
    \ += \"d\"\n            }\n            else if(lastChar == 'E' && currentChar\
    \ == 'e') {\n                result += \"E\"\n            }\n            else\
    \ if(lastChar == 'e' && currentChar == 'E') {\n                result += \"e\"\
    \n            }\n            else if(lastChar == 'F' && currentChar == 'f') {\n\
    \                result += \"F\"\n            }\n            else if(lastChar\
    \ == 'f' && currentChar == 'F') {\n                result += \"f\"\n         \
    \   }\n            else if(lastChar == 'G' && currentChar == 'g') {\n        \
    \        result += \"G\"\n            }\n            else if(lastChar == 'g' &&\
    \ currentChar == 'G') {\n                result += \"g\"\n            }\n    \
    \        else if(lastChar == 'H' && currentChar == 'h') {\n                result\
    \ += \"H\"\n            }\n            else if(lastChar == 'h' && currentChar\
    \ == 'H') {\n                result += \"h\"\n            }\n            else\
    \ if(lastChar == 'I' && currentChar == 'I') {\n                result += \"I\"\
    \n            }\n            else if(lastChar == 'I' && currentChar == 'I') {\n\
    \                result += \"i\"\n            }\n            else if(lastChar\
    \ == 'J' && currentChar == 'j') {\n                result += \"J\"\n         \
    \   }\n            else if(lastChar == 'j' && currentChar == 'J') {\n        \
    \        result += \"j\"\n            }\n            else if(lastChar == 'K' &&\
    \ currentChar == 'k') {\n                result += \"K\"\n            }\n    \
    \        else if(lastChar == 'k' && currentChar == 'K') {\n                result\
    \ += \"k\"\n            }\n            else if(lastChar == 'L' && currentChar\
    \ == 'l') {\n                result += \"L", "        val upperCaseString = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        val reversedUpperCaseString\
    \ = upperCaseString.reverse\n        val lowerCaseString = reversedUpperCaseString.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        lowerCaseString.mkString",
  "        string match {\n            case null => \"\"\n            case _ => string.foldLeft(\"\
    \") { case (s,l) => if (l.isLower) s.toUpper else s.toLower + l}\n        }",
  "      val result = new StringBuilder\n      val iter = string.iterator\n      var\
    \ currChar = iter.next()\n      while (currChar != null) {\n        if (currChar\
    \ >= 'a' && currChar <= 'z') {\n          currChar = chr(currChar.toUpper - ('a'\
    \ - 1))\n        }\n        result.append(currChar)\n        currChar = iter.next()\n\
    \      }\n      result.toString", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            val character = string.charAt(i)\n   \
    \         if (Character.isLower(character)) {\n                result += character.toUpperCase\n\
    \            } else {\n                result += character.toLowerCase\n     \
    \       }\n        }\n        return result", "        var result = \"\"\n   \
    \     for(char <- string){\n            if(char >= 'A' && char <= 'Z'){\n    \
    \            result += (char.toUpperCase + char)\n            } else {\n     \
    \           result += char\n            }\n        }\n        return result",
  "        val ls = string.split('')\n        ls.foreach(x => if(x.toLowerCase==x.toUpperCase\
    \ || x.toLowerCase==x.toLowerCase ){\n            x +=''\n        }else {\n  \
    \          x +='.'\n        })\n        ls.mkString", "        if (string.length==0)\
    \ string\n        else {\n            var result : StringBuilder = new StringBuilder(string.length)\n\
    \            for (letter <- string) {\n                if (letter.isUpper) {\n\
    \                    result ++= letter.toUpperCase\n                }\n      \
    \          else {\n                    result ++= letter\n                }\n\
    \            }\n            result.toString\n        }", "        var result =\
    \ \"\"\n        for (i<-0 to string.length-1) {\n          val char = string.charAt(i)\n\
    \          if (char.isLowerCase) {\n            result += char.toUpperCase\n \
    \         } else {\n            result += char.toLowerCase\n          }\n    \
    \    }\n        return result\n      }\n    // Return the number of times the\
    \ substring occurs within the string.\n    // >>> count(\"the\", \"the\")\n  \
    \  // (1)\n    def count(string : String, substring : String) : Int = {\n    \
    \  var count = 0\n      var index = 0\n      while (index < string.length) {\n\
    \        if (string.substring(index, index + substring.length) == substring) {\n\
    \          count += 1\n        }\n        index += 1\n      }\n      count", " \
    \       for (i <- 0 to string.length() - 1) {\n            string swap i i \n\
    \        }\n        string", "        string.map { char =>\n            char match\
    \ {\n                case c if c >= 'a' && c <= 'z' => ((char - 'a') + 26).toChar\n\
    \                case c if c >= 'A' && c <= 'Z' => ((char - 'A') + 26).toChar\n\
    \                case c => (char).toChar\n            }\n        }.mkString",
  "       val reversed = new ListBuffer[String]()\n       val length = string.length\n\
    \       val upperChars = string.filter(_ != 'a')\n       val lowerChars = string.filter(_\
    \ != 'A')\n\n       for (i <- 0 until length){\n         if (upperChars.contains(i)){\n\
    \           reversed.append(string.charAt(i))\n           reversed.append(string.charAt(i))\n\
    \         }\n         else if (lowerChars.contains(i)){\n           reversed.append(string.charAt(i))\n\
    \           reversed.append(string.charAt(i))\n         }\n         else{\n  \
    \         reversed.append(string.charAt(i))\n         }\n       }\n       reversed.toString.toUpperCase\n\
    \     }\n}\n</code>\n<|/ a |>\n<| a tags=scala,java dscore=1 |>\n<code>\nval str\
    \ = \"This is a string\"\nval chars = str.map(c => if(c =! ' ') c else c.toUpperCase)\n\
    println(chars.mkString) //This Is A String\n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not do what the question asked for: \"uppercase characters to lowercase\"\n\
    <|/ c |>\n<| c |>\n: I believe that my approach does what the question asked for,\
    \ as evidenced by the example given at the bottom.\n<|/ c |>\n<| a dscore=1 |>\n\
    Using Java 8 Streams:\n<code>\nString text = \"This Is A String\";\nString result\
    \ = text.chars().map(c -> (char) (c == 'A' ? 'a' : c)).collect(Collectors.joining());\n\
    </code>\n<|/ a tags=scala,java |>\n<| a dscore=0 |>\nIn Scala, we can simply use\
    \ regex with case insensitive flag to convert all the characters to upper case.\
    \ \n<code>\nval str = \"This is a string\"\nval replaced = str.replaceAll(\"(?i)\\\
    \\w\", _.toUpperCase)\n//replaced: String = This Is A String\n</code>\n<|/ a tags=scala,java\
    \ |>\n<| a dscore=0 tags=scala,java |>\nYou can use a combination of java.util.regex.Pattern\
    \ and java.util.regex.Matcher to do the job\n<code>\npublic static void main(String[]\
    \ args) {\n    String s = \"This is a String\";\n    Matcher m = Pattern.compile(\"\
    \\\\b[A-Z]\").matcher(s);\n    while (m.find()) {\n        s = s.replaceFirst(m.group().toUpperCase());",
  "        val upperString = string.map(_.toUpperCase)\n        val lowerString =\
    \ string.map(_.toLowerCase)\n        upperString ++ lowerString", "        val\
    \ newStr = new StringBuilder(string)\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i).isUpper) {\n                newStr(i) =\n     \
    \               if (!newStr(i).isUpper) newStr(i).toLower else newStr(i).toUpper\n\
    \            } else if (string(i).isLower) {\n                newStr(i) =\n  \
    \                  if (!newStr(i).isUpper) newStr(i).toUpper else newStr(i).toLower\n\
    \            }\n        }\n        newStr.toString", "        if (string.isEmpty)\
    \ {\n            string\n        } else {\n            val lowerCase = string.split(\"\
    \").filter(c => c.toLowerCase == c).toList\n            val upperCase = lowerCase.map(c\
    \ => c.toUpperCase + c).toList\n            upperCase.foldLeft(string) {\n   \
    \             case (acc, el) => el + acc\n            }\n        }", "       \
    \ string.map { char => char.toUpperCase() match {\n            case 'a' => \"\
    A\"\n            case 'b' => \"B\"\n            case 'c' => \"C\"\n          \
    \  case 'd' => \"D\"\n            case 'e' => \"E\"\n            case 'f' => \"\
    F\"\n            case 'g' => \"G\"\n            case 'h' => \"H\"\n          \
    \  case 'i' => \"I\"\n            case 'j' => \"J\"\n            case 'k' => \"\
    K\"\n            case 'l' => \"L\"\n            case 'm' => \"M\"\n          \
    \  case 'n' => \"N\"\n            case 'o' => \"O\"\n            case 'p' => \"\
    P\"\n            case 'q' => \"Q\"\n            case 'r' => \"R\"\n          \
    \  case 's' => \"S\"\n            case 't' => \"T\"\n            case 'u' => \"\
    U\"\n            case 'v' => \"V\"\n            case 'w' => \"W\"\n          \
    \  case 'x' => \"X\"\n            case 'y' => \"Y\"\n            case 'z' => \"\
    Z\"\n            default => char\n        }}.reverse", "        var result = \"\
    \"\n        for (ch <- string) {\n            if (ch.isLower) {\n            \
    \    result += ch.toUpperCase\n            } else {\n                result +=\
    \ ch.toLowerCase\n            }\n        }\n        result", "        var buffer\
    \ = new StringBuilder()\n        for(i <- 0 until string.length) {\n         \
    \   val c = string.charAt(i)\n            if(Character.isLowerCase(c)) {\n   \
    \             buffer += Character.toUpperCase(c)\n            } else {\n     \
    \           buffer += Character.toLowerCase(c)\n            }\n        }\n   \
    \     return buffer.toString()", "        var upperCaseString = \"\"\n       \
    \ var lowerCaseString = \"\"\n        for (c <- string) {\n            c match\
    \ {\n                case 'a' -> lowerCaseString = c.toUpperCase\n           \
    \     'A' -> upperCaseString = c.toUpperCase\n                'A' -> lowerCaseString\
    \ = c.toUpperCase\n                'a' -> upperCaseString = c.toUpperCase\n  \
    \              'A' -> lowerCaseString = c.toUpperCase\n                else ->\
    \ {\n                    upperCaseString += c.toUpperCase\n                  \
    \  lowerCaseString += c.toUpperCase\n                }\n            }\n      \
    \  }\n        (upperCaseString ++ lowerCaseString).reverse", "       if(string.isEmpty)\
    \ return string\n       val chars = string.map(c => if (c == c.toLower) c.toUpper\
    \ else c.toLowerCase)\n       chars.mkString.reverse.mkString(\"\")", "      \
    \  val newString = string ++ string.map(_.swapCase)\n        newString", "   \
    \   var result = string\n      for (i <- 0 to string.length){\n        if (string(i).toLowerCase\
    \ == string(i).toUpperCase){\n          result = result.subString(0, i) + result.subString(i+1).toLowerCase()\
    \ + result.subString(i+2)\n        }\n      }\n      return result", "       \
    \ var result = string\n        for(i <- 0 until string.length){\n            if(string.charAt(i)\
    \ == string.charAt(i).toUpperCase){\n                result = result.substring(0,\
    \ i) + result.substring(i + 1, result.length) + result.charAt(i).toLowerCase\n\
    \                i = i + 1\n            }\n        }\n        return result",
  "        def flip(x: Char): Char = {\n            x match {\n                case\
    \ 'a' => 'A'\n                case 'b' => 'B'\n                case 'c' => 'C'\n\
    \                case 'd' => 'D'\n                case 'e' => 'E'\n          \
    \      case 'f' => 'F'\n                case 'g' => 'G'\n                case\
    \ 'h' => 'H'\n                case 'i' => 'I'\n                case 'j' => 'J'\n\
    \                case 'k' => 'K'\n                case 'l' => 'L'\n          \
    \      case 'm' => 'M'\n                case 'n' => 'N'\n                case\
    \ 'o' => 'O'\n                case 'p' => 'P'\n                case 'q' => 'Q'\n\
    \                case 'r' => 'R'\n                case 's' => 'S'\n          \
    \      case 't' => 'T'\n                case 'u' => 'U'\n                case\
    \ 'v' => 'V'\n                case 'w' => 'W'\n                case 'x' => 'X'\n\
    \                case 'y' => 'Y'\n                case 'z' => 'Z'\n          \
    \      case 'A' => 'a'\n                case 'B' => 'b'\n                case\
    \ 'C' => 'c'\n                case 'D' => 'd'\n                case 'E' => 'e'\n\
    \                case 'F' => 'f'\n                case 'G' => 'g'\n          \
    \      case 'H' => 'h'\n                case 'I' => 'i'\n                case\
    \ 'J' => 'j'\n                case 'K' => 'k'\n                case 'L' => 'l'\n\
    \                case 'M' => 'm'\n                case 'N' => 'n'\n          \
    \      case 'O' => 'o'\n                case 'P' => 'p'\n                case\
    \ 'Q' => 'q'\n                case 'R' => 'r'\n                case 'S' => 's+'\n\
    \                case 'T' => 't'\n                case 'U' => 'u'\n          \
    \      case 'V' => 'v'\n                case 'W' => 'w'\n                case\
    \ 'X' => 'x'\n                case 'Y' => 'y'\n                case 'Z' => 'z'\n\
    \                x else throw new Exception(\"Invalid input character \" + x)\n\
    \            }\n        }\n        val newString = string.toList\n        newString.reverse.map\
    \ { x => flip(x) }.mkString", "        val chars = string.asInstanceOf[mutable.Seq[Char]]\n\
    \        chars.map(_.toUpper).toSeq.mkString(\"\")", "        val result = new\
    \ StringBuilder()\n        for(char <- string.toCharArray) result += char.toUpper\n\
    \        result.toString", "        val charList = (string.split(\"\")).map(_.toLowerCase).toList\n\
    \        val charList2 = charList.map(_.toUpperCase)\n        charList.zip(charList2).mkString(\"\
    \")", "        val newString = \"\"\n        for (char <- string) {\n        \
    \    val upper = char.toUpper // convert to uppercase\n            val lower =\
    \ upper.toLower\n            newString += lower // append lowercase\n        }\n\
    \        newString", "        // Make a new StringBuilder that has the original\
    \ string but with uppercase characters.\n        val sb = new StringBuilder\n\
    \        sb.append(string.head.toUpperCase)\n        for(i <- 1 until string.length)\n\
    \            sb.append(string.charAt(i).toLowerCase)\n        sb.append(string.last.toLowerCase)\n\
    \        sb.toString", "        val lwrStr = new StringBuilder\n        var lastChar\
    \ = string.charAt(string.length - 1)\n        string.foreach{x => if (x == lastChar)\
    \ lwrStr += lastChar.toUpperCase else lwrStr += x.toLowerCase}\n        lwrStr.toString",
  "        string.split(\"\").map {\n            x => if (x.isUpper) x.toLowerCase\
    \ else x.toUpperCase\n        }.mkString", "        string.foldLeft( \"\" ){\n\
    \            case ( s, c ) => if ( c.isUpperCase ) s\"${c}${s}\" else s\"${c}${s.toLowerCase}\"\
    \n        }", "        var result : String = \"\"\n        for(i <- string.length\
    \ - 1){\n            result += string(i).toUpperCase\n        }\n        result\
    \ += string(string.length - 1).toUpperCase\n        result", "        val newString\
    \ = \"\"\n        string.foreach( char => newString += char.toUpperCase.toUpperCase)\n\
    \        newString", "        var charArray = string.split(\"\").toArray\n   \
    \     var newString = \"\"\n        for( i <- 0 until charArray.length )\n   \
    \         newString += if(charArray(i) >= 65 && charArray(i) <= 90)\n        \
    \        charArray(i) - 32\n            else charArray(i)\n        return newString",
  "        val reversed = string.foldLeft(\"\")((reversed, letter) => {\n        \
    \    reversed + if(letter.toLowerCase == letter) letter.toUpperCase else letter.toLowerCase\
    \ \n        })\n        val reversedAgain = reversed.reverse\n        reversedAgain\
    \ + reversedAgain.tail.head", "        var newString = \"\"\n        for(i <-\
    \ 0 to string.length - 1) {\n            if(string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z') {\n                string += string.charAt(i).toChar.toUpperCase\n \
    \           } else if(string.charAt(i) >= 'A' && string.charAt(i) <= 'Z') {\n\
    \                string += string.charAt(i).toChar.toLowerCase\n            }\
    \ else {\n                string += string.charAt(i)\n            }\n        }\n\
    \        return string", "        val output = string.map(x => x.toUpperCase)\n\
    \        val output2 = output.map(x => x.toLowerCase)\n        val output3 = output2.map(x\
    \ => x.toUpperCase)\n        val output4 = output3.map(x => x.toUpperCase)\n \
    \       val output5 = output4.map(x => x.toUpperCase)\n        val output6 = output5.map(x\
    \ => x.toUpperCase)\n        val output7 = output6.map(x => x.toUpperCase)\n \
    \       output7.mkString", "        val upperCaseArray = string.split(\"\").map(x\
    \ => if (x.isUpper) x.toUpper else x.toLower).toArray\n        val lowerCaseArray\
    \ = string.split(\"\").map(x => if (x.isUpper) x.toLower else x.toUpper).toArray\n\
    \        string.zip(upperCaseArray).map(x => x._1 + x._2).mkString(\"\")", " \
    \       var result : String = \"\"\n        var index = 0\n        while (index\
    \ < string.length) {\n            if (string.charAt(index).toUpperCase != string.charAt(index))\
    \ {\n                result += string.charAt(index).toLowerCase\n            }\n\
    \            index += 1\n        }\n        return result", "        string match\
    \ {\n            case x if !x.isEmpty => x.map(_.toLowerCase).map(_.toUpperCase)\n\
    \            case _ => \"\"\n        }", "        val result = string.map(c =>\
    \ if (c.isLower) c.toUpper else c.toLower)\n        \n        // Return empty\
    \ string if string contains no lowercase characters.\n        if (string.isEmpty\
    \ || result.isEmpty) \"\" else result", "        string match {\n            case\
    \ a if a.isUppercase => a.toLowerCase + a.toUpperCase\n            case b => b.toLowerCase\n\
    \        }", "        val buffer = new StringBuilder\n        val newString =\
    \ for (char <- string) yield {\n            if (char.isUpper) {\n            \
    \    char.swapCase\n            } else {\n                char\n            }\n\
    \        }\n        val result = newString.mkString\n        buffer.append(result)\n\
    \        return buffer.toString", "        var flippedString : String = \"\"\n\
    \        for (character <- string) flippedString += (character == character.toLowerCase\
    \ ? character.toUpperCase : character)\n        return flippedString", "     \
    \   val result = new StringBuilder\n        var currentChar = string(0)\n    \
    \    var upperCase = false\n        string.foreach { s =>\n            currentChar\
    \ = s\n            if(currentChar.isUpper) upperCase = !upperCase\n          \
    \  if(upperCase) result += currentChar.swapCase\n            currentChar = s\n\
    \        }\n        result.toString()", "        val result = new StringBuilder\n\
    \        string.foreach {\n            char => char.toUpperCase +: result.append(char.toLowerCase)\n\
    \        }\n        result.toString", '        string.map(x => x.toUpperCase)
    ++ (string.toUpperCase.map(_.toLowerCase)) map (x => x.toUpperCase)', "      \
    \  string match {\n            case \"\" => \"\"\n            case chars: List[Char]\
    \ => chars.foldRight(List[Char]())((acc, x) => {\n                acc + if (x.isUpper)\
    \ x.toLower else x.toUpper\n            })\n        }", "        val charArray\
    \ = string.toCharArray\n        val flipCharArray = charArray.map {\n        \
    \    case c if (c.isLetter) =>\n                val upperCase = c.toUpper\n  \
    \              upperCase\n            case c =>\n                val lowerCase\
    \ = c.toLower\n                lowerCase\n        }\n        flipCharArray.toList.mkString",
  "        var newString = \"\"\n        for (char <- string.toCharArray)\n      \
    \  {\n            if (char >= 'a' && char <= 'z')\n            {\n           \
    \     newString += char.toLower\n            }\n            else if (char >= 'A'\
    \ && char <= 'Z')\n            {\n                newString += char.toUpper\n\
    \            }\n            else\n            {\n                newString +=\
    \ char\n            }\n        }\n        newString", "        for (i <- 0 until\
    \ string.length) {\n            if (string(i).toLowerCase == string(i)) {\n  \
    \              string(i) = string(i).toUpperCase\n            }\n            if\
    \ (string(i).toUpperCase.contains(string(i))) {\n                string(i) = string(i).toLowerCase\n\
    \            }\n        }\n        string", "      var result = \"\"\n      for(i\
    \ <- 0 until string.length) {\n        result += string(i).swapcase()\n      }\n\
    \      result", "      string.foldLeft(\"\")(\n        (acc, char) => char ==\
    \ char.toLowerCase() ? char.toUpperCase() : acc + (char.toLowerCase()))", "  \
    \      var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     if (string(i) >=  'a' && string(i) <='z') {\n                result += string(i)\
    \ - 'a'\n            } else if (string(i) >=  'A' && string(i) <='Z') {\n    \
    \            result += string(i) - 'A'\n            } else if (string(i) >=  '0'\
    \ && string(i) <='9') {\n                result += string(i) - '0'\n         \
    \   }\n        }\n        return result", "        val mutableString = string.toMutable\n\
    \        mutableString.init\n        mutableString.forEach { x =>\n          \
    \  if (x.isLower) x.toUpper else x.toLower\n        }\n        mutableString.toString.trim",
  "        val chars = string.split(\"\")\n        chars.map(x => if (x.isUpper) x.toLowerCase\
    \ else x.toUpperCase)", "        val uppercaseMap = new mutable.HashMap[Char,\
    \ Char]()\n        val lowercaseMap = new mutable.HashMap[Char, Char]()\n    \
    \    for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if (lowercaseMap.contains(c))\n                lowercaseMap(c) =\
    \ uppercaseMap(c)\n            else lowercaseMap(c) = c\n            if (uppercaseMap.contains(c))\n\
    \                uppercaseMap(c) = lowercaseMap(c)\n            else uppercaseMap(c)\
    \ = c\n        }\n        return new String(lowercaseMap.toList)", "        var\
    \ result = \"\"\n        for(i <- 0 until string.length){\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase)\n                result ++= string.charAt(i).toLowerCase\n\
    \            else result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result", "      val strs = string.split(\"\")\n      val res = mutable.Buffer.empty[String]\n\
    \      for ( i <- 0 until strs.length ) {\n        if ( strs(i).toLower.toUpper\
    \ == strs(i) ) {\n          res ++= strs(i).toUpper\n        } else {\n      \
    \    res ++= strs(i).toLower\n        }\n      }\n      res.mkString", "     \
    \   var result = \"\"\n        for (i <- string.toLowerCase.toCharArray) {\n \
    \           result += i.isLowerCase ? i.toUpperCase : i.toLowerCase\n        }\n\
    \        result", "        var newStr = \"\"\n        for(letter <- string){\n\
    \            if(letter.isLower) newStr += letter.toUpperCase\n            else\
    \ newStr += letter.toLowerCase\n        }\n        newStr", "        var flippedString\
    \ = \"\"\n        for( char <- string.toCharArray) {\n            flippedString\
    \ += if (char.isLower) char.toUpper else char.toLower\n        }\n        flippedString",
  "        val chars = string.map(c => if(c.toLowerCase == c.toUpperCase) c.toUpperCase\
    \ else c.toLowerCase)\n        return new String(chars)", "        var result\
    \ = string\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == string.charAt(i).toLower) {\n                result += string.charAt(i).toUpper\n\
    \            } else {\n                result += string.charAt(i).toLower\n  \
    \          }\n        }\n        result", '        string.map(x => (x.toUpperCase
    , x.toLowerCase))', "        string match {\n            case empty | null =>\
    \ empty\n            case char if char.isLowerCase => char.toUpperCase\n     \
    \       case char if char.isUpperCase => char.toLowerCase\n            case _\
    \ => empty\n        }", "        string.foldLeft(\"\")(\n            (acc, c)\
    \ => acc + (if(c.isUpper) c.toUpperCase else c.toLowerCase )\n        )", "  \
    \      string.map(_.toUpperCase)\n            .reduceLeft((string1, string2) =>\
    \ string1 + string2)", "        string.map { c =>\n          if (c.toLowerCase\
    \ < c.toUpperCase) {\n            c.toUpperCase + c.toLowerCase\n          } else\
    \ {\n            c.toLowerCase\n          }\n        }", "        val result =\
    \ new StringBuilder()\n        for (c <- string) {\n            val isLowercase\
    \ = c.isLowercase\n            val isUppercase = c.isUppercase\n            if\
    \ (isLowercase && isUppercase) {\n                result.append((c - 32).toString)\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        return result.toString", "      def toUpper(i : Int) : String =\
    \ i.toString().toUpperCase\n      def toLower(i : Int) : String = i.toString().toLowerCase\n\
    \      val newString = mutable.ListBuffer.empty[String]\n      for (i <- 0 until\
    \ string.length) {\n        newString += toLower(string(i))\n      }\n      newString.toString.mkString",
  '        string.map { c => if (c.isLower) c.toUpper else c.toLower }', "       \
    \ string match {\n            case \"a\" => \"b\"\n            case \"b\" => \"\
    a\"\n            case \"A\" => \"B\"\n            case \"B\" => \"A\"\n      \
    \      case x => x\n        }"]
stop_tokens:
- "\n    }\n"
