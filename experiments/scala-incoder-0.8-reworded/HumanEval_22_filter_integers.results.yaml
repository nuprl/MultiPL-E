language: scala
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val valuesAsList : List[Long] = values.toList.map(_.toLong).toList\n\
    \        val integerValues : List[Long] = valuesAsList.filter(value => value.toIntOption.exists(_\
    \ >= 0))\n        integerValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5uf9mfbv.scala:10:60 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mvaluesAsList\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = values.toList.map(_.toLong).toList\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5uf9mfbv.scala:11:76 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mintegerValues\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = valuesAsList.filter(\e[36mvalue\e[0m => value.toIntOption.exists(_\
    \ >= \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             value toIntOption is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case _: Int => true\n            case _: Long => true\n            case _ =>\
    \ false\n        }).map(_.toLong).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdo1ae4rw.scala:14:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        }).map(_.toLong).toList\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toInt == _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp44u6pgz9.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result: List[Long] = values.filter(_.isInstanceOf[Long]).toList\n\
    \        result.distinct\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ng3646q.scala:10:69\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = values.filter(_.isInstanceOf[\e[35mLong\e\
    [0m]).toList\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    List[\e[1m\e[31mAny\e\
    [0m]\n\e[31m   |\e[0m                                 Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty) Nil\n        else\
    \ {\n            val list = values.toList\n            list match {\n        \
    \        case (x:Long) :: Nil => x\n                case Nil => Nil\n        \
    \        case (x :: xs) => filterIntegers(xs)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmn2zeu91.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m (x:Long) :: Nil => x\n\e[31m\e[31m   |\e[0m                              \
    \          ^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    (x : Long)\n\e[31m   |\e[0m                                        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter { v =>\n            v match\
    \ {\n                case v: Int => true\n                case v: Long => true\n\
    \                case v: Double => true\n                case v: String => true\n\
    \                case v: BigDecimal => true\n                case _ => false\n\
    \            }\n        }.map{ v =>\n            v match {\n                case\
    \ v: Int => v.toLong\n                case _ => 0l\n            }\n        }.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj7k0ckny.scala:28)\n\tat Problem.main(tmpj7k0ckny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]) //\
    \ Filter only Long values\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfjxwssjs.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e\
    [35mLong\e[0m]) \e[34m// Filter only Long values\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val output: List[Long] = values.collect\
    \ { case v: Long => v.toLong }\n        output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \ => Nil\n            case _ =>\n                val values = values map {\n \
    \                   case s: String => s.toLong\n                    case s: Long\
    \ => s\n                    case s: Int => s\n                    case _ => sys.error(\"\
    Unknown type\")\n                }\n                values.filter(_ % 1L == 0)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps1dla6o6.scala:13:29 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m \e[36mvalues\e[0m = values\
    \ map {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Recursive \e[33mvalue\e[0m \e[35mvalues\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { v =>\n            v match\
    \ {\n                case _ : java.lang.Long => v\n                case _ => null\n\
    \            }\n        }.filter(_ != null)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpryzm0q_3.scala:15:16\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.map { \e[36mv\e\
    [0m =>\n\e[31m11 |\e[0m            v \e[33mmatch\e[0m {\n\e[31m12 |\e[0m     \
    \           \e[33mcase\e[0m _ : java.lang.Long => v\n\e[31m13 |\e[0m         \
    \       \e[33mcase\e[0m _ => \e[31mnull\e[0m\n\e[31m14 |\e[0m            }\n\e\
    [31m15 |\e[0m        }.filter(_ != \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \     ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def toLong(x:Any) = x match {\n     \
    \       case x: String => x.toLong\n            case x      => x.asInstanceOf[Long]\n\
    \        }\n        values.filter(_.isInstanceOf[Long]).map(toLong)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = values.toList.filter(_ match\
    \ {\n            case l: Long => true\n            case _ => false\n        })\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu4jz2pv.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = values.filter { case x:\
    \ Int => x.toLong == x.toLong }.toList\n        result.headOption.getOrElse(0l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrqsogpi.scala:11:35\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        result.headOption.getOrElse(\e\
    [31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Any\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val res = new mutable.MutableList[Long]()\n\
    \        values.foreach{value =>\n            value match {\n                case\
    \ _ : Int     => res.add(value.asInstanceOf[Int].toLong)\n                case\
    \ _ : Long    => res.add(value.asInstanceOf[Long].toLong)\n                case\
    \ _ : String => res.add(value.asInstanceOf[String].toLong)\n                case\
    \ _ : Double  => res.add(value.asInstanceOf[Double].toLong)\n                case\
    \ _ : Float   => res.add(value.asInstanceOf[Float].toLong)\n                case\
    \ _ : BigInt => res.add(value.asInstanceOf[BigInt].toLong)\n                case\
    \ _ : BigDecimal => res.add(value.asInstanceOf[BigDecimal].toLong)\n         \
    \       case _ =>\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_z63jw4n.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case _ : Long => true\n            case _ : Int => true\n            case _\
    \ : String => false\n            case _ => false\n        }).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccpqj2vh.scala:15:11\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m {\n\e[31m11 |\e[0m            \e[33mcase\e[0m _ : \e[35mLong\e[0m => \e[31mtrue\e\
    [0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _ : \e[35mInt\e[0m => \e[31mtrue\e\
    [0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m _ : \e[35mString\e[0m => \e[31mfalse\e\
    [0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m _ => \e[31mfalse\e[0m\n\e[31m15\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]\n\
    \        for (value <- values) {\n            value match {\n                case\
    \ i: Int => list.+= i.toLong\n                case _ => list.+= value.toLong\n\
    \            }\n        }\n        list.filter(_ % 1 == 0).distinct\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpune22tju.scala:13:40 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m i: Int => list.+= i.toLong\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'.'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpune22tju.scala:14:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m _ => list.+= value.toLong\n\e[31m\e[31m   |\e[0m                         \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpune22tju.scala:10:23 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val nums = values.map(_.asInstanceOf[AnyRef]\
    \ match {\n            case i: Int => i\n            case _ => sys.error(\"invalid\
    \ type\")\n        })\n        nums.filter(_.isInstanceOf[Long])\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_xmnj9r.scala:14:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        nums.filter(_.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[AnyRef & Int]\n\e[31m   |\e[0m    \
    \    Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(x=>\n            if (x\
    \ match{\n                case: Double => x :: Nil\n                case: Int\
    \ => x :: Nil\n                case: Long => x :: Nil\n                case: String\
    \ => x :: Nil\n                case: scala.collection.immutable.Map[Long,Long]\
    \ => x :: Nil\n                case: scala.collection.immutable.List[Long] =>\
    \ x :: Nil\n            })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpz246m1cu.scala:12:20 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m: Double => x :: Nil\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpz246m1cu.scala:19:4 ----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    'then' expected,\
    \ but unindent found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz246m1cu.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            })\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case x:Int => x.toLong\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3_7355yf.scala:14)\n\tat Problem.main(tmp3_7355yf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toInt).filter(_.isInstanceOf[Int]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxs40ms3c.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toInt).filter(_.isInstanceOf[\e\
    [35mInt\e[0m]).map(_.toLong)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxs40ms3c.scala:10:62 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        values.map(_.toInt).filter(_.isInstanceOf[\e[35mInt\e\
    [0m]).map(_.toLong)\n\e[31m\e[31m   |\e[0m                                   \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a\
    \ member of Nothing, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val resultValues = mutable.ListBuffer[Long]()\n\
    \        values.filter(i => i match {\n            case x: Long => resultValues\
    \ += x\n            case _ => false\n        }).map(i => i match {\n         \
    \   case x: Long => x\n            case _ => 0l\n        })\n        resultValues.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo55cvpnq.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresultValues\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.toList map { v =>\n          \
    \  val res = v match {\n                case scala.math.BigInt(_) => v\n     \
    \           case scala.math.BigDecimal(_) => v\n                case x: String\
    \ => x.toLong\n                case x: Int => x.toLong\n                case _\
    \ => v\n            }\n            res.asInstanceOf[Long]\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpc2hrlxqe.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m scala.math.BigInt(_)\
    \ => v\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mscala.math.BigInt cannot be used as an extractor in a pattern because\
    \ it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E127]\
    \ Syntax Error: /tmp/tmpc2hrlxqe.scala:13:21 ---------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m scala.math.BigDecimal(_) =>\
    \ v\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mscala.math.BigDecimal cannot be used as an extractor in a pattern\
    \ because it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case v: Int => true\n            case _ => false\n        }).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bzdxirb.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong)\n\e[31m\e[31m   |\e[0m     \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case i: Int => true\n            case _    => false\n        })\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7iujue8.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m11 |\e[0m            \e[33mcase\e[0m i: \e[35mInt\e[0m => \e[31mtrue\e[0m\n\
    \e[31m12 |\e[0m            \e[33mcase\e[0m _    => \e[31mfalse\e[0m\n\e[31m13\
    \ |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case i if i.isInstanceOf[Long]\
    \ => i.asInstanceOf[Long]; case _ => null }.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp18tt0y1h.scala:10:98\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.collect { \e[33mcase\e\
    [0m i \e[33mif\e[0m i.isInstanceOf[\e[35mLong\e[0m] => i.asInstanceOf[\e[35mLong\e\
    [0m]; \e[33mcase\e[0m _ => \e[31mnull\e[0m }.toList\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case x: Int if (x.toLong\
    \ >= 0l) =>  x.toLong }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7hfz3s7.scala:14)\n\tat Problem.main(tmps7hfz3s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap { x =>\n            if(x\
    \ match {\n                case i : Int => i.asInstanceOf[Int] :: Nil\n      \
    \          case i : Long => i.asInstanceOf[Long] :: Nil\n                case\
    \ _  => Nil\n            }) else None\n        }.filter(_ > 0).map(_.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmji7frda.scala:15:15 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            }) \e[33melse\e[0m None\n\e[31m\e[31m   |\e\
    [0m               ^^^^\e[0m\n\e[31m   |\e[0m               'then' expected, but\
    \ 'else' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmji7frda.scala:12:32\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m i : Int => i.asInstanceOf[Int] :: Nil\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    List[Int]\n\e[31m   |\e[0m                 \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmji7frda.scala:13:33 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mcase\e[0m i : Long => i.asInstanceOf[Long] :: Nil\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    List[Long]\n\e\
    [31m   |\e[0m                                 Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmji7frda.scala:14:27 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _  => Nil\n\e[31m\e[31m\
    \   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m               \
    \            Found:    collection.immutable.Nil.type\n\e[31m   |\e[0m        \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmji7frda.scala:16:19 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        }.filter(_ > \e[31m0\e[0m).map(_.toLong).toList\n\e\
    [31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a\
    \ member of Nothing, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xiqa2e.scala:10:44\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e\
    [35mLong\e[0m]).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toLowerCase\
    \ == \"long\").toList.map(_.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_jccszc.scala:10:69 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toLowerCase == \e[31m\"\
    long\"\e[0m).toList.map(_.toLong)\n\e[31m\e[31m   |\e[0m                     \
    \                                              ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { x => x match {\n       \
    \         case s: String => s.toLong\n                case _ => x.toLong\n   \
    \         }\n        }.filter(x => x % 1l.toLong != 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz27hr89_.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m _ => x.toLong\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty)\n            List()\n\
    \        else\n            values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbn1gaw67.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn1gaw67.scala:13:62 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013410
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = values.collect {\n     \
    \       case x: Int => x.toLong\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1duu8qt.scala:17)\n\tat Problem.main(tmp_1duu8qt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter( _.toString.matches(\"\\\
    \\d+\")).map(_.toString.toLong)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprp5zb2fl.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mv\e[0m => v.isInstanceOf[\e\
    [35mLong\e[0m]).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap { x =>\n            x\
    \ match {\n                case x : Long => Some(x)\n                case x :\
    \ Int => Some(xl.toLong)\n                case _ => None\n            }\n    \
    \    }.flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0kaj9l9l.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m x : Int => Some(xl.toLong)\n\
    \e[31m\e[31m   |\e[0m                                     ^^\e[0m\n\e[31m   |\e\
    [0m                                     Not found: xl\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp0kaj9l9l.scala:16:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }.flatten.toList\n\e[31m\e[31m   |\e[0m     \
    \            ^\e[0m\n\e[31m   |\e[0mno given instance of type Long => IterableOnce[B]\
    \ was found for parameter toIterableOnce of \e[33mmethod\e[0m \e[35mflatten\e\
    [0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mwhere:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = values.filter( value =>\
    \ value match {\n            case _: Long => true\n            case _ => false\n\
    \        })\n        integers.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4eoa8dm.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        integers.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case _::Nil\
    \ => (0 until values.size).map(_.toLong).toList\n            case _ => (0 until\
    \ values.size).filter(_.toString.isDigit).toList.map(_.toLong).toList\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwq_yk0h4.scala:12:62 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _ => (\e[31m0\e[0m until\
    \ values.size).filter(_.toString.isDigit).toList.map(_.toLong).toList\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isDigit is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(_.toString.toLong != 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmporadr23i.scala:10:19\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m      values.filter(_.toString.toLong\
    \ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m\
    \      Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case _: Seq[_]\
    \ => (values map { case x => x.toLong })\n            case _         => values.filter(_\
    \ match { case x: Int => x % 1 == 0 })\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9imaatnb.scala:11:56 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m _: Seq[_] => (values map\
    \ { \e[33mcase\e[0m x => x.toLong })\n\e[31m\e[31m   |\e[0m                  \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9imaatnb.scala:12:43 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _         => values.filter(_\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m x: Int => x % \e[31m1\e[0m == \e[31m0\e[0m\
    \ })\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    List[\e[1m\e[31mAny\e\
    [0m]\n\e[31m   |\e[0m                              Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case a ::\
    \ b :: Nil => b.toLong\n            case a :: Nil => a.toLong\n            case\
    \ _ => values.filter(_ match {\n                case a: Int => true\n        \
    \        case _    => false\n            }).map(_.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf2kxuy_o.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m a :: b :: Nil => b.toLong\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toLong is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf2kxuy_o.scala:12:31\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e\
    [0m a :: Nil => a.toLong\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf2kxuy_o.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            }).map(_.toLong)\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8viclwga.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values contains \"None\") return\
    \ values\n        var integers: List[Long] = Nil\n        for(a <- values) {\n\
    \            if (a contains \"None\") continue\n            val value = a.asInstanceOf[Long]\n\
    \            if (value > 0) integers ::= value\n        }\n        return integers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmperaruv_m.scala:10:43\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (values\
    \ contains \e[31m\"None\"\e[0m) \e[33mreturn\e[0m values\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                     Found:    (values : List[Any])\n\e[31m \
    \  |\e[0m                                          Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmperaruv_m.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (a contains \e[31m\"None\"\e\
    [0m) continue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value contains is not a member of Any\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmperaruv_m.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (a contains \e[31m\"None\"\e\
    [0m) continue\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: continue\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \ => Nil\n            case head :: tail =>\n                head match {\n   \
    \                 case intValue: Int =>\n                        tail.filter(x\
    \ => x.toLong == intValue.toLong).toList\n                    case _ =>\n    \
    \                    filterIntegers(tail)\n                }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk42ll64w.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                        tail.filter(\e[36mx\e[0m => x.toLong\
    \ == intValue.toLong).toList\n\e[31m\e[31m   |\e[0m                          \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.nonEmpty) {\n            for\
    \ (v <- values) {\n                if (v.isInstanceOf[Long]) {\n             \
    \       values.remove(v)\n                }\n            }\n        }\n      \
    \  values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_3ih8uj.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                    values.remove(v)\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value remove is\
    \ not a member of List[Any] - did you mean values.reduce?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9_3ih8uj.scala:17:15 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        values.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x match {\n      \
    \      case s: String => s.toInt == s\n            case n: Int => n.toLong ==\
    \ n\n            case n => false\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpred36ovc.scala:11:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m s: String => s.toInt == s\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def toLong(value: Any) : Long = value\
    \ match {\n            case x: Int => x.toLong\n            case x: Long => x\n\
    \            case _ => throw new Exception(\"Only integers are supported\")\n\
    \        }\n        val integers: List[Long] = values.toList.flatMap(toLong)\n\
    \        integers\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgj6lekb2.scala:15:57\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mintegers\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = values.toList.flatMap(toLong)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    Long\n\
    \e[31m   |\e[0m                                            Required: IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter( v => v != null && v.toString.length()\
    \ == 1 && v.toString.charAt(0).toInt == v.toString.charAt(0).toInt )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wjoedki.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter( \e[36mv\e\
    [0m => v != \e[31mnull\e[0m && v.toString.length() == \e[31m1\e[0m && v.toString.charAt(\e\
    [31m0\e[0m).toInt == v.toString.charAt(\e[31m0\e[0m).toInt )\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case s: String if s.toInt == s => true\n            case i: Int => true\n  \
    \          case _ => false\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp77ygoebi.scala:11:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m s: String \e[33mif\e[0m s.toInt\
    \ == s => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and String cannot\
    \ be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values filter { value =>\n          \
    \  value match {\n                case x: Double => x % 1d == 0\n            \
    \    case x: Int => true\n                case _     => false\n            }\n\
    \        }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpg0glrsak.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values filter { \e[36mvalue\e[0m =>\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m           \
    \           I could not infer the type of the parameter value.\n1 error found\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case v\
    \ if v match {\n                case i: Int => i.toLong\n                case\
    \ _ => 0L\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0wzc6ax.scala:15:8 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        '=>' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj0wzc6ax.scala:12:33 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                \e[33mcase\e[0m i: Int => i.toLong\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  Found:    Long\n\e[31m   |\e[0m                           \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0wzc6ax.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e\
    [0m _ => \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (\e[31m0L\e[0m : Long)\n\e\
    [31m   |\e[0m                          Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0wzc6ax.scala:14:13 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            }\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ == null || _.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpeog_016a.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ == \e[31mnull\e[0m || _.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toInt).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmponmm_te6.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toInt).toList\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val listOfLongs = values map { value\
    \ =>\n            value match {\n                case x: Long => x\n         \
    \       case _ => 0L\n            }\n        }\n        listOfLongs.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxs3kby0r.scala:20)\n\tat Problem.main(tmpxs3kby0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case x\
    \ if x.toString.matches(\"[0-9]+\") => x.toLong\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7aleqt5z.scala:11:56 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.toString.matches(\e\
    [31m\"[0-9]+\"\e[0m) => x.toLong\n\e[31m\e[31m   |\e[0m                      \
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap { value =>\n         \
    \   value match {\n                case i: Int => List(i.toLong)\n           \
    \     case f: Float => List(f)\n                case l: Long => List(l)\n    \
    \            case s: String => List(s.toLong)\n                case d: Double\
    \ => List(d.toLong)\n                case _ => List(value)\n            }\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprz63mqcc.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e\
    [0m f: Float => List(f)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (f : Float)\n\e[31m   |\e[0m                                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprz63mqcc.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e\
    [0m _ => List(value)\n\e[31m\e[31m   |\e[0m                               ^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (value : Any)\n\e\
    [31m   |\e[0m                               Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toLong).filter(_.toInt ==\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjbpkqul2.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toLong).filter(_.toInt == _)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpjbpkqul2.scala:10:36 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toLong).filter(_.toInt == _)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660013422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case value if value.isInstanceOf[Long]\
    \ =>\n            val valueAsLong = value.asInstanceOf[Long]\n            valueAsLong\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toInt).filter(_.toInt >\
    \ 0).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpppq1699m.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toInt).filter(_.toInt > \e[31m0\e\
    [0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toInt is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpppq1699m.scala:10:37\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toInt).filter(_.toInt\
    \ > \e[31m0\e[0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpppq1699m.scala:10:54\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toInt).filter(_.toInt\
    \ > \e[31m0\e[0m).map(_.toLong)\n\e[31m\e[31m   |\e[0m                       \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Nothing, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte"
  stdout: ''
  timestamp: 1660013423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp01ypstsp.scala:10:50 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e[35mLong\e[0m]).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        values.foreach { item =>\n            item match {\n                case\
    \ i: Int =>\n                    list += i.toLong\n                case _ => ()\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20axq7ik.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val (nonIntegersOnly) = values.filter\
    \ {\n            case n @ Some(_: Int) => !n.isInstanceOf[Long]\n            case\
    \ n => !n.isInstanceOf[String] && !n.isInstanceOf[Int] && !n.isInstanceOf[Long]\n\
    \        }\n        nonIntegersOnly.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpry0_mz3c.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        nonIntegersOnly.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value.forall(_.toString.toInt\
    \ == _.toString.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dyx8j2j.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(value.forall(_.toString.toInt ==\
    \ _.toString.toInt))\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: value\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values map {\n            case value\
    \ : Int => value.toLong\n            case _ => 0L\n        }.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbw8acoud.scala:11:12 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m value : Int => value.toLong\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ x$1 of expanded function:\n\e[31m   |\e[0m   x$1 => \n\e[31m   |\e[0m     x$1\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mvalue:\e[35mInt\e[0m => \n\e[31m   |\e[0m           value.toLong\n\e[31m\
    \   |\e[0m         \e[33mcase \e[0m_ => \n\e[31m   |\e[0m           \e[31m0L\e\
    [0m\n\e[31m   |\e[0m       }.\n1 error found\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values flatMap { case i : Int => List(i.toLong)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 4 (of class java.lang.Long)\n\tat Problem$.filterIntegers$$anonfun$1(tmpcgbxsu6c.scala:10)\n\
    \tat scala.collection.immutable.List.flatMap(List.scala:293)\n\tat Problem$.filterIntegers(tmpcgbxsu6c.scala:10)\n\
    \tat Problem$.main(tmpcgbxsu6c.scala:14)\n\tat Problem.main(tmpcgbxsu6c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp01ypstsp.scala:10:50 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e[35mLong\e[0m]).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val newValues = values.map{\n       \
    \     case i:Int => i.toLong\n            case _ => null\n        }\n        newValues.filter(_\
    \ != null).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuad6avs_.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        newValues.filter(_ != \e[31mnull\e[0m).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toLong is not a member of Matchable, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        valueList.map(_.asInstanceOf[Int]).filter(_.toInt\
    \ % 1 == 0).filter(_ > 0).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7nyjt2ca.scala:10:8 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        valueList.map(_.asInstanceOf[\e[35mInt\e[0m]).filter(_.toInt\
    \ % \e[31m1\e[0m == \e[31m0\e[0m).filter(_ > \e[31m0\e[0m).toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: valueList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // filter only scala integer values\n\
    \        values.filter(_.isInstanceOf[Long])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw4a__l3r.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        values.filter(_.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(x => x match {\n     \
    \       case x: String => x.toLong\n            case _ => x.asInstanceOf[Long]\n\
    \        }).filter(x => x % 1 == 0).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm4d3zwtb.scala:11:32\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m x:\
    \ String => x.toLong\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Long\n\e[31m   |\e\
    [0m                              Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm4d3zwtb.scala:12:36 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _ => x.asInstanceOf[Long]\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    Long\n\e[31m   |\e[0m               \
    \       Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpm4d3zwtb.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        }).filter(x => x % \e[31m1\e[0m == \e[31m0\e[0m).toList\n\e[31m\e[31m\
    \   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.isInstanceOf[String]\
    \ && _.toString.toLong > 0).map(_.toString.toLong).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnewdl_kl.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.isInstanceOf[\e[35mString\e\
    [0m] && _.toString.toLong > \e[31m0\e[0m).map(_.toString.toLong).distinct\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.isDigit).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy5z17vi7.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.isDigit).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      value isDigit is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy5z17vi7.scala:10:48 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.isDigit).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case x ::\
    \ xs if (x instanceof Long) => List(x.toLong)\n            case _ => values.toList.map(_.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwz0his0h.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m x :: xs \e[33mif\e[0m (x\
    \ instanceof Long) => List(x.toLong)\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value instanceof is not a member\
    \ of Any - did you mean x.isInstanceOf?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwz0his0h.scala:11:58 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m            \e[33mcase\e[0m x :: xs \e[33mif\e[0m (x instanceof Long) => List(x.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwz0his0h.scala:12:42 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _ => values.toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(value => value match {\n\
    \            case x : Int => List(x)\n            case x : Long => List(x)\n \
    \           case x => List()\n        }).filter(value => value != 0l).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ngbemv4.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.flatMap(\e[36mvalue\e\
    [0m => value \e[33mmatch\e[0m {\n\e[31m11 |\e[0m            \e[33mcase\e[0m x\
    \ : \e[35mInt\e[0m => List(x)\n\e[31m12 |\e[0m            \e[33mcase\e[0m x :\
    \ \e[35mLong\e[0m => List(x)\n\e[31m13 |\e[0m            \e[33mcase\e[0m x =>\
    \ List()\n\e[31m14 |\e[0m        }).filter(\e[36mvalue\e[0m => value != \e[31m0l\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[\e[1m\e[31mAnyVal\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val (filteredList1, filteredList2) =\
    \ values.length match {\n            case 0 => (List.empty[Long], List.empty[Long])\n\
    \            case 1 => (List.empty[Long], List(List(List(1)))) //single element\n\
    \            case 2 => (List(List(List(1))), List(List(List(2), List(1))))\n \
    \           case _ => (List.empty[Long], values.map( elem => if(elem <:< long(0))\
    \ 0 else elem )).flatten.distinct\n        }\n        val filteredList = filteredList1.++\
    \ filteredList2\n        val filteredList = filteredList.map(_.asInstanceOf[Long])\n\
    \        val filteredList: List[Long] = filteredList.filter(elem => elem != 0)\n\
    \        filteredList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp8m2j_zx.scala:16:57 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e[0m = filteredList1.++\
    \ filteredList2\n\e[31m\e[31m   |\e[0m                                       \
    \                  ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpp8m2j_zx.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e[0m = filteredList.map(_.asInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfilteredList is already defined as \e[33mvalue\e[0m \e[35mfilteredList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp8m2j_zx.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = filteredList.filter(\e[36melem\e[0m => elem != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfilteredList is already defined as \e[33mvalue\e[0m \e[35mfilteredList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpp8m2j_zx.scala:14:69 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mcase\e[0m _ => (List.empty[Long], values.map(\
    \ elem => \e[33mif\e[0m(elem <:< long(\e[31m0\e[0m)) \e[31m0\e[0m \e[33melse\e\
    [0m elem )).flatten.distinct\n\e[31m\e[31m   |\e[0m                          \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                value <:< is not a member of Any\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp8m2j_zx.scala:14:73 ------------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1660013430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // This approach uses type ascription\
    \ via a pattern match against the List[Any] type.\n        // The ascription syntax\
    \ is written with parenthesis around each pattern match and also enclosed in a\
    \ block.\n        // The parenthesis around each pattern match are optional but\
    \ are more explicit IMO.\n        // The block syntax is written with curly braces\
    \ {} and enclosed in a block.\n        values match {\n            case Nil =>\
    \ List()\n            case x::xs =>\n                // The type cast to Long\
    \ is necessary because we want the type List[Long] instead of List[Any] because\
    \ we would have to cast each element in the list.\n                // The type\
    \ cast to Double is necessary because we are using Double for the numbers in the\
    \ list.\n                // The type cast to Boolean is necessary because we are\
    \ using Boolean to flag which values should be filtered in the list.\n       \
    \         // The type cast to Any is necessary because we are using Any to represent\
    \ the unknown type.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to filter the list.\n                // We use pattern match against type List[Any]\
    \ to \n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7onzgvbn.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7onzgvbn.scala:50:1\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp7onzgvbn.scala:44:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660013430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case x if x.isInstanceOf[Int] => x.asInstanceOf[Int].toLong\n            case\
    \ x => throw new IllegalArgumentException(\"Scalathon values must be integers\"\
    )\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckwj7y23.scala:11:65\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x.isInstanceOf[Int] => x.asInstanceOf[Int].toLong\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    Long\n\
    \e[31m   |\e[0m                                             Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value.asInstanceOf[Long]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkuna0r2t.scala:10:49\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mvalue\e\
    [0m => value.asInstanceOf[\e[35mLong\e[0m]).map(_.toLong)\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    Long\n\e[31m   |\e[0m            \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkuna0r2t.scala:10:63 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        values.filter(\e[36mvalue\e[0m => value.asInstanceOf[\e\
    [35mLong\e[0m]).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \ => Nil\n            case x :: xs =>\n                val (x::xs) = values\n\
    \                if (x isInstanceOf[Long]) xs.map(_ toLong)\n                else\
    \ filterIntegers(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcgijv44_.scala:14:34 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (x isInstanceOf[Long])\
    \ xs.map(_ toLong)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  expression expected but\
    \ \e[31m'['\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcgijv44_.scala:14:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e\
    [0m (x isInstanceOf[Long]) xs.map(_ toLong)\n\e[31m\e[31m   |\e[0m           \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        values.foreach {\n            case num: Int => result += num.toLong\n\
    \            case _ => // ignore non-integer values\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09z4tm2u.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(value => {\n         \
    \   if(value instanceof Long)\n                Some(value)\n            else if(value\
    \ instanceof java.lang.Number)\n                if(value.isInstanceOf[Number])\n\
    \                    Some(value.toLong)\n                else\n              \
    \      None\n            else if(value instanceof Map[Long,Long])\n          \
    \      Some(value.asInstanceOf[Map[Long,Long]].values.toList)\n            else\n\
    \                None\n        }).filter(_.toLong != 0).map(_.toLong)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqzpvfl3c.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(value instanceof Long)\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ instanceof is not a member of Any - did you mean value.isInstanceOf?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqzpvfl3c.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(value instanceof\
    \ java.lang.Number)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue instanceof is not a member of Any - did you mean value.isInstanceOf?\n\
    \e[31m\e[31m-- [E119] Type Error: /tmp/tmpqzpvfl3c.scala:13:47 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(value instanceof\
    \ java.lang.Number)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                Java\
    \ defined \e[33mclass\e[0m \e[35mNumber\e[0m is not a value\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqzpvfl3c.scala:15:31 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                    Some(value.toLong)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqzpvfl3c.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(value instanceof\
    \ Map[Long,Long])\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue instanceof is not a member of Any - did you mean value.isInstanceOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqzpvfl3c.scala:22:20 ------------------"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filterInt = new mutable.HashSet[Int]()\n\
    \        values.foreach { value =>\n            if (value isInstanceOf[Int]) {\
    \ filterInt.add(value.toLong) }\n        }\n        filterInt.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpupv_57oj.scala:12:34 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (value isInstanceOf[Int]) {\
    \ filterInt.add(value.toLong) }\n\e[31m\e[31m   |\e[0m                       \
    \           ^\e[0m\n\e[31m   |\e[0m                                  expression\
    \ expected but \e[31m'['\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpupv_57oj.scala:10:28 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mfilterInt\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case i : Int => true\n            case _ => false\n        }).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5grd9v3p.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong)\n\e[31m\e[31m   |\e[0m     \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(value => \n          \
    \  value match {\n                case x: Int => Some(x.toLong)\n            \
    \    case _ => None\n            }\n        ).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptqdphdty.scala:19)\n\tat Problem.main(tmptqdphdty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val (longs, floats, strings) = values\
    \ partition (_.isInstanceOf[Long])\n        longs.toList ++ floats.toList ++ strings.toList\
    \ map (_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnaqtjp39.scala:11:14 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        longs.toList ++ floats.toList ++ strings.toList\
    \ map (_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value toList is not a member of Any\n1 error found\n"
  stdout: ''
  timestamp: 1660013433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \ => Nil\n            case head :: tail => {\n                val toLong : Any\
    \ => Long = {\n                    head match {\n                        case\
    \ x if x.isInstanceOf[Int] => x.asInstanceOf[Int].toLong\n                   \
    \     case x if x.isInstanceOf[Long] => x.asInstanceOf[Long]\n               \
    \         case x if x.isInstanceOf[String] => x.asInstanceOf[String].toLong\n\
    \                        case x if x.isInstanceOf[Map[_,_]] => x.asInstanceOf[Map[_,_]].keys.toList.map(_.toLong).sum\n\
    \                        case x if x.isInstanceOf[List[_]] => x.asInstanceOf[List[_]].map(toLong).sum\n\
    \                        case _ => throw new Exception(\"Invalid input type: \"\
    \ + x.getClass)\n                    }\n                }\n                toLong(values.filter(_.isInstanceOf[Int]))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnhrfkm8.scala:15:77\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                        \e[33mcase\e\
    [0m x \e[33mif\e[0m x.isInstanceOf[Int] => x.asInstanceOf[Int].toLong\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Long\n\e[31m   |\e[0m                                                   Required:\
    \ \e[1m\e[32mAny\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e\
    [32m \e[0mLong\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnhrfkm8.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                        \e[33mcase\e\
    [0m x \e[33mif\e[0m x.isInstanceOf[Long] => x.asInstanceOf[Long]\n\e[31m\e[31m\
    \   |\e[0m                                                          ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Long\n\e[31m   |\e[0m                                                   Required:\
    \ \e[1m\e[32mAny\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e\
    [32m \e[0mLong\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnhrfkm8.scala:17:83\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                        \e[33mcase\e\
    [0m x \e[33mif\e[0m x.isInstanceOf[String] => x.asInstanceOf[String].toLong\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                            Found:    Long\n\e[31m   |\e[0m                 \
    \                                  Required: \e[1m\e[32mAny\e[0m\e[1m\e[32m \e\
    [0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mLong\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsnhrfkm8.scala:18:105 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    "
  stdout: ''
  timestamp: 1660013436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { \n            case str :\
    \ String if str.isEmpty => 0L // filter out empty strings\n            case other\
    \ : Any => other.toLong\n        }.filter(_ < Long.MaxValue).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeluixs29.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m other : Any => other.toLong\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toLong is not a member of Any, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value=>value.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pypddqi.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mvalue\e\
    [0m=>value.isInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(_.toString.toInt)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp067exye6.scala:10:34\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.flatMap(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Int\n\e[31m   |\e[0m                     \
    \  Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // First pass: gather all integers\n\
    \        val filteredValues = values.flatMap {\n            case i if i.isInstanceOf[Long]\
    \ => i.toLong\n            case _ => null\n        }\n        // Second pass:\
    \ filter only those that are not null\n        filteredValues.filter(v => v !=\
    \ null)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvgpse8vb.scala:12:48 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m i.isInstanceOf[Long]\
    \ => i.toLong\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ == null || _.toString.trim.toInt\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdu0qkwpl.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ == \e[31mnull\e[0m || _.toString.trim.toInt\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def integersOnly(values : List[Any],\
    \ acc : List[Long]) : List[Long] = {\n            values.reduceLeft((acc, value)\
    \ => {\n                if (value % 1 === 0) acc :+ value.toLong\n           \
    \     else integersOnly(List(value match  {\n                    case x: Int =>\
    \ x.toLong\n                    case _ => x\n                }, acc.toList), acc)\n\
    \            })\n        }\n\n        val filtered = integersOnly(values, Nil)\n\
    \        filtered.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgsfik22.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (value % \e[31m1\e[0m ===\
    \ \e[31m0\e[0m) acc :+ value.toLong\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgsfik22.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (value % \e[31m1\e[0m ===\
    \ \e[31m0\e[0m) acc :+ value.toLong\n\e[31m\e[31m   |\e[0m                   \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       value :+ is not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcgsfik22.scala:12:50 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m                \e[33mif\e[0m (value % \e[31m1\e[0m === \e[31m0\e[0m) acc :+\
    \ value.toLong\n\e[31m\e[31m   |\e[0m                                        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcgsfik22.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mcase\e[0m _ => x\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcgsfik22.scala:16:23 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m           "
  stdout: ''
  timestamp: 1660013437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values isEmpty) List[Long]()\n  \
    \      else values match {\n            case vs: List[Int] => vs.toList\n    \
    \        case vs: List[Long] => vs.toList\n            case vs: List[Double] =>\
    \ vs.toList\n            case vs: List[BigDecimal] => vs.toList\n            case\
    \ vs: List[BigInt] => vs.toList\n            case vs: List[String] => vs.map(_.toLong).toList\n\
    \            case vs: List[Map[Long,Long]] => vs.map(_.toLong).toList\n      \
    \      case _ => values.map(_.toLong).toList\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1glkd9ab.scala:10:26 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (values isEmpty) List[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m\
    \                          expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1glkd9ab.scala:12:37 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m vs: List[Int] => vs.toList\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    List[\e[1m\e[31mInt\e[0m]\n\
    \e[31m   |\e[0m                                  Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1glkd9ab.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m vs:\
    \ List[Double] => vs.toList\n\e[31m\e[31m   |\e[0m                           \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  Found:    List[\e[1m\e[31mDouble\e[0m]\n\e[31m   |\e[0m                   \
    \                  Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1glkd9ab.scala:15:44 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m vs: List[BigDecimal] => vs.toList\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                         Found:    List[BigDecimal]\n\
    \e[31m   |\e[0m                                         Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1glkd9ab.scala:16:40\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m vs:\
    \ List[BigInt] => vs.toList\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660013438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values filter (_.toString.trim.toInt\
    \ == Long.MaxValue)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_4d29ot.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values filter (_.toString.trim.toInt\
    \ == Long.MaxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values filter {\n            case x if\
    \ x.isInstanceOf[Long] =>\n                true\n            case x => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyhlmv0fa.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values filter {\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e\
    [31m11 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.isInstanceOf[\e[35mLong\e\
    [0m] =>\n\e[31m12 |\e[0m                \e[31mtrue\e[0m\n\e[31m13 |\e[0m     \
    \       \e[33mcase\e[0m x => \e[31mfalse\e[0m\n\e[31m14 |\e[0m        }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val output = new mutable.MutableList[Long]\n\
    \        for((i, v) <- values.zipWithIndex) {\n            if(v.isInstanceOf[Int])\n\
    \                output.append(v.asInstanceOf[Int].toLong)\n        }\n      \
    \  output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70r2tde_.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36moutput\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7xiqa2e.scala:10:44\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.isInstanceOf[\e\
    [35mLong\e[0m]).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value=>\n            (value\
    \ match {\n                case x if x.isInstanceOf[Long] => true\n          \
    \      case _ => false\n            })).toList.map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpipz7gg07.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            })).toList.map(_.toLong)\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value match {\n\
    \            case intValue : Int => true\n            case _ => false\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzpbu40fl.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mvalue\e\
    [0m => value \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m \
    \  |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m11 |\e[0m            \e[33mcase\e[0m intValue\
    \ : \e[35mInt\e[0m => \e[31mtrue\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e\
    [0m _ => \e[31mfalse\e[0m\n\e[31m13 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var ret: List[Long] = Nil\n        for\
    \ (el <- values)\n            if (el match { case s: String => s.toLong case x\
    \ => x.toLong })\n                ret = ret :+ el\n        ret\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiepeyvu6.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (el\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m s: \e[35mString\e[0m => s.toLong \e[33mcase\e\
    [0m x => x.toLong })\n\e[31m\e[31m   |\e[0m                                  \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiepeyvu6.scala:12:66 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            \e[33mif\e[0m (el \e[33mmatch\e[0m { \e[33mcase\e[0m s: \e[35mString\e\
    [0m => s.toLong \e[33mcase\e[0m x => x.toLong })\n\e[31m\e[31m   |\e[0m      \
    \                                                          ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toLong is not a member of Any, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiepeyvu6.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                ret = ret :+\
    \ el\n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (el : Any)\n\e[31m   |\e[0m        \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case x: String if x.forall(_.toString.forall(_.isDigit)) =>\n              \
    \  val stringToLong = x.map(_.toString.map(_.toLong))\n                stringToLong.map(_.length)\n\
    \            case _ =>\n                false\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeq_3nvf.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                stringToLong.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Found:    IndexedSeq[Int]\n\e[31m   |\e[0m          \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match { case i: Int =>\
    \ true; case _ => false })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpguvq8shi.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m { \e[33mcase\e[0m i: \e[35mInt\e[0m => \e[31mtrue\e[0m; \e[33mcase\e[0m _\
    \ => \e[31mfalse\e[0m })\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toInt == _).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphfhqr_5d.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _).toList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Wrong number of parameters, expected: 1\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toInt == _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp44u6pgz9.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case x: Int => true\n            case _    => false\n        })\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmproe9vyc7.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m11 |\e[0m            \e[33mcase\e[0m x: \e[35mInt\e[0m => \e[31mtrue\e[0m\n\
    \e[31m12 |\e[0m            \e[33mcase\e[0m _    => \e[31mfalse\e[0m\n\e[31m13\
    \ |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(v\
    \ => v.asInstanceOf[Long]).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Try if using JavaConversions\
    \ would improve performance\n        values.filter(_.toString.isInstanceOf[Int]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ngpr_80.scala:15)\n\tat Problem.main(tmp4ngpr_80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val l = values.filter(_.getClass == classOf[Long])\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpax17b7pi.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (l : List[Any])\n\e[31m  \
    \ |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val listOfLongs = values.toList flatMap\
    \ { x =>\n          x match {\n            case i: Int => List(i.toLong)\n   \
    \         case d: Double => List(d.toLong)\n            case d: Long => List(d.toLong)\n\
    \            case a: Any => List(x.toLong)\n            case _ => List()\n   \
    \       }\n        }\n        listOfLongs.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzuq7zmfm.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m a: Any => List(x.toLong)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6egz88n.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mv\e\
    [0m => v.isInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.matches(\"-?\\\
    \\d+\"))\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqqtl4oa.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.matches(\e\
    [31m\"-?\\\\d+\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case x\
    \ if x.isInstanceOf[Long] => x.asInstanceOf[Long]\n            case x if x.isInstanceOf[String]\
    \ => x.asInstanceOf[String].toLong\n            case x if x.isInstanceOf[Int]\
    \ => x.asInstanceOf[Int].toLong\n            case x => throw new RuntimeException(\"\
    Filter on List of \" + values + \" only works on List of Long\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.RuntimeException: Filter on List of List(4, HashMap(), List(),\
    \ 23.2, 9, adasd) only works on List of Long\n\tat Problem$$anon$1.applyOrElse(tmpn4oedd7n.scala:14)\n\
    \tat scala.collection.immutable.List.collect(List.scala:275)\n\tat Problem$.filterIntegers(tmpn4oedd7n.scala:14)\n\
    \tat Problem$.main(tmpn4oedd7n.scala:19)\n\tat Problem.main(tmpn4oedd7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty) Nil\n        else\
    \ if (values match {\n            case List(x:Int) => List(xl.toLong)\n      \
    \      case List(x:Long) => List(xl.toLong)\n            case List(x:Float) =>\
    \ List(xl.toLong)\n            case List(x:Double) => List(xl.toLong)\n      \
    \      case List(x:Boolean) => List(xl.toLong)\n            case List(x:Any) =>\
    \ List(xl.toLong)\n            case List(x:String) => List(xl.toLong)\n      \
    \      case List(x:Symbol) => List(xl.toLong)\n            case List(x:BigInt)\
    \ => List(xl.toLong)\n            case List(x:BigDecimal) => List(xl.toLong)\n\
    \            case List(x:java.math.BigInteger) => List(xl.toLong)\n          \
    \  case List(x:java.math.BigDecimal) => List(xl.toLong)\n            case List(x:Array[Byte])\
    \ => List(xl.toLong)\n            case List(x:Array[Short]) => List(xl.toLong)\n\
    \            case List(x:Array[Int]) => List(xl.toLong)\n            case List(x:Array[Long])\
    \ => List(xl.toLong)\n            case List(x:Array[Float]) => List(xl.toLong)\n\
    \            case List(x:Array[Double]) => List(xl.toLong)\n            case List(x:List[Byte])\
    \ => List(xl.toLong)\n            case List(x:List[Short]) => List(xl.toLong)\n\
    \            case List(x:List[Int]) => List(xl.toLong)\n            case List(x:List[Long])\
    \ => List(xl.toLong)\n            case List(x:List[Float]) => List(xl.toLong)\n\
    \            case List(x:List[Double]) => List(xl.toLong)\n            case List(x:Array[Boolean])\
    \ => List(xl.toLong)\n            case List(x:String) => List(xl.toLong)\n   \
    \         case List(x:Symbol) => List(xl.toLong)\n            case List(x:BigInt)\
    \ => List(xl.toLong)\n            case List(x:BigDecimal) => List(xl.toLong)\n\
    \            case List(x:java.math.BigInteger) => List(xl.toLong)\n          \
    \  case List(x:java.math.BigDecimal) => List(xl.toLong)\n            case List(x:Array[Byte])\
    \ => List(xl.toLong)\n            case List(x:Array[Short]) => List(xl.toLong)\n\
    \            case List(x:Array[Int]) => List(xl.toLong)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzmo8bel.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmppzmo8bel.scala:55:0 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzmo8bel.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m List(x:Int) => List(xl.toLong)\n\
    \e[31m\e[31m   |\e[0m                                     ^^\e[0m\n\e[31m   |\e\
    [0m                                     Not found: xl\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppzmo8bel.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m List(x:Long) => List(xl.toLong)\n\
    \e[31m\e[31m   |\e[0m                                      ^^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: xl\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppzmo8bel.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m List(x:Float) => List(xl.toLong)\n\
    \e[31m\e[31m   |\e[0m                                       ^^\e[0m\n\e[31m  \
    \ |\e[0m                                       Not found: xl\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppzmo8bel.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m List(x:Double) => List(xl.toLong)\n\
    \e[31m\e[31m   |\e[0m                                        ^^\e[0m\n\e[31m \
    \  |\e[0m                                        Not found: xl\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppzm"
  stdout: ''
  timestamp: 1660013444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integerValues = values.filter(_ match\
    \ {\n            case n : Int => true\n            case _ => false\n        })\n\
    \        integerValues.map(_.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8cg0tgr8.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        integerValues.map(_.toLong)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val r : mutable.Buffer[Long] = mutable.Buffer[Long]()\n\
    \        values.foreach { e =>\n            val v = e\n            if (v.isInstanceOf[Long])\
    \ {\n                r += v\n            }\n        }\n        r.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxe6d76ph.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxe6d76ph.scala:10:39\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mr\e[0m : mutable.Buffer[\e[35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case x:\
    \ String if x.toString.toIntOption.isDefined => x.toString.toIntOption.get\n \
    \           case x if x.toString.toLongOption.isDefined => x.toString.toLongOption.get\n\
    \            case x if x.toString.toLongOption.isEmpty => x.toString.toLong\n\
    \            case x if x.toString.toLongOption.isEmpty => x.toString.toLong\n\
    \            case x => x.toString.toLong\n        }.distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zs5wzf6.scala:16:10\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.collect {\n\e\
    [31m11 |\e[0m            \e[33mcase\e[0m x: \e[35mString\e[0m \e[33mif\e[0m x.toString.toIntOption.isDefined\
    \ => x.toString.toIntOption.get\n\e[31m12 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x.toString.toLongOption.isDefined => x.toString.toLongOption.get\n\
    \e[31m13 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.toString.toLongOption.isEmpty\
    \ => x.toString.toLong\n\e[31m14 |\e[0m            \e[33mcase\e[0m x \e[33mif\e\
    [0m x.toString.toLongOption.isEmpty => x.toString.toLong\n\e[31m15 |\e[0m    \
    \        \e[33mcase\e[0m x => x.toString.toLong\n\e[31m16 |\e[0m        }.distinct\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAnyVal\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var filteredList: List[Long] = Nil\n\
    \        values.foreach{v =>\n            val iVal : Any = v\n            val\
    \ iTypeVal = iVal.getClass\n            val iType = iTypeVal.getName\n       \
    \     val iTypeValString = iTypeVal.getCanonicalName\n            // We need this\
    \ filtering for all types that we support\n            if (iType.equals(\"scala.Long\"\
    )) filteredList += v.toLong\n            if (iType.equals(\"scala.Double\")) filteredList\
    \ += v.toDouble\n            if (iType.equals(\"scala.Float\")) filteredList +=\
    \ v.toFloat\n            if (iType.equals(\"scala.Int\")) filteredList += v.toInt\n\
    \            if (iType.equals(\"scala.Char\")) filteredList += v.toChar\n    \
    \        if (iType.equals(\"scala.Short\")) filteredList += v.toShort\n      \
    \      if (iType.equals(\"scala.Byte\")) filteredList += v.toByte\n          \
    \  if (iType.equals(\"scala.Byte\")) filteredList += v.toShort\n            if\
    \ (iType.equals(\"scala.Array[Byte]\")) filteredList += v.asInstanceOf[Array[Byte]]\n\
    \            if (iType.equals(\"scala.Array[Short]\")) filteredList += v.asInstanceOf[Array[Short]]\n\
    \            if (iType.equals(\"scala.Array[Int]\")) filteredList += v.asInstanceOf[Array[Int]]\n\
    \            if (iType.equals(\"scala.Array[Long]\")) filteredList += v.asInstanceOf[Array[Long]]\n\
    \            if (iType.equals(\"scala.Map[Int,Int]\")) filteredList += v.asInstanceOf[Map[Int,Int]]\n\
    \            if (iType.equals(\"scala.Map[Long,Long]\")) filteredList += v.asInstanceOf[Map[Long,Long]]\n\
    \            if (iType.equals(\"scala.collection.immutable.Map\")) filteredList\
    \ += v.asInstanceOf[Map[Long,Long]]\n            if (iType.equals(\"scala.collection.immutable.Set\"\
    )) filteredList += v.asInstanceOf[Set[Long]]\n            if (iType.equals(\"\
    scala.collection.immutable.List\")) filteredList += v.asInstanceOf[List[Long]]\n\
    \            if (iType.equals(\"scala.collection.immutable.Queue\")) filteredList\
    \ += v.asInstanceOf[Queue[Long]]\n            if (iType.equals(\"scala.collection.immutable.Stack\"\
    )) filteredList += v.asInstanceOf[Stack[Long]]\n            if (iType.equals(\"\
    scala.collection.immutable.Iterable\")) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm9wlft4a.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm9wlft4a.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpm9wlft4a.scala:17:57 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            \e[33mif\e[0m (iType.equals(\e[31m\"scala.Long\"\e\
    [0m)) filteredList += v.toLong\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm9wlft4a.scala:17:62 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (iType.equals(\e[31m\"scala.Long\"\
    \e[0m)) filteredList += v.toLong\n\e[31m\e[31m   |\e[0m                      \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpm9wlft4a.scala:18:59 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (iType.equals(\e[31m\"scala.Double\"\
    \e[0m)) filteredList += v.toDouble\n\e[31m\e[31m   |\e[0m                    \
    \                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is\
    \ not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm9wlft4a.scala:18:64 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (iType.equals(\e[31m\"scala.Double\"\
    \e[0m)) filteredList += v.toDouble\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values flatMap (v => if (v.isInstanceOf[Integer])\
    \ v :: Nil else Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgw6ooh7f.scala:10:56\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m      values flatMap (\e[36mv\e\
    [0m => \e[33mif\e[0m (v.isInstanceOf[\e[35mInteger\e[0m]) v :: Nil \e[33melse\e\
    [0m Nil)\n\e[31m\e[31m   |\e[0m                                              \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \          Found:    (v : Any)\n\e[31m   |\e[0m                              \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.toList.map(_.toString.toLong).filter(_.toInt\
    \ == _).toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpm8c0p9c1.scala:10:52 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.toList.map(_.toString.toLong).filter(_.toInt\
    \ == _).toList\n\e[31m\e[31m   |\e[0m                                        \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case v\
    \ : Int => v.toLong\n            case _ =>\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6ge1ana.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _\
    \ =>\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m       \
    \            Found:    Unit\n\e[31m   |\e[0m                   Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Replace it with more generic\
    \ solution\n        values.filter(_.toString.toString.toIntOption.exists).map(_.toString.toString.toInt).flatten.flatten.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphxt3rfok.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        values.filter(_.toString.toString.toIntOption.exists).map(_.toString.toString.toInt).flatten.flatten.toList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (Int => Boolean) => Boolean\n\
    \e[31m   |\e[0m                      Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmphxt3rfok.scala:11:100 ----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        values.filter(_.toString.toString.toIntOption.exists).map(_.toString.toString.toInt).flatten.flatten.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0mno given instance\
    \ of type Int => IterableOnce[B] was found for parameter toIterableOnce of \e\
    [33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        values.foreach(v => if (v.isInstanceOf[Long]) result += v.toLong else\
    \ if (!v.isInstanceOf[Int]) throw new IllegalArgumentException(s\"Can't convert\
    \ $v to Long.\"))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9w731s3g.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.length == 0) List()\n    \
    \    else {\n            val (resultValues, remainingValues) = values.span(_.isInstanceOf[Long])\n\
    \            if (remainingValues.length == 0) resultValues\n            else {\n\
    \                val remainingValuesWithoutLongs = remainingValues.filter(x =>\
    \ !x.isInstanceOf[Long])\n                val remainingValuesWithLongsAsString\
    \ = remainingValuesWithoutLongs.map(_.toString)\n                val remainingValuesWithLongsAsList\
    \ = remainingValuesWithoutLongs.map(_.toList)\n                val remainingValuesWithLongsAsMap\
    \ = remainingValuesWithoutLongs.map(_.toMap)\n                remainingValuesWithLongsAsList\
    \ ++ filterIntegers(remainingValuesWithLongsAsMap)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4_i37nb.scala:13:45\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (remainingValues.length\
    \ == \e[31m0\e[0m) resultValues\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                Found:    (resultValues : List[Any])\n\e[31m   |\e[0m       \
    \                             Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpe4_i37nb.scala:17:87 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mremainingValuesWithLongsAsList\e\
    [0m = remainingValuesWithoutLongs.map(_.toList)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value toList\
    \ is not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4_i37nb.scala:18:86\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mremainingValuesWithLongsAsMap\e[0m = remainingValuesWithoutLongs.map(_.toMap)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                   value toMap is not a member of Any\n3 errors found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \ => Nil\n            case _ => values match {\n                case x :: xs if\
    \ (x.toString.isDigit) => xs.filter(_.toString.toLong == x.toString.toLong)\n\
    \                case x :: xs => filterIntegers(xs)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0ey9cq4.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m x :: xs \e[33mif\e[0m\
    \ (x.toString.isDigit) => xs.filter(_.toString.toLong == x.toString.toLong)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isDigit is not a member of\
    \ String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0ey9cq4.scala:13:65\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e\
    [0m x :: xs \e[33mif\e[0m (x.toString.isDigit) => xs.filter(_.toString.toLong\
    \ == x.toString.toLong)\n\e[31m\e[31m   |\e[0m                               \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m                              \
    \                      Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty) List()\n        else\
    \ {\n            def collect[T >: java.lang.Number](a: Traversable[T]): List[T]\
    \ =\n                a collect { case x: T => x } : java.util.List[T]\n\n    \
    \        def collect[T >: java.lang.Number](a: Iterable[T]): List[T] =\n     \
    \           a.toList collect { case x: T => x } : java.util.List[T]\n\n      \
    \      def collect[T >: java.lang.Number](a: Array[T]): List[T] =\n          \
    \      a.toList collect { case x: T => x } : java.util.List[T]\n\n           \
    \ // Test if values are numbers\n            def isInteger(a : Any) : Boolean\
    \ = {\n                collect(a).forall(_.isInstanceOf[java.lang.Integer])\n\
    \            }\n\n            val integersOnly = values filter { a =>\n      \
    \          collect(a).forall(isInteger(_))\n            }\n            integersOnly.asInstanceOf[List[Long]]\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96gu3mbe.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mdef\e[0m \e[36mcollect\e[0m[\e[35mT\e\
    [0m >: java.lang.Number](\e[36ma\e[0m: \e[35mIterable\e[0m[\e[35mT\e[0m]): \e\
    [35mList\e[0m[\e[35mT\e[0m] =\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m\
    \   |\e[0mcollect is already defined as \e[33mmethod\e[0m \e[35mcollect\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m16 |\e[0m                a.toList\
    \ collect { \e[33mcase\e[0m x: \e[35mT\e[0m => x } : java.util.List[\e[35mT\e\
    [0m]\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96gu3mbe.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mdef\e[0m \e[36mcollect\e[0m[\e[35mT\e\
    [0m >: java.lang.Number](\e[36ma\e[0m: \e[35mArray\e[0m[\e[35mT\e[0m]): \e[35mList\e\
    [0m[\e[35mT\e[0m] =\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mcollect\
    \ is already defined as \e[33mmethod\e[0m \e[35mcollect\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m19 |\e[0m                a.toList collect { \e\
    [33mcase\e[0m x: \e[35mT\e[0m => x } : java.util.List[\e[35mT\e[0m]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp96gu3mbe.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                a collect { \e[33mcase\e[0m x: \e[35mT\e\
    [0m => x } : java.util.List[\e[35mT\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Found:    scala.collection.mutable.Iterable[T]\n\
    \e[31m   |\e[0m           Required: java.util.List[T]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m           where:    T is a type in \e[33mmethod\e[0m \e[35mcollect\e\
    [0m with bounds >: Number\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp96gu3mbe.scala:23:24 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                collect(a).forall(_.isInstanceOf[java.lang.Integer])\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660013453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x match {\n      \
    \      case i : Int => true\n            case _ => false\n        }).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81y0vopm.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong)\n\e[31m\e[31m   |\e[0m     \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Initialize mutable list of integers\n\
    \        var intList : List[Long] = Nil\n        // Loop over given values\n \
    \       for(value <- values) {\n            // Make sure that value is not of\
    \ String type\n            if(value.asInstanceOf[String].length > 0)\n       \
    \         // If value is not of String type, then append it to mutable list\n\
    \                intList += value.asInstanceOf[Long]\n        }\n        // Return\
    \ list of integers\n        intList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwkk80s7s.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                intList += value.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \  value += is not a member of List[Long] - did you mean List[Long].!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case x:\
    \ Int => x.toLong\n            case _ => 0l\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzh_lljl.scala:17)\n\tat Problem.main(tmplzh_lljl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = values.filter(value =>\
    \ value match {\n            case i: Int => true\n            case _ => false\n\
    \        }).toList;\n        integers.map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvcnoe96x.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        integers.map(_.toLong)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case a ::\
    \ _ if a.isInstanceOf[Long] => a :: Nil\n            case _ :: tail => filterIntegers(tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphxnn79y3.scala:11:51\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m a\
    \ :: _ \e[33mif\e[0m a.isInstanceOf[Long] => a :: Nil\n\e[31m\e[31m   |\e[0m \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                                Found:    (a : Any)\n\e[31m \
    \  |\e[0m                                                   Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // For any scala value, check if it is\
    \ an Int and if so return the Long\n        values.filter(_ match {\n        \
    \    case scala.math.Int(x) => x % 1L == 0L\n            case _ => false\n   \
    \     }).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w6kqd08.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m scala.math.Int(x) => x %\
    \ \e[31m1L\e[0m == \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value Int is not a member of math\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6w6kqd08.scala:12:40 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m scala.math.Int(x) => x %\
    \ \e[31m1L\e[0m == \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Any, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w6kqd08.scala:14:17\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        }).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case x : Int if x.toLong\
    \ < Long.MaxValue => x.toLong case _ => 0 }.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpde4f0iq4.scala:14)\n\tat Problem.main(tmpde4f0iq4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def toLong(i: Any) : Long = i match {\n\
    \            case i: Int => i.toLong\n            case i: Long => i\n        \
    \    case _: String => 0L\n            case _: Map[Long,Long] => 0L\n        \
    \    case _: java.util.List[Long] => 0L\n            case _ => 0L\n        }\n\
    \        values.flatMap(toLong).filter(_.isInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7goveu4s.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        values.flatMap(toLong).filter(_.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    Long\n\e[31m   |\e[0m             \
    \          Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = values.filter(_ match\
    \ {\n            case i if i.getClass.getSimpleName.startsWith(\"Int\") => true\n\
    \            case _ => false\n        })\n        val converted = filtered.map(_.toLong)\n\
    \        converted.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsp3g1uad.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mconverted\e[0m = filtered.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toLong is not a member of Any, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case i: Int if Integer.valueOf(i).isInstanceOf[Long] =>\n                true\n\
    \            case _ =>\n                false\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpingxx8jw.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m11 |\e[0m            \e[33mcase\e[0m i: \e[35mInt\e[0m \e[33mif\e[0m Integer.valueOf(i).isInstanceOf[\e\
    [35mLong\e[0m] =>\n\e[31m12 |\e[0m                \e[31mtrue\e[0m\n\e[31m13 |\e\
    [0m            \e[33mcase\e[0m _ =>\n\e[31m14 |\e[0m                \e[31mfalse\e\
    [0m\n\e[31m15 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x match {\n      \
    \      case intVal : Int => true\n            case _ => false\n        }).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4cn6u1v.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong)\n\e[31m\e[31m   |\e[0m     \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprp5zb2fl.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mv\e[0m => v.isInstanceOf[\e\
    [35mLong\e[0m]).map(_.toLong)\n\e[31m\e[31m   |\e[0m                         \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = mutable.ListBuffer[Long]()\n\
    \        values.foreach(v => {\n            if(v == null || v.isInstanceOf[Int])\
    \ result += v.toLong\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeh9d_9hh.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft[List[Long]](List[Long]()){\n\
    \            case (acc, value) =>\n                if (value.isInstanceOf[Long])\n\
    \                    acc :+ value.asInstanceOf[Long]\n                else if\
    \ (value.isInstanceOf[Int])\n                    acc :+ value.asInstanceOf[Int]\n\
    \                else acc\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.trim.forall(_.toString.forall(_.toString.forall(_.toString.forall(_\
    \ == '0' || _.toString.forall(_.toString.forall(_ == '1' || _.toString.forall(_\
    \ == '2' || _.toString.forall(_ == '3' || _.toString.forall(_ == '4' || _.toString.forall(_\
    \ == '5' || _.toString.forall(_ == '6' || _.toString.forall(_ == '7' || _.toString.forall(_\
    \ == '8' || _.toString.forall(_ == '9'))))))))))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_u618sb3.scala:11:4 ----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_u618sb3.scala:10:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.trim.forall(_.toString.forall(_.toString.forall(_.toString.forall(_\
    \ == \e[31m'0'\e[0m || _.toString.forall(_.toString.forall(_ == \e[31m'1'\e[0m\
    \ || _.toString.forall(_ == \e[31m'2'\e[0m || _.toString.forall(_ == \e[31m'3'\e\
    [0m || _.toString.forall(_ == \e[31m'4'\e[0m || _.toString.forall(_ == \e[31m'5'\e\
    [0m || _.toString.forall(_ == \e[31m'6'\e[0m || _.toString.forall(_ == \e[31m'7'\e\
    [0m || _.toString.forall(_ == \e[31m'8'\e[0m || _.toString.forall(_ == \e[31m'9'\e\
    [0m))))))))))\n\e[31m\e[31m   |\e[0m                                         \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzb0ijes5.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzb0ijes5.scala:10:58 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case v: Long => true\n            case _ => false\n        }).map(_.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7xpa244.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong).toList\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map{\n            case i : String\
    \ =>\n                if(i.toInt == i) i.toLong\n                else 0l\n   \
    \         case i : Long =>\n                i\n            case i : Float =>\n\
    \                i.toInt\n            case i : Double =>\n                i.toInt\n\
    \            case i : List[_] => filterIntegers(i)\n            case i : Map[Long,\
    \ Long] => filterIntegers(i.values.toList)\n            case i : Option[_] =>\
    \ 0l\n            case _ => 0l\n        }.filter(_ != 0).filter(_ != 0l).filter(_\
    \ != 0f).filter(_ != 0d)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp38hy17vm.scala:12:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m(i.toInt == i) i.toLong\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \      Values of types Int and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val list = new collection.mutable.ListBuffer[Long]()\n\
    \        val iterator = values.iterator // Iterator[Any]\n        while (iterator.hasNext)\
    \ {\n            if (iterator.next().isInstanceOf[Long]) {\n                list\
    \ += iterator.next().asInstanceOf[Long]\n            }\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class scala.collection.mutable.HashMap cannot\
    \ be cast to class java.lang.Long (scala.collection.mutable.HashMap is in unnamed\
    \ module of loader java.net.URLClassLoader @dc24521; java.lang.Long is in module\
    \ java.base of loader 'bootstrap')\n\tat scala.runtime.BoxesRunTime.unboxToLong(BoxesRunTime.java:103)\n\
    \tat Problem$.filterIntegers(tmpxjdrn5hx.scala:14)\n\tat Problem$.main(tmpxjdrn5hx.scala:21)\n\
    \tat Problem.main(tmpxjdrn5hx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.startsWith(\"\
    [\")  &&  _.toString.endsWith(\"]\")).map { x =>\n            x.toString().replace(\"\
    [\", \"\").replace(\"]\", \"\").split(\",\").map(_.toLong).sum\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpczd8kao0.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.startsWith(\e[31m\"\
    [\"\e[0m)  &&  _.toString.endsWith(\e[31m\"]\"\e[0m)).map { \e[36mx\e[0m =>\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val nums    = values.filter(_.toString.toInt\
    \ == _).toList\n        val longNums = nums.filter(_.toString.toLong == _).toList\n\
    \        nums.map(_.toString.toLong).toList ::: longNums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps_jcr0t6.scala:10:36 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m    = values.filter(_.toString.toInt\
    \ == _).toList\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps_jcr0t6.scala:11:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlongNums\e[0m = nums.filter(_.toString.toLong == _).toList\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_jcr0t6.scala:12:8 ---------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        nums.map(_.toString.toLong).toList ::: longNums\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def filter(value: Any) : Boolean = {\n\
    \            val asInt : Int = value.asInstanceOf[Int]\n            asInt.isDefined\
    \ && asInt < Integer.MIN_VALUE && asInt > Integer.MAX_VALUE\n        }\n     \
    \   values.filter(filter(_)).toList.map(_.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4k4vppt9.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            asInt.isDefined && asInt < Integer.MIN_VALUE\
    \ && asInt > Integer.MAX_VALUE\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value isDefined is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4k4vppt9.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        values.filter(filter(_)).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val valuesInt = values.toList.filter(_.toString.matches(\"\
    [+-]?\\\\d+\"))\n        val valuesLong = valuesInt.map(_.toLong)\n        valuesLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7_1f196.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mvaluesLong\e[0m = valuesInt.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case i if i.isInstanceOf[Long] => true\n            case _ => false\n      \
    \  }).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu65zz_4g.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).map(_.toLong)\n\e[31m\e[31m   |\e[0m     \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Filter only integers\n        values\
    \ filter (_.toString match {\n            case \"Infinity\" | \"-Infinity\" |\
    \ \"NaN\" => false\n            case _ => true\n        }).toList map {\n    \
    \        // If value is integer, then convert it\n            x => x.toLong\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxd6ao59e.scala:11:23 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        values filter (_.toString \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => \n\e[31m\
    \   |\e[0m     _$1.toString\e[33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m\
    \   |\e[0m         \e[33mcase \e[0m\e[32m\"Infinity\"\e[0m | \e[32m\"-Infinity\"\
    \e[0m | \e[32m\"NaN\"\e[0m => \n\e[31m   |\e[0m           \e[31mfalse\e[0m\n\e\
    [31m   |\e[0m         \e[33mcase \e[0m_ => \n\e[31m   |\e[0m           \e[31mtrue\e\
    [0m\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxd6ao59e.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[36mx\e[0m\
    \ => x.toLong\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.forall(_.isDigit))\
    \ match {\n            case Nil => Nil\n            case x::xs => x :: filterIntegers(xs)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ii_31kv.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m x::xs\
    \ => x :: filterIntegers(xs)\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (x : Any)\n\e[31m   |\e\
    [0m                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val valuesToFilter = new mutable.HashSet[Any]()\n\
    \        valuesToFilter.add(values.head)\n        values.tail.foreach {\n    \
    \        case value : Any => valuesToFilter.add(value)\n            case value\
    \ : Long => valuesToFilter.add(value.toLong)\n            case value : Double\
    \ => valuesToFilter.add(value.toInt)\n            case value : Int => valuesToFilter.add(value.toLong)\n\
    \            case value : String => valuesToFilter.add(value.toLong)\n       \
    \     case value : Map => valuesToFilter.add(value.toLong)\n            case value\
    \ : List[Long] => valuesToFilter.add(value.toLong)\n        }\n        valuesToFilter.filter(_\
    \ > 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj_m1zamy.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mvaluesToFilter\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mAny\e[0m]()\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E056] Syntax Error:\
    \ /tmp/tmpj_m1zamy.scala:18:25 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mcase\e[0m value : Map => valuesToFilter.add(value.toLong)\n\
    \e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Missing type parameter for collection.mutable.Map\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match {\n           \
    \ case x : Int => x > 0\n            case _      => false\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwet4cxs.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m11 |\e[0m            \e[33mcase\e[0m x : \e[35mInt\e[0m => x > \e[31m0\e\
    [0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m _      => \e[31mfalse\e[0m\n\e\
    [31m13 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = values.filter(v => v.isInstanceOf[Long])\n\
    \        val result = filtered.map(_.asInstanceOf[Long]).toList\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case x : Int if (x %\
    \ 1) == 0L => x.toLong }.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpytveeugo.scala:14)\n\tat Problem.main(tmpytveeugo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case values\
    \ :List[Long] => values\n            case values :List[Long] => values\n     \
    \       case values :List[Int] => values.filter(_.toLong==values)\n          \
    \  case values :List[Float] => values.filter(_.toDouble==values)\n           \
    \ case values :List[Double] => values.filter(_.toDouble==values)\n           \
    \ case values :List[Any] => values.filter(_.toLong==values)\n            case\
    \ values :List[AnyVal] => values.filter(_.toLong==values)\n            case _\
    \ => values.filter(_.toLong==values)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpabo5pi8_.scala:13:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m values :List[Int] => values.filter(_.toLong==values)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Long and List[Int] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpabo5pi8_.scala:14:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m values :List[Float] => values.filter(_.toDouble==values)\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m Values of types Double and List[Float] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpabo5pi8_.scala:15:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m values :List[Double] => values.filter(_.toDouble==values)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Double and List[Double] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabo5pi8_.scala:16:54\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m values :List[Any] => values.filter(_.toLong==values)\n\e[31m\e[31m   |\e[0m\
    \                                                    ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabo5pi8_.scala:17:57\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e\
    [0m values :List[AnyVal] => values.filter(_.toLong==values)\n\e[31m\e[31m   |\e\
    [0m               "
  stdout: ''
  timestamp: 1660013469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap { x =>\n            if\
    \ (x eq null) List() else {\n                if (x.isInstanceOf[Int]) x match\
    \ { case l: Long => List(l.toLong) }\n                else if (x.isInstanceOf[Long])\
    \ List(x)\n                else Nil\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjbvja6e9.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (x eq \e[31mnull\e[0m) List()\
    \ \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue eq is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import reflect.Selectable.reflectiveSelectable\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjbvja6e9.scala:13:52\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (x.isInstanceOf[Long]) List(x)\n\e[31m\e[31m   |\e[0m      \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                             Found:    (x : Any)\n\e[31m   |\e\
    [0m                                                    Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values filter {\n            case x if\
    \ x match {\n                case  i: Int => i.toLong\n                case _\
    \ => false\n            } => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpufssk3md.scala:12:34\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m  i: Int => i.toLong\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:    Long\n\
    \e[31m   |\e[0m                                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val ret = new mutable.ListBuffer[Long]()\n\
    \        // TODO: this can be done better\n        values.foreach{\n         \
    \   case i : Long => ret.append(i)\n            case i : Int => ret.append(i.toLong)\n\
    \            case x => ret.append(x.toLong)\n        }\n        ret.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpel2drtbl.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toString.toInt).filter(_.toString.toInt\
    \ == _).toList.flatMap(_.toLong)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxf9pstfc.scala:10:44 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toString.toInt).filter(_.toString.toInt\
    \ == _).toList.flatMap(_.toLong)\n\e[31m\e[31m   |\e[0m                      \
    \                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxf9pstfc.scala:10:84 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toString.toInt).filter(_.toString.toInt\
    \ == _).toList.flatMap(_.toLong)\n\e[31m\e[31m   |\e[0m                      \
    \                                                            ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Found:    Long\n\e[31m\
    \   |\e[0m                                            Required: IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = values.filter(_.toString.length\
    \ < 10) // or some similar check\n        val toReturn = mutable.LinkedHashSet.empty[Long]\n\
    \        for(i <- integers)\n            if(i % 2 == 0)\n                toReturn\
    \ += i.toLong\n        toReturn.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq97qxrw8.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mtoReturn\e[0m = mutable.LinkedHashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq97qxrw8.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(i % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { a =>\n            if (a.isInstanceOf[Number])\
    \ a.asInstanceOf[Number].toLong\n            else a.toLong\n        }.filter(_\
    \ > 0).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxy3z0p31.scala:11:63 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (a.isInstanceOf[\e[35mNumber\e\
    [0m]) a.asInstanceOf[\e[35mNumber\e[0m].toLong\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue toLong is not a member of Number, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxy3z0p31.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e\
    [0m a.toLong\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of Any, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxy3z0p31.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        }.filter(_ > \e[31m0\e\
    [0m).distinct\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m  "
  stdout: ''
  timestamp: 1660013471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case v:\
    \ Double => v.toLong\n            case v: Float => v.toLong\n            case\
    \ v: Long => v\n            case v: Int => v.toLong\n            case v: String\
    \ => v.toLong\n            case v: Map[Long, Long] => (v._1).toLong, (v._2).toLong\n\
    \            case v: List[Long] => v.toLong\n            case _ => 0L\n      \
    \  }.filter(_ != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx84conix.scala:16:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m v: Map[Long, Long] => (v._1).toLong,\
    \ (v._2).toLong\n\e[31m\e[31m   |\e[0m                                       \
    \             ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx84conix.scala:16:42\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m v: Map[Long, Long] => (v._1).toLong, (v._2).toLong\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ _1 is not a member of collection.mutable.Map[Long, Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx84conix.scala:17:36 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m v: List[Long] => v.toLong\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toLong is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660013472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect {\n            case v\
    \ if v isInstanceOf[Int] => v.toLong\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5jbjor0n.scala:11:36 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m v \e[33mif\e[0m v isInstanceOf[Int]\
    \ => v.toLong\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\
    \e[31m   |\e[0m                                    expression expected but \e\
    [31m'['\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jbjor0n.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        }\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m    \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { v =>\n            v.forall(_.isInstanceOf[Int])\n\
    \        }.filter { _ => true }.map { _ => v.asInstanceOf[Long] }.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcv3nmz2m.scala:11:14 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            v.forall(_.isInstanceOf[\e[35mInt\e[0m])\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ forall is not a member of Any\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3nmz2m.scala:12:42\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        }.filter { _ => \e\
    [31mtrue\e[0m }.map { _ => v.asInstanceOf[Long] }.toList\n\e[31m\e[31m   |\e[0m\
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                               Not found: v\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def isInt(x : Any) = x match {\n    \
    \        case x if x.isInstanceOf[Int] => true\n            case _ => false\n\
    \        }\n\n        values filterNot { x => !isInt(x) } map { x => x.toLong\
    \ }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpod5ildfl.scala:15:50 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        values filterNot { \e[36mx\e[0m => !isInt(x)\
    \ } map { \e[36mx\e[0m => x.toLong }.toList\n\e[31m\e[31m   |\e[0m           \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \            Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m        \
    \                  I could not infer the type of the parameter x.\n1 error found\n"
  stdout: ''
  timestamp: 1660013469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filteredList = mutable.ListBuffer[Long]()\n\
    \        for (value <- values) {\n            if (value match {\n            \
    \    case v: Integer => filteredList += v.toLong\n                case _ => filteredList\
    \ += 0\n            }\n        }\n        filteredList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5bzeyxjw.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp5bzeyxjw.scala:10:27 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mfilteredList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(_.toString.toLong).filter(_.toString.isDigit)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrs66hj3.scala:10:34\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.flatMap(_.toString.toLong).filter(_.toString.isDigit)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Long\n\e[31m   |\e[0m                    \
    \   Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbrs66hj3.scala:10:60 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        values.flatMap(_.toString.toLong).filter(_.toString.isDigit)\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isDigit is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660013475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(_.toString.forall(_.matches(\"\
    [-+]?\\\\d+\")))\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsppyqus9.scala:10:40 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m      values.filter(_.toString.forall(_.matches(\e[31m\"\
    [-+]?\\\\d+\"\e[0m)))\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660013474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val (filteredValues : List[Long]) = \
    \ values.collect {\n            case v: Int if v < 0L || v > 0L => v.toLong\n\
    \            case v => throw new IllegalArgumentException(s\"Found $v with type:\
    \ ${v.getClass}\")\n        }\n        filteredValues\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Found 4 with type: class java.lang.Long\n\
    \tat Problem$$anon$1.applyOrElse(tmpgw2weqgf.scala:12)\n\tat scala.collection.immutable.List.collect(List.scala:267)\n\
    \tat Problem$.filterIntegers(tmpgw2weqgf.scala:12)\n\tat Problem$.main(tmpgw2weqgf.scala:18)\n\
    \tat Problem.main(tmpgw2weqgf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(x => {\n            x match\
    \ {\n                case Int => x.toLong\n                case Long => x.toLong\n\
    \                case _ =>\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdn3gewp4.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e[0m Int => x.toLong\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdn3gewp4.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m Long => x.toLong\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdn3gewp4.scala:14:23 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _ =>\n\e[31m\e[31m  \
    \ |\e[0m                       ^^\e[0m\n\e[31m   |\e[0m                      \
    \ Found:    Unit\n\e[31m   |\e[0m                       Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var res = List[Long]()\n        values.foreach{\n\
    \            case x: Int => res += x.toLong\n            case _: Float => ()\n\
    \            case _: Long => ()\n            case x: String => ()\n          \
    \  case x => res += x.toLong\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8m_ijzw6.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m x: Int => res += x.toLong\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \   value += is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8m_ijzw6.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x => res += x.toLong\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ += is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8m_ijzw6.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x => res += x.toLong\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.collect { case x: String if (x.toString.trim.isDigit)\
    \ => x.toLong }.distinct\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplq751l9h.scala:10:60 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.collect { \e[33mcase\e[0m x: \e[35mString\e\
    [0m \e[33mif\e[0m (x.toString.trim.isDigit) => x.toLong }.distinct\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isDigit is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660013475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.isInstanceOf[Long]).map(_.toString.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_93t5q63.scala:14)\n\tat Problem.main(tmp_93t5q63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ match { case i: Int =>\
    \ true; case _ => false })\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpguvq8shi.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ \e[33mmatch\e\
    [0m { \e[33mcase\e[0m i: \e[35mInt\e[0m => \e[31mtrue\e[0m; \e[33mcase\e[0m _\
    \ => \e[31mfalse\e[0m })\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def filterIntsImpl(value : Any) = {\n\
    \            if (value isInstanceOf[Int]) value.toLong else null\n        }\n\
    \        values.filter(filterIntsImpl)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjkix3ok3.scala:11:34 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (value isInstanceOf[Int]) value.toLong\
    \ \e[33melse\e[0m \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \             ^\e[0m\n\e[31m   |\e[0m                                  expression\
    \ expected but \e[31m'['\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjkix3ok3.scala:11:47 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m            \e[33mif\e[0m (value isInstanceOf[Int]) value.toLong \e[33melse\e\
    [0m \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjkix3ok3.scala:13:21 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        values.filter(filterIntsImpl)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.contains(\"\
    _$\") && !_.toString.contains(\"$\") && !_.toString.contains(\"List\")).map(_.toString.replace(\"\
    _$\", \"\").replaceFirst(\"^List\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxbg390wq.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.contains(\e[31m\"_$\"\
    \e[0m) && !_.toString.contains(\e[31m\"$\"\e[0m) && !_.toString.contains(\e[31m\"\
    List\"\e[0m)).map(_.toString.replace(\e[31m\"_$\"\e[0m, \e[31m\"\"\e[0m).replaceFirst(\e\
    [31m\"^List\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxbg390wq.scala:10:155\
    \ -------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.contains(\e\
    [31m\"_$\"\e[0m) && !_.toString.contains(\e[31m\"$\"\e[0m) && !_.toString.contains(\e\
    [31m\"List\"\e[0m)).map(_.toString.replace(\e[31m\"_$\"\e[0m, \e[31m\"\"\e[0m).replaceFirst(\e\
    [31m\"^List\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.toList flatMap { \n          \
    \  case x: List[Any] =>\n                x.toList flatMap { y: Any =>\n      \
    \              if(y.isInstanceOf[Int]) List(y.asInstanceOf[Int]) else List(()\
    \ => y)\n                }\n            case _: Any => List()\n        }.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0trpiuqt.scala:12:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                x.toList flatMap { \e[36my\e[0m: \e[35mAny\e\
    [0m =>\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0mparentheses are required around the parameter of a lambda\n\e[31m\
    \   |\e[0mThis construct can be rewritten automatically under -rewrite -source\
    \ 3.0-migration.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0trpiuqt.scala:11:12\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e\
    [0m x: List[Any] =>\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mMissing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not infer the type of\
    \ the parameter x$1 of expanded function:\n\e[31m   |\e[0mx$1 => \n\e[31m   |\e\
    [0m  x$1\e[33m match \e[0m\n\e[31m   |\e[0m    {\n\e[31m   |\e[0m      \e[33mcase\
    \ \e[0mx:\e[35mList\e[0m[\e[35mAny\e[0m] => \n\e[31m   |\e[0m        x.toList\
    \ flatMap \n\e[31m   |\e[0m          {\n\e[31m   |\e[0m            (y: \e[35mAny\e\
    [0m) => \n\e[31m   |\e[0m              {\n\e[31m   |\e[0m                (\e[33mif\
    \ \e[0m(y.isInstanceOf[\e[35mInt\e[0m]) List(y.asInstanceOf[\e[35mInt\e[0m])\e\
    [33m else \e[0m\n\e[31m   |\e[0m                  List(() => y)\n\e[31m   |\e\
    [0m                )\n\e[31m   |\e[0m              }\n\e[31m   |\e[0m        \
    \  }\n\e[31m   |\e[0m      \e[33mcase \e[0m_:\e[35mAny\e[0m => \n\e[31m   |\e\
    [0m        List()\n\e[31m   |\e[0m    }.\n2 errors found\n"
  stdout: ''
  timestamp: 1660013474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filteredValues = values.filter(_\
    \ match {\n            case n : Int =>\n                !(null | n.isInstanceOf[Double]\
    \ || n.isInstanceOf[Long])\n            case _ =>\n                false\n   \
    \     })\n        val numbers = filteredValues.toList.map(_ match {\n        \
    \    case n : Int =>\n                n.toLong\n            case n : Long =>\n\
    \                n\n            case _ =>\n                0L\n        })\n  \
    \      return numbers.toList.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplxyr2vr8.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                !(\e[31mnull\e[0m | n.isInstanceOf[\e\
    [35mDouble\e[0m] || n.isInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue | is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set asScala\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660013480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val valuesMap = values.toMap\n      \
    \  if (valuesMap.isEmpty) List()\n        else valuesMap.filter{case (_,v) =>\
    \ v.toInt == v.asInstanceOf[Long]}.map{case (k,v) => v.toLong}.distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuhpskmji.scala:10:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mvaluesMap\e[0m = values.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Any <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                    where:    K is\
    \ a type variable\n\e[31m   |\e[0m                                           \
    \   V is a type variable\n\e[31m   |\e[0m                                    .\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = Nil\n     \
    \   for (x <- values) {\n            if (x match {\n                case i: Int\
    \ => result += (i.toLong)\n                case _ => result += (0l)\n        \
    \    })\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvx1jk6x3.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvx1jk6x3.scala:13:38 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m                \e[33mcase\e[0m i: Int => result += (i.toLong)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \  value += is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvx1jk6x3.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _ => result += (\e[31m0l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values match {\n            case Nil\
    \  => Nil\n            case x :: Nil => x.toLong\n            case x :: xs =>\n\
    \                val asList = x.asInstanceOf[List[Long]]\n                asList\
    \ filter (x => x.toInt == x.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1b4n409.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m x :: Nil => x.toLong\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value.isInstanceOf[Long]).map(value.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o280h8l.scala:10:61 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mvalue\e[0m => value.isInstanceOf[\e\
    [35mLong\e[0m]).map(value.asInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: value\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val numbers = values.map(_.toLong).filter(_.isInstanceOf[Long])\n\
    \        numbers.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkeukp5fr.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = values.map(_.toLong).filter(_.isInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzb0ijes5.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzb0ijes5.scala:10:58 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_.toString.toInt == _).toList.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.toString.toIntOption.isDefined)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyboefb08.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mv\e\
    [0m => v.toString.toIntOption.isDefined)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_ == 1).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r39qegg.scala:10:36 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(_ == \e[31m1\e[0m).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toLong is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x=>x.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj_akzt7y.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mx\e\
    [0m=>x.isInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = mutable.ListBuffer.empty[Long]\n\
    \        for (value <- values) {\n            if (value match {\n            \
    \    case i: Int => filtered += i.toLong\n                case l : List[Long]\
    \ => filtered += l.head\n                case _ => filtered\n            })\n\
    \        }\n        filtered.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvrk2azg.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpbvrk2azg.scala:10:23 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mfiltered\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(_.toLong).filter(_.isInstanceOf[Long]).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkmm3843f.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.map(_.toLong).filter(_.isInstanceOf[\e\
    [35mLong\e[0m]).toList\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val mutableList = mutable.MutableList[Long]()\n\
    \        values.foreach(x => x match {\n            case _ : String => mutableList\
    \ += x.toLong\n            case _ : Number => mutableList += x.toLong\n      \
    \      case _ : Map[_,_] => mutableList += x._2.toLong\n            case _ : List[_]\
    \ => mutableList += x.toLong\n            case null => mutableList += null.toLong\n\
    \            case _ => ()\n        })\n        mutableList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1i738mtc.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmutableList\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6egz88n.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mv\e\
    [0m => v.isInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mAny\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values flatMap { x =>\n            x\
    \ match {\n                case x: String => x.toLong\n                case x:\
    \ Int => x.toLong\n                case x: Long => x\n                case x:\
    \ Double => x.toLong\n                case _ => sys.error(\"Unsupported type!\"\
    )\n            }\n        }.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwjmuiiri.scala:10:25 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values flatMap { \e[36mx\e[0m =>\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m              \
    \           I could not infer the type of the parameter x.\n1 error found\n"
  stdout: ''
  timestamp: 1660013479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = mutable.ArrayBuffer[Long]()\n\
    \        for (value <- values) {\n            if (value match {\n            \
    \    case x:Int => result += x.toLong\n                case _ => \n          \
    \  }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqj8blbe_.scala:16:8 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpqj8blbe_.scala:10:21 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqj8blbe_.scala:14:23 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m _ => \n\e[31m\e[31m   |\e\
    [0m                       ^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Unit\n\e[31m   |\e[0m                       Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val r = values.filter(_.isInstanceOf[Long])\n\
    \        if (values.size != r.size) throw new Exception(\"filterIntegers :: Non\
    \ list type elements detected\")\n        r.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fz0_wq8.scala:12:10\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        r.toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31mAny\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filteredValues: List[Long] = values.filter(_.toString.matches(\"\
    -?\\\\d+\")).map(_.toLong)\n        filteredValues.asInstanceOf[List[Long]]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9mt69ar.scala:10:91 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfilteredValues\e[0m: \e\
    [35mList\e[0m[\e[35mLong\e[0m] = values.filter(_.toString.matches(\e[31m\"-?\\\
    \\d+\"\e[0m)).map(_.toLong)\n\e[31m\e[31m   |\e[0m                           \
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toLong is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map { case v: Any => v.asInstanceOf[Long]\
    \ }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class scala.collection.mutable.HashMap cannot\
    \ be cast to class java.lang.Long (scala.collection.mutable.HashMap is in unnamed\
    \ module of loader java.net.URLClassLoader @dc24521; java.lang.Long is in module\
    \ java.base of loader 'bootstrap')\n\tat scala.runtime.BoxesRunTime.unboxToLong(BoxesRunTime.java:103)\n\
    \tat Problem$.filterIntegers$$anonfun$1(tmpvpv7j45d.scala:10)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\
    \tat Problem$.filterIntegers(tmpvpv7j45d.scala:10)\n\tat Problem$.main(tmpvpv7j45d.scala:14)\n\
    \tat Problem.main(tmpvpv7j45d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013483
