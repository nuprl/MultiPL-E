name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>>\
  \ countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n  \
  \  // (0l)\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        var count = 1L\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'a') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'B' || s.charAt(i) == 'b') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'C' || s.charAt(i) == 'c') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'D' || s.charAt(i) == 'd') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'e') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'F' || s.charAt(i) == 'f') count += 1\n        for (i<- s.indices) if (s.charAt(i)\
    \ == 'G' || s.charAt(i) == 'g') count += 1\n        count", "        if (s.isEmpty)\
    \ 0\n        else s.map(x => ((x =:= \"a\") || (x =:= \"e\") || (x =:= \"i\")\
    \ || (x =:= \"o\") || (x =:= \"u\"))).sum", "        // Count the number of uppercase\
    \ vowels in even indices.\n        // We use Map to do the counting.\n       \
    \ val vowelCounts = Map(\"a\" -> 0, \"e\" -> 0, \"i\" -> 0, \"o\" -> 0, \"u\"\
    \ -> 0)\n        var count = 0\n        for (i <- 0 until s.length)\n        \
    \    if (vowelCounts(s(i).toLowerCase) == vowelCounts(\"u\"))\n              \
    \  count += 1\n            else\n                vowelCounts(s(i).toLowerCase)\
    \ match {\n                    case \"a\" =>\n                        vowelCounts(\"\
    u\") = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"a\") = 0\n\
    \                    case \"e\" =>\n                        vowelCounts(\"u\"\
    ) = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"e\") = 0\n \
    \                   case \"i\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"i\") = 0\n \
    \                   case \"o\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"o\") = 0\n \
    \                   case \"u\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"u\") = 0\n \
    \                   case \"a\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"a\") = 0\n \
    \                   case \"e\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"e\") = 0\n \
    \                   case \"i\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"i\") = 0\n \
    \                   case \"o\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"o\") = 0\n \
    \                   case \"u\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"u\") = 0\n \
    \               }\n        vowelCounts", "        val vowels = \"aeiouAEIOU\"\n\
    \        val map = mutable.HashMap[Char, Int]()\n        s.toList\n          \
    \  .zipWithIndex\n            .foreach {\n                case (v, i) =>\n   \
    \                 if (i % 2 == 0 && vowels.indexOf(v) > -1) {\n              \
    \          map.update(v, map.getOrElse(v, 0) + 1)\n                    }\n   \
    \         }\n        map.values.sum", "        val vowels = mutable.Set(\"A\"\
    , \"E\", \"I\", \"O\", \"U\", \"a\")\n        s.toList foreach (x => {\n     \
    \       if (vowels.contains(x.charAt(0))) {\n                x match {\n     \
    \               case \"A\" | \"a\" => vowels += \"A\"\n                    case\
    \ \"E\" | \"e\" => vowels += \"E\"\n                    case \"I\" | \"i\" =>\
    \ vowels += \"I\"\n                    case \"O\" | \"o\" => vowels += \"O\"\n\
    \                    case \"U\" | \"u\" => vowels += \"U\"\n                 \
    \   case _ => vowels += x.charAt(0)\n                }\n            }\n      \
    \  })\n        vowels.toSet.size * (vowels.toSet diff \"a\").size", "        val\
    \ vowels = Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val upperCaseVowels = vowels.filter(vowel\
    \ => s match { case \"a\" => vowel == \"A\" })\n        val evenIndices = s filter\
    \ (_ isDigit) filter (_ % 2 == 0) map (_.toInt)\n        evenIndices.foldLeft(0)(_\
    \ + upperCaseVowels.size)", "        val vowelSet = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val upperSet = Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n     \
    \   val vowelSetIterator = vowelSet.iterator\n        s.flatMap(x => vowelSetIterator\
    \ ++ upperSet.iterator).count(x => x.toUpperCase == x)", "        var vowelCount\
    \ = 0\n        for (i <- s.indices) {\n            if (s(i) == 'A' || s(i) ==\
    \ 'a') {\n                if (s(i) mod 2 == 0)\n                    vowelCount\
    \ += 1\n            }\n        }\n        return vowelCount", "        // Step\
    \ 1: compute length\n        var len = s.length\n        // Step 2: create result\
    \ map\n        var result = new HashMap[Character, Long]()\n        // Step 3:\
    \ for each letter in the input string, increment result map\n        for (char\
    \ <- s) {\n            result + ((char match { case 'A' | 'a' => 0 }) + (char\
    \ match { case 'B' | 'b' => 1 }) + (char match { case 'C' | 'c' => 2 })) + (char\
    \ match { case 'D' | 'd' => 3 }) + (char match { case 'E' | 'e' => 4 }) + (char\
    \ match { case 'F' | 'f' => 5 }) + (char match { case 'G' | 'g' => 6 }) + (char\
    \ match { case 'H' | 'h' => 7 }) + (char match { case 'I' | 'i' => 8 }) + (char\
    \ match { case 'J' | 'j' => 9 }) + (char match { case 'K' | 'k' => 10 }) + (char\
    \ match { case 'L' | 'l' => 11 }) + (char match { case 'M' | 'm' => 12 }) + (char\
    \ match { case 'N' | 'n' => 13 }) + (char match { case 'O' | 'o' => 14 }) + (char\
    \ match { case 'P' | 'p' => 15 }) + (char match { case 'Q' | 'q' => 16 }) + (char\
    \ match { case 'R' | 'r' => 17 }) + (char match { case 'S' | 's' => 18 }) + (char\
    \ match { case 'T' | 't' => 19 }) + (char match { case 'U' | 'u' => 20 }) + (char\
    \ match { case 'V' | 'v' => 21 }) + (char match { case 'W' | 'w' => 22 }) + (char\
    \ match { case 'X' | 'x' => 23 }) + (char match { case 'Y' | 'y' => 24 }) + (char\
    \ match { case 'Z' | 'z' => 25 }))\n        }\n        // Step 4: return result\
    \ length\n        len", "        var evenCount = 0\n        for (i<-0 until s.length())\
    \ {\n            if (s(i).isLetter) if (s(i).isUpper) evenCount += 1\n       \
    \ }\n        (s.length()-evenCount) * evenCount", "        val vowels = Array(\"\
    A\", \"a\", \"B\", \"b\", \"C\", \"c\", \"D\", \"d\", \"E\", \"e\", \"F\", \"\
    f\", \"G\", \"g\", \"H\", \"h\", \"I\", \"i\", \"J\", \"j\", \"K\", \"k\", \"\
    L\", \"l\", \"M\", \"m\", \"N\", \"n\", \"O\", \"o\", \"P\", \"p\", \"Q\", \"\
    q\", \"R\", \"r\", \"S\", \"s\", \"T\", \"t\", \"U\", \"u\", \"V\", \"v\", \"\
    W\", \"w\", \"X\", \"x\", \"Y\", \"y\", \"Z\", \"z\")\n        var count = 0L\n\
    \        for (i <- 0 until s.length; if ((i % 2) == 0) {\n            if (vowels(i.toString.toUpperCase().charAt(0))\
    \ >= 'a')\n                count += 1L\n        }) count\n        count", "  \
    \      var vowels:mutable.Set[Char] = scala.collection.mutable.Set[Char]()\n \
    \       for (i <- 0 until s.length) \n            if (s(i) == 'a' || s(i) == 'e'\
    \ || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') vowels += s(i)\n        vowels.toList.length",
  "        var even = 0\n        var upper = 0\n        var evenChars = List[Char](s.charAt(2))\n\
    \        for (cc <- s.toCharArray) {\n            if (cc == 'a' || cc == 'e' ||\
    \ cc == 'i'\n            || cc == 'o' || cc == 'u') {\n                even +=\
    \ evenChars.indexOf(cc)\n            }\n            if (cc == 'B' || cc == 'D'\
    \ || cc == 'F' || cc == 'G') {\n                upper += 1\n            }\n  \
    \      }\n        (even + upper)", "        val even = s.filter( _.isEven) ; val\
    \ upper = even.map( _.toUpperCase )\n        val count = upper.filter( x => x\
    \ ==\"A\" || x == \"E\" || x == \"I\" || x == \"O\" || x == \"U\" ).length\n \
    \       (count)", "        val vowels = mutable.HashSet[Char]('a','e','i','o','u')\n\
    \        for (c <- s.toCharArray) {\n            if(vowels(c).nonEmpty) vowels(c)\
    \ += c // vowel count\n        }\n        vowels.toSet.count { case c => c.isUpperCase\
    \ } % 2L", "        var count : Long = 0\n        for (i <- 0 until s.length;\
    \ if (i % 2 == 0) {\n            if (\"AEIOU\".contains(s.charAt(i))) {\n    \
    \            count += 1\n            }\n        }) {\n        }\n        count",
  "        var count = 0l\n        for (i <- 0 to s.length-1) {\n            if (s.charAt(i)\
    \ == 'A' && i%2==0)\n                count = count + 1\n        }\n        count",
  "        // Split s into an array based on the separator \"Ef\".\n        // Then\
    \ filter out the even indices.\n        s.split(\"Ef\").filter(i => i % 2 == 0).length",
  "      val vowels = \"AEIOU\".toCharArray\n      val evenIndices = Vector(0 to s.length-1)\n\
    \      val count = mutable.Map[Int, Int]()\n      for (i <- evenIndices) {\n \
    \         count += vowels(i) -> vowels.count(e => e == s.charAt(i))\n      }\n\
    \      count.getOrElse(0, 0)", "      var counter = 0\n      var evenIndices =\
    \ mutable.Buffer.empty[Int]\n      for (i <- 0 until s.length; i = (i + 2)) {\n\
    \        if (s(i).toUpperCase == 'A' || s(i).toUpperCase == 'E') {\n         \
    \ if (s(i).nonEmpty) {\n            evenIndices += i\n            counter += 1\n\
    \          }\n        }\n      }\n      counter", "        val counts = mutable.Map.empty[String,\
    \ Long]\n        for ((pos, x) <- s.zipWithIndex) {\n            counts.getOrElse(x.toString,\
    \ 0L) match {\n                case 0 => counts += (x.toString -> 1L)\n      \
    \          case count => (counts(x.toString) + count)(1)\n            }\n    \
    \    }\n        counts.valuesIterator.sum", "        val c = s.toCharArray\n \
    \       val ev = c.filter(_ >= 'A' && _ <='Z')\n                    .filter(_\
    \ % 2 == 0)\n                    .map(_ % 26)\n        ev.length", "        var\
    \ count = 0\n        for (i <- 0 until s.length if s(i) == 'a') {\n          \
    \  if ((s(i) == s('A')) || (s(i) == s('a'))) {\n                count += 1\n \
    \           }\n        }\n        count", "        var res = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'A') {\n                res\
    \ += 1\n            }\n            if (s(i) == 'a') {\n                res +=\
    \ 1\n            }\n            if (s(i) == 'E') {\n                res += 1\n\
    \            }\n            if (s(i) == 'e') {\n                res += 1\n   \
    \         }\n            if (s(i) == 'I') {\n                res += 1\n      \
    \      }\n            if (s(i) == 'i') {\n                res += 1\n         \
    \   }\n            if (s(i) == 'O') {\n                res += 1\n            }\n\
    \            if (s(i) == 'o') {\n                res += 1\n            }\n   \
    \         if (s(i) == 'U') {\n                res += 1\n            }\n      \
    \      if (s(i) == 'u') {\n                res += 1\n            }\n        }\n\
    \        res", "        var count : Long = 0\n        for( i <- 0 until s.length\
    \ ) {\n            if( s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' ) {\n                count\
    \ += 1\n            }\n        }\n        \n        return count", "        val\
    \ map = mutable.HashMap.empty[String, Int]\n        for (i <- s.indices) {\n \
    \           val c = s(i)\n            if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') map(s(i) -> 1)\n        }\n        map.size", "      \
    \  var counter = 1\n        var i = 0\n        while (i < s.length)\n        \
    \    if (s(i).isUpper)\n                counter += 1\n            i += 1\n   \
    \     if (counter % 2 == 0)\n            1\n        else\n            0", "  \
    \      s.count(_ == 'A' || _ == 'a')", "        val vowels = Array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var count = 0L\n        for(i <- 0 until s.length)\
    \ {\n            if(vowels(i) % 2 == 0) {\n                count += s.length -\
    \ i - 1\n            }\n        }\n        count", "        var count = 1\n  \
    \      for (i <- 0 until s.length if s(i) == 'a') count += 1\n        for (i <-\
    \ 0 until s.length if s(i) == 'e') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'i') count += 1\n        for (i <- 0 until s.length if s(i) == 'o')\
    \ count += 1\n        for (i <- 0 until s.length if s(i) == 'u') count += 1\n\
    \        count", "        val count = mutable.HashMap.empty[Char, Long]\n    \
    \    for (i <- s.indices) {\n            if (s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n\
    \                if (count.contains(s.charAt(i))) {\n                    count(s.charAt(i))\
    \ += 1\n                }\n                else {\n                    count(s.charAt(i))\
    \ += 1\n                }\n            }\n        }\n        for (x <- count.keySet())\
    \ {\n            if (count(x) % 2 != 0) {\n                return 0l\n       \
    \     }\n        }\n        count(s.charAt(0)) + 1", "        var counter=0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U')\n\
    \                counter = counter + 1\n\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n                counter = counter\
    \ - 1\n        counter", "      val (even,odd) =  s span (_ % 2 == 0)\n      val\
    \ c = even.count{ _.isUpperCase }\n      if (odd.isEmpty) c\n      else c + countUpper(odd)",
  "        var count : Long = 0\n        for (i <- 0 to s.length - 1) {\n        \
    \    if (s(i) match {\n                case 'a' | 'A' | ... | 'Z' => count +=\
    \ 1\n                case _ =>\n            }\n        }\n        count", "  \
    \      val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count\
    \ = 1\n        for (i<-0 to s.length-2; i+=2L) {\n            if (vowels(s(i))\
    \ == 'U' && vowels(s(i+1)) == 'U') count += 1\n        }\n        count", "  \
    \      val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var i = 0\n        var\
    \ count : Long = 0\n        while (i < s.length) {\n            if (vowels.contains(s(i)))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val\
    \ n = 0l\n        for (i <- 0 until s.length / 2 by 2) {\n            if (vowels(2\
    \ * i) > vowels(2 * i + 1) && vowels(2 * i) != 'a'\n                && vowels(2\
    \ * i) != 'e' && vowels(2 * i) != 'i') {\n                n += 1\n           \
    \ }\n        }\n        n", "        var num = 0L\n        for (i <- 0 until s.length)\
    \ { \n            if(i%2 == 0){\n                if(s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u'){\n\
    \                    num += 1\n                }\n            }\n        }\n \
    \       return num", "        val a = Array('A'..'Z') ++ Array('a','o','u','I','O','U')\n\
    \        val r = new mutable.ArrayBuffer[Char]()\n        var i = 0\n        while\
    \ (i < s.length) {\n            val c = s(i)\n            if (a.contains(c))\n\
    \                r.add(c)\n            i += 1\n        }\n        if (s.length\
    \ % 2 == 0) (s.length - r.length) / 2 else r.length", "        val count = mutable.ArrayBuffer.empty[Int]\n\
    \        var count = 0\n        var i = 0\n        while (i < s.length) if (s(i).isUpper)\
    \ count += 1\n        if (count > 0) i = 0\n        while (i < s.length) if (s(i).isUpper)\
    \ count -= 1\n        count", "        val chars = \n                s.toList.map(c\
    \ => c match {\n                    case 'A'->1\n                    case 'a'->1\n\
    \                    case 'E'->1\n                    case 'e'->1\n          \
    \          case 'I'->1\n                    case 'i'->1\n                    case\
    \ 'O'->1\n                    case 'o'->1\n                    case 'U'->1\n \
    \                   case 'u'->1\n                    case 'Y'->1\n           \
    \         case 'y'->1\n                    case 'a'->1\n                    case\
    \ 'E'->1\n                    case 'e'->1\n                    case 'I'->1\n \
    \                   case 'i'->1\n                    case 'O'->1\n           \
    \         case 'o'->1\n                    case 'U'->1\n                    case\
    \ 'u'->1\n                    case 'Y'->1\n                    case 'y'->1\n \
    \                   case 'a'->1\n                    case 'E'->1\n           \
    \         case 'e'->1\n                    case 'I'->1\n                    case\
    \ 'i'->1\n                    case 'O'->1\n                    case 'o'->1\n \
    \                   case 'U'->1\n                    case 'u'->1\n           \
    \         case 'Y'->1\n                    case 'y'->1\n                    case\
    \ 'a'->1\n                    case 'E'->1\n                    case 'e'->1\n \
    \                   case 'I'->1\n                    case 'i'->1\n           \
    \         case 'O'->1\n                    case 'o'->1\n                    case\
    \ 'U'->1\n                    case 'u'->1\n                    case 'Y'->1\n \
    \                   case 'y'->1\n                    case 'a'->1\n           \
    \         case 'E'->1\n                    case 'e'->1\n                    case\
    \ 'I'->1\n                    case 'i'->1\n                    case 'O'->1\n \
    \                   case 'o'->1\n                    case 'U'->1\n           \
    \         case 'u'->1\n                    case 'Y'->1\n                    case\
    \ 'y'->1\n                    case 'a'->1\n                    case 'E'->1\n \
    \                   case 'e'->1\n                    case 'I'->1\n           \
    \         case 'i'->1\n                    case 'O'->1\n                    case\
    \ 'o'->1\n                    case 'U'->1\n                    case 'u'->1\n \
    \                   case 'Y'->1\n                    case 'y'->1\n           \
    \         case 'a'->1\n                    case 'E'->1\n                    case\
    \ 'e'->1\n                    case 'I'->1\n                    case 'i'->1\n \
    \                   case 'O'->1\n                    case 'o'->1\n           \
    \         case 'U'->1\n                    case 'u'->", "        var total = 0\n\
    \        var evenPos = -1\n        var oddPos = -1\n        val length = s.length\n\
    \        // Scan the string and keep track of every even and odd position\n  \
    \      for(i <- 0 until length) {\n            if (s.charAt(i) == 'A') {\n   \
    \             if (evenPos == -1) {\n                    evenPos = i\n        \
    \        } else if (evenPos == i) {\n                    total += 2\n        \
    \        } else {\n                    total += 1\n                }\n       \
    \     }\n            if (s.charAt(i) == 'B') {\n                if (evenPos ==\
    \ -1) {\n                    evenPos = i\n                } else if (evenPos ==\
    \ i) {\n                    total += 2\n                } else {\n           \
    \         total += 1\n                }\n            }\n            if (s.charAt(i)\
    \ == 'C') {\n                if (evenPos == -1) {\n                    evenPos\
    \ = i\n                } else if (evenPos == i) {\n                    total +=\
    \ 2\n                } else {\n                    total += 1\n              \
    \  }\n            }\n            if (s.charAt(i) == 'D') {\n                if\
    \ (evenPos == -1) {\n                    evenPos = i\n                } else if\
    \ (evenPos == i) {\n                    total += 2\n                } else {\n\
    \                    total += 1\n                }\n            }\n          \
    \  if (s.charAt(i) == 'E') {\n                if (evenPos == -1) {\n         \
    \           evenPos = i\n                } else if (evenPos == i) {\n        \
    \            total += 2\n                } else {\n                    total +=\
    \ 1\n                }\n            }\n            if (s.charAt(i) == 'F') {\n\
    \                if (evenPos == -1) {\n                    evenPos = i\n     \
    \           } else if (evenPos == i) {\n                    total += 2\n     \
    \           } else {\n                    total += 1\n                }\n    \
    \        }\n            if (s.charAt(i) == 'G') {\n                if (evenPos\
    \ == -1) {\n                    evenPos = i\n                } else if (evenPos\
    \ == i) {\n                    total += 2\n                } else {\n        \
    \            total += 1\n                }\n            }\n        }\n       \
    \ // Count all even indices, and subtract odd indices from count\n        total\
    \ += (length - evenPos)\n        total -= (length - oddPos)\n        return total",
  "        var cnt = 0\n        for (x <- 0 to s.length-1) {\n            if (s(x).matches(\"\
    [aeiou]\"))\n                cnt = cnt + 1\n            else\n               \
    \ if (s(x) == \"a\")\n                    cnt = cnt + 1\n        }\n        cnt",
  "        val vowels = \"AEIOUaeiou\"\n        var evenCount = 0\n        var upperCount\
    \ = 0\n        for (v <- 0 to s.length-1) {\n            if (vowels.contains(s.charAt(v)))\
    \ {\n                if ((v%2) == 0) {\n                    evenCount += 1\n \
    \               }\n                else {\n                    upperCount += 1\n\
    \                }\n            }\n        }\n        (evenCount * upperCount)",
  "        val vowels = Set(\"A\",\"a\",\"B\",\"b\",\"C\",\"c\",\"D\",\"d\",\"E\"\
    ,\"e\",\"F\",\"f\",\"G\",\"g\",\"H\",\"h\",\"I\",\"i\",\"J\",\"j\",\"K\",\"k\"\
    ,\"L\",\"l\",\"M\",\"m\",\"N\",\"n\",\"O\",\"o\",\"P\",\"p\",\"Q\",\"q\",\"R\"\
    ,\"r\",\"S\",\"s\",\"T\",\"t\",\"U\",\"u\",\"V\",\"v\",\"W\",\"w\",\"X\",\"x\"\
    ,\"Y\",\"y\",\"Z\",\"z\")\n        val vowelsCount = mutable.Map[String,Int]()\n\
    \        for (i <- 0 until s.length) { \n            if(vowels(s(i)) && s(i) =!\
    \ s(i+1))\n                vowelsCount(s(i))+=1\n        }\n        vowelsCount.filter(_._2\
    \ % 2 ==0).length", "        // If there are less than 6 chars, return the length\
    \ of the string.\n        if (s.length < 6) return s.length\n        val upperVowels\
    \ = mutable.HashSet[Char]()\n        for (i <- 0 until s.length - 2) {\n     \
    \       // If i is even, it's a vowel.\n            if (i mod 2 == 0) upperVowels\
    \ += s.charAt(i)\n        }\n        if (upperVowels.size == 0) 0L else upperVowels.size",
  "        var count = 0\n        for (i <- s.indices(s take 1).filter(x => s take\
    \ i indexOf x.toUpperCase == 0)) count += 2\n        count", "        val vowels\
    \ = mutable.Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\"\
    , \"u\")\n        val counts = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 0 to s.length - 1) {\n            if (i % 2 == 0)\n                if (vowels.contains(s.charAt(i)))\n\
    \                    counts += 1", "        var evenEvenIndex = 0\n        var\
    \ evenOddIndex = 0\n        var oddEvenIndex = 0\n        var oddOddIndex = 0\n\
    \        for (i <- 0 until s.length-1) {\n            val c = s(i)\n         \
    \   if (i%2==0)\n                if (c.toUpper == 'A')\n                    evenEvenIndex\
    \ += 1\n                else\n                    evenOddIndex += 1\n        \
    \    else\n                if (c.toUpper == 'A')\n                    oddEvenIndex\
    \ += 1\n                else\n                    oddOddIndex += 1\n        }\n\
    \        return evenEvenIndex + evenOddIndex + oddEvenIndex + oddOddIndex", " \
    \       def isUpper(a: Char) : Boolean = a >= 'A' && a <= 'Z'\n        def getEvenIndexes(s1:\
    \ String, s2: String): List[Int] = \n            List(0, 1, 4, 7, 10, 13, 16,\
    \ 19).filter(i => s1(i) ==  s2(i)).toList\n\n        val evenIndexes = getEvenIndexes(s,\
    \ s)\n        val upperIndexes = evenIndexes.filter(isUpper)\n        (upperIndexes.length\
    \ / 2).toLong", "        val vowels = \"aeiouAEIOU\".toCharArray\n        val\
    \ counter = mutable.Map[Char,Long]()\n        for (i <- 0 to s.length - 2 by 2)\n\
    \            for (j <- 0 to s.length - 2 by 2) if (vowels(i) == vowels(j)) counter(vowels(i))\
    \ = counter(vowels(i)) + 1\n        counter.values.toList.map(_.toLong).sum",
  "      val counts = mutable.HashMap[Int, Long]()\n      for (x <- 0 until s.length)\n\
    \        counts.put(x % 2 != 0 ? x : s.length - x, counts.getOrElse(x, 0L) + 1)\n\
    \      counts.lastOption.map(_._2)", "        val count = mutable.LinkedHashMap()\n\
    \        s.toList.filter(l => l.toString match {\n            case null | _ =>\
    \ false\n            case _ =>\n                val index = l.indexOf(\"a\")\n\
    \                if(index > 0){\n                    count.put(l.substring(0,\
    \ index),0l).update((l.substring(index).toLowerCase +\"a\").charAt(0),1l)\n  \
    \              }\n                else count.put(l,0l).update((l.charAt(0).toLowerCase\
    \ +\"A\").charAt(0),1l)\n        })\n        count.values.sum", "        val vowels\
    \ = \"aeiou\".toList.map(_.toUpperCase)\n        val evenChars = s.toList\n  \
    \          .zipWithIndex\n            .filter(c => c._2 % 2 == 0)\n          \
    \  .map { case (c, idx) => (vowels(idx % vowels.length), c) }\n            .countByValue()\n\
    \        evenChars.toLong", "        if (s.isEmpty) return 0\n        val vowels\
    \ = Set(\"A\", \"A\", \"E\", \"E\", \"I\", \"I\", \"O\", \"O\", \"U\", \"U\")\n\
    \        var count = 0\n        for (i <- 0 until s.length; if (s.charAt(i).isLetter)\
    \ {\n            if (vowels.contains(s.charAt(i))) {\n                count +=\
    \ i mod 2\n            }\n        }\n        count + 1", "      s.grouped(2).map(_.toUpperCase).count(e\
    \ => e == 'A' || e == 'E' || e == 'I' || e == 'O' || e == 'U') / (s.length / 2)",
  "        var evenIndex = 0\n        var count = 0\n        for (i <- 0 until s.length())\
    \ {\n            if (i % 2 == 0) {\n                if (s(i) equalsIgnoreCase\
    \ \"A\" || s(i) equalsIgnoreCase \"E\") {\n                    count += 1\n  \
    \              } else if (s(i) equalsIgnoreCase \"D\" || s(i) equalsIgnoreCase\
    \ \"B\") {\n                    count += 1\n                }\n            }\n\
    \            evenIndex += 2\n        }\n        count", "        var count = 0\n\
    \        var vowels = \"AEIOUaeiouAEIOUaeiou\"\n        var index = 0\n      \
    \  while(index < s.length){\n            if(s(index).equals(vowels(index))) count\
    \ = count + 1\n            index = index + 1\n        }\n        count", "   \
    \     val vowels = \"aeiouAEIOU\".toCharArray\n        val counts = mutable.Map[Int,\
    \ Int]()\n        for (i <- 0 until s.length) counts += (i.toInt/2 -> vowels(s.charAt(i))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(0)) + vowels(s.charAt(i).asInstanceOf[String].charAt(1))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(2)) + vowels(s.charAt(i).asInstanceOf[String].charAt(3))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(4)) + vowels(s.charAt(i).asInstanceOf[String].charAt(5))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(6)) + vowels(s.charAt(i).asInstanceOf[String].charAt(7)))\n\
    \        counts.filter { case (k, v) => (v /2 % 2 == 0) }.size", "        var\
    \ upper = 0\n        var i = s.length - 1\n        while (i >= 0 && i > 0) {\n\
    \            if ((s(i) - 32) < 'A') {\n                upper = upper + 1\n   \
    \         }\n            i -= 1\n        }\n        return upper", "        val\
    \ result = mutable.HashMap.empty[Long, Int]\n        s.split(\"\").zipWithIndex.foreach\
    \ { case (ch, index) =>\n            if (index%2 == 0) result += 1\n         \
    \   else if (ch.isUpper) result += 1\n        }\n        result.toList.max", " \
    \       val vowels = \"aeiouAEIOU\"\n        var counter = s.length\n        var\
    \ lastUpper = 0\n        for ( i <- 0 until s.length ) {\n            if ( vowels(i).equals(s.charAt(i))\
    \ ) {\n                lastUpper = i\n            }\n            if ( vowels(i).equals(s.charAt(i))\
    \ && vowels(i).equals(s.charAt(lastUpper)) ) {\n                counter += 1\n\
    \                lastUpper += 1\n            }\n        }\n        return counter",
  "        val vowels = \"AEIOUaeiou\"\n        val upperCaseVowels = vowels.count(_\
    \ == 'U')\n        val result = vowels.count(_ == 'U') + (s.length - upperCaseVowels)\n\
    \        result", "      val vowels = \"aeiouAEIOU\"\n      val counts = mutable.Map[String,\
    \ Long]()\n      for (c <- s)\n        if (vowels.indexOf(c) >= 0 && vowels.indexOf(c)\
    \ % 2 == 0) counts.update(c, 1)\n      counts.values.sum", "        val upper\
    \ = new mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n        \
    \    if (s(i) == s(i).toUpperCase)\n                upper += s(i)\n        (upper.size*2L)\
    \ filter (x => x % 2 == 0) reduceLeft (_+_)", "        val even = s.filter(_ %2\
    \ == 0).map { x => x.toUpperCase }\n        val evenCount = even.distinct.length\n\
    \        even.map { x => x.length }.sum + evenCount", "        var result = 0L\n\
    \        for((pos,c) <- s.zipWithIndex) if((pos % 2) == 0) result += 1L\n    \
    \    result", "        val counts = mutable.HashMap.empty[Int, Long]\n       \
    \ for (i <- 0 until s.length) {\n            var charCount = 1\n            val\
    \ charStr = s.charAt(i)\n            val isUpper = charStr match {\n         \
    \       case c if Character.isUpper(c) => true\n                case _ => false\n\
    \            }\n            if (isUpper) charCount = charCount + 1\n         \
    \   counts.putIfAbsent(charCount, 0l) += i\n        }\n        counts.getOrElse(0,\
    \ 0l) + 1", "        var count = 1\n        for(i <- 0 until s.length){\n    \
    \        if(s(i) == 'U'){\n                count += 1\n            }\n       \
    \     if(s(i) == 'A'){\n                count += 1\n            }\n          \
    \  if(s(i) == 'E'){\n                count += 1\n            }\n            if(s(i)\
    \ == 'I'){\n                count += 1\n            }\n        }\n        count",
  "        var result : Long = 1\n        for( i <- 0 until s.length ) {\n       \
    \     if( ((i + 2) % 2) == 0 ) { result += count( s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U' )\n\
    \            }\n        }\n        result", "        val vowels = mutable.Set[Char]('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.Map[Char, Long]()\n \
    \       for (i <- 0 until s.length - 1) {\n            val vowel = s(i)\n    \
    \        if (vowels.contains(vowel)) {\n                vowelsCount(vowel) +=\
    \ 1\n            }\n        }\n        vowelsCount.map { case (vowel, count) =>\
    \ vowel + count.toString }.toSet.size }", "        val vowels = Array('a', 'e',\
    \ 'i', 'o', 'u')\n        var count = 0\n        for(i <- 0 until s.length){\n\
    \            val c = s(i)\n            if(vowels(c) %2 == 0) count += 1\n    \
    \    }\n        count", "        val v = mutable.Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        var num = 0L\n        s.iterator\n            .zip(s.iterator)\n\
    \            .zip(s.iterator)\n            .foreach{ x =>\n                if\
    \ (x._1.toUpperCase == x._2.toUpperCase && v(x(0))) {\n                    num\
    \ += 1L\n                }\n            }\n        num", "        s.view.zipWithIndex.collect\
    \ {\n            case (str, index) if index % 2 == 0 => if (str.toUpperCase ==\
    \ \"A\" || str.toUpperCase == \"E\" || str.toUpperCase == \"I\" || str.toUpperCase\
    \ == \"O\" || str.toUpperCase == \"U\") 1l else 0l\n        }.sum", "        //\
    \ Only use 'toUpperCase' to get a string, not char\n        // So can easily count\
    \ even letters\n        val uppers = mutable.ListBuffer[String]();\n        for(i\
    \ <- 0 until s.length){\n            if(s(i).toUpperCase == \"A\" || s(i).toUpperCase\
    \ == \"E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase\
    \ == \"U\")\n                uppers += s(i);\n        }\n        uppers.length",
  "        // Use mutable collections as much as you can.\n        val counts = new\
    \ mutable.HashMap[String, Long]\n        for((i, c) <- s.zipWithIndex if i % 2\
    \ == 0) counts.update(c, 1, _ + _)\n        counts.values.sum", "        s.foldLeft(0l)\
    \ { (n, s) =>\n            val r = s.toCharArray.filter(c => c > 64 && c < 91).count\n\
    \            (if (n % 2 == 0) r else -1 * r) + 1\n        }", "        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val count = mutable.Map[Char,\
    \ Long]()\n        for (x <- s) {\n            if (vowels(x) && s(x) !=x) count(x)\
    \ = count(x) + 1\n        }\n        count.filter(_._2 % 2==0).length", "    \
    \    val count = new mutable.HashMap[String,Long]()\n        var i = 0\n     \
    \   while (i < s.length) {\n            val c = s(i)\n            count += (c==c.toUpperCase\
    \ && i%2==0) ? c -> 1L : c -> 0L\n            i += 1\n        }\n        count.valuesIterator.foldLeft((0L,0L))(\
    \ (a,b) => a+b)", "        var count = 0L\n        var lastIndex = -1L\n     \
    \   var nextIndex = -1L\n        for (c <- s) {\n            if (c.isUpper) {\n\
    \                count += 1L\n            }\n            else {\n            \
    \    if (nextIndex < lastIndex) {\n                    count += 1L\n         \
    \       }\n                lastIndex = nextIndex\n                nextIndex =\
    \ lastIndex\n            }\n        }\n        if (nextIndex < lastIndex) {\n\
    \            count += 1L\n        }\n        return count", "        s.flatMap\
    \ { x =>\n            if (x.toUpperCase == x) 1\n            else 0\n        }.foldLeft[Long](0)\
    \ { case ((acc, 0), elem) =>\n            acc + (if (elem.toUpperCase == elem)\
    \ 1 else 0)\n        }", "        // Your code here\n        val vowels = Set[Char]('a',\
    \ 'e', 'i', 'o', 'u')\n        val evenIndices = mutable.HashSet[Int]()\n    \
    \    for (char <- s) {\n            vowels contains char match {\n           \
    \     case true => {\n                    if (evenIndices contains char) 0 else\n\
    \                    evenIndices += char.toInt\n                }\n          \
    \      case _ => 0\n            }\n        }\n        evenIndices.length", " \
    \       val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\")\n       \
    \ val result = new mutable.ListBuffer[Long]\n        for (i <- s.indices) {\n\
    \            if (i % 2 == 0) {\n                result.add(vowels.count(vowels(i))\
    \ + 1)\n            }\n        }\n        result.toList().sum", "        var even\
    \ = 0L\n        for (i <- 0 to s.length-1) {\n            if (s(i) == 'A' || s(i)\
    \ == 'a') even = even + 1L\n            if (s(i) == 'E' || s(i) == 'e') even =\
    \ even + 1L\n            if (s(i) == 'I' || s(i) == 'i') even = even + 1L\n  \
    \          if (s(i) == 'O' || s(i) == 'o') even = even + 1L\n            if (s(i)\
    \ == 'U' || s(i) == 'u') even = even + 1L\n        }\n        even", "       \
    \ val counts = mutable.HashMap[Char, Long]()\n        for(i <- 0 until s.length)\
    \ \n            counts(s(i)).toLong = counts(s(i)).toLong + 1\n        counts.filter(_._2.toLong\
    \ % 2 == 0).sum", "        val upper = mutable.HashSet[Char]()\n        var count\
    \ : Long = 0\n        for (i <- 0 until s.length && count < s.length) if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U') {\n    \
    \        count = count + 1\n            if (s(i) == 'A' || s(i) == 'E') upper.add('a')\n\
    \            if (s(i) == 'I' || s(i) == 'O') upper.add('i')\n            if (s(i)\
    \ == 'U') upper.add('u')\n        }\n        count", "        def isVowel(c :\
    \ Char) : Boolean = {\n            c match {\n                case 'a' | 'e' |\
    \ 'i' | 'o' | 'u' =>  true\n                case _ =>  false\n            }\n\
    \        }\n        // Only the even indices are considered vowels.\n        val\
    \ vowels = s.toCharArray.take(s.length / 2).filter(isVowel).toSet\n        //\
    \ Count the vowels.\n        vowels.count(_ == 'a')", "        s.toCharArray.grouped(2)\n\
    \            .map { case Array(a, b) => if (isUpper(a)) 1L else 0L }\n       \
    \     .sum", '       s.sliding(2).filterNot(_ == null).map(_(2)).count(x => x.isUpper)',
  "        var count = 0L\n        var i = 0\n        while (i < s.length) {\n   \
    \         if (s(i) =:= 'A' && s(i+1) =:= 'A' && s(i+2) =:= 'A') {\n          \
    \      count += 1\n            }\n            i += 3\n        }\n        count",
  "        var cnt = 0L\n        for (i<- s.indices) {\n            if (i %% 2 ==\
    \ 0 && ((s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'))) cnt += 1\n        }\n        cnt", "        val vowels = \"aeiou\"\
    \n        var count = 0\n        for ( i <- 0 to s.length - 2 ) {\n          \
    \  if ( s(i) == vowels(0) )\n            if ( s(i) == vowels(1) )\n          \
    \  if ( s(i) == vowels(2) )\n            if ( s(i) == vowels(3) )\n          \
    \  if ( s(i) == vowels(4) )\n            if ( s(i) == vowels(5) )\n          \
    \  if ( s(i) == vowels(6) )\n            if ( s(i) == vowels(7) )\n          \
    \  if ( s(i) == vowels(8) )\n            if ( s(i) == vowels(9) )\n          \
    \  if ( s(i) == vowels(10) )\n            count += 1\n        }\n        count",
  "        val vowels: mutable.Set[Char] = mutable.Set('a','e','i','o','u')\n    \
    \    var counter : Long = 0\n        for ( i <- 0 to s.length - 2 ) {\n      \
    \      if ( vowels(s(i)) ) {\n                counter += 1\n            }\n  \
    \      }\n        counter", '        s.toLowerCase().toSeq.map(_.toUpperCase).filter(_.toString.length%2==0).count',
  "        var result = 1L\n        var vowels = \"aeiouAEIOU\".toCharArray\n    \
    \    s.toList.reverse.foreach { c =>\n            vowels((s.indexOf(c.toString)\
    \ + 2) % vowels.length).toList.foreach { vowel =>\n                if (c.equals(vowel))\
    \ result += 1\n            }\n        }\n        result", "        var count =\
    \ 0\n        var j = 0\n        for (i <- 0 until s.length()) {\n            if\
    \ (s(i) != s(i).toUpperCase) {\n                count += 1\n                j\
    \ = i\n            }\n        }\n        while (j+2 < s.length()) {\n        \
    \    if (s(j+2) == s(j+2).toUpperCase) {\n                count += 1\n       \
    \         j += 1\n            }\n            j += 1\n        }\n        count",
  "        val cs = mutable.HashSet[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'a') cs.add('u')\n            if (s(i) == 'B') cs.add('u')\n\
    \            if (s(i) == 'C') cs.add('u')\n            if (s(i) == 'd') cs.add('u')\n\
    \            if (s(i) == 'E') cs.add('u')\n            if (s(i) == 'f') cs.add('u')\n\
    \            if (s(i) == 'g') cs.add('u')\n        cs.size", "        var countEven\
    \ = 0\n        var countOdd = 1\n        var i = 0\n        while (i < s.length)\
    \ {\n            val c = s(i)\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           countEven += if (i%2 == 0) 1 else 0\n            } else {\n      \
    \          countOdd += if (i%2 == 0) 1 else 0\n            }\n            i +=\
    \ 1\n        }\n        countEven * countOdd", "        val chars = s.toCharArray\n\
    \        var count = 0L\n        var prevChar = -1\n        for (i <- 0 until\
    \ chars.length && count < s.length) \n        {\n            val currentChar =\
    \ chars(i)\n            if (currentChar >= 'a' && currentChar <= 'z') \n     \
    \       {\n                if (currentChar == prevChar) count += 1\n         \
    \       prevChar = currentChar\n            }\n        }\n        count", "  \
    \      val m = mutable.Map[Char, Int]()\n        for (i <- 0 until s.length step\
    \ 2) {\n            val c = s.charAt(i)\n            if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') m.get(c) += 1\n        }\n        m.values.sum",
  "        val evenIndices = mutable.Set(0, 2, 4, 6, 8)\n        val counter = new\
    \ scala.collection.mutable.HashMap[Int, Int]()\n        for (i <- 0 until s.length)\
    \ { \n            if (!evenIndices.contains(i)) {\n                counter.put(i.toInt,\
    \ 0)\n            }\n            if (s.charAt(i) == s.charAt(i).toUpper) {\n \
    \               counter(i.toInt) += 1\n            }\n        }\n        counter.map\
    \ { case (k, v) => k + v }.sum", "        val vowels = Set(\"a\",\"e\",\"i\",\"\
    o\",\"u\")\n        val evenIndices = for (i <- 0 until s.length) yield if (i%2\
    \ == 0) i+1 else 0\n        evenIndices.map { i => vowels(s(i)) }.sum", "    \
    \    var count : Long = 0\n        for (i <- 0 until s.length if s.charAt(i) ==\
    \ 'A' || s.charAt(i) == 'a') {\n            count += 1\n        }\n        \n\
    \        for (i <- 0 until s.length if s.charAt(i) == 'E' || s.charAt(i) == 'e')\
    \ {\n            count += 1\n        }\n        for (i <- 0 until s.length if\
    \ s.charAt(i) == 'I' || s.charAt(i) == 'i') { \n            count += 1\n     \
    \   }\n        for (i <- 0 until s.length if s.charAt(i) == 'O' || s.charAt(i)\
    \ == 'o') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'U' || s.charAt(i) == 'u') { \n            count += 1\n  \
    \      }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'G' ||\
    \ s.charAt(i) == 'g') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'D' || s.charAt(i) == 'd') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'B' || s.charAt(i) == 'b') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'F' ||\
    \ s.charAt(i) == 'f') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'G' || s.charAt(i) == 'g') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'B' || s.charAt(i) == 'b') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'E' ||\
    \ s.charAt(i) == 'e') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'A' || s.charAt(i) == 'a') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'I' || s.charAt(i) == 'i') { \n            count += 1\n  \
    \      }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'o') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'U' || s.charAt(i) == 'u') { \n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'G' || s.charAt(i) == 'g') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'D' ||\
    \ s.charAt(i) == 'd') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'B' || s.charAt(i) == 'b') {\n\
    \            count += 1\n        }\n        ", "        s.toUpperCase.count(_\
    \ == 'A')", "        // Convert s to a mutable StringBuilder\n        val sb =\
    \ new StringBuilder(s)\n        // Initialize a mutable.HashMap of vowels\n  \
    \      val vowelsMap = mutable.HashMap[Char, Long]()\n        // Initialize a\
    \ mutable counter\n        var count = 0L\n        // Iterate over all characters\
    \ of s\n        for (i <- 0 until s.length()) {\n            val c = s.charAt(i)\n\
    \            // If the character is a vowel, increment the counter\n         \
    \   if (vowelsMap.getOrElse(c, 0) == 0) count++\n            // Otherwise, if\
    \ the character is an uppercase vowel, update the counter\n            else vowelsMap(c)\
    \ = vowelsMap(c) + 1\n        }\n        // Return the count\n        count",
  "        val counts = mutable.Map[Int, Long]()\n        for (i <- s.indices) if\
    \ (i % 2 == 0) counts += ((i / 2), 1) else counts += ((i / 2) + 1, 0)\n      \
    \  counts.map(_._2).sum", "        var count = 0L\n        var even = false\n\
    \        for( i <- 0 until s.length ) {\n            if( i%2 == 0 ) {\n      \
    \          var v = s.charAt(i)\n                if( v.toUpperCase == 'A' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'B' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'C' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'D' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'F' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'G' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'H' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'I' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'J' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'K' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'L' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'M' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'N' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'O' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'P' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'Q' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'R' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'S' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'T' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.to", "        var count = 1L\n        for (i<- 0 to s.length-1;\
    \ i>= 0L; i -= 2L) {\n            if (s(i) == s(i+1).toUpper && s(i) != s(i+2).toUpper)\n\
    \                count += 1;\n        }\n        count", "        s.toList.zipWithIndex.flatMap\
    \ { case (c,i) => \n          if(i % 2 == 0) c.toString.toUpper else c\n     \
    \   }.count( _.isUpper)", "        val map = mutable.Map[Int, Int]()\n       \
    \ for (i <- 0 until s.length)\n            if (s(i).isUpper)\n               \
    \ map.getOrElse(i, 0) + 1\n            else map.getOrElse(i, 0)", "        //\
    \ count vowels in even indices\n        // [a, b, c, d, e, f] will return 1l for\
    \ countUpper((\"aBCdEf\"))\n        var cnt = 0\n        var oddIndices = mutable.ListBuffer.empty[Int]\n\
    \        var evenIndices = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \           else {\n                if(oddIndices.isEmpty)\n                 \
    \   oddIndices = scala.collection.mutable.ListBuffer(0)\n                else\n\
    \                    oddIndices += -1\n                cnt += s.charAt(i).toLower.toList.count(ch\
    \ => ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n        \
    \    }\n        cnt += (s.length - evenIndices.last)\n        cnt += (s.length\
    \ - oddIndices.last)\n        cnt", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        var sum = 0\n        for ( i <- 0 until s.length)\n\
    \          if (vowels(s(i).toChar) == true)\n            sum += (i+2)*(i%2 ==\
    \ 0L)\n        sum", "        val l = new mutable.ListBuffer[Char]()\n       \
    \ for(i <- 0 to s.length - 1) if(s(i) == 'a') l.append('e')\n        else l.append(s(i))\n\
    \        if(l.length == 1) (l.head == 'e') * (1 +: l.toList)\n        else l.toList.count(_\
    \ == 'e')", "        // Using tail recursion, we can write this much more concisely:\n\
    \        // def countUpper(s: String) : Long = { def count(c: Char, acc: Long):\
    \ Long =\n        // if (c == c) acc else count(c, acc + 1) }\n        s.reverse.count(c\
    \ => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')", "        // Complete\
    \ the function body.\n        val len = s.length\n        var n = 0\n        for\
    \ ( i <- 0 until len; if (i % 2 == 0) ) n += ( if( s.charAt(i) == 'a' ) 1 else\
    \ 0 );\n        return n", "        val counts = mutable.Map[Boolean, Int]()\n\
    \        for (i <- 0 to s.length-1) {\n            val c = s.charAt(i).toUpper\n\
    \            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \                counts(c) += 1\n            }\n        }\n        counts.foldLeft(0l)(_\
    \ + _._2)", "        val m = mutable.ListBuffer.empty[String]\n        for(i <-\
    \ 0 until s.length)\n        {\n            if(s(i) match {\n                case\
    \ 'a' => \n                case 'e' =>\n                case 'i' =>\n        \
    \        case 'o' =>\n                case 'u' =>\n                case 'A' =>\n\
    \                case 'E' =>\n                case 'I' =>\n                case\
    \ 'O' =>\n                case 'U' =>\n                    m += s(i)\n       \
    \         } else\n                    m += s(i)\n            }\n        }\n  \
    \      val vowels = m.count(_ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' || _\
    \ == 'u')\n        (vowels % 2 == 0)", "        val evenIndices = s.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        evenIndices.count(_ == 'A')", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until s.length\
    \ - 1) {\n            if (i % 2 == 0) {\n                if (vowels(s(i).toUpperCase.charAt(0))\
    \ != vowels(s(i).toLowerCase.charAt(0))) {\n                    count += 1\n \
    \               }\n            }\n        }\n        count", "        val upperCaseVowels\
    \ = \"aeiouAEIOU\".toSet\n        var count = 0\n        for (str <- s) {\n  \
    \          if (str.nonEmpty && upperCaseVowels.contains(str.charAt(0))) {\n  \
    \              count += 1\n            }\n        }\n        count", "       \
    \ val vowels = \"AEIOUaeiou\".toCharArray\n        var i = 0\n        var count\
    \ = 0\n        while (i < s.length && count < vowels.length) {\n            if\
    \ (s(i) == vowels(count)) {\n                count += 1\n            }\n     \
    \       i += 1\n        }\n        count", "        val len = s.length\n     \
    \   var count = 0L\n        for(i <- 0 until len) {\n            if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'a') {\n                if (i % 2 == 0) count += 1L\n\
    \            }\n        }\n        count", "        val counts : mutable.HashMap[Char,\
    \ Int] = mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length()) {\n\
    \            counts(s(i)) = (count(s, i) & 1 === 0)\n        }\n        counts.values.sum",
  "        val counts = mutable.HashMap[Char, Long]()\n        for (ch <- s) {\n \
    \           if (!counts.contains(ch)) {\n                counts.put(ch, 1L)\n\
    \            } else {\n                counts(ch) += 1\n            }\n      \
    \  }\n        for (ch <- counts.keys) {\n            if (counts(ch) % 2 == 0)\
    \ {\n                counts(ch) -= 1\n            }\n        }\n        counts.values.sum",
  "        var count = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n  \
    \          if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n        }\n        count",
  "        var count = 0L\n        for (i <- 0 until s.length if s.charAt(i) == 'A')\
    \ {\n            count = count + 1\n        }\n        val vowels: mutable.Set[Char]\
    \ = scala.collection.mutable.Set('A', 'E', 'I', 'O', 'U')\n        for (i <- 0\
    \ until s.length if vowels.contains(s.charAt(i))) {\n            count = count\
    \ + 1\n        }\n        count", "        val l = s.length\n        val r = new\
    \ Array[String](l)\n        var numUpper = 0\n        for( i <- 0 until l ) r(i)\
    \ = s(i)\n        for(i <- 0 until l) if( s(i).isUpperCase && r(i) isUpperCase\
    \ ) numUpper+=1\n        numUpper", "        val vowels = \"aeiou\"\n        var\
    \ count = 0L\n        for ( i <- 0 until s.length if s.charAt(i) == vowels.charAt(i)\
    \ ) {\n            if ( i % 2 == 0 ) count += 1L\n        }\n        count", " \
    \       val numUpper = 0\n        for (i <- 0 until s.length)\n            if\
    \ (s(i) == 65 || (s(i) == 66 || (s(i) == 67 || s(i) == 68))\n                numUpper\
    \ += 1\n\n        s.length * numUpper", "      val result = scala.collection.mutable.ListBuffer[Char]()\n\
    \      val upperVowel = Array('a','e','i','o','u').toSet\n      def upperChar(i\
    \ : Int) : Int = if (i >=0 && i < s.length) s.charAt(i).toLower else 0\n     \
    \ for(i <- 0 until s.length) result ++= {\n        if (i % 2 == 0) result.add(upperChar(i))\n\
    \        else upperVowel(upperChar(i))\n      }\n      result.size", "       \
    \ var count = 0L\n        for (i <- 0 until s.length) {\n            val v = s(i)\n\
    \            if ('A' <= v && v <= 'Z')\n                if ('a' <= v && v <= 'z')\
    \ count + 1\n        }\n        count", "        val vowels = mutable.Set(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n        val evens = mutable.Set(2, 3, 4)\n    \
    \    var count = 0\n        s.toCharArray.zipWithIndex.foreach { case (c, i) =>\
    \ if (vowels(c) && evens(i % 2)) count += 1; c }\n        count", "        val\
    \ vowels = Set(\n            \"A\",\n            \"a\",\n            \"E\",\n\
    \            \"e\",\n            \"I\",\n            \"i\",\n            \"O\"\
    ,\n            \"o\",\n            \"U\",\n            \"u\"\n        )\n    \
    \    var count = 0\n        for (i <- 0 until s.length if vowels(s(i)))\n    \
    \        count += (2 until s.length)(i) % 2 == 0\n        count", "        var\
    \ upperCaseVowelCount = 1\n        for (i <- 0 to s.length - 1) {\n          \
    \  if (s(i).isUpper) {\n                if (s(i).isEven && s(i) != s(i + 1)) {\n\
    \                    upperCaseVowelCount += 1\n                }\n           \
    \ }\n        }\n        return upperCaseVowelCount", "        val vowels = \"\
    aeiou\".toSet\n        val ev = s.filter(x => x isUpper && vowels(x.toLower)).toList\n\
    \        val evens = ev.indices.filter(x => x % 2 == 0)\n        ev.count(x =>\
    \ vowels(x.toLower)).toLong", "        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        for(i <- 0 until s.length)\n          if(i % 2 == 0)\n      \
    \      counts.put(s(i), counts.getOrElse(s(i), 0) + 1L)\n        (counts.getOrElse(s,\
    \ 0L) -> 0L)\n      }\n    def main(args: Array[String]) {\n        assert(countUpper((\"\
    aBCdEf\")) === (1L))\n        assert(countUpper((\"abcdefg\")) === (0L))\n   \
    \     assert(countUpper((\"dBBE\")) === (0L))", "        var counter = 0\n   \
    \     var evenIndex = -1\n        var vowels = scala.collection.mutable.Set[Char]()\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) == vowels.contains(0))\
    \ counter++\n            if (s(i) != vowels.contains(0)) {\n                if\
    \ (evenIndex == -1) evenIndex = i\n                vowels += s(i)\n          \
    \  } else {\n                if (evenIndex == i) counter++\n            }\n  \
    \      }\n        if (evenIndex != -1) counter++\n        counter.toLong", " \
    \       val res = mutable.Map[Int, Long]()\n        for (i <- s.indices)\n   \
    \       if (s(i) == 'a') res(i) = res(i) + s.count(_ == 'A')\n          else if\
    \ (s(i) == 'A') res(i) = res(i) + s.count(_ == 'a') || res(i)\n          else\
    \ res(i) = 0\n        res.maxBy(_._2) // 0l -> 0", "        val len = s.length\n\
    \        var c = 0\n        // This implementation is faster than the one below,\
    \ but iterates over all even indices \n        // once and checks them at once.\
    \ Also, it is shorter.\n        s.grouped(len/2).flatMap(_(_, 2)).count({case\
    \ (c1, c2) => \n            if(c1 == 'A' || c2 == 'A') 1\n            else c1.toUpper\
    \ == c2.toUpper\n        }) == 0", "        val c = s.toList\n        c.filter(x\
    \ => x % 2 == 0).map(x => x.toUpperCase).count(x => x.contains(\"A\"))", "   \
    \     val lowerCase = s.toLowerCase\n        val vowels = \"aeiou\".toList\n \
    \       val evenIndices = lowerCase.indices.filter(_%2 == 0)\n        val upperIndices\
    \ = lowerCase.indices.filter(_%2 == 1)\n        val evenLowerCaseIndices = evenIndices.flatMap(_=>lowerCase(_))\n\
    \        val counts = evenLowerCaseIndices.map(lowerCase => vowels.count(lowerCase\
    \ == \"a\")).toList\n        val evenAndEvenCount = counts.sum\n        val evenAndEvenCountAsString\
    \ = evenAndEvenCount.toString\n        val evenAndEvenCountAsLong = evenAndEvenCountAsString.toLong\n\
    \        val evenAndEvenCountAsLongAsString = evenAndEvenCountAsLong.toString\n\
    \        return evenAndEvenCountAsLongAsString", "        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length) if (s(i).isUpper) evenIndices += i\n    \
    \    evenIndices.length / 2", "        val vowelMap : mutable.Map[String, Long]\
    \ = mutable.Map()\n        var count = 0L\n        for (i <- 0 until s.length\
    \ && s.charAt(i) != 'a') vowelMap(s.charAt(i)) = vowelMap(s.charAt(i)) + 1\n \
    \       for (i <- 0 until s.length && s.charAt(i) != 'z' && vowelMap(s.charAt(i))\
    \ > 0) vowelMap(s.charAt(i)) = vowelMap(s.charAt(i)) - 1\n        for (i <- 0\
    \ until s.length && vowelMap(s.charAt(i)) > 0) count = count + vowelMap(s.charAt(i))\n\
    \        count", "        val vowels = mutable.ArrayBuffer( 'a', 'e', 'i', 'o',\
    \ 'u' )\n        val count = mutable.ArrayBuffer( 0l )\n\n        for ( i <- 0\
    \ until s.length ) {\n            val j = s.charAt(i).toLowerCase\n          \
    \  if ( vowels.contains(j) ) count.update( count.getOrElse( j ) + 1 )\n      \
    \  }\n\n        count.getOrElse( 0l )", "        var total = 0\n        for (i\
    \ <- 0 until s.length if i % 2 == 0) {\n            total += s.charAt(i).toUpperCase\
    \ == s.charAt(i) ? 1 : 0\n        }\n        total", "        if (s.isEmpty) 0\n\
    \        else s.map(x => if (x.toUpperCase == 'A') 1 else 0).sum", "        val\
    \ upperCaseVowels = scala.collection.mutable.HashSet[Char]()\n        def upd(s:\
    \ String, i: Int, c: Char): Boolean = {\n            if (i % 2 == 0)\n       \
    \         upperCaseVowels += c\n            else\n                val index =\
    \ s.indexOf(c, i)\n                if (index != -1)\n                    upd(s,\
    \ index + 1, c)\n                true\n        }\n        upd(s, 0, 0)\n     \
    \   upperCaseVowels.size", "        var count : Long = 0\n        var i : Int\
    \ = s.length()\n        while (i >= 0) {\n            if (s(i).toUpperCase ==\
    \ 'A') {\n                if (i % 2 == 0) {\n                    count += 1\n\
    \                }\n            }\n            i -= 1\n        }\n        count",
  "        val vowels = \"aeiou\"\n        val oddIndices = List(1,3,5,7,9,11,13,15,17,19)\n\
    \        val evenIndices = oddIndices filter (_ % 2 == 0)\n        val uppers\
    \ = oddIndices.map (_.toUpperCase).toSet\n\n        val totalUppers = evenIndices.foldLeft(0)\
    \ {\n            (acc, _) => acc + (uppers(s(acc)).toLong)\n        }\n\n    \
    \    totalUppers", "        val vowels = \"AEIOUaeiou\"\n        val vowelsMap:\
    \ Map[Char, Long] = vowels.toList.toMap\n        val vowelsIndex = s.toList.toSet\n\
    \        val evenIndexes = (0 until s.length).filter(i => i % 2 == 0)\n      \
    \  evenIndexes.foreach { i =>\n            vowelsIndex.foreach(c => {\n      \
    \          if (vowelsMap(c).equals(0L)) {\n                    vowelsMap(c) =\
    \ vowelsIndex.count(c => c == c)\n                }\n            })\n        }\n\
    \        vowelsMap.keySet map vowelsMap.getOrElse { 0L }", "        if (s.length\
    \ < 2)\n            return 0\n\n        var count = 0L\n        var lastUpper\
    \ = s.charAt(s.length-1)\n        for ((idx, char) <- s.sliding(2).toList) {\n\
    \            if (char == 'A' && lastUpper != 'a') {\n                count +=\
    \ 1\n            }\n            lastUpper = char\n        }\n        count", " \
    \       var count = 0l\n        var index = s.length\n        while (index > 0)\
    \ {\n            if (s.charAt(index) == 'A') {\n                if (s.charAt(index\
    \ + 1) == 'A') {\n                    count += 1l\n                }\n       \
    \     }\n            index -= 1\n        }\n        count", "        val evens\
    \ = mutable.Set[Int]()\n        for (v <- 0 to s.length - 1) {\n            if\
    \ (s(v) match {\n                case 'a' -> evens += 0\n                case\
    \ 'e' -> evens += 0\n                case 'i' -> evens += 0\n                case\
    \ 'o' -> evens += 0\n                case 'u' -> evens += 0\n                case\
    \ _ -> evens += 1\n            }) even else evens += 0\n        }\n        evens.size",
  "        def countVowels(i: Int) : Long = s.filter(_.isUpper)(i) match {\n     \
    \       case None => 0\n            case Some(c) => if (c == 'e') 1 else 0\n \
    \       }\n        s.toList zip s.tail.toList map { case (c, i) => (i, c) } groupBy\
    \ { _._1 } map { case (i, v) => (v.map(_._2)(0), i) }\n                .map(_._2).sum",
  "        val counts = mutable.Map[String, Int]()\n        for(i <- 0 until s.length\
    \ / 2){\n            if(s.charAt(i).toUpper == s.charAt(i + 2).toUpper){\n   \
    \             counts += (s.substring(i,i + 2) -> 1)\n            }\n        }\n\
    \        counts.toMap.size", "      val upperVowels = mutable.Set[Char](\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n      val evenIndices = mutable.HashSet[Int](0)\n\
    \n      for (i <- 0 until s.length)\n        if (i % 2 == 0 && upperVowels(s(i)))\
    \ {\n          evenIndices += i\n        }\n\n      evenIndices.size", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val vowelSet = vowels.toSet\n       \
    \ val res = mutable.Set.empty[Int]\n        for (i <- 0 until s.length)\n    \
    \        if (vowelSet(i) match {\n                case _ if s(i) == 'A' => (res\
    \ ++= 1)\n                case _ if s(i) == 'E' => (res ++= 1)\n             \
    \   case _ if s(i) == 'I' => (res ++= 1)\n                case _ if s(i) == 'O'\
    \ => (res ++= 1)\n                case _ if s(i) == 'U' => (res ++= 1)\n     \
    \           case _ => (res ++= 0)\n            })\n        res.length", "    \
    \    val vowels = \"aeiouAEIOU\".toSet\n        val upper = s.toUpperCase\n  \
    \      s.toCharArray().zipWithIndex.filter {\n            case (_, index) =>\n\
    \                index % 2 == 0\n        }.map { case (letter, index) =>\n   \
    \         (letter =:= upper) && vowels.contains(letter)\n        }.sum", "   \
    \     val vowels = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\")\n   \
    \     val evenUppers = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"\
    a\")\n        val evenLowers = mutable.Set(\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\")\n\n        val result = s.length - s.count(_ == 'A') + 1\n\n \
    \       result.times { x => vowels += 'a' ; vowels += 'e' ; vowels += 'i' ; vowels\
    \ += 'o' ; vowels += 'u' ; vowels += 'y' }\n        result.times { x => evenUppers\
    \ += 'A' ; evenUppers += 'E' ; evenUppers += 'I' ; evenUppers += 'O' ; evenUppers\
    \ += 'U' ; evenUppers += 'Y' }\n        result.times { x => evenLowers += 'a'\
    \ ; evenLowers += 'b' ; evenLowers += 'c' ; evenLowers += 'd' ; evenLowers +=\
    \ 'e' ; evenLowers += 'f' ; evenLowers += 'g' }\n\n        vowels.count(x => x\
    \ % 2 == 0) + 1\n        evenUppers.count(x => x % 2 == 0) + 1\n        evenLowers.count(x\
    \ => x % 2 == 0) + 1", "        val upperVowels = mutable.Set(\"AEIOU\")\n   \
    \     var count = 0L\n        for (i <- 0 to s.length-1) {\n            if ((i\
    \ / 2) % 2 == 0 && (s.charAt(i) match {\n                case \"a\" => \"A\"\n\
    \                case \"e\" => \"E\"\n                case \"i\" => \"I\"\n  \
    \              case \"o\" => \"O\"\n                case \"u\" => \"U\"\n    \
    \            case _ => \"\")).toCharArray contains s.charAt(i)) {\n          \
    \      count += 1L\n            }\n        }\n        return count", "       \
    \ val vowels = \"aeiouAEIOU\".toCharArray\n        val lower = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray\n        var cnt = 0\n        for (i <- 0 until s.length)\n     \
    \       if (s(i).isUpper && vowels(i) <=> lower(i) && vowels(i) <=> lower(i +\
    \ 1))\n                cnt += 1\n        cnt", "        val upperCaseVowels =\
    \ mutable.Set.empty[Char]\n        var evenIndexes = mutable.Set.empty[Int]\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             if (s(i).isUpper) {\n                    upperCaseVowels += s(i)\n\
    \                }\n                if (s(i) %2 == 0) evenIndexes += i\n     \
    \       }\n        }\n        val upperCaseVowelCount = upperCaseVowels.size\n\
    \        val evenIndexCount = evenIndexes.size\n        if (upperCaseVowelCount\
    \ == evenIndexCount) {\n            return 0\n        }\n        val upperCaseCount\
    \ = evenIndexCount - upperCaseVowelCount\n        val oddCount = upperCaseCount\
    \ / 2\n        val evenCount = upperCaseCount - oddCount\n        val odd = oddIndexes\
    \ +: evenIndexes\n        if (odd.size == 0) {\n            return 1L\n      \
    \  }\n        var total = 0L\n        val evenIndexesSet = evenIndexes.toSet\n\
    \        odd.foreach((i) => total += (evenIndexesSet.contains(i) ? evenCount :\
    \ evenIndexCount))\n        total + oddCount", "        val upperCaseVowels :\
    \ List[Char] = ('A' to 'Z').toList\n        val counts : mutable.ListBuffer[Long]\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 0 until s.length){\n        \
    \    val c = s.charAt(i)\n            if(c isUpperCase && c != ' '){\n       \
    \         counts(i / 2) + 1 match {\n                    case 1 => upperCaseVowels.indexOf(c)\
    \ match {\n                        case -1 => counts += 0\n                  \
    \      case index => counts += 1\n                    }\n                    case\
    \ _ => counts += 0\n                }\n            }\n        }\n        counts.sum",
  "        val vowels = \"aeiouAEIOU\".toList\n        var count = 0L\n        for\
    \ (x <- s.indices)\n            if (x % 2 == 0) count += vowels.count(s.charAt(x))\n\
    \        count * vowels.size ", "        var counter = 0\n        for( i <- 0\
    \ until s.length) counter += if(s.charAt(i) == 'A' || s.charAt(i) == 'a') 1 else\
    \ 0\n        counter", "        // Convert each char to an int\n        val count\
    \ = s.map(_.toInt).toList\n        // Count the vowels in odd positions\n    \
    \    count.zipWithIndex.count(_._1 % 2 == 0)", "        val vowels = \"AEIOU\"\
    \n        val result = mutable.ArrayBuffer.empty[Long]\n        for((char1, i)\
    \ <- s.zip(0 until s.length)) {\n            val char2 = if (i % 2 == 0) s.charAt(i)\
    \ else \"?\"\n            val isVowel = vowels.contains(char1)\n            val\
    \ isUpperChar = char2.toUpperCase.equals(char1)\n            if (isVowel && isUpperChar)\
    \ result.append(1L)\n        }\n        result.sum", "        val even = s.filter(n\
    \ => n % 2 == 0)\n        even.map(n => if (n.toString.toUpperCase == \"A\") 1\
    \ else 0).sum", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i).toUpper == 'A' || s.charAt(i).toUpper == 'a') count\
    \ += 1\n            else if (s.charAt(i).toUpper == 'B' || s.charAt(i).toUpper\
    \ == 'b')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'C' || s.charAt(i).toUpper == 'c')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'D' || s.charAt(i).toUpper == 'd')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'E' || s.charAt(i).toUpper\
    \ == 'e')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'F' || s.charAt(i).toUpper == 'f')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'G' || s.charAt(i).toUpper == 'g')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'H' || s.charAt(i).toUpper\
    \ == 'h')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'I' || s.charAt(i).toUpper == 'i')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'J' || s.charAt(i).toUpper == 'j')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'K' || s.charAt(i).toUpper\
    \ == 'k')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'L' || s.charAt(i).toUpper == 'l')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'M' || s.charAt(i).toUpper == 'm')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'N' || s.charAt(i).toUpper\
    \ == 'n')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'O' || s.charAt(i).toUpper == 'o')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'P' || s.charAt(i).toUpper == 'p')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'Q' || s.charAt(i).toUpper\
    \ == 'q')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'R' || s.charAt(i).toUpper == 'r')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'S' || s.charAt(i).toUpper == 's')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'T' || s.charAt(i).toUpper\
    \ == 't')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'U' || s.charAt(i).toUpper == 'u')\n                count += 1\n        \
    \    else if (s.charAt(i", "        val m = mutable.Map[Int, String]()\n     \
    \   for( i <- 0 to s.length - 1 ) {\n            val x = s.charAt(i)\n       \
    \     if ( ('A' <= x && x <= 'Z') && ((i % 2) == 0)) {\n                m(i) =\
    \ x\n            }\n        }\n        s.length match {\n            case 1 =>\
    \ m.getOrElse(0, \"?\").length.toLong\n            case _ => m.size\n        }",
  "        def isVowel(i: Int) : Boolean = i >= 0 && i <= 25 && \"aeiou\".toList.contains(s(i))\n\
    \        val even = for (i <- 0 until s.length) yield if (i % 2 == 0) isVowel(i)\
    \ else false\n        even.foldLeft(0L)(_ + _)", "        var count = 0L\n   \
    \     var i = 1L\n        while (i <= s.length)\n        {\n            if (s(i)\
    \ == s('A'))\n            {\n                count += 1L\n            }\n    \
    \        i += 1\n        }\n        count", "        val counts = mutable.HashMap[Char,Long]()\n\
    \        s.foreach { x => if (x.toUpper != 'A' && !x.toUpper == 'a') counts(x)\
    \ += 1L }\n        counts.filter(_._2 % 2 == 0).size", "        var count : Long\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) >= 'a' && s(i)\
    \ <= 'z') count += 1\n        if (count % 2 == 0)\n            count + 1\n   \
    \     else\n            count", "        var vowelCount = 0\n        for (v <-\
    \ s.toCharArray){\n            if (v == 'a' || v == 'e' || v == 'i' || v == 'o'\
    \ || v == 'u') vowelCount++\n        }\n        vowelCount match {\n         \
    \   case 0 => 0\n            case 1 => 1\n            case _ => vowelCount\n \
    \       }", "        var count = 0L\n        var i = 0L\n        while (i < s.length){\n\
    \            count += 1L\n            if (s(i) != s(i).toUpperCase){\n       \
    \         count += 1L\n            }\n            i += 1\n        }\n        count",
  "        val vowels = ('A' to 'Z')\n        val vowelIndexes = mutable.ListBuffer[Int]()\n\
    \        for (vowel <- vowels) {\n            val index = s.indexOf(vowel)\n \
    \           if (index > -1) {\n                vowelIndexes += index\n       \
    \         if (index % 2 == 0 && vowelIndexes.nonEmpty && vowelIndexes.last % 2\
    \ == 0) {\n                    return vowelIndexes.last\n                }\n \
    \           }\n        }\n        return 0", "        s.count(i => ('A' <= i &&\
    \ i <= 'Z') || ('a' <= i && i <= 'z'))", "        val counts = mutable.Map.empty[String,\
    \ Int]\n        for (i <- 0 until s.length)\n            if ((i & 1) == 0)\n \
    \               counts.put(s(i), counts.getOrElse(s(i), 0) + 1L)\n        counts.toMap.size",
  "        // Count every even index starting at index 0\n        s.sliding(2).foreach{\n\
    \            t => {\n                if (t._1 % 2 == 0) {\n                  \
    \  t._2()\n                }\n            }\n        }", "        val vowels =\
    \ \"aeiou\"\n        val evens = (0 until s.length) filter { x => (x % 2 == 0)\
    \ }\n        evens map { x => vowels.count(x => s.charAt(x) == s.charAt(x).toUpper)\
    \ }\n            .sum", "        val res = mutable.ListBuffer.empty[Long]\n  \
    \      for (v <- 0 to s.length - 1) {\n            if (s(v).isUpper) res += 1\n\
    \            if (s(v).isUpper && s(v + 1).isUpper) res += 2\n        }\n     \
    \   if (res.nonEmpty) return res.length\n        return 0", "        def count(cs\
    \ : CharSequence): Long = if (cs.length < 2) 0 else 1 +\n            cs.toList\
    \ match {\n                case Nil         => 0\n                case c::cs =>\
    \ if (c.toUpper() == 'A') count(cs) else 0\n            }\n        s.toList match\
    \ {\n            case Nil         => 0\n            case c::cs => count(cs) *\
    \ count(cs.tail)\n        }", "        if (s.length < 2) 1\n        else {\n \
    \           var count = 0\n            for (i <- 1 to s.length)\n            \
    \    if (s(i) =! Character.isUpperCase(s(i)))\n                    count -= 1\n\
    \            count\n        }", "        // Write your code here\n        var\
    \ count = 0L\n        for(i<- s.indices) {\n            if(s(i).equals(\"A\")\
    \ || s(i).equals(\"E\") || s(i).equals(\"I\") || s(i).equals(\"O\") || s(i).equals(\"\
    U\"))\n                count += 1L\n        }\n        count", "        val vowels\
    \ = \"AEIOUaeiou\"\n        var evenCount = 0\n        var currentVowel = 0\n\
    \        var count = 0\n        for (c <- s) {\n            if (vowels.indexOf(c)\
    \ < 0) continue\n            if (evenCount % 2 == 0) {\n                currentVowel\
    \ = vowels.indexOf(c)\n            } else {\n                val indexToAdd =\
    \ currentVowel - vowels.indexOf(c)\n                if (indexToAdd < 0) currentVowel\
    \ = 0\n                else {\n                    evenCount += 1\n          \
    \          currentVowel += indexToAdd\n                }\n            }\n    \
    \    }\n        count += 1\n        count", "        val vowels = mutable.Set[String]()\n\
    \        for(i <- 0 until s.length)\n            if(s(i) isUpper)\n          \
    \      vowels += s(i)\n        vowels.count(_ == 'A')", "        val vowels =\
    \ Set.of(\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \n                             \"E\", \"I\", \"O\", \"U\", \"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val evenIndexes = (0.to(s.length/2)).filter(_\
    \ % 2 == 0)\n        val evenIndexes = evenIndexes.toList\n        val evenIndexes\
    \ = evenIndexes.map(i => s.charAt(i))\n        val counts = evenIndexes.count(s\
    \ => vowels.contains(s))\n        counts", "        val vv = s.toUpperCase\n \
    \       val evens = (0 until s.length).filter { v => (v mod 2) == 0 }\n      \
    \  val count = evens.foldLeft(0L)((acc, _) => acc + 1)\n        count + (if (count\
    \ % 2 == 0) vv.count(_ == 'A') else 0)", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        val counter = mutable.HashMap[Int, Long]()\n        for (charSeq\
    \ <- s.toCharArray) {\n            if (vowels(charSeq) % 2 == 0) counter.update(charSeq,\
    \ counter(charSeq) + 1)\n        }\n        counter.values.toList.sum", "    \
    \   var even = 0\n       var n = 0\n       for (x <- s.toCharArray)\n        \
    \ {\n         if (x != x.toUpper)\n           {\n           even = even + 1\n\
    \           if (even % 2 == 0)\n             {\n             n = n + 1\n     \
    \        even = 0\n             }\n           }\n         }\n       n", "    \
    \    val vowels = \"aeiou\".toSet\n        val even = (0 until s.length).toSet.filter(_\
    \ % 2 == 0)\n        val evenCount = s.count(_.toUpperCase in vowels)\n      \
    \  (even filter { s =>\n            val i = s.indexOf(_.toUpperCase)\n       \
    \     even.contains(i + 1)\n        }.length + evenCount)", "        val counter\
    \ = mutable.Map.empty[Int, Long]\n        for (i <- 0 until s.length) counter\
    \ += (i to s.charAt(i).toUpperCase match {\n        case 'A' => 1\n        case\
    \ 'E' => 1\n        case 'I' => 1\n        case 'O' => 1\n        case 'U' =>\
    \ 1\n        case 'a' => 1\n        case 'e' => 1\n        case 'i' => 1\n   \
    \     case 'o' => 1\n        case 'u' => 1\n        case _ => 0\n        })\n\
    \        counter.map(_._2).sum", "        val vowelSet = scala.collection.mutable.Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n        var i = 0\n        var count = 0\n     \
    \   var lastIndex = s.length - 1\n\n        while (i < lastIndex) {\n        \
    \    if (vowelSet(s(i)) && s(i) != \"u\") {\n                count += 1\n    \
    \        }\n            i += 1\n        }\n\n        if (count % 2 == 1) {\n \
    \           return 0\n        } else {\n            return 1\n        }", "  \
    \      var vowels =  mutable.Set.empty[Char]\n        val l = s.length\n     \
    \   for (i<- 0 to l - 1) {\n            vowels += s(i)\n            if (s(i) ==\
    \ s(i).toUpper) vowels += s(i)\n        }\n        vowels.count(_ == 'A')", " \
    \       val vowels = new mutable.HashSet[Char]('a', 'e', 'i', 'o', 'u')\n    \
    \    s.toList map {\n            case c if vowels(c) => (c) :: Nil\n         \
    \   case c => c\n        }.foldLeft(0L)(_ + _) filter (_ % 2 == 0)", "       \
    \ var count = 1\n        for (i <- 0 until s.length; i+= 2) {\n            if\
    \ (s(i) == 'A' && s(i+1) == 'O') count += 1\n        }\n        count", "    \
    \    var vowels : mutable.Set[Char] = mutable.Set[Char]()\n        for (i <- 0\
    \ to s.length - 1)\n            vowels += (s.charAt(i) as Char)\n\n        var\
    \ count = mutable.Set[Char]()\n        for (i <- 0 to s.length - 1) {\n      \
    \      if (vowels(i) == 'A')\n                count += 1\n            else if\
    \ (vowels(i) == 'E')\n                count += 1\n            else if (vowels(i)\
    \ == 'I')\n                count += 1\n            else if (vowels(i) == 'O')\n\
    \                count += 1\n            else if (vowels(i) == 'U')\n        \
    \        count += 1\n        }\n        count.length", "        val m = s.toCharArray.zipWithIndex.toMap\n\
    \        val vowels : mutable.Set[Char] = mutable.Set.empty\n        for (i <-\
    \ 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n         \
    \       vowels -= s.charAt(i)\n            else\n                vowels += s.charAt(i)\n\
    \        m.filter(_._2 % 2 == 0).map(_._1).length", "        var count : Long\
    \ = 0\n        for (i <- 0 until s.length if s.charAt(i) == 'A')\n           \
    \ count = count + 1\n        for (i <- 0 until s.length if s.charAt(i) == 'E')\n\
    \            count = count + 1\n        for (i <- 0 until s.length if s.charAt(i)\
    \ == 'I')\n            count = count + 1\n        for (i <- 0 until s.length if\
    \ s.charAt(i) == 'O')\n            count = count + 1\n        for (i <- 0 until\
    \ s.length if s.charAt(i) == 'U')\n            count = count + 1\n        count"]
stop_tokens:
- "\n    }\n"
