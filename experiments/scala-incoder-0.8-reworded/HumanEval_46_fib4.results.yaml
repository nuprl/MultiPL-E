language: scala
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0L) 0L\n        else if (n < 4L) 0L\n        else 2L + fib4(n - 1L) + fib4(n\
    \ - 2L) + fib4(n - 3L) + fib4(n - 4L)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvre_itp.scala:24)\n\tat Problem.main(tmpvvre_itp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val a =\
    \ Array(0, 1, 2, 3, 4)\n        var x = a(0)\n        var y = a(0)\n        var\
    \ z = a(0)\n        var w = a(0)\n        var i = 0\n        while (i < n) {\n\
    \            z = a(0) + a(0) + a(0) + a(0)\n            w = z + a(0) + a(0) +\
    \ a(0) + a(0)\n            x = y + z + w + a(0)\n            y = w\n         \
    \   i = i + 1\n        }\n        x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrj71pbr.scala:34)\n\tat Problem.main(tmplrj71pbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4N\
    \ = (1l).+(2l).+(3l).+(4l)\n        fib4N(n-l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpr168x8nh.scala:19:8 ------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        fib4N(n-l)\n\e[31m\e[31m   |\e[0m        ^^^^^\e\
    [0m\n\e[31m   |\e[0m        \e[33mvalue\e[0m \e[35mfib4N\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr168x8nh.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        fib4N(n-l)\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4ns\
    \ = mutable.Buffer.empty[Long]\n        for (i <- 0 to n by 4)\n            fib4ns\
    \ += fib4ns(i) + fib4ns(i+1) + fib4ns(i+2) + fib4ns(i+3)\n        fib4ns(n) //\
    \ Return fibonacci number at n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy43rux8i.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4ns\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy43rux8i.scala:19:23 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n by \e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (n : Long)\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n >=\
    \ 0)\n            fib4(n / 2) + fib4(n / 4) + fib4(n / 8) + fib4(n / 16)\n   \
    \     else\n            0\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.scala:19)\n\tat Problem$.fib4(tmpi3blomu7.scala:19)\n\
    \tat Problem$.fib4(tmpi3blomu7.sc"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Code\
    \ goes here\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogx_7i0r.scala:17:32\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mfib4\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    Unit\n\e[31m   |\e[0m                                Required:\
    \ Long\n\e[31m18 |\e[0m        \e[34m// Code goes here\e[0m\n\e[31m19 |\e[0m \
    \   }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n >\
    \ 2) fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        else n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62zuxfon.scala:22)\n\tat Problem.main(tmp62zuxfon.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val arr\
    \ = new Array[Long](5)\n        arr(0) = 0\n        arr(1) = 0\n        arr(2)\
    \ = 2\n        arr(3) = 0\n        arr(4) = arr(-1) + arr(-2) + arr(-3) + arr(-4)\n\
    \        arr(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjp6ef6wr.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        arr(n)\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    (n : Long)\n\
    \e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 2) n\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnh1c6unq.scala:22)\n\tat Problem.main(tmpnh1c6unq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def loop(n:\
    \ Long, accum: Long) : Long = {\n            if (n == 0) accum\n            else\
    \ {\n                loop(n-1, accum + n % 4)\n            }\n        }\n    \
    \    loop(n, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjjbjo2m.scala:27)\n\tat Problem.main(tmpjjjbjo2m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib0\
    \ : Long = 0\n        var fib1 : Long = 1\n        var fib2 : Long = 2\n     \
    \   var fib3 : Long = 0\n        fib3 = n\n        while (fib3 > 0) {\n      \
    \      var fib4 = 0\n            fib4 = fib1\n            fib1 = fib2\n      \
    \      fib2 = fib3\n            fib3 = fib4 - fib1 + fib2\n        }\n       \
    \ fib3\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp747_9u2o.scala:25:19\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            fib4 = fib1\n\e[31m\e\
    [31m   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (fib1 : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4List\
    \ = List(0l,0l,2l,0l,0l,2l)\n        fib4List(n-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvv2_4g3h.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        fib4List(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m        \
    \         Found:    Long\n\e[31m   |\e[0m                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Write\
    \ your code here.\n        // Use a mutable hash-map to store the current fib\
    \ sequence value and its index.\n        val fibMap = mutable.HashMap[Long, Long]()\n\
    \        var sum = 0\n        var cur = 0\n        var index = 1\n        while\
    \ (index < n) {\n            fibMap += (cur -> index)\n            cur = fibMap.getOrElseUpdate(n+index,\
    \ cur + index * index); index++\n        }\n        fibMap.getOrElse(n+1, 0l)\
    \ //return 0 as default value.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9_x0_3_5.scala:26:79 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            cur = fibMap.getOrElseUpdate(n+index, cur\
    \ + index * index); index++\n\e[31m\e[31m   |\e[0m                           \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_x0_3_5.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mfibMap\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        require(n\
    \ >= 0 && n <= 40, \"fib4 called with invalid parameter\")\n        val xs = List(1,\
    \ 0, 1)\n        val ys = List(0, 1, 1)\n        val zs = List(1, 1, 2)\n    \
    \    val yts = List(2, 1, 1)\n        var ret = 0\n        if (n > 0) {\n    \
    \        val f = xs(n - 1)\n            ret += f\n        }\n        if (n >=\
    \ 1) {\n            val f = ys(n - 1)\n            ret += f\n        }\n     \
    \   if (n >= 2) {\n            val f = zs(n - 1)\n            ret += f\n     \
    \   }\n        if (n >= 3) {\n            val f = yts(n - 1)\n            ret\
    \ += f\n        }\n        ret\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtu8e65g.scala:25:23\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e\
    [36mf\e[0m = xs(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgtu8e65g.scala:29:23 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mf\e[0m = ys(n - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtu8e65g.scala:33:23\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e\
    [36mf\e[0m = zs(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgtu8e65g.scala:37:24 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mf\e[0m = yts(n - \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        Found:    Long\n\e[31m   |\e[0m             \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val nums\
    \ = mutable.ListBuffer(1l, 2l, 3l, 4l, 5l)\n        val cur = mutable.ArrayBuffer(0l,\
    \ 1l, 2l, 3l, 4l, 5l)\n        (1l until nums.size).map { x =>\n            if\
    \ (x == nums.size) nums.last\n            else cur += nums(x)\n        }.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_2930vl.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer(\e\
    [31m1l\e[0m, \e[31m2l\e[0m, \e[31m3l\e[0m, \e[31m4l\e[0m, \e[31m5l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_2930vl.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mcur\e[0m = mutable.ArrayBuffer(\e[31m0l\e[0m, \e[31m1l\e[0m, \e[31m2l\e[0m,\
    \ \e[31m3l\e[0m, \e[31m4l\e[0m, \e[31m5l\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n<=0\
    \ || n==1)\n            return 0\n        else \n            return (fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtjf1f_5.scala:24)\n\tat Problem.main(tmpxtjf1f_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 1\n        if (n == 1) 1\n        if (n == 2) 2\n        if (n == 3) 0\n\
    \        if (n == 4) 0\n        if (n >= 5) \n            fib4((n - 1) + fib4((n\
    \ - 2) + fib4((n - 3) + fib4((n - 4)))) \n        else \n            0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_re7979.scala:25:8 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m \n\e[31m\e[31m   |\e[0m     \
    \   ^^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'else' found\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpy_re7979.scala:18:20 ----------------\e\
    [0m\e[0m\n\e[33m18 |\e[0m        \e[33mif\e[0m (n == \e[31m0\e[0m) \e[31m1\e[0m\n\
    \e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpy_re7979.scala:19:20\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m (n == \e[31m1\e\
    [0m) \e[31m1\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpy_re7979.scala:20:20\
    \ ----------------\e[0m\e[0m\n\e[33m20 |\e[0m        \e[33mif\e[0m (n == \e[31m2\e\
    [0m) \e[31m2\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpy_re7979.scala:21:20\
    \ ----------------\e[0m\e[0m\n\e[33m21 |\e[0m        \e[33mif\e[0m (n == \e[31m3\e\
    [0m) \e[31m0\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpy_re7979.scala:22:20\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m        \e[33mif\e[0m (n == \e[31m4\e\
    [0m) \e[31m0\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0m"
  stdout: ''
  timestamp: 1660013923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4n\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        fib4n += 0\n    \
    \    fib4n += 0\n        fib4n += 2\n        fib4n += 0\n        fib4n.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8ki4wby.scala:26)\n\tat Problem.main(tmpu8ki4wby.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0)\n            return 0\n        else if (n == 1)\n            return 1\n \
    \       else if (n == 2)\n            return 2\n        else if (n == 3) {\n \
    \           fib4(4)\n        }\n        else {\n            val tmp1 = fib4(n-1)\n\
    \            val tmp2 = fib4(n-2)\n            val tmp3 = fib4(n-3)\n        \
    \    val tmp4 = fib4(n-4)\n            tmp1 + tmp2 + tmp3 + tmp4\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\tat Problem$.fib4(tmpyt6ghu2m.scala:28)\n\
    \tat Problem$.fib4(tmpyt6ghu2m.sc"
  stdout: ''
  timestamp: 1660013927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <\
    \ 0 || n > 4)\n            throw new IllegalArgumentException(\"Invalid fib4 argument:\
    \ \" + n)\n        if (n == 0)\n            return 0\n        if (n == 1)\n  \
    \          return 1\n        if (n == 2)\n            return 2\n        if (n\
    \ == 3)\n            return 0\n        if (n == 4)\n            return 4\n   \
    \     if (n % 2 == 0)\n            return fib4(n / 2) + fib4(n / 3) + fib4(n /\
    \ 4)\n        else\n            return fib4(n / 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Invalid fib4 argument: 5\n\tat Problem$.fib4(tmp6j_r3jde.scala:19)\n\
    \tat Problem$.main(tmp6j_r3jde.scala:36)\n\tat Problem.main(tmp6j_r3jde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = mutable.ArrayBuffer.empty[Long]\n        val fib2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val fib3 = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        i =+ n\n        j =+ n\n        k =+\
    \ n\n        while(i<n){\n            fib2 += j\n            j += k\n        \
    \    k += n\n            i += n\n        }\n        fib3 = fib2.toArray ++ fib3.toArray\n\
    \        fib3.last\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvc6c1ie9.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvc6c1ie9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvc6c1ie9.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvc6c1ie9.scala:24:10 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        i =+ n\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        value =+ is not a member of Int - did you mean Int.==?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvc6c1ie9.scala:25:10 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        j =+ n\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        value =+ is not a member of Int - did you mean Int.==?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvc6c1ie9.scala:26:10 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        k =+ n\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        value =+ is not a member of Int - did you mean Int.==?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvc6c1ie9.scala:30:14 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            k += n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value +="
  stdout: ''
  timestamp: 1660013929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) {\n            return 0\n        }\n        if (n <= 2) {\n            return\
    \ 1\n        }\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpynpw9fgf.scala:27)\n\tat Problem.main(tmpynpw9fgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val m =\
    \ scala.math.ceil(n)\n        if (m == 0) 0\n        else if (m == 1) 1\n    \
    \    else if (m == 2) 2\n        else if (m == 3) 3\n        else scala.math.pow(2,\
    \ 4l) * (fib4(m-1) + fib4(m-2) + fib4(m-3) + fib4(m-4))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkws6b2js.scala:23:43\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m scala.math.pow(\e\
    [31m2\e[0m, \e[31m4l\e[0m) * (fib4(m-\e[31m1\e[0m) + fib4(m-\e[31m2\e[0m) + fib4(m-\e\
    [31m3\e[0m) + fib4(m-\e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                   \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Found:    Double\n\e[31m   |\e[0m                           \
    \                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkws6b2js.scala:23:55 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33melse\e[0m scala.math.pow(\e[31m2\e[0m, \e[31m4l\e[0m) *\
    \ (fib4(m-\e[31m1\e[0m) + fib4(m-\e[31m2\e[0m) + fib4(m-\e[31m3\e[0m) + fib4(m-\e\
    [31m4\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \             ^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                 Found:    Double\n\e[31m   |\e[0m                          \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkws6b2js.scala:23:67 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m scala.math.pow(\e[31m2\e[0m,\
    \ \e[31m4l\e[0m) * (fib4(m-\e[31m1\e[0m) + fib4(m-\e[31m2\e[0m) + fib4(m-\e[31m3\e\
    [0m) + fib4(m-\e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                          \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                                              Found:    Double\n\e[31m   |\e\
    [0m                                                        Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkws6b2js.scala:23:79\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m scala.math.pow(\e\
    [31m2\e[0m, \e[31m4l\e[0m) * (fib4(m-\e[31m1\e[0m) + fib4(m-\e[31m2\e[0m) + fib4(m-\e\
    [31m3\e[0m) + fib4(m-\e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660013929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else (fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) +\
    \ fib4(n - 5)).asInstanceOf[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\tat Problem$.fib4(tmpz4gf9n39.scala:19)\n\
    \tat Problem$.fib4(tmpz4gf9n39.sc"
  stdout: ''
  timestamp: 1660013939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 2)\n            return n\n        else if (n == 3)\n            return 1\n \
    \       else\n            val f1 = fib4(n-1)\n            val f2 = fib4(n-2)\n\
    \            val f3 = fib4(n-3)\n            val f4 = fib4(n-4)\n            f1\
    \ + f2 + f3 + f4\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf2_vbpo1.scala:37:0 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2_vbpo1.scala:31:11\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m    assert(fib4((\e[31m5l\e\
    [0m)) == (\e[31m4l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf2_vbpo1.scala:32:11 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m    assert(fib4((\e[31m8l\e[0m)) == (\e[31m28l\e[0m));\n\e\
    [31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2_vbpo1.scala:33:11\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    assert(fib4((\e[31m10l\e\
    [0m)) == (\e[31m104l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf2_vbpo1.scala:34:11 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    assert(fib4((\e[31m12l\e[0m)) == (\e[31m386l\e[0m));\n\
    \e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val mutable\
    \ res = 0\n        var i : Long = 0\n        for(i <- 0 until n){\n          \
    \  res = res + i\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp95geh6jx.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m mutable res = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp95geh6jx.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m mutable res = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^\e[0m\n\e[31m   |\e[0m                    Not found: res\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95geh6jx.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp95geh6jx.scala:21:12 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            res = res + i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^\e[0m\n\e[31m   |\e[0m            Not found: res\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp95geh6jx.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            res = res + i\n\e[31m\e[31m   |\e[0m    \
    \              ^^^\e[0m\n\e[31m   |\e[0m                  Not found: res\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95geh6jx.scala:23:15 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m res\n\e[31m\e[31m   |\e[0m\
    \               ^^^\e[0m\n\e[31m   |\e[0m               Not found: res\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1660013940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        if (n == 1) 1\n        if (n == 2) 2\n        if (n == 3) 0\n\
    \        else{\n            val temp = fib4(n - 1)\n            fib4(n - 2) +\
    \ temp\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\tat Problem$.fib4(tmpg0aqhcdh.scala:23)\n\
    \tat Problem$.fib4(tmpg0aqhcdh.sc"
  stdout: ''
  timestamp: 1660013942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 1) 0\n        else if (n <= 2) 2\n        else if\
    \ (n <= 3) 0\n        else {\n            val (f1, f2) = (fib4(n - 1), fib4(n\
    \ - 2))\n            val res = (f1 + f2 + f1 + f2) - f1\n            res\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqf0dugv.scala:30)\n\tat Problem.main(tmpcqf0dugv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var counter\
    \ = mutable.LinkedHashMap.empty[Long, Long]\n        for (i <- 0 until n)\n  \
    \          counter.put(i+1, counter.getOrElse(i+1, 0l) + counter.getOrElse(i-1,\
    \ 0l) + counter.getOrElse(i-2, 0l) + counter.getOrElse(i-3, 0l))\n        counter.get(n-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9z5f57n.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m = mutable.LinkedHashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq9z5f57n.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = mutable.ArrayBuffer.empty[Long]\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfojwbgnz.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def loop(n:\
    \ Long, a: Long, b: Long, c : Long): Long = {\n            if (n > 0) loop(n -\
    \ 1, a + b + c, b + a, c)\n            else a\n        }\n        loop(n, 0, 1,\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6r08m9_8.scala:25)\n\tat Problem.main(tmp6r08m9_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = (0 to n).foldLeft(0) { case (acc, i) =>\n            acc+i\n        }\n  \
    \      fib4\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjrtwi95.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e\
    [0m = (\e[31m0\e[0m to n).foldLeft(\e[31m0\e[0m) { \e[33mcase\e[0m (acc, i) =>\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0l)\n        fib4.add(1l)\n\
    \        fib4.add(2l)\n        fib4.add(3l)\n\n        fib4.foreach { x =>\n \
    \           val n1 = n-1\n            val n2 = n-2 //n3 = n-4\n            val\
    \ n3 = n-3 //n4 = n-5\n            fib4.add(fib4(n1) + fib4(n2) + fib4(n3) + fib4(n4))\
    \ //fib4.add(fib4(n1) + fib4(n2) + fib4(n3) + fib4(n4))\n        }\n        fib4.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdkee8vs.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0 || n == 1)\n            return n\n        else if (n % 2 == 0)\n         \
    \   return fib4(n - 1) + fib4(n - 2)\n        else\n            return fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnt_lar00.scala:26)\n\tat Problem.main(tmpnt_lar00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibs\
    \ = mutable.LinkedHashMap[Long, Long]()\n        fibs.put(0, 0l) \n        fibs.put(1,\
    \ 1l)\n        fibs.put(2, 2l)\n        fibs.put(3, 3l)\n        var i = 3l\n\
    \        fibs.put(n, fibs.get(n-3)+fibs.get(n-2)+fibs.get(n-1)+fibs.get(n))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1cfwws_.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibs\e[0m = mutable.LinkedHashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val x =\
    \ new Array[Long](5)\n        var sum = 0\n        x(0) = 0\n        x(1) = 0\n\
    \        x(2) = 0\n        x(3) = 0\n        val i = 4\n        while ( i != n\
    \ ) {\n            sum += x(i)\n            i = (i + 3)\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwp3zrb7x.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            sum += x(i)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwp3zrb7x.scala:27:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            i = (i +\
    \ \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n    \tvar temp\
    \ : Long = 0\n    \tvar temp2 : Long = 0\n    \tvar fib : Long = 0\n    \tvar\
    \ fib2 : Long = 0\n    \tvar fib3 : Long = 0\n    \tvar fib4 : Long = 0\n    \t\
    if (n < 0)\n    \t\tthrow new IllegalArgumentException(\"Fib number out of range\"\
    )\n    \tif (n <= 1)\n    \t\ttemp = 1\n    \telse\n    \t\ttemp = fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \    \tif (n == 0)\n    \t\tfib = 0\n    \telse if (n == 1)\n    \t\tfib = 1\n\
    \    \telse if (n == 2)\n    \t\tfib = 2\n    \telse if (n == 3)\n    \t\tfib3\
    \ = 3\n    \telse if (n == 4)\n    \t\tfib4 = 4\n    \telse if (n >= 5)\n    \t\
    \tfib = temp\n    \telse \n    \t\tfib2 = temp2\n    \tif (temp > fib4)\n    \t\
    \tfib4 = temp\n    \tif (temp2 > fib3)\n    \t\tfib3 = temp2\n    \tif (temp2\
    \ > fib2)\n    \t\tfib2 = temp2\n    \tif (temp > fib3)\n    \t\tfib3 = temp\n\
    \    \tif (temp2 > fib)\n    \t\tfib = temp2\n    \treturn fib\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp3fckquup.scala:29:15 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    \t\ttemp = fib4(n-\e[31m1\e[0m)+fib4(n-\e[31m2\e\
    [0m)+fib4(n-\e[31m3\e[0m)+fib4(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m    \t\t\
    \       ^^^^\e[0m\n\e[31m   |\e[0m    \t\t       \e[33mvariable\e[0m \e[35mfib4\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var first\
    \ = 0\n        var second = 0\n        var third = 0\n        var fourth = 0\n\
    \        while (n>0) {\n            first = second\n            second = third\n\
    \            third = fourth\n            fourth = n -= 1\n        }\n        fourth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk0lo1mgo.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            fourth = n -= \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ -= is not a member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Base\
    \ case\n        if (n <= 3) {\n            return n\n        }\n        // Recursive\
    \ case\n        else {\n            val firstFib = fib4(n - 1) + fib4(n - 2)\n\
    \            val secondFib = fib4(n - 3) + fib4(n - 4)\n            return firstFib\
    \ + secondFib\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp9zm1mng.scala:30)\n\tat Problem.main(tmpp9zm1mng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 1) 1\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphu_ui0rl.scala:22)\n\tat Problem.main(tmphu_ui0rl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0l) 0l\n        else if (n == 1l) 1l\n        else if (n == 2l) 2l\n       \
    \ else if (n == 3l) 0l\n        else if (n == 4l) 1l\n        else if (n == 5l)\
    \ 2l\n        else fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l) \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd17clu6p.scala:27)\n\tat Problem.main(tmpd17clu6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = mutable.ListBuffer.empty[Long]\n        for (i <- (0 until n)) { fib += (i\
    \ + 1) }\n        fib.head\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzr6bd2k.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuzr6bd2k.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- (\e[31m0\e[0m until n))\
    \ { fib += (i + \e[31m1\e[0m) }\n\e[31m\e[31m   |\e[0m                       \
    \    ^\e[0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib\
    \ :List[Int] = List.empty[Int]\n        val fib2 = for (i <- 0 to 3) yield if\
    \ (i == 0) i else fib(i-1) + fib(i-2)\n        val fib4 = fib2.map(fib2(_) + fib2(_+1)\
    \ + fib2(_+2) + fib2(_+3)).drop(1).filter(_ < n).map(_.toString).toArray\n   \
    \     fib4(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkmrhghfv.scala:20:43 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = fib2.map(fib2(_)\
    \ + fib2(_+\e[31m1\e[0m) + fib2(_+\e[31m2\e[0m) + fib2(_+\e[31m3\e[0m)).drop(\e\
    [31m1\e[0m).filter(_ < n).map(_.toString).toArray\n\e[31m\e[31m   |\e[0m     \
    \                                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2 + 1.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpkmrhghfv.scala:20:55 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = fib2.map(fib2(_)\
    \ + fib2(_+\e[31m1\e[0m) + fib2(_+\e[31m2\e[0m) + fib2(_+\e[31m3\e[0m)).drop(\e\
    [31m1\e[0m).filter(_ < n).map(_.toString).toArray\n\e[31m\e[31m   |\e[0m     \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => _$3 + 2.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpkmrhghfv.scala:20:67 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = fib2.map(fib2(_)\
    \ + fib2(_+\e[31m1\e[0m) + fib2(_+\e[31m2\e[0m) + fib2(_+\e[31m3\e[0m)).drop(\e\
    [31m1\e[0m).filter(_ < n).map(_.toString).toArray\n\e[31m\e[31m   |\e[0m     \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$4 of expanded function:\n\e[31m   |\e\
    [0m   _$4 => _$4 + 3.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkmrhghfv.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fib4(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        //fib(n)\
    \ = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4).\n        var fib = 0\n        var\
    \ fib4 = 0\n        var n = n\n        while (fib < n) {\n            fib = fib\n\
    \            fib4 += fib\n        }\n        fib4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_4l5nt2i.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0 || n == 1) {\n            return n\n        }\n        else {\n          \
    \  val m1 = fib4(n-1)\n            val m2 = fib4(n-2)\n            val m3 = fib4(n-3)\n\
    \            val m4 = fib4(n-4)\n            val res = (m1 + m2 + m3 + m4)\n \
    \           res\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\tat Problem$.fib4(tmpt65gxg1t.scala:22)\n\
    \tat Problem$.fib4(tmpt65gxg1t.sc"
  stdout: ''
  timestamp: 1660013946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      if(n < 0)\n\
    \        throw new IllegalArgumentException\n      else\n        Fib4(n)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph1_kt3kc.scala:21:8 -------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        Fib4(n)._1\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: Fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n == 1) 1\n        else fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzq8q2hf8.scala:23)\n\tat Problem.main(tmpzq8q2hf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n       if (n ==\
    \ 0) 0\n       else if (n == 1) 0\n       else if (n == 2) 2\n       else fib4(n\
    \ - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\tat Problem$.fib4(tmpfk9naqzk.scala:21)\n\
    \tat Problem$.fib4(tmpfk9naqzk.sc"
  stdout: ''
  timestamp: 1660013956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 3) {\n            return 0\n        }\n        if (n > 3) {\n            return\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm913qevl.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (n > \e\
    [31m3\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m22 |\e[0m         \
    \   \e[33mreturn\e[0m fib4(n - \e[31m4\e[0m) + fib4(n - \e[31m3\e[0m) + fib4(n\
    \ - \e[31m2\e[0m) + fib4(n - \e[31m1\e[0m)\n\e[31m23 |\e[0m        }\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <=\
    \ 1l) n\n        else fib(n - 1l) + fib(n - 2l) + fib(n - 3l) + fib(n - 4l) \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposzprylv.scala:19:13 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m fib(n - \e[31m1l\e[0m) + fib(n\
    \ - \e[31m2l\e[0m) + fib(n - \e[31m3l\e[0m) + fib(n - \e[31m4l\e[0m) \n\e[31m\e\
    [31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m             Not found: fib\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibbonacci\
    \ = mutable.MutableList[Int]()\n        fibbonacci.clear()\n        fibbonacci(0)\n\
    \        for(i <- 1 to n ) {\n            fibbonacci append fib4(fibbonacci(i-1)\
    \ + fibbonacci(i-2) + fibbonacci(i-3) + fibbonacci(i-4))\n        }\n        fibbonacci(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmporrua1vo.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibbonacci\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmporrua1vo.scala:21:22 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ : mutable.MutableList[Long] = mutable.MutableList(1)\n        fib(n) match {\n\
    \            case n if n > 0 => fib(n) = fib.last + fib.last\n            case\
    \ n if n == 0 => 0l\n            case n => fib.last + fib.last\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qouf9vv.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qouf9vv.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n<0)\
    \ \n            throw new IllegalArgumentException(\"negative numbers are not\
    \ allowed\")\n        if (n==0) \n            return 0\n        if (n==1) \n \
    \           return 1\n        if (n==2) \n            return 2\n        if (n==3)\
    \ \n            return 4\n        if (n==4) \n            return 8\n        if\
    \ (n==5) \n            return 10\n        if (n==6) \n            return 16\n\
    \        if (n==7) \n            return 32\n        if (n==8) \n            return\
    \ 64\n        if (n==9) \n            return 128\n        if (n==10) \n      \
    \      return 256\n        if (n==11) \n            return 512\n        if (n==12)\
    \ \n            return 1024\n        if (n==13) \n            return 2048\n  \
    \      if (n==14) \n            return 4096\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4lilka16.scala:48:8\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mif\e[0m (n==\e\
    [31m14\e[0m) \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m49 |\e[0m         \
    \   \e[33mreturn\e[0m \e[31m4096\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n ==\
    \ 0) 1\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\tat Problem$.fib4(tmp3d29ub_l.scala:19)\n\
    \tat Problem$.fib4(tmp3d29ub_l.sc"
  stdout: ''
  timestamp: 1660013959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <\
    \ 0) 0\n        else if(n == 1) 1\n        else if(n == 2) 2\n        else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkye5ltt.scala:24)\n\tat Problem.main(tmppkye5ltt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibSeq\
    \ = Seq.fill(n)(0l)(1l)\n        def loop(n: Long, n: Long) : Long = {\n     \
    \       if (n == 0) n\n            else loop(n-1, n-2) + loop(n-3, n-4) + fibSeq(n,\
    \ 0)\n        }\n        loop(n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmga2env.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e\
    [0m = Seq.fill(n)(\e[31m0l\e[0m)(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                       ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (n : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmga2env.scala:18:37\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e\
    [0m = Seq.fill(n)(\e[31m0l\e[0m)(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                              ^^\e[0m\n\e[31m   |\e[0m                      \
    \               Found:    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m            \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmprmga2env.scala:19:26 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mloop\e[0m(\e[36mn\e[0m: \e[35mLong\e\
    [0m, \e[36mn\e[0m: \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mparameter\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmprmga2env.scala:21:51 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m loop(n-\e[31m1\e[0m, n-\e\
    [31m2\e[0m) + loop(n-\e[31m3\e[0m, n-\e[31m4\e[0m) + fibSeq(n, \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mfibSeq\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def sum(m\
    \ : Long) : Long = {\n            m match {\n                case 0 => 0l\n  \
    \              case 1 => 1l\n                case 2 => 2l\n                case\
    \ 3 => 3l\n                case _ => sum(m - 1) + sum(m - 2) + sum(m - 3) + sum(m\
    \ - 4)\n            }\n        }\n\n        def sums(n : Long) : Long = {\n  \
    \          val m = n\n            val sum = sum(m)\n            val sums = sums(n\
    \ - 1)\n            val sumst = sums(n - 2)\n            val sumst = sums(n -\
    \ 3)\n            val sumst = sums(n - 4)\n            m + sum + sums + sumst\
    \ + sumst\n        }\n\n        sums(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx52r2e_a.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36msumst\e[0m = sums(n\
    \ - \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumst is already defined as \e[33mvalue\e[0m \e[35msumst\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx52r2e_a.scala:34:16 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m            \e[33mval\e[0m \e[36msumst\e[0m = sums(n - \e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0msumst is already defined as \e[33mvalue\e[0m \e[35msumst\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx52r2e_a.scala:30:22 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum(m)\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Recursive\
    \ \e[33mvalue\e[0m \e[35msum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpx52r2e_a.scala:31:23 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36msums\e[0m = sums(n -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m  \
    \ |\e[0m                       Recursive \e[33mvalue\e[0m \e[35msums\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib\
    \ : Long = 0\n        val fib4 = (0 until n).foldLeft(0) { acc, x =>\n       \
    \     fib = fib + ((x % 4 + 1) * (x % 4))\n            acc\n        }\n      \
    \  fib\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpye65d4ui.scala:19:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = (\e[31m0\e[0m\
    \ until n).foldLeft(\e[31m0\e[0m) { acc, x =>\n\e[31m\e[31m   |\e[0m         \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                   end of statement expected but ',' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpye65d4ui.scala:19:28 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = (\e[31m0\e[0m until\
    \ n).foldLeft(\e[31m0\e[0m) { acc, x =>\n\e[31m\e[31m   |\e[0m               \
    \             ^\e[0m\n\e[31m   |\e[0m                            Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpye65d4ui.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            acc\n\e[31m\e[31m   |\e[0m            ^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: acc\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else if (n > 3) fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxzhvjpaf.scala:26)\n\tat Problem.main(tmpxzhvjpaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var a =\
    \ n.toLong\n        var res = 0\n        var b = a\n        var i = 0\n      \
    \  while (b != 0) {\n            if (i%4 == 0 ) {\n                res = res +\
    \ b\n            }\n            a = a + b\n            i = i + 1\n           \
    \ b = a - b\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaan6dfr9.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                res = res + b\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrk1c2n4.scala:25)\n\tat Problem.main(tmplrk1c2n4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib\
    \ = mutable.Stack.empty[Long]\n        for (i <- 0 until n) {\n            fib\
    \ += fib.pop() + fib.pop() + fib.pop() + fib.pop()\n        }\n        fib(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrcgu4ra.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m = mutable.Stack.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwrcgu4ra.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <=\
    \ 1) n\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wyq9fom.scala:22)\n\tat Problem.main(tmp7wyq9fom.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0) throw new IllegalArgumentException(\"fib4 only supports positive integer\
    \ inputs\")\n        if (n == 0) return 0\n        if (n == 1) return 0\n    \
    \    if (n == 2) return 2\n        if (n == 3) return 0\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = mutable.ListBuffer.empty[Long]\n        val fib_1 = mutable.ListBuffer.empty[Long]\n\
    \        val fib_2 = mutable.ListBuffer.empty[Long]\n        val fib_3 = mutable.ListBuffer.empty[Long]\n\
    \        val fib_4 = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until\
    \ n)\n            fib_4 += fib(i) - fib(i-1)\n        for(i <- 0 until n)\n  \
    \          fib += fib_4(i) + fib_4(i-1) + fib_4(i-2) + fib_4(i-3)\n        fib(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzzw6rs4.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxzzw6rs4.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib_1\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxzzw6rs4.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib_2\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxzzw6rs4.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfib_3\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxzzw6rs4.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfib_4\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxzzw6rs4.scala:23:25 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until"
  stdout: ''
  timestamp: 1660013963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // base\
    \ case\n        if (n <= 0)\n            return 0\n        // recursive case\n\
    \        if (n < 4L)\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \        // base case\n        if (n < 8L)\n            return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) + fib4(n-5) + fib4(n-6)\n        // base case\n    \
    \    if (n < 14L)\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ + fib4(n-5) + fib4(n-6) + fib4(n-7) + fib4(n-8)\n        // base case\n    \
    \    fib4(-1L)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoluf1_22.scala:34)\n\tat Problem.main(tmpoluf1_22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def computeFib4(current\
    \ : Long, n2 : Long) : Long = {\n            if (n2 == 0) current else computeFib4(current+n2,\
    \ n2-1)\n        }\n        computeFib4(0, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3csth4fx.scala:24)\n\tat Problem.main(tmp3csth4fx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 to n-1){\n           \
    \ fib += fib(i-1)+fib(i-2)+fib(i-3)+fib(i-4)\n        }\n        fib.last\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprx8ii3js.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprx8ii3js.scala:19:22 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to n-\e[31m1\e\
    [0m){\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def loop(x\
    \ : (Long, Long, Long, Long), acc : Long): (Long, Long, Long, Long) = {\n    \
    \        if (x._1 == 0)\n                (x._4, x._3, x._2, x._1)\n          \
    \  else\n                (x._1, x._2, x._3, x._4 + x._3 + x._2)\n        }\n \
    \       if (n == 1)\n            (1, 0, 0, 0, 0, 0)\n        else if (n == 2)\n\
    \            (0, 2, 0, 0, 0)\n        else if (n == 3)\n            (0, 0, 0,\
    \ 3, 0)\n        else if (n == 4)\n            (0, 0, 0, 0, 4)\n        else\n\
    \            loop((n, n - 4, n - 3, n - 2), (acc: Long) => (loop((n - 1, n - 2,\
    \ n - 3, n - 4), acc), acc))._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxq1q6w6w.scala:25:12\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            (\e[31m1\e[0m, \e\
    [31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    (Int, Int, Int, Int, Int, Int)\n\e[31m   |\e[0m            Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxq1q6w6w.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            (\e[31m0\e[0m, \e\
    [31m2\e[0m, \e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (Int, Int,\
    \ Int, Int, Int)\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxq1q6w6w.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            (\e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m,\
    \ \e[31m3\e[0m, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (Int, Int, Int, Int, Int)\n\e[31m  \
    \ |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxq1q6w6w.scala:31:12 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            (\e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m, \e[31m0\e[0m, \e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Found:    (Int, Int, Int, Int, Int)\n\e[31m   |\e[0m          \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxq1q6w6w.scala:33:43\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            loop((n, n - \e[31m4\e\
    [0m, n - \e[31m3\e[0m, n - \e[31m2\e[0m), (\e[36macc\e[0m: \e[35mLong\e[0m) =>\
    \ (loop((n - \e[31m1\e[0m, n - \e[31m2\e[0m, n - \e[31m3\e[0m, n - \e[31m4\e[0m),\
    \ acc), acc))._1\n\e[31m\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1660013968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = Seq.fill(n)(0).scanLeft(1){case (a,b) => (a+b, b)}.tail\n        fib4(n -\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu4creb8c.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e\
    [0m = Seq.fill(n)(\e[31m0\e[0m).scanLeft(\e[31m1\e[0m){\e[33mcase\e[0m (a,b) =>\
    \ (a+b, b)}.tail\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (n : Long)\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpu4creb8c.scala:18:60 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = Seq.fill(n)(\e[31m0\e\
    [0m).scanLeft(\e[31m1\e[0m){\e[33mcase\e[0m (a,b) => (a+b, b)}.tail\n\e[31m\e\
    [31m   |\e[0m                                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (Int, Int)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu4creb8c.scala:19:13\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        fib4(n - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    Long\n\e[31m   |\e[0m             Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val list\
    \ = List(0, 1, 2, 3, 4)\n        val sum = (1 to n).foldLeft(0)((acc, x) => acc\
    \ + list(x))\n        list(n-1) + list(n-2) + list(n-3) + list(n-4)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6_9crsb.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = (\e[31m1\e[0m to n).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m)\
    \ => acc + list(x))\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp6_9crsb.scala:20:13 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        list(n-\e[31m1\e[0m) + list(n-\e[31m2\e[0m) + list(n-\e[31m3\e\
    [0m) + list(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m\
    \   |\e[0m             Found:    Long\n\e[31m   |\e[0m             Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6_9crsb.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        list(n-\e[31m1\e[0m)\
    \ + list(n-\e[31m2\e[0m) + list(n-\e[31m3\e[0m) + list(n-\e[31m4\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m              \
    \           Found:    Long\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6_9crsb.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        list(n-\e[31m1\e[0m)\
    \ + list(n-\e[31m2\e[0m) + list(n-\e[31m3\e[0m) + list(n-\e[31m4\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp6_9crsb.scala:20:49 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        list(n-\e[31m1\e[0m) + list(n-\e[31m2\e[0m) + list(n-\e\
    [31m3\e[0m) + list(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m             "
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val array\
    \ = new Array[Long](4)\n        val fib : mutable.Buffer[Long] = mutable.Buffer[Long]()\n\
    \        fib.push(0l)\n        fib.push(1l)\n        fib.push(2l)\n        fib.push(3l)\n\
    \        for (i <- 0 until n) {\n            array.update(i)(fib(i))\n       \
    \ }\n        array(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_tirs02.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_tirs02.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.Buffer[\e[35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe_tirs02.scala:24:26 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpe_tirs02.scala:25:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     array.update(i)(fib(i))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter x of \e[33mmethod\e[0m \e[35mupdate\e\
    [0m in \e[33mclass\e[0m \e[35mArray\e[0m: (i: Int, x: Long): Unit\n4 errors found\n"
  stdout: ''
  timestamp: 1660013969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var ret\
    \ = 0\n        var fib = 0\n        for (i <- 0 until n) {\n            fib =\
    \ fib + i\n            if (fib > n) {\n                ret = fib - n\n       \
    \         fib = 0\n            } else {\n                ret = fib\n         \
    \   }\n        }\n        ret\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96kn1f_c.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp96kn1f_c.scala:23:22 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                ret = fib - n\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:  \
    \  Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        require(n>0\
    \ && n < (1l*1l), s\"fib4(n) requires n>0 and n<(1*1)\")\n        (1l*1l*1l*1l*1l).drop(n\
    \ - (1l*1l)).drop(1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwul3jkra.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        (\e[31m1l\e[0m*\e[31m1l\e[0m*\e[31m1l\e[0m*\e\
    [31m1l\e[0m*\e[31m1l\e[0m).drop(n - (\e[31m1l\e[0m*\e[31m1l\e[0m)).drop(\e[31m1\e\
    [0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value drop is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0l || n > 4l) {\n            throw new IllegalArgumentException(\"Invalid input\"\
    )\n        }\n        if (n == 4l) {\n            0l\n        }\n        else\
    \ if (n == 3l) {\n            1l\n        }\n        else {\n            fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Invalid input\n\tat Problem$.fib4(tmpvnk8m0cs.scala:19)\n\
    \tat Problem$.main(tmpvnk8m0cs.scala:32)\n\tat Problem.main(tmpvnk8m0cs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 to n)\n            list\
    \ += fib4(n-i)\n        list.get(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4leuzn53.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4leuzn53.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 2l) {\n            0l\n        } else if (n > 2l && n <= 5l) {\n           \
    \ 1l\n        } else if (n > 5l && n <= 8l) {\n            2l\n        } else\
    \ if (n > 8l) {\n            fib4(n - 5l) + fib4(n - 7l) + fib4(n - 11l)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprar1d1hs.scala:24:15\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        } \e[33melse\e[0m \e\
    [33mif\e[0m (n > \e[31m8l\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\
    \e[31m   |\e[0m               Found:    Unit\n\e[31m   |\e[0m               Required:\
    \ Long\n\e[31m   |\e[0m               Maybe you are missing an else part for the\
    \ conditional?\n\e[31m25 |\e[0m            fib4(n - \e[31m5l\e[0m) + fib4(n -\
    \ \e[31m7l\e[0m) + fib4(n - \e[31m11l\e[0m)\n\e[31m26 |\e[0m        }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Solution\
    \ 1 with recursion\n        if (n <= 1) {\n            return n\n        }\n \
    \       val fib4 = (n: Long, n1: Long, n2: Long, n3: Long, n4: Long) => {\n  \
    \          if (n <= 4) {\n                n\n            } else if (n <= 5) {\n\
    \                n1\n            } else if (n <= 6) {\n                n2\n  \
    \          } else if (n <= 7) {\n                n3\n            } else {\n  \
    \              n4\n            }\n        }\n        val fib = fib4(n,1,0,1,1,1)\n\
    \        fib4(n : Long, fib(n),fib(n - 1),fib(n - 2),fib(n - 3))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbx6488dc.scala:35:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = fib4(n,\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m,\e[31m1\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                 ^\e[0m\n\e[31m   |\e[0mtoo many arguments for\
    \ \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mFunction5\e[0m:\
    \ (v1: Long, v2: Long, v3: Long, v4: Long, v5: Long): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibSeq\
    \ = for {\n                i <- 0 until n\n                j <- 0 until i\n  \
    \          } yield j\n        fibSeq.drop(1).dropRight(1).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7o__xyaf.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                i <- \e[31m0\e\
    [0m until n\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m\
    \   |\e[0m                             Found:    (n : Long)\n\e[31m   |\e[0m \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ : mutable.MutableList[Long] = mutable.MutableList(4l, 8l, 14l)\n        fib.take(n)\
    \ match {\n            case Nil => fib(n).sum\n            case x => fib(n).sum\
    \ + fib(n-1).sum + fib(n-2).sum + fib(n-3).sum + fib(n-4).sum\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpii1m_53m.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m4l\e[0m, \e[31m8l\e[0m, \e[31m14l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpii1m_53m.scala:18:46 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m]\
    \ = mutable.MutableList(\e[31m4l\e[0m, \e[31m8l\e[0m, \e[31m14l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                              Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Queue[Long](4L)\n        for (i <- 0 until n)\n            fib4.enqueue(fib4.dequeue()\
    \ + fib4.dequeue() + fib4.dequeue() + fib4.dequeue())\n        fib4.dequeue()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2r1_evuw.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r1_evuw.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibonacci\
    \ = mutable.ArrayBuffer.fill(n)(0l).withFilter(_.isDefined) \n        fibonacci.headOption.flatMap(n\
    \ => {\n            val old = fibonacci.tail\n            fibonacci.tail = old\
    \ :+ old.head\n            fibonacci\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q2dyafz.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibonacci\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0l\e[0m).withFilter(_.isDefined) \n\e[31m\e[31m   |\e[0m                 \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var sum\
    \ = 0\n        for (i <- 0 to n-1) {\n            sum = sum + i\n        }\n \
    \       return sum\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphekbn7y7.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      import scala.math._\n\
    \      import scala.collection.mutable._\n      def fib4(i: Int) : Long = {\n\
    \        if (i < 0) {\n          throw new IllegalArgumentException(\"fib4 \"\
    \ + n + \" is not a valid n\")\n        }\n        if (i == 0) {\n          return\
    \ 0\n        }\n        if (i == 1) {\n          return 0\n        }\n       \
    \ if (i == 2) {\n          return 2\n        }\n        val j = fib(i - 1)\n \
    \       val k = fib(i - 2)\n        val l = fib(i - 3)\n        val m = fib(i\
    \ - 4)\n        j + k + l + m\n      }\n      fib4(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr515hmd.scala:33:16 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = fib(i - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m         \
    \       Not found: fib\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr515hmd.scala:34:16\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mk\e[0m = fib(i - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: fib\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcr515hmd.scala:35:16 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = fib(i - \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m         \
    \       Not found: fib\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr515hmd.scala:36:16\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = fib(i - \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: fib\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcr515hmd.scala:39:11 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m      fib4(n)\n\e[31m\e[31m   |\e[0m           ^\e[0m\n\
    \e[31m   |\e[0m           Found:    (n : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0) throw new IllegalArgumentException(\"n must be greater than or equal to 0!\"\
    )\n        if (n <= 2) {\n            return n\n        }\n        val fib4Sum\
    \ = mutable.Stream.from(1L).scanLeft(0L)(_ + _)\n        fib4Sum.takeWhile(_ <\
    \ n).sum\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp060imivm.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfib4Sum\e[0m = mutable.Stream.from(\e\
    [31m1L\e[0m).scanLeft(\e[31m0L\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibVals\
    \ = mutable.ArrayBuffer.fill(5) {0 }\n        fibVals(0) = 0\n        fibVals(1)\
    \ = 0\n        fibVals(2) = 2\n        fibVals(3) = 0\n        fibVals(4) = 0\n\
    \        fibVals(5) = 0\n        var counter = 0\n        for ( i <- 0 to (n -\
    \ 4) ) {\n            counter = fibVals(counter)\n            fibVals(counter)\
    \ = fibVals(counter-1) + fibVals(counter-2) + fibVals(counter-3) + fibVals(counter-4)\n\
    \        }\n        fibVals(counter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd5og1_qp.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibVals\e[0m = mutable.ArrayBuffer.fill(\e\
    [31m5\e[0m) {\e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd5og1_qp.scala:26:25 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m ( i <- \e[31m0\e[0m to (n - \e\
    [31m4\e[0m) ) {\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = new mutable.Array[Long]\n        fib(0) = 0\n        fib(1) = 0\n        fib(2)\
    \ = 2\n        fib(3) = 0\n        fib(4) = 0\n        fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4)\n        fib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ty_bm0b.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.Array[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var prev\
    \ : Long = 0\n        var i : Long = 1\n        while (i < n) {\n            prev\
    \ = prev + i\n            i = i * (6l)\n        }\n        return prev\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fpdrbdh.scala:27)\n\tat Problem.main(tmp1fpdrbdh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib4\
    \ = 0\n        var fib5 = 0\n        var fib6 = 0\n        var fib7 = 0\n    \
    \    var fib8 = 0\n        val fib4 = if (n == 0) 0 else fib4 + fib5(n - 1)\n\
    \        val fib5 = if (n == 0) 1 else fib4 + fib5(n - 2)\n        val fib6 =\
    \ if (n == 0) 2 else fib4 + fib5(n - 3)\n        val fib7 = if (n == 0) 3 else\
    \ fib4 + fib5(n - 4)\n        val fib8 = if (n == 0) 4 else fib4 + fib5(n - 4)\n\
    \        fib4\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8yh6reza.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mif\e[0m\
    \ (n == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m fib4 + fib5(n - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfib4 is already defined as \e[33mvariable\e[0m \e[35mfib4\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8yh6reza.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfib5\e[0m = \e[33mif\e[0m (n == \e[31m0\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m fib4 + fib5(n - \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfib5 is already defined as \e[33mvariable\e[0m \e[35mfib5\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8yh6reza.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib6\e[0m = \e[33mif\e[0m (n == \e[31m0\e\
    [0m) \e[31m2\e[0m \e[33melse\e[0m fib4 + fib5(n - \e[31m3\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfib6 is already defined as \e[33mvariable\e[0m \e[35mfib6\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8yh6reza.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib7\e[0m = \e[33mif\e[0m (n == \e[31m0\e\
    [0m) \e[31m3\e[0m \e[33melse\e[0m fib4 + fib5(n - \e[31m4\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfib7 is already defined as \e[33mvariable\e[0m \e[35mfib7\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8y"
  stdout: ''
  timestamp: 1660013977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var x =\
    \ n.toLong\n        var res = n.toLong\n        for (i<-0 to n-2) {\n        \
    \    res = res + x.toLong\n            x = x - 1\n        }\n        if (n <=\
    \ 3) {\n            x = 1\n        } else {\n            x = 3\n        }\n  \
    \      return res + x.toLong\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7q16ydt.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to n-\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = fibonacci(n - 4)\n        fib4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvu8l39mt.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = fibonacci(n\
    \ - \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: fibonacci\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <=\
    \ 1) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_tns_df.scala:22)\n\tat Problem.main(tmpm_tns_df.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0 || n > 400000) throw IllegalArgumentException(\"The fib4 number sequence is\
    \ defined between 1 and 400000 and must be greater than 0 and less than 400000\"\
    )\n        if (n == 0 || n == 1 || n == 2) return n\n        return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: The fib4 number sequence is defined\
    \ between 1 and 400000 and must be greater than 0 and less than 400000\n\tat Problem$.fib4(tmpbu0ghc4p.scala:18)\n\
    \tat Problem$.fib4(tmpbu0ghc4p.scala:20)\n\tat Problem$.fib4(tmpbu0ghc4p.scala:20)\n\
    \tat Problem$.fib4(tmpbu0ghc4p.scala:20)\n\tat Problem$.main(tmpbu0ghc4p.scala:23)\n\
    \tat Problem.main(tmpbu0ghc4p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib3\
    \ = Fib4.fibo3(n / 2) // fib3(3n) is the fibonacci sequence from 0(fib3(0)), 1(fib3(1)),\
    \ 2(fib3(2)), 3(n).\n        n match {\n            case 0 => 0\n            case\
    \ 1 => fib3(0)\n            case 2 => fib3(1) + fib3(0)\n            case 3 =>\
    \ fib3(0)\n            case _ => fib3(1) + fib3(2) + fib3(3) + fib3(0)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplaehhyo_.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib3\e[0m = Fib4.fibo3(n\
    \ / \e[31m2\e[0m) \e[34m// fib3(3n) is the fibonacci sequence from 0(fib3(0)),\
    \ 1(fib3(1)), 2(fib3(2)), 3(n).\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                   Not found: Fib4\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <\
    \ 0) throw new IllegalArgumentException(\"n must be positive!\")\n        if(n\
    \ <= 1) return n\n        val fib4 = mutable.Array[Long]()\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzs5vk_95.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = mutable.Array[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // YOUR\
    \ CODE HERE\n        require(n > 0, \"n must be positive\")\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed: n must be positive\n\
    \tat scala.Predef$.require(Predef.scala:337)\n\tat Problem$.fib4(tmpjbn3k1dy.scala:19)\n\
    \tat Problem$.fib4(tmpjbn3k1dy.scala:23)\n\tat Problem$.fib4(tmpjbn3k1dy.scala:23)\n\
    \tat Problem$.fib4(tmpjbn3k1dy.scala:23)\n\tat Problem$.main(tmpjbn3k1dy.scala:26)\n\
    \tat Problem.main(tmpjbn3k1dy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0 || n >= (2l*4l)) {\n            throw new IllegalArgumentException(\"n is\
    \ a negative number or greater than or equal to 0\")\n        }\n        val fib\
    \ : mutable.MutableList[Int] = mutable.MutableList(4l)\n        for (i<- (2l*4l)\
    \ until ((2l*4l) until (n)) {\n            fib.append(i.toInt + fib(i-1) + fib(i-2)\
    \ + fib(i-3) + fib(i-4))\n        }\n        fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7okkmuc.scala:25:15 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        fib(n) = fib(n-\e[31m1\e[0m) + fib(n-\e[31m2\e\
    [0m) + fib(n-\e[31m3\e[0m) + fib(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \         ^\e[0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7okkmuc.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList(\e[31m4l\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7okkmuc.scala:21:45\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mInt\e[0m] = mutable.MutableList(\e[31m4l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7okkmuc.scala:25:8\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i<-\
    \ (\e[31m2l\e[0m*\e[31m4l\e[0m) until ((\e[31m2l\e[0m*\e[31m4l\e[0m) until (n))\
    \ {\n\e[31m23 |\e[0m            fib.append(i.toInt + fib(i-\e[31m1\e[0m) + fib(i-\e\
    [31m2\e[0m) + fib(i-\e[31m3\e[0m) + fib(i-\e[31m4\e[0m))\n\e[31m24 |\e[0m    \
    \    }\n\e[31m25 |\e[0m        fib(n) = fib(n-\e[31m1\e[0m) + fib(n-\e[31m2\e\
    [0m) + fib(n-\e[31m3\e[0m) + fib(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \           ^\e[0m\n\e[31m   |\e[0mvalue fib is not a member of scala.collection.immutable.NumericRange.Exclusive[Long].\n\
    \e[31m   |\e[0mNote that `fib` is treated as an infix operator in Scala 3.\n\e\
    [31m   |\e[0mIf you do not want that, insert a `;` or empty line in front\n\e\
    [31m   |\e[0mor drop any spaces behind the operator.\n4 errors found\n"
  stdout: ''
  timestamp: 1660013985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) {\n            0\n        } else if (n <= 2) {\n            0\n        }\
    \ else if (n <= 4) {\n            2\n        } else if (n <= 8) {\n          \
    \  0\n        } else {\n            fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2im98lgo.scala:31)\n\tat Problem.main(tmp2im98lgo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib\
    \ : Long = 0\n        var fib2 = 2\n        for (i <- 0 until n) {\n         \
    \   fib += fib2\n            fib2 = fib + (fib2+1)\n        }\n        fib\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgboz3std.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgboz3std.scala:22:19 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            fib2 = fib + (fib2+\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \      Found:    Long\n\e[31m   |\e[0m                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var result\
    \ = 1\n        for (i <- 0 until n) {\n            result = result + i\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmgt6bmt1.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var f4\
    \ = n.toInt\n        var ret = 0\n        for(i<-0 to n){\n            f4= fib4(n-i)\n\
    \            ret= ret + f4\n        }\n        val res= ret\n        f4\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1j0603l.scala:20:20\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m to n){\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg1j0603l.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            f4= fib4(n-i)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val nums\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n        for (x <- 0 to n\
    \ -1)\n            nums += x\n        nums(n).asInstanceOf[Long]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwyn_xmm.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m0\e[0m to n -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprwyn_xmm.scala:21:13 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        nums(n).asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:    (n : Long)\n\
    \e[31m   |\e[0m             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var x =\
    \ 0\n        var fib: Long = 0\n        var a = 0\n        var b = 0\n       \
    \ var c = 0\n        var d = 1\n\n        if (n > 0) {\n            a = fib4(n-1)\n\
    \            b = fib4(n-2)\n            c = fib4(n-3)\n            d = fib4(n-4)\n\
    \            fib = a + b + c + d\n            x = fib\n        }\n        x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6a3s5x9.scala:26:20\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            a = fib4(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6a3s5x9.scala:27:20\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            b = fib4(n-\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6a3s5x9.scala:28:20\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            c = fib4(n-\e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6a3s5x9.scala:29:20\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            d = fib4(n-\e[31m4\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Long\n\e[31m   |\e[0m                Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6a3s5x9.scala:31:16\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            x = fib\n\e[31m\e\
    [31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                Found: \
    \   (fib : Long)\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660013994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoe7k29kw.scala:25)\n\tat Problem.main(tmpoe7k29kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <=\
    \ 1)\n            return 0\n        val a = fib4(n-1)\n        val b = fib4(n-2)\n\
    \        val c = fib4(n-3)\n        val d = fib4(n-4)\n        a+b+c+d\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzial8ysq.scala:27)\n\tat Problem.main(tmpzial8ysq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def fib4(i\
    \ : Long) : Long = {\n            if (i < 5) {\n                return 0\n   \
    \         } else if (i < 10) {\n                return 1\n            } else {\n\
    \                return fib4(i - 4) + fib4(i - 3) + fib4(i - 2) + fib4(i-1)\n\
    \            }\n        }\n        return fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzw3ltou8.scala:30)\n\tat Problem.main(tmpzw3ltou8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // The\
    \ Fibbonacci sequence starts with 0\n        // The Fibbonacci sequence goes on\
    \ up to fib(2*n) where fib(2*n) is defined as follows:\n        // fib2(2 * n)\
    \ == fib2(2*n-1) + fib2(2*n-2).\n        val fib2 : (Long,Long) = (1l,2l)\n  \
    \      val fib3 : (Long,Long) = (1l,3l)\n        var fib4 : (Long,Long) = (0l,0l)\n\
    \n        // fib(2 * n) is the same as fib(n-1) + fib(n-2) since fib(n-1) is defined\
    \ as follows:\n        // fib(n-1) == fib(n-2) + fib(n-3).\n        fib4 =  fib2(fib2._1-1l,fib2._2+fib2._3)\
    \ * fib3\n\n        // fib(n) is the same as fib(n-1) + fib(n-2) + fib(n-3) +\
    \ fib(n-4) since fib(n-1) is defined as follows:\n        // fib(n-1) == fib(n-2)\
    \ + fib(n-3) + fib(n-4).\n        fib4 =  fib4 +  fib3(fib3._1-1l,fib3._2+fib3._3)\
    \ * fib2(fib2._1-1l,fib2._2+fib2._3)\n\n        // fib(n) is the same as fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) since fib(n-1) is defined as follows:\n   \
    \     // fib(n-1) == fib(n-2) + fib(n-3) + fib(n-4).\n        fib4 =  fib4 + \
    \ fib2(fib2._1-1l,fib2._2+fib2._3) * fib3(fib3._1-1l,fib3._2+fib3._3)\n\n    \
    \    // fib(n) is the same as fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) since\
    \ fib(n-1) is defined as follows:\n        // fib(n-1) == fib(n-2) + fib(n-3)\
    \ + fib(n-4).\n        fib4 =  fib4 +  fib2(fib2._1-1l,fib2._2+fib2._3) * fib2(fib3._1-1l,fib3._2+fib3._3)\n\
    \n        // fib(n) is the same as fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) since\
    \ fib(n-1) is defined as follows:\n        // fib(n-1) == fib(n-2) + fib(n-3)\
    \ + fib(n-4).\n        fib4 =  fib4 +  fib3(fib3._1-1l,fib3._2+fib3._3) * fib2(fib2._1-1l,fib2._2+fib2._3)\n\
    \n        // fib\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyj8m1995.scala:27:45 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        fib4 =  fib2(fib2._1-\e[31m1l\e[0m,fib2._2+fib2._3)\
    \ * fib3\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value _3 is not a member of (Long, Long) - did you\
    \ mean fib2._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyj8m1995.scala:31:21\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        fib4 =  fib4 +  fib3(fib3._1-\e\
    [31m1l\e[0m,fib3._2+fib3._3) * fib2(fib2._1-\e[31m1l\e[0m,fib2._2+fib2._3)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of (Long, Long), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyj8m1995.scala:31:53 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        fib4 =  fib4 +  fib3(fib3._1-\e[31m1l\e[0m,fib3._2+fib3._3)\
    \ * fib2(fib2._1-\e[31m1l\e[0m,fib2._2+fib2._3)\n\e[31m\e[31m   |\e[0m       \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  value _3 is not a member of (Long, Long) - did you mean fib3._1?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyj8m1995.scala:31:88 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        fib4 =  fib4 +  fib3(fib3._1-\e[31m1l\e[0m,fib3._2+fib3._3)\
    \ * fib2(fib2._1-\e[31m1l\e[0m,fib2._2+fib2._3)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value _3 is not a member of (Long, Long) - did you\
    \ mean fib2._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyj8m1995.scala:35:21\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        fib4 =  fib4 +  fib2(fib2._1-\e\
    [31m1l\e[0m,fib2._2+fib2._3) * fib3(fib3._1-\e[31m1l\e[0m,fib3._2"
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = (0 until n)\n          .map(i => 0)\n          .scanLeft(0){case (x, acc)\
    \ => acc +: x}\n          .last\n        fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm0t133jy.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e\
    [0m = (\e[31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                          \
    \ ^\e[0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpm0t133jy.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          .scanLeft(\e[31m0\e[0m){\e[33mcase\e[0m (x,\
    \ acc) => acc +: x}\n\e[31m\e[31m   |\e[0m                                   \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                                         value\
    \ +: is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660013998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        n match\
    \ {\n            case 0 => 0\n            case 1 => 0\n            case 2 => 2\n\
    \            case 3 => 0\n            case n => fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\tat Problem$.fib4(tmpkh2ejwbc.scala:21)\n\
    \tat Problem$.fib4(tmpkh2ejwbc.sc"
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = mutable.Set[Long]()\n        for (i <- 0 until n){\n            fib4 += fib4(i-1)+fib4(i-2)+fib4(i-3)+fib4(i-4)\n\
    \        }\n        fib4.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcbyz6946.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcbyz6946.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n >=\
    \ 1) {\n            fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  \
    \      } else {\n            0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptc_eo5mf.scala:25)\n\tat Problem.main(tmptc_eo5mf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n<=0)\n\
    \            0\n        else if(n==1)\n            1\n        else if(n==2)\n\
    \            1\n        else if(n==3)\n            1\n        else fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5p916ve.scala:29)\n\tat Problem.main(tmpn5p916ve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val nums\
    \ = Vector.tabulate(n)(_ + 1).map(x => x(0))\n        nums.toArray(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprfobryk0.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Vector.tabulate(n)(_ + \e[31m1\e[0m).map(\e[36mx\e[0m => x(\e[31m0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmprfobryk0.scala:18:54 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = Vector.tabulate(n)(_\
    \ + \e[31m1\e[0m).map(\e[36mx\e[0m => x(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                    \e[33mparameter\e[0m \e[35mx\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprfobryk0.scala:19:21\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        nums.toArray(n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m    \
    \                 Found:    Long\n\e[31m   |\e[0m                     Required:\
    \ scala.reflect.ClassTag[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m                \
    \     where:    B is a type variable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var lastfib\
    \ : Long = 0\n        var curfib : Long = 1\n        for (i <- 1 to n){\n    \
    \        curfib = lastfib + curfib\n            lastfib = curfib\n        }\n\
    \        lastfib\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dhmx_dr.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n==0)\
    \ 0\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\tat Problem$.fib4(tmpdj0qykjr.scala:19)\n\
    \tat Problem$.fib4(tmpdj0qykjr.sc"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      var ans :\
    \ Long = 0\n      var m : Long = 0\n      var i : Long = 0\n      val n = Math.min(n,\
    \ 100000)\n      while (i < n) {\n        m = (i + n)/2\n        ans = ans + m\n\
    \        i = m\n      }\n      ans\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprvdzghbt.scala:21:23 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = Math.min(n, \e[31m100000\e\
    [0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m    \
    \                   Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var a :\
    \ Long = 0\n        var b : Long = 1\n        var c : Long = 0\n        for (i<-0\
    \ to n by -1){\n            c = b\n            b = a\n            a = c + b\n\
    \        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvwjth6_g.scala:21:21\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to n by -\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                    \
    \ ^\e[0m\n\e[31m   |\e[0m                     Found:    (n : Long)\n\e[31m   |\e\
    [0m                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      if(n<0) throw\
    \ new IllegalArgumentException(\"fib4: negative argument\")\n      val res : List[Long]\
    \ = new Array[Long](n)\n      res(0) = 0\n      res(1) = 0\n      res(2) = 1\n\
    \      res(3) = 0\n      for(i <- n+2 to n+4) res(i) = res(i-1) + res(i-2) + res(i-3)\n\
    \      res(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uqom021.scala:19:45\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mres\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                             ^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uqom021.scala:20:6\
    \ -------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      res(\e[31m0\e[0m)\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      ^^^\e[0m\n\e[31m   |\e[0m  value\
    \ update is not a member of List[Long] - did you mean res.updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6uqom021.scala:21:6 -------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      res(\e[31m1\e[0m) = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m      ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean res.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uqom021.scala:22:6\
    \ -------------------------\e[0m\e[0m\n\e[31m22 |\e[0m      res(\e[31m2\e[0m)\
    \ = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      ^^^\e[0m\n\e[31m   |\e[0m  value\
    \ update is not a member of List[Long] - did you mean res.updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6uqom021.scala:23:6 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      res(\e[31m3\e[0m) = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m      ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean res.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uqom021.scala:24:27\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m      \e[33mfor\e[0m(i <-\
    \ n+\e[31m2\e[0m to n+\e[31m4\e[0m) res(i) = res(i-\e[31m1\e[0m) + res(i-\e[31m2\e\
    [0m) + res(i-\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^\e\
    [0m\n\e[31m   |\e[0m  value update is not a member of List[Long] - did you mean\
    \ res.updated?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uqom021.scala:24:40\
    \ ---------------"
  stdout: ''
  timestamp: 1660014010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = (0 until n).map(x => (x, fib(x)+fib(x-1) + fib(x-2) + fib(x-3))).maxBy(_._2)\n\
    \        fib._1\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3eq3hoj.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e\
    [0m = (\e[31m0\e[0m until n).map(\e[36mx\e[0m => (x, fib(x)+fib(x-\e[31m1\e[0m)\
    \ + fib(x-\e[31m2\e[0m) + fib(x-\e[31m3\e[0m))).maxBy(_._2)\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv3eq3hoj.scala:18:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfib\e[0m = (\e[31m0\e[0m until n).map(\e[36mx\e[0m => (x, fib(x)+fib(x-\e\
    [31m1\e[0m) + fib(x-\e[31m2\e[0m) + fib(x-\e[31m3\e[0m))).maxBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m\
    \                                          Recursive \e[33mvalue\e[0m \e[35mfib\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpv3eq3hoj.scala:18:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mfib\e[0m = (\e[31m0\e[0m until n).map(\e[36mx\e[0m => (x,\
    \ fib(x)+fib(x-\e[31m1\e[0m) + fib(x-\e[31m2\e[0m) + fib(x-\e[31m3\e[0m))).maxBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660014007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val f =\
    \ math.pow (n, 4l)\n        f\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgm08fhfk.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        f\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (f : Double)\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n<0)\
    \ throw new IllegalArgumentException(\"Negative numbers not allowed!\")\n    \
    \    if (n<1) return 0\n        if (n<2) return 1\n        if (n<4) return 2\n\
    \        val a = fib4(n-1)\n        val b = fib4(n-2)\n        val c = fib4(n-3)\n\
    \        val d = fib4(n-4)\n        return a+b+c+d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpft9kklcc.scala:29)\n\tat Problem.main(tmpft9kklcc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def fib(n\
    \ : Long) = (if (n < 4) 1 else fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n -\
    \ 4))\n\n        if (n < 0) throw new IllegalArgumentException(\"fib4 requires\
    \ a non-negative integer\")\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 1\n        else fib(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmp5nss1ct2.scala:18:47 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mfib\e[0m(\e[36mn\e[0m :\
    \ \e[35mLong\e[0m) = (\e[33mif\e[0m (n < \e[31m4\e[0m) \e[31m1\e[0m \e[33melse\e\
    [0m fib(n - \e[31m1\e[0m) + fib(n - \e[31m2\e[0m) + fib(n - \e[31m3\e[0m) + fib(n\
    \ - \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m                    Overloaded or recursive\
    \ \e[33mmethod\e[0m \e[35mfib\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660014004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ : mutable.MutableList[Long] = mutable.MutableList[Long]()\n        for (i <-\
    \ (0 to n-1)){\n            fib.add(fib(i) + fib(i-1) + fib(i-2) + fib(i-3))\n\
    \        }\n        fib.get(n-1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphghui7ai.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphghui7ai.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphghui7ai.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ (\e[31m0\e[0m to n-\e[31m1\e[0m)){\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        require(n\
    \ > 0)\n        var fib: mutable.MutableList[Int] = mutable.MutableList()\n  \
    \      fib(0)\n        fib(1)\n        fib.append(fib(0) + fib(1))\n        for(\
    \ i <- 2 to n ) {\n            fib.append(fib(i) + fib(i - 2))\n        }\n  \
    \      fib.last\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9ydrefh.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m: mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpy9ydrefh.scala:19:44 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m: mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy9ydrefh.scala:23:23 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m( i <- \e[31m2\e[0m to n ) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Your\
    \ code here\n        val seq : mutable.Stack[Long] = new mutable.Stack[Long]\n\
    \        seq += 0\n        seq += 0\n        seq += 0\n        seq += 0\n    \
    \    seq += 0\n        seq.take(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fbdun5x.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mseq\e[0m : mutable.Stack[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Stack[\e[35mLong\e[0m]\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fbdun5x.scala:19:44\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mseq\e[0m : mutable.Stack[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.Stack[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n    \tval a = List(1l,\
    \ 2l, 3l, 4l)\n    \tval b = List(1l, 3l, 5l, 7l)\n    \tval c = List(2l, 5l,\
    \ 8l, 11l)\n    \tval d = List(3l, 7l, 13l, 20l)\n    \tval e = List(5l, 11l,\
    \ 20l, 30l)\n    \tif (n == 0l) 0l else\n    \tif (n == 1l) 1l else\n    \tif\
    \ (n == 2l) 2l else\n    \tif (n == 3l) 3l else\n    \tif (n == 4l) 4l else\n\
    \    \tif (n == 5l) fib4(4l) + fib4(3l) + fib2(2l) + fib1(1l)\n    \telse if (n\
    \ == 6l) fib4(8l) + fib3(7l) + fib2(5l) + fib1(3l)\n    \telse if (n == 7l) fib4(14l)\
    \ + fib3(13l) + fib2(8l) + fib1(2l)\n    \telse if (n == 8l) fib4(21l) + fib3(23l)\
    \ + fib2(15l) + fib1(5l)\n    \telse if (n == 9l) fib4(34l) + fib3(55l) + fib2(20l)\
    \ + fib1(8l)\n    \telse if (n == 10l) fib4(56l) + fib3(89l) + fib2(35l) + fib1(11l)\n\
    \    \telse if (n == 11l) fib4(89l) + fib3(120l) + fib2(50l) + fib1(14l)\n   \
    \ \telse if (n == 12l) fib4(144l) + fib3(169l) + fib2(76l) + fib1(21l)\n    \t\
    else if (n == 13l) fib4(169l) + fib3(240l) + fib2(120l) + fib1(34l)\n    \telse\
    \ if (n == 14l) fib4(240l) + fib3(280l) + fib2(160l) + fib1(56l)\n    \telse if\
    \ (n == 15l) fib4(280l) + fib3(324l) + fib2(200l) + fib1(89l)\n    \telse if (n\
    \ == 16l) fib4(324l) + fib3(370l) + fib2(240l) + fib1(144l)\n    \telse if (n\
    \ == 17l) fib4(370l) + fib3(420l) + fib2(280l) + fib1(169l)\n    \telse if (n\
    \ == 18l) fib4(420l) + fib3(460l) + fib2(320l) + fib1(240l)\n    \telse if (n\
    \ == 19l) fib4(460l) + fib3(510l) + fib2(360l) + fib1(280l)\n    \telse if (\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp087p8czk.scala:43:17 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    \t\e[33melse\e[0m \e[33mif\e[0m (\n\e[31m\e[31m \
    \  |\e[0m    \t         ^\e[0m\n\e[31m   |\e[0m    \t         expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp087p8czk.scala:28:43 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m    \t\e[33mif\e[0m (n == \e[31m5l\e[0m) fib4(\e[31m4l\e[0m) + fib4(\e[31m3l\e\
    [0m) + fib2(\e[31m2l\e[0m) + fib1(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m    \t\
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m    \t         \
    \                          Not found: fib2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp087p8czk.scala:29:37 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m    \t\e[33melse\e[0m \e[33mif\e[0m (n == \e[31m6l\e[0m) fib4(\e\
    [31m8l\e[0m) + fib3(\e[31m7l\e[0m) + fib2(\e[31m5l\e[0m) + fib1(\e[31m3l\e[0m)\n\
    \e[31m\e[31m   |\e[0m    \t                             ^^^^\e[0m\n\e[31m   |\e\
    [0m    \t                             Not found: fib3\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp087p8czk.scala:30:38 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \t\e[33melse\e[0m \e[33mif\e[0m (n == \e[31m7l\e\
    [0m) fib4(\e[31m14l\e[0m) + fib3(\e[31m13l\e[0m) + fib2(\e[31m8l\e[0m) + fib1(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m    \t                              ^^^^\e\
    [0m\n\e[31m   |\e[0m    \t                              Not found: fib3\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp087p8czk.scala:31:38 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \t\e[33melse\e[0m \e[33mif\e[0m (n == \e[31m8l\e\
    [0m) fib4(\e[31m21l\e[0m) + fib3(\e[31m23l\e[0m) + fib2(\e[31m15l\e[0m) + fib1(\e\
    [31m5l\e[0m)\n\e[31m\e[31m   |\e[0m    \t                              ^^^^\e\
    [0m\n\e[31m   |\e[0m    \t                          "
  stdout: ''
  timestamp: 1660014009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val r =\
    \ new scala.collection.mutable.Queue[Long]()\n        r.enqueue(0l)\n        var\
    \ next = 0l\n        while (r.size < n) {\n            next += r.dequeue() + r.dequeue()\
    \ + r.dequeue() + r.dequeue()\n            r.enqueue(next)\n        }\n      \
    \  r.dequeue()\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Queue.dequeue(Queue.scala:77)\n\tat Problem$.fib4(tmplo80acyr.scala:22)\n\
    \tat Problem$.main(tmplo80acyr.scala:28)\n\tat Problem.main(tmplo80acyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 0) 0\n        else if(n % 2 == 0) 0\n        else fib4(n - 1) + fib4(n - 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb9g3af2.scala:23)\n\tat Problem.main(tmpeb9g3af2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 2) 0\n        else if (n <= 3) 2\n        else fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lz_igde.scala:24)\n\tat Problem.main(tmp6lz_igde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib3\
    \ = n / 4\n        val fib2 = fib3 * 3\n        val fib1 = fib2 * 2\n        fib1\
    \ + fib3\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dzta5pe.scala:24)\n\tat Problem.main(tmp8dzta5pe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fib4\
    \ = 0\n        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 +=\
    \ n\n        fib4\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk0_iban.scala:19:13 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        fib4 += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk0_iban.scala:20:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        fib4 += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk0_iban.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        fib4 += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk0_iban.scala:22:13 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        fib4 += n\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibSeq\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        fibSeq += 0\n       \
    \ fibSeq += 0\n        fibSeq += 2\n        fibSeq += 0\n        fibSeq += 0\n\
    \        fibSeq.last\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptffxbz69.scala:27)\n\tat Problem.main(tmptffxbz69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibSeq\
    \ = mutable.Stack[Int](0,1)\n        (fibSeq.push(n).toLong,fibSeq.push(n*2).toLong,fibSeq.push(n*3).toLong,fibSeq.push(n*4).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivw090ow.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e[0m = mutable.Stack[\e\
    [35mInt\e[0m](\e[31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivw090ow.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        (fibSeq.push(n).toLong,fibSeq.push(n*\e\
    [31m2\e[0m).toLong,fibSeq.push(n*\e[31m3\e[0m).toLong,fibSeq.push(n*\e[31m4\e\
    [0m).toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nothing, Nothing, Nothing, Nothing)\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var result\
    \ : Long = 0\n        val fib = new mutable.LinkedHashSet[Long]\n        fib.add(0l)\n\
    \        for(i <- 1 to n) {\n            if(fib.contains(n)) {\n             \
    \   result = fib.last\n            } else {\n                fib.add(fib.last+fib.last)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_gaqk5i5.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedHashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_gaqk5i5.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val ret\
    \ = new scala.collection.mutable.ListBuffer[Long]()\n        for (i<-0 to (n-1))\
    \ {\n            ret.add(0)\n        }\n        for (j<-0 to (n-1)) {\n      \
    \      val tmp = ret(i) + ret(j+1)\n            ret(i) = tmp\n        }\n    \
    \    ret(n-1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6737mcax.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to (n-\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e\
    [0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6737mcax.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            ret.add(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6737mcax.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (j<-\e\
    [31m0\e[0m to (n-\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e\
    [0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6737mcax.scala:23:26 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mtmp\e[0m = "
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Your\
    \ code goes here.\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjotrjr5.scala:17:32\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mfib4\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    Unit\n\e[31m   |\e[0m                                Required:\
    \ Long\n\e[31m18 |\e[0m        \e[34m// Your code goes here.\e[0m\n\e[31m19 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = 0\n        for( i <- 1 to n ) {\n            fib4 += i\n        }\n      \
    \  fib4\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq3o_cev.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnq3o_cev.scala:20:17 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            fib4 += i\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean fib4.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val x =\
    \ math.BigInt(n)\n        if (n == 0) x\n        else fib4(math.BigInt(n).minus(1).minus(2)).minus(3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_0pd93b.scala:19:20\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (n == \e\
    [31m0\e[0m) x\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    (x : BigInt)\n\e[31m   |\e[0m                 \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_0pd93b.scala:20:33\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m fib4(math.BigInt(n).minus(\e\
    [31m1\e[0m).minus(\e[31m2\e[0m)).minus(\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value minus\
    \ is not a member of BigInt - did you mean BigInt.min?\n2 errors found\n"
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n       val result\
    \ = new collection.mutable.HashSet[Long]()\n       val nn = math.max(2l, n)\n\
    \       val n1 = n / nn\n       val n2 = n % nn\n       result.add(0l)\n     \
    \  result.add(1l)\n       result.add(2l)\n       result.add(3l)\n       result(nn)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvr96f5ji.scala:26:13\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m       result(nn)\n\e[31m\e[31m\
    \   |\e[0m       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    Boolean\n\e\
    [31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fibbonacci\
    \ : Array[Long] = new Array[Long](6)\n        fibbonacci(0) = 0\n        fibbonacci(1)\
    \ = 0\n        fibbonacci(2) = 2\n        fibbonacci(3) = 0\n        fibbonacci(4)\
    \ = 0\n        fibbonacci(5) = 0\n        var fib : Long = 0\n        for(i <-\
    \ 0 until n) {\n            fib = fibbonacci(i) + fibbonacci(i-1) + fibbonacci(i-2)\
    \ + fibbonacci(i-3) + fibbonacci(i-4)\n            fibbonacci(i) = fib\n     \
    \   }\n        fibbonacci(6) = fib\n        return fibbonacci(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphppjy7zz.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphppjy7zz.scala:31:26 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        \e[33mreturn\e[0m fibbonacci(n)\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val f =\
    \ mutable.ListBuffer[Long]()\n        for(i <- (0 to 4)) {\n            f.append(f(n\
    \ - 1) + f(n - 2) + f(n - 3) + f(n - 4))\n        }\n        f.last\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cl7euxt.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      val fib :\
    \ mutable.MutableList[Long] = mutable.MutableList(1l)(1l)\n      fib(n-1)(2l)(3l)(4l)\
    \ += fib(n-2)(4l)(6l)(8l)(14l) }\n}\n</code>\n<|/ a tags=scala |>\n<| c |>\nThis\
    \ is not working for large numbers.  For n = 10000000000 it gets stuck at fib(n-1)(4l)(6l)(8l)(14l)\
    \ += fib(n-2)(4l)(6l)(8l)(14l).  Any idea why?\n<|/ c |>\n<| c |>\nNot sure why\
    \ it didn't work. I'll post an update when I get it working correctly.\n<|/ c\
    \ |>\n<| a dscore=2 tags=scala |>\nThe answer that uses mutable is wrong.\nThe\
    \ answer, which uses functional programming is correct.\n<code>\ndef fib(n: Long):\
    \ Long = {\n  def fibs(n: Long, acc: Long): Long = n match {\n    case 0 => acc\n\
    \    case 1 => acc\n    case 2 => acc\n    case _ => fibs(n-1, acc + acc) + fibs(n-2,\
    \ acc + acc) + fibs(n-3, acc + acc) + fibs(n-4, acc + acc)\n  }\n  fibs(n, 0L)\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is not working for large numbers.  For n =\
    \ 10000000000 it gets stuck at fibs(n-1, acc + acc) + fibs(n-2, acc + acc) + fibs(n-3,\
    \ acc + acc) + fibs(n-4, acc + acc).  Any idea why?\n<|/ c |>\n<| c |>\nI ran\
    \ a test on n=1000000000 and it worked fine.  Are you sure you're running the\
    \ latest version of this?\n<|/ c |>\n<| c |>\nYes and I did notice that it is\
    \ actually very slow. Maybe it's because I am calling this in a loop. I am trying\
    \ to see if I can parallelize it but I am not sure how that would be done.\n<|/\
    \ c |>\n<| c |>\nI updated my answer based on yours. I was running a test on a\
    \ laptop that didn't have enough memory for that.  It will now work in parallel.\n\
    <|/ c |>\n<| c |>\nThis algorithm is also not working for n = 10000000000. I am\
    \ running scala 2.9.2 and am using Intellij to run the code. I will post the code\
    \ I have used as an update to my original question.\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpju035q3h.scala:21:0 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpju035q3h.scala:42:0 ----------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpju035q3h.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpju035q3h.scala:18:16 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m      \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e[35mLong\e\
    [0m] = mutable.MutableList(\e[31m1l\e[0m)(\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpju035q3h.scala:18:44\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mfib\e\
    [0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m1l\e[0m)(\e\
    [31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                            Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpju035q3h.scala:61:11\
    \ ------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    assert(fib4((\e[31m5l\e\
    [0m)) == (\e[31m4l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: fib4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpju035q3h.scala:62:11 ------------------------\e[0m\e\
    [0"
  stdout: ''
  timestamp: 1660014020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n ==\
    \ 0) {\n            return 0\n        }\n        if(n == 1) {\n            return\
    \ 1\n        }\n        if(n == 2) {\n            return 2\n        }\n      \
    \  if(n == 3) {\n            return 0\n        }\n        val fib = mutable.ListBuffer(4l,\
    \ 8l, 14l)\n        fib += fib(n-1) + fib(n-2) + fib(n-3)\n        fib.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7an5i_o2.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = mutable.ListBuffer(\e\
    [31m4l\e[0m, \e[31m8l\e[0m, \e[31m14l\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <\
    \ 2) return n\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyvml5yxm.scala:22)\n\tat Problem.main(tmpyvml5yxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var result\
    \ = new collection.mutable.ListBuffer[Long]\n        for(i <- 0 until n)\n   \
    \         result.append(result.lastOption.map(_+i).getOrElse(i))\n        result.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3u87y3z_.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp3u87y3z_.scala:20:19 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            result.append(result.lastOption.map(_+i).getOrElse(i))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e\
    [0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems: Long*): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m (elem: Long): scala.collection.mutable.ListBuffer[Long]\n\e[31m\
    \   |\e[0mmatch arguments (AnyVal)\n2 errors found\n"
  stdout: ''
  timestamp: 1660014028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val f =\
    \ mutable.Set[Long]()\n        val n = mutable.Set[Long]()\n        f += 0l\n\
    \        n += 0l\n        f += 2l\n        n += 2l\n        f += 4l\n        n\
    \ += 4l\n        f += 8l\n        n += 8l\n        f += 16l\n        n += 16l\n\
    \        f += 32l\n        n += 32l\n        f += 64l\n        n += 64l\n    \
    \    f.size\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpykfh1v11.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpykfh1v11.scala:19:16 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = mutable.ArrayBuffer[Long]()\n        var prev = 0\n        var current = 1\n\
    \        var next = prev + current\n        var c = n\n        while (c > 1) {\n\
    \            fib4 += prev\n            prev = current\n            current = next\n\
    \            next = prev + current\n            c = c - 1\n        }\n       \
    \ fib4 += prev\n        fib4.last\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttv0ozez.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4n\
    \ = fib4(n-1)\n        fib4n + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\tat Problem$.fib4(tmpa5ofuk4q.scala:18)\n\
    \tat Problem$.fib4(tmpa5ofuk4q.sc"
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib\
    \ = new mutable.MutableList[Long]()\n        var fibVal : Long = 1\n        for(\
    \ i <- 1 to n ){\n            fib.add( fibVal )\n            fibVal = fibVal *\
    \ 3 + 1\n        }\n        fib.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyk7zcoj.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyk7zcoj.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0 || n == 1) return n\n        val retVal = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n        retVal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\tat Problem$.fib4(tmp2h94ezl2.scala:19)\n\
    \tat Problem$.fib4(tmp2h94ezl2.sc"
  stdout: ''
  timestamp: 1660014031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 3) {\n            0\n        }\n        else {\n            fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8js26ew.scala:26)\n\tat Problem.main(tmpq8js26ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <\
    \ 0 || n > 4) return 0\n        val a = scala.math.BigInt(0)\n        val b =\
    \ scala.math.BigInt(1)\n        var x = 1l\n        while(x < (n * 4)) {\n   \
    \         x = (a+b).abs\n            b = a\n            a = x\n        }\n   \
    \     val y = (a+b).abs\n        if(((n*4) - y) < 0) y else ((n * 4) - y)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx85jsig1.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            x = (a+b).abs\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Found:    BigInt\n\e[31m   |\e[0m                Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpx85jsig1.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            b = a\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpx85jsig1.scala:25:14 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            a = x\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx85jsig1.scala:28:28 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(((n*\e[31m4\e[0m) - y) < \e[31m0\e\
    [0m) y \e[33melse\e[0m ((n * \e[31m4\e[0m) - y)\n\e[31m\e[31m   |\e[0m       \
    \                     ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (y : BigInt)\n\e[31m   |\e[0m                            Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx85jsig1.scala:28:36\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(((n*\e\
    [31m4\e[0m) - y) < \e[31m0\e[0m) y \e[33melse\e[0m ((n * \e[31m4\e[0m) - y)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    BigInt\n\e[31m   |\e[0m\
    \                                    Required: Long\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660014035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4n\
    \ = 1 :+ ( 2 :+ ( 3 :+ ( 4 :+ ( 0 :+ ( 1 :+ ( 0 :+ ( 0 :+ fib4n(n-1) + fib4n(n-2)\
    \ + fib4n(n-3) + fib4n(n-4)) ) ) ) ) )\n        fib4n(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphr94gl7q.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphr94gl7q.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4n\e[0m = \e[31m1\e[0m :+ ( \e[31m2\e[0m :+ ( \e[31m3\e[0m :+ ( \e[31m4\e\
    [0m :+ ( \e[31m0\e[0m :+ ( \e[31m1\e[0m :+ ( \e[31m0\e[0m :+ ( \e[31m0\e[0m :+\
    \ fib4n(n-\e[31m1\e[0m) + fib4n(n-\e[31m2\e[0m) + fib4n(n-\e[31m3\e[0m) + fib4n(n-\e\
    [31m4\e[0m)) ) ) ) ) )\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                    value :+ is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphr94gl7q.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4n\e[0m = \e[31m1\e[0m\
    \ :+ ( \e[31m2\e[0m :+ ( \e[31m3\e[0m :+ ( \e[31m4\e[0m :+ ( \e[31m0\e[0m :+ (\
    \ \e[31m1\e[0m :+ ( \e[31m0\e[0m :+ ( \e[31m0\e[0m :+ fib4n(n-\e[31m1\e[0m) +\
    \ fib4n(n-\e[31m2\e[0m) + fib4n(n-\e[31m3\e[0m) + fib4n(n-\e[31m4\e[0m)) ) ) )\
    \ ) )\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e\
    [0m                           value :+ is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphr94gl7q.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4n\e[0m = \e[31m1\e[0m\
    \ :+ ( \e[31m2\e[0m :+ ( \e[31m3\e[0m :+ ( \e[31m4\e[0m :+ ( \e[31m0\e[0m :+ (\
    \ \e[31m1\e[0m :+ ( \e[31m0\e[0m :+ ( \e[31m0\e[0m :+ fib4n(n-\e[31m1\e[0m) +\
    \ fib4n(n-\e[31m2\e[0m) + fib4n(n-\e[31m3\e[0m) + fib4n(n-\e[31m4\e[0m)) ) ) )\
    \ ) )\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value :+ is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphr94gl7q.scala:18:43 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4n\e[0m = \e[31m1\e[0m\
    \ :+ ( \e[31m2\e[0m :+ ( \e[31m3\e[0m :+ ( \e[31m4\e[0m :+ ( \e[31m0\e[0m :+ (\
    \ \e[31m1\e[0m :+ ( \e[31m0\e[0m :+ ( \e[31m0\e[0m :+ fib4n(n-\e[31m1\e[0m) +\
    \ fib4n(n-\e[31m2\e[0m) + fib4n(n-\e[31m3\e[0m) + fib4n(n-\e[31m4\e[0m"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var x =0\
    \ // Use a mutable variable to hold the current number in the sequence\n     \
    \   var a =0l\n        var b = 0l\n        var c = 0l\n        var d = 0l\n  \
    \      var f = 0l\n        \n        for(i <- 0 until (n-1)) \n        {\n   \
    \         if(i%2==0) {\n                a = a + 1l\n            } else  {\n  \
    \              b = b + 2l\n            }\n        }\n        \n        for (j\
    \ <- 0 until (n-1))\n        {\n            if(j%2==0) {\n                c =\
    \ c + 2l\n            } else  {\n                d = d + 3l\n            }\n \
    \       }\n        \n        for (k <- 0 until (n-1))\n        {\n           \
    \ if(k%2==0) {\n                f = f + 4l\n            } else  {\n          \
    \      a = a + 5l\n            }\n        }\n        \n        \n        return\
    \ (a + ((b) + (c) + (d) + (f))) //return the last number of the sequence\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvuj8a08.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until (n-\e[31m1\e[0m)) \n\e[31m\e[31m   |\e[0m                   \
    \       ^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyvuj8a08.scala:34:27 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m (j <- \e[31m0\e[0m until (n-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                           Found:    Long\n\e[31m   |\e[0m         \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyvuj8a08.scala:43:27 --------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mfor\e[0m (k <- \e[31m0\e[0m until (n-\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4Iter\
    \ = fib4Iter()\n        fib4Iter.next\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa431g4tf.scala:18:23 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4Iter\e[0m = fib4Iter()\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvalue\e[0m \e[35mfib4Iter\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660014028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fibo\
    \ = mutable.ArrayBuffer(0)\n        fibo.update(0, 0l)(_ + _)\n        var i :\
    \ Long = 1\n        while(i < n) {\n            fibo.update(i)(fibo(i) + fibo(i+1))(_\
    \ + _)\n            i += 1\n        }\n        fibo(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputhzrey5.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfibo\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp276ddzz1.scala:22)\n\tat Problem.main(tmp276ddzz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var a :\
    \ Long = 1\n        var b : Long = 1\n        var c : Long = 1\n        var d\
    \ : Long = 1\n        var e : Long = 1\n        for (i<-0 until n) {\n       \
    \     val temp = a\n            a = b\n            b = c\n            c = d\n\
    \            d = e\n            e = temp + a * b * c * d\n        }\n        return\
    \ e\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dadg3e_.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n==0)\
    \ 1\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\tat Problem$.fib4(tmpjzct8qq6.scala:19)\n\
    \tat Problem$.fib4(tmpjzct8qq6.sc"
  stdout: ''
  timestamp: 1660014038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0l) 0l\n        else if (n == 1l) 0l\n        else if (n == 2l) 2l\n       \
    \ else if (n == 3l) 0l\n        else fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Your\
    \ code goes here\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_a34qs8s.scala:17:32\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m    \e[33mdef\e[0m \e[36mfib4\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    Unit\n\e[31m   |\e[0m                                Required:\
    \ Long\n\e[31m18 |\e[0m        \e[34m// Your code goes here\e[0m\n\e[31m19 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4num\
    \ = scala.collection.mutable.ArrayBuffer[Long]()\n        fib4num += 0\n     \
    \   fib4num += 0\n        fib4num += 2\n        fib4num += 0\n        fib4num\
    \ += fib4num.last\n        fib4num += fib4num.last\n        fib4num += fib4num.last\n\
    \        fib4num += fib4num.last\n        fib4num.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gger26y.scala:30)\n\tat Problem.main(tmp7gger26y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        n match\
    \ {\n            case 0 => 0\n            case 1 => 0\n            case _ => 1\
    \ + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\tat Problem$.fib4(tmpobtvrhqv.scala:21)\n\
    \tat Problem$.fib4(tmpobtvrhqv.sc"
  stdout: ''
  timestamp: 1660014039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val a =\
    \ mutable.ArrayBuffer(0)\n        val b = mutable.ArrayBuffer(0)\n        val\
    \ c = mutable.ArrayBuffer(0)\n        for (i <- 0 until n) {\n            a.append(i.toLong)\n\
    \            b.append(i.toLong)\n            c.append(i.toLong)\n        }\n \
    \       val d = mutable.ArrayBuffer(0)\n        val e = mutable.ArrayBuffer(0)\n\
    \        val f = mutable.ArrayBuffer(0)\n        for (i <- 0 until n) {\n    \
    \        d += a(0)\n            e += b(0)\n            f += c(0)\n        }\n\
    \        (d + e + f).toLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zqfwidi.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7zqfwidi.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mb\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zqfwidi.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mc\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7zqfwidi.scala:21:26 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zqfwidi.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36md\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zqfwidi.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660014040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def loop(n:\
    \ Long, m: Long, acc: Long, i: Int) : Long = {\n            i match {\n      \
    \          case 0 => acc\n                case 1 => loop(n-1, m+acc, acc, 1)\n\
    \                case 2 => loop(n-2, m+acc, acc, 2)\n                case 3 =>\
    \ loop(n-3, m+acc, acc, 3)\n                case _ => loop(n-4, m+acc, acc, 4)\n\
    \            }\n        }\n        loop(n, n, 0, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmil08mft.scala:30)\n\tat Problem.main(tmpmil08mft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val ret\
    \ = (0l).+(if (n%2 == 0) 0l else 1l)\n        ret +: fib4(n / 2l) +: fib4(n /\
    \ 2l) + 1l\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmprgn_7cwu.scala:19:31 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        ret +: fib4(n / \e[31m2l\e[0m) +: fib4(n / \e\
    [31m2l\e[0m) + \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m+: (which is right-associative) and + (which is left-associative)\
    \ have same precedence and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0)\n            return 0\n        if (n == 1)\n            return 1\n      \
    \  if (n == 2)\n            return 2\n        if (n == 3)\n            return\
    \ 0\n        if (n == 4)\n            return 4\n\n        val a = 0\n        val\
    \ b = 1\n        val c = 2\n        val d = 0\n        val e = 4\n\n        var\
    \ fib : Long = 0\n        var i = 0\n        while (i<n-1){\n            fib =\
    \ a + b + c + d\n            a = b\n            b = c\n            c = d\n   \
    \         d = e\n            e = fib\n            i += 1\n        }\n        fib\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpje0to3py.scala:39:14 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            a = b\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpje0to3py.scala:40:14 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            b = c\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpje0to3py.scala:41:14 -----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            c = d\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val c\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpje0to3py.scala:42:14 -----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            d = e\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val d\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpje0to3py.scala:43:16 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            e = fib\n\e[31m\e[31m   |\e[0m          \
    \      ^^^\e[0m\n\e[31m   |\e[0m                Found:    (fib : Long)\n\e[31m\
    \   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660014043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n      val fib:\
    \ mutable.Array[Int] = new mutable.Array[Int](n)\n      fib(0) = 0\n      fib(1)\
    \ = 0\n      fib(2) = 2\n      fib(3) = 0\n      for ( i <- 4 until n) {\n   \
    \     fib(i) = fib(i-1) + fib(i-2) + fib(i-3) + fib(i-4)\n      }\n      fib.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj8_k_z_v.scala:18:15 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mfib\e[0m: mutable.Array[\e\
    [35mInt\e[0m] = \e[33mnew\e[0m mutable.Array[\e[35mInt\e[0m](n)\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj8_k_z_v.scala:18:40\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mfib\e\
    [0m: mutable.Array[\e[35mInt\e[0m] = \e[33mnew\e[0m mutable.Array[\e[35mInt\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8_k_z_v.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m      \e[33mfor\e[0m ( i <- \e\
    [31m4\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var x :\
    \ (Long, Long) = (1, 0)\n        var i : Long = 1\n\n        while (i < n) {\n\
    \            (x := x._1, i := i + 1)\n        }\n\n        x._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyyrmya3.scala:22:15 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            (x := x._1, i := i + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0mvalue := is not a member of\
    \ (Long, Long) - did you mean (Long, Long).!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcyyrmya3.scala:22:26 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            (x := x._1, i := i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                value := is\
    \ not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660014046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // write\
    \ your code here\n        val res = List[Int]()\n        var a=0\n        var\
    \ b=1\n        var c=0\n        var d=2\n        while(n>0) {\n            if(n<=4)\
    \ {\n                res = a :+ b\n            }\n            else {\n       \
    \         res = c :+ d\n            }\n            n = n-4\n            a=b\n\
    \            b=c\n            c=d\n            d=res.head\n        }\n       \
    \ res.head\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq33yuqxp.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                res = a :+ b\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                      value :+\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq33yuqxp.scala:29:24\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                res = c :+\
    \ d\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   value :+ is not a member of Int\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpq33yuqxp.scala:31:14 -----------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m            n = n-\e[31m4\e[0m\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660014048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib3\
    \ = new mutable.LongArray[Long](4)\n        fib3(0) =  0\n        fib3(1) =  0\n\
    \        fib3(2) =  1\n        fib3(3) =  1\n        val fib2 = new mutable.LongArray[Long](4)\n\
    \        fib2(0) =  1\n        fib2(1) =  1\n        fib2(2) =  2\n        fib2(3)\
    \ =  2\n        val fib1 = new mutable.LongArray[Long](4)\n        fib1(0) = \
    \ 2\n        fib1(1) =  2\n        fib1(2) =  3\n        fib1(3) =  3\n      \
    \  val fib0 = new mutable.LongArray[Long](4)\n        fib0(0) =  3\n        fib0(1)\
    \ =  3\n        fib0(2) =  4\n        fib0(3) =  4\n        if(n<=1l) {\n    \
    \        fib3(n)\n        }\n        else if(n>1l) {\n            fib3(n) += fib4(n-1)\n\
    \            fib3(n) += fib4(n-2)\n            fib3(n) += fib4(n-3)\n        \
    \    fib3(n) += fib4(n-4)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4s7tjtd.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib3\e[0m = \e[33mnew\e\
    [0m mutable.LongArray[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4s7tjtd.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mfib2\e[0m = \e[33mnew\e[0m mutable.LongArray[\e[35mLong\e[0m](\e[31m4\e[0m)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi4s7tjtd.scala:28:23 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfib1\e[0m = \e[33mnew\e[0m mutable.LongArray[\e\
    [35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4s7tjtd.scala:33:23 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfib0\e[0m = \e[33mnew\e\
    [0m mutable.LongArray[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4s7tjtd.scala:41:13\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m(n>\e[31m1l\e[0m) {\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e\
    [0m             Found:    Unit\n\e[31m   |\e[0m             Required: Long\n\e\
    [31m   |\e[0m             Maybe you are missing an else part for the conditional?\n\
    \e[31m42 |\e[0m            fib3(n) += fib4(n-\e[31m1\e[0m)\n\e[31m43 |\e[0m  \
    \  "
  stdout: ''
  timestamp: 1660014043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0 else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.scala:18)\n\tat Problem$.fib4(tmpoz443ipc.scala:18)\n\
    \tat Problem$.fib4(tmpoz443ipc.sc"
  stdout: ''
  timestamp: 1660014048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 1) {\n            n\n        } else {\n            // return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n            val temp = n\n            fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n            temp\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjohtnnm8.scala:28)\n\tat Problem.main(tmpjohtnnm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n        else if\
    \ (n == 3) 1\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp59d_mtdi.scala:25)\n\tat Problem.main(tmp59d_mtdi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val list\
    \ = mutable.ListBuffer.empty[Long]\n        for (i <- 0 until n)\n        list\
    \ += fib4(i)\n        list.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnllnjy41.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnllnjy41.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var a =\
    \ mutable.ListBuffer[Long]()\n        var n = n.toInt\n        var i = 1;\n  \
    \      while (n > 0) {\n            a.append(i)\n            i = i + 2\n     \
    \       n = n - 1\n        }\n        a.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0zrw3te.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmps0zrw3te.scala:19:16 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var fibo\
    \ : mutable.Array[Long] = mutable.Array()\n        fibo(0) = 0\n        fibo(1)\
    \ = 0\n        fibo(2) = 2\n        fibo(3) = 0\n        for(i<-0 until n){\n\
    \            fibo(i) = fibo(i-1)+ fibo(i-2)+ fibo(i-3)+ fibo(i-4)\n        }\n\
    \        fibo(n-1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ocaiz88.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfibo\e[0m : mutable.Array[\e\
    [35mLong\e[0m] = mutable.Array()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ocaiz88.scala:18:41 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfibo\e[0m : mutable.Array[\e\
    [35mLong\e[0m] = mutable.Array()\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9ocaiz88.scala:23:23 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0m                       Found: \
    \   (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660014053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n<0)\
    \ 0\n        else if (n==0) 1\n        else if (n==1) 1\n        else if (n==2)\
    \ 2\n        else if (n>2) fib4(n-2) + fib4(n-3)\n        else fib4(n-1) + fib4(n-2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3hvk838z.scala:27)\n\tat Problem.main(tmp3hvk838z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4List\
    \ = List[Long]()\n        fib4List ::= fib4(n - 1)\n        fib4List ::= fib4(n\
    \ - 2)\n        fib4List ::= fib4(n - 3)\n        fib4List ::= fib4(n - 4)\n \
    \       fib4List(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4jzpq62d.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        fib4List ::= fib4(n - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a\
    \ member of List[Long] - did you mean fib4List.::?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4jzpq62d.scala:20:17 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        fib4List ::= fib4(n - \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a member of\
    \ List[Long] - did you mean fib4List.::?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4jzpq62d.scala:21:17 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        fib4List ::= fib4(n - \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value ::= is not a member of List[Long] - did you mean\
    \ fib4List.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4jzpq62d.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        fib4List ::= fib4(n\
    \ - \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m     value ::= is not a member of List[Long] - did you mean fib4List.::?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660014055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = mutable.Stack[Long]()\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhcjg00h.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def memo(m:\
    \ Map[Long, Long]) = m.getOrElseUpdate(n) { n =>\n            val newN = n+(n+2)\n\
    \            if(newN <= 7) memo(m + (n -> newN))\n            else memo(m + (n\
    \ -> memo(m + (n -> newN))))\n        }\n        memo(Map())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnde9mrio.scala:18:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mmemo\e[0m(\e[36mm\e[0m:\
    \ \e[35mMap\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]) = m.getOrElseUpdate(n) { \e\
    [36mn\e[0m =>\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter op of \e[33mmethod\e[0m \e\
    [35mgetOrElseUpdate\e[0m in \e[33mtrait\e[0m \e[35mMapOps\e[0m: (key: Long, op:\
    \ => Long): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660014050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_meh5ey.scala:25)\n\tat Problem.main(tmp1_meh5ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fibs\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        if (n >= 3 ) fibs += 0\n        if (n >= 4\
    \ ) fibs += 2\n        fibs(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwmq_hv9f.scala:24:13\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        fibs(n)\n\e[31m\e[31m\
    \   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Found:    (n : Long)\n\
    \e[31m   |\e[0m             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib1\
    \ : mutable.Buffer[Long] = mutable.Buffer.fill(5)(0)\n        fib1 += fib1.last\n\
    \        fib1 += fib1(1) + fib1(2) + fib1(3) + fib1(4)\n        fib1.drop(n).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbeb0n45_.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib1\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer.fill(\e[31m5\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbeb0n45_.scala:18:42\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib1\e[0m : mutable.Buffer[\e[35mLong\e[0m] = mutable.Buffer.fill(\e[31m5\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib1\
    \ = 1\n        val fib2 = 2\n        val fib3 = 2\n        val fib4 = 3\n    \
    \    val fib5 = n\n        if (n==0) fib5\n        else fib4(fib5-1) + fib1(fib5-2)\
    \ + fib2(fib5-3) + fib3(fib5-4) \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpxgeee09v.scala:24:13 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m fib4(fib5-\e[31m1\e[0m) + fib1(fib5-\e\
    [31m2\e[0m) + fib2(fib5-\e[31m3\e[0m) + fib3(fib5-\e[31m4\e[0m) \n\e[31m\e[31m\
    \   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0m             \e[33mvalue\e[0m\
    \ \e[35mfib4\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if(n <\
    \ 0) throw new IllegalArgumentException(\"fib4 requires non-negative input\")\n\
    \        if(n <= 2l) 0l\n        else if(n <= 4l) 0l\n        else 2l + fib4(3l)\
    \ + fib4(5l) + fib4(7l) + fib4(9l)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.scala:21)\n\tat Problem$.fib4(tmpge2ljosy.scala:21)\n\
    \tat Problem$.fib4(tmpge2ljosy.sc"
  stdout: ''
  timestamp: 1660014056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def helper(n:\
    \ Long, fib4: mutable.Buffer[Long]) : Long = {\n            if (n == 0) fib4 +=\
    \ 0\n            else if (n == 1) fib4 += 0\n            else helper(n-1, fib4)\
    \ += helper(n-2, fib4) += helper(n-3, fib4) += helper(n-4, fib4)\n        }\n\
    \        helper(n, mutable.Buffer[Long]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1qfnoxf.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mhelper\e[0m(\e[36mn\e[0m:\
    \ \e[35mLong\e[0m, \e[36mfib4\e[0m: mutable.Buffer[\e[35mLong\e[0m]) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1qfnoxf.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m helper(n-\e[31m1\e[0m, fib4)\
    \ += helper(n-\e[31m2\e[0m, fib4) += helper(n-\e[31m3\e[0m, fib4) += helper(n-\e\
    [31m4\e[0m, fib4)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1qfnoxf.scala:23:18\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        helper(n, mutable.Buffer[\e\
    [35mLong\e[0m]())\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660014056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def fib(i\
    \ : Long, acc : Long) : Long = if (i >= n) acc else fib(i - 1, acc + fib(i + 1,\
    \ 0))\n        fib(n, 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm42yejxc.scala:22)\n\tat Problem.main(tmpm42yejxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660014057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val result\
    \ = mutable.Long.empty\n        for (i <- 0 to n) {\n            result += (i\
    \ to ((i + 1) to (4 * i to i)))\n        }\n        result.toArray[Long](0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfuqadbj9.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Long.empty\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfuqadbj9.scala:19:23 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660014057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        var ans\
    \ : Long = 0\n        var i : Long = 1\n        var tmp : Long = 1\n        while(n\
    \ > 0) {\n            tmp = tmp + i\n            i = i << 1\n            n = n\
    \ - 1\n        }\n        ans = tmp\n        return ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpj99qkp39.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0 || n == 1) {\n            return n\n        }\n        else {\n          \
    \  val temp = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n            return\
    \ temp\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\tat Problem$.fib4(tmpmnezxm_e.scala:22)\n\
    \tat Problem$.fib4(tmpmnezxm_e.sc"
  stdout: ''
  timestamp: 1660014058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        // Your\
    \ code goes here\n        val fib4 = scala.collection.mutable.ArrayBuffer(0 until\
    \ n)\n        for (i<-0 to n -1 ){\n            fib4 += (fib4(i+1) + (fib4(i+2))\
    \ + (fib4(i+3)) + (fib4(i+4)))\n        }\n        fib4(n-1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekx5lnlo.scala:19:64\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib4\e\
    [0m = scala.collection.mutable.ArrayBuffer(\e[31m0\e[0m until n)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekx5lnlo.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to n -\e[31m1\e[0m ){\n\e[31m\e[31m   |\e[0m                     ^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpekx5lnlo.scala:21:31 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            fib4 += (fib4(i+\e[31m1\e[0m) + (fib4(i+\e[31m2\e[0m)) + (fib4(i+\e\
    [31m3\e[0m)) + (fib4(i+\e[31m4\e[0m)))\n\e[31m\e[31m   |\e[0m                \
    \     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Range, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpekx5lnlo.scala:23:13 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        fib4(n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \            ^^^\e[0m\n\e[31m   |\e[0m             Found:    Long\n\e[31m   |\e\
    [0m             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib3\
    \ = new mutable.ArrayBuilder[Long]\n        fib3 += 0\n        fib3 += 0\n   \
    \     fib3 += 0\n        fib3 += 0\n        val fib2 = new mutable.ArrayBuilder[Long]\n\
    \        fib2 += 0\n        fib2 += 0\n        fib2 += 0\n        fib2 += 0\n\
    \        val fib1 = new mutable.ArrayBuilder[Long]\n        fib1 += 0\n      \
    \  fib1 += 0\n        fib1 += 0\n        fib1 += 0\n        val fib0 = new mutable.ArrayBuilder[Long]\n\
    \        fib0 += 0\n        fib0 += 0\n        fib0 += 0\n        fib0 += 0\n\
    \        if (n <= 5l)\n        fib4(n).toLong\n        else\n        fib4(n-1l)\
    \ + fib4(n-2l) + fib4(n-3l) + fib4(n-4l).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohy3vwqu.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib3\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohy3vwqu.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mfib2\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpohy3vwqu.scala:28:23 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mfib1\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpohy3vwqu.scala:33:23 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mfib0\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660014055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val ans\
    \ = scala.math.BigInt(0)\n        if (n <= 0) ans\n        else {\n          \
    \  val first = (1 to n).map(i => (i + 1) * (i + 2)).toList\n            val second\
    \ = (1 to n).map(i => (i + 1) * (i + 3)).toList\n            val third = (1 to\
    \ n).map(i => (i + 1) * (i + 4)).toList\n            val fourth = (1 to n).map(i\
    \ => (i + 1) * (i + 5)).toList\n            val fifth = (1 to n).map(i => (i +\
    \ 1) * (i + 6)).toList\n            val sixth = (1 to n).map(i => (i + 1) * (i\
    \ + 7)).toList\n            val seventh = (1 to n).map(i => (i + 1) * (i + 8)).toList\n\
    \            val eighth = (1 to n).map(i => (i + 1) * (i + 9)).toList\n      \
    \      val ninth = (1 to n).map(i => (i + 1) * (i + 10)).toList\n            val\
    \ tenth = (1 to n).map(i => (i + 1) * (i + 11)).toList\n            val eleventh\
    \ = (1 to n).map(i => (i + 1) * (i + 12)).toList\n            val twelfth = (1\
    \ to n).map(i => (i + 1) * (i + 13)).toList\n            val thirteenth = (1 to\
    \ n).map(i => (i + 1) * (i + 14)).toList\n            val fourteenth = (1 to n).map(i\
    \ => (i + 1) * (i + 15)).toList\n            val fifteenth = (1 to n).map(i =>\
    \ (i + 1) * (i + 16)).toList\n            val sixteenth = (1 to n).map(i => (i\
    \ + 1) * (i + 17)).toList\n            val seventeenth = (1 to n).map(i => (i\
    \ + 1) * (i + 18)).toList\n            val eighteenth = (1 to n).map(i => (i +\
    \ 1) * (i + 19)).toList\n            val nineteenth = (1 to n).map(i => (i + 1)\
    \ * (i + 20)).toList\n            val twentieth = (1 to n).map(i => (i + 1) *\
    \ (i + 21)).toList\n            val twenty = (1 to n).map(i => (i + 1) * (i +\
    \ 22)).toList\n            val twentyone = (1 to n).map(i => (i + 1) * (i + 23)).toList\n\
    \            val twentytwo = (1 to n).map(i => (i + 1) * (i + 24)).toList\n  \
    \          val twentythree = (1 to n).map(i => (i + 1) * (i + 25)).toList\n  \
    \          \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7f52yc9.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7f52yc9.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mfirst\e[0m = (\e[31m1\e[0m to n).map(\e[36mi\e[0m => (i + \e[31m1\e[0m) *\
    \ (i + \e[31m2\e[0m)).toList\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7f52yc9.scala:22:31 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msecond\e[0m = (\e[31m1\e\
    [0m to n).map(\e[36mi\e[0m => (i + \e[31m1\e[0m) * (i + \e[31m3\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (n : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu7f52yc9.scala:23:30 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mthird\e[0m = (\e[31m1\e[0m to n).map(\e\
    [36mi\e[0m => (i + \e[31m1\e[0m) * (i + \e[31m4\e[0m)).toList\n\e[31m\e[31m  \
    \ |\e[0m                              ^\e[0m\n\e[31m   |\e[0m                \
    \              Found:    (n : Long)\n\e[31m   |\e[0m                         \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7f52yc9.scala:24:31\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mfourth\e[0m = (\e[31m1\e[0m to n).map(\e[36mi\e[0m => (i + \e[31m1\e[0m) *\
    \ (i + \e[31m5\e[0m)).toList\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\
    \e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        if (n == 1) 0\n        if (n == 2) 2\n        if (n == 3) 0\n\
    \        if (n == 4) 4\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\tat Problem$.fib4(tmp2gomh0tl.scala:23)\n\
    \tat Problem$.fib4(tmp2gomh0tl.sc"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        if (n == 1) 1\n        if (n == 2) 2\n        if (n == 3) return\
    \ 0\n        if (n == 4) return 4\n        val first = fib4(n-1)\n        val\
    \ second = fib4(n-2)\n        val third = fib4(n-3)\n        val fourth = fib4(n-4)\n\
    \        first+second+third+fourth\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\tat Problem$.fib4(tmpdlfj8amp.scala:23)\n\
    \tat Problem$.fib4(tmpdlfj8amp.sc"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val result\
    \ = mutable.Stack[Long]()\n        result push 0\n        result push 1\n    \
    \    result push 2\n        result push 3\n        result foreach (x => result\
    \ push (result pop + result pop + result pop + result pop))\n        return result(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoi3h_ai7.scala:23:91 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result foreach (\e[36mx\e[0m => result push (result\
    \ pop + result pop + result pop + result pop))\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoi3h_ai7.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660014057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        def fib(i:Long,\
    \ a:Long, b:Long):Long = {\n            if (i > 0) (a + b) * fib(i-1, a, b)\n\
    \            else a\n        }\n        fib(n, 1, 1, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjqn8oze1.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        fib(n, \e[31m1\e[0m, \e[31m1\e[0m, \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m    too\
    \ many arguments for \e[33mmethod\e[0m \e[35mfib\e[0m: (i: Long, a: Long, b: Long):\
    \ Long\n1 error found\n"
  stdout: ''
  timestamp: 1660014058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]\n        fib4 += 0l -> 0\n        fib4 +=\
    \ 1l -> 0\n        fib4 += 2l -> 2\n        fib4 += 3l -> 0\n        fib4 += 4l\
    \ -> fib4(4l-1l) + fib4(4l-2l) + fib4(4l-3l) + fib4(4l-4l)\n        fib4(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxnmfn7r.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660014058
