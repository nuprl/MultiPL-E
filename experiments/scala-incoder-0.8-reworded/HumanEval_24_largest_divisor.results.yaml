language: scala
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val res = List((n/2l) until n)\n        for (d <-\
    \ res)\n            if (n % d == 0)\n                return d\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgjn671qo.scala:10:18 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (n % d == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((d : scala.collection.immutable.NumericRange.Exclusive[Long]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgjn671qo.scala:11:23 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mreturn\e[0m d\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m Found:    (d : scala.collection.immutable.NumericRange.Exclusive[Long])\n\
    \e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = 0\n        var divisor = 1\n     \
    \   while (divisor * divisor <= n) {\n            if (n % divisor == 0) {\n  \
    \              largest = divisor\n            }\n            divisor *= 2\n  \
    \      }\n        if (divisor > n) {\n            largest = divisor\n        }\n\
    \        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_m55ax0.scala:24)\n\tat Problem.main(tmpp_m55ax0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashSet[Long]()\n       \
    \ for (d <- 1l to n) divisors ++= (d-1)/d \n        divisors.toList.sort{-_._1}.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tj7pc31.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val ns: Seq[Long] = for {\n            i <- 0 until\
    \ n by 2\n        } yield i \n        val max: Long = 0\n        ns.foreach {\
    \ n =>\n            if(n % 2 == 0) max = math.max(max, n) \n        }\n      \
    \  max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp2bmwo6m.scala:9:25\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m            i <- \e[31m0\e[0m\
    \ until n by \e[31m2\e[0m\n\e[31m\e[31m  |\e[0m                         ^\e[0m\n\
    \e[31m  |\e[0m                         Found:    (n : Long)\n\e[31m  |\e[0m  \
    \                       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpp2bmwo6m.scala:13:31 -----------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mif\e[0m(n % \e[31m2\e[0m == \e[31m0\e[0m) max = math.max(max,\
    \ n) \n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Reassignment to val max\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var divisible : Long = 0L\n        var number :\
    \ Long = 0L\n        for (i <- 1 to n) number += i\n        for (i <- 1 to number)\
    \ divisible += i / number\n        divisible\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrt93hor.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) number += i\n\e[31m\e[31m   |\e[0m                      \
    \ ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m \
    \  |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsrt93hor.scala:11:23 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to number)\
    \ divisible += i / number\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (number : Long)\n\e[31m \
    \  |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Find the smallest divisor of n\n        // >>>\
    \ smallestDivisor((3l))\n        // (1l)\n        def smallestDivisor(n : Long)\
    \ : Long = {\n            // Find all factors of n and store them in an Array\n\
    \            val factors: Array[Long] = Array()\n            for (f <- 1 to n)\
    \ {\n                if (n % f == 0) {\n                    factors = factors\
    \ :+ f\n                }\n            }\n            val largest: Long = factors.max\n\
    \            // If the largest factor\n            if (largest == n) largest\n\
    \            else smallestDivisor(largest)\n        }\n\n        // Find the smallest\
    \ divisor of n\n        // >>> smallestDivisor((3l))\n        // (1l)\n      \
    \  smallestDivisor(n)\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6p7ftbv.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (f\
    \ <- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpz6p7ftbv.scala:16:28 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    factors = factors :+ f\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val factors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var ans = n\n        val dn = div(n, 2L)\n     \
    \   if (dn != 0) {\n            ans = dn\n            n -= dn\n        }\n   \
    \     val dn2 = div(n, 3L)\n        if (dn2 != 0) {\n            ans = dn\n  \
    \          n -= dn\n        }\n        val dn3 = div(n, 5L)\n        if (dn3 !=\
    \ 0) {\n            ans = dn\n            n -= dn\n        }\n        val dn4\
    \ = div(n, 7L)\n        if (dn4 != 0) {\n            ans = dn\n            n -=\
    \ dn\n        }\n        val dn5 = div(n, 11L)\n        if (dn5 != 0) {\n    \
    \        ans = dn\n            n -= dn\n        }\n        val dn7 = div(n, 13L)\n\
    \        if (dn7 != 0) {\n            ans = dn\n            n -= dn\n        }\n\
    \        val dn11 = div(n, 17L)\n        if (dn11 != 0) {\n            ans = dn\n\
    \            n -= dn\n        }\n        val dn13 = div(n, 19L)\n        if (dn13\
    \ != 0) {\n            ans = dn\n            n -= dn\n        }\n        val dn17\
    \ = div(n, 23L)\n        if (dn17 != 0) {\n            ans = dn\n            n\
    \ -= dn\n        }\n        val dn19 = div(n, 29L)\n        if (dn19 != 0) {\n\
    \            ans = dn\n            n -= dn\n        }\n        val dn23 = div(n,\
    \ 31L)\n        if (dn23 != 0) {\n            ans = dn\n            n -= dn\n\
    \        }\n        val dn29 = div(n, 35L)\n        if (dn29 != 0) {\n       \
    \     ans = dn\n            n -= dn\n        }\n        val dn31 = div(n, 37L)\n\
    \        if (dn31 != 0) {\n            ans = dn\n            n -= dn\n       \
    \ }\n        val dn35 = div(n, 41L)\n        if (dn35 != 0) {\n            ans\
    \ = dn\n            n -= dn\n        }\n        val dn37 = div(n, 45L)\n     \
    \   if (dn37 != 0) {\n            ans = dn\n            n -= dn\n        }\n \
    \       val dn41 = div(n, 47L)\n        if (dn41 != 0) {\n            ans = dn\n\
    \            n -= dn\n        }\n        val dn45 = div(n, 49L)\n        if (dn45\
    \ != 0) {\n            ans = dn\n            n -= dn\n        }\n        val dn47\
    \ = div(n, 51L)\n        if (dn47 != 0) {\n            ans = dn\n            n\
    \ -= dn\n        }\n        val dn49 = div(n, 53L)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8uk57yb.scala:9:17 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdn\e[0m = div(n, \e[31m2L\e\
    [0m)\n\e[31m\e[31m  |\e[0m                 ^^^\e[0m\n\e[31m  |\e[0m          \
    \       Not found: div\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8uk57yb.scala:12:14\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            n -= dn\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8uk57yb.scala:14:18 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mdn2\e[0m = div(n, \e[31m3L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ div\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8uk57yb.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n -= dn\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8uk57yb.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mdn3\e[0m = div(n, \e[31m5L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ div\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8uk57yb.scala:22:14\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            n -= dn\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8uk57yb.scala:24:18 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mdn4\e[0m = div(n, \e[31m7L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ div\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660010575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDivisor = 0\n        var currentDivisor =\
    \ 0\n        var currentNumber = 0\n\n        // For all numbers, we can check\
    \ if they are evenly divisble or not by\n        // checking if they divides evenly\
    \ to n\n        for (currentNumber = n downTo 1 by -1) {\n            currentDivisor\
    \ = 1\n            // If n is evenly divisble by current number, check if it divides\
    \ evenly to currentDivisor\n            while (currentNumber % currentDivisor\
    \ == 0) {\n                currentDivisor += 1\n            }\n\n            //\
    \ For current number, check if it is larger than maxDivisor\n            if (currentDivisor\
    \ > maxDivisor) {\n                maxDivisor = currentDivisor\n            }\n\
    \        }\n        return maxDivisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6jxaj7p6.scala:14:27 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (currentNumber = n downTo \e[31m1\e\
    [0m by -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           ')' expected, but '=' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp6jxaj7p6.scala:14:47 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (currentNumber = n downTo \e[31m1\e\
    [0m by -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                               \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \       '<-' expected, but '{' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6jxaj7p6.scala:25:9\
    \ -------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = List(1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l)\n        var maxDivisor = 0L\n       \
    \ divisors.foreach{div =>\n            val num = (n/div).toInt\n            if\
    \ (num > maxDivisor) maxDivisor = num\n        }\n        return maxDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66utzdfk.scala:17)\n\tat Problem.main(tmp66utzdfk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val d = mutable.Set[Long]()\n        for(i <- 0\
    \ until n) if(n % i == 0) d += i\n        val lv = d.foldLeft(0l)((m,i) => if\
    \ { m > i } m else i)\n        if(lv < n) largestDivisor(lv) else lv\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpddtr9anz.scala:10:56 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlv\e[0m = d.foldLeft(\e\
    [31m0l\e[0m)((\e[36mm\e[0m,\e[36mi\e[0m) => \e[33mif\e[0m { m > i } m \e[33melse\e\
    [0m i)\n\e[31m\e[31m   |\e[0m                                                \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                      expression\
    \ expected but \e[31melse\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpddtr9anz.scala:8:16 -------------------------\e[0m\e\
    [0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                ^^^^^^^\e[0m\n\e[31m  |\e[0m     \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpddtr9anz.scala:9:25 ---------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) \e[33mif\e[0m(n % i\
    \ == \e[31m0\e[0m) d += i\n\e[31m\e[31m  |\e[0m                         ^\e[0m\n\
    \e[31m  |\e[0m                         Found:    (n : Long)\n\e[31m  |\e[0m  \
    \                       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val d = new scala.collection.mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 2 to Math.sqrt(n)) {\n            if (n%i == 0) {\n\
    \                val d = i\n                if (d.exists(_ > n)) d = -1\n    \
    \            d.foreach { v => d.remove(v) }\n                if (d.isEmpty) d.foreach\
    \ { v => d.put(v, v) }\n                else d.foreach { v => d.put(v, v) }\n\
    \            }\n        }\n        d max n match {\n            case None => -1\n\
    \            case Some(d) => d\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnyzv59dq.scala:9:32\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to Math.sqrt(n)) {\n\e[31m\e[31m  |\e[0m                      \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                       Found:    Double\n\e\
    [31m  |\e[0m                       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnyzv59dq.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (d.exists(_ > n)) d = -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value exists is not a member of Int\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpnyzv59dq.scala:12:39 -----------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (d.exists(_ > n)) d = -\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Reassignment to val d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnyzv59dq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                d.foreach { \e[36mv\e[0m => d.remove(v)\
    \ }\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value foreach is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnyzv59dq.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                \e[33mif\e[0m (d.isEmpty) d.foreach { \e[36mv\e[0m =>\
    \ d.put(v, v) }\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value isEmpty is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnyzv59dq.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (d.isEmpty) d.foreach {\
    \ \e[36mv\e[0m => d.put(v, v) }\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value foreach\
    \ is not a member of Int\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = mutable.Set[Long]()\n        var currentNum\
    \ : Long = 1\n        while(currentNum <= n){\n            if(n % currentNum ==\
    \ 0){\n                nums += currentNum\n            }\n            currentNum\
    \ += 1\n        }\n        \n        var result = nums.max\n        if(result\
    \ > n){\n            result = n\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mipiw55.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if (n == 1) 1\n        else {\n            val divisors\
    \ = mutable.Set[Long]()\n            // Find all numbers that divide n evenly\
    \ and are less than n\n            for (i <- n.divideAndRemainder until n) divisors\
    \ += i\n            // Get the largest of those\n            divisors.max\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph1hv189d.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmph1hv189d.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (i <- n.divideAndRemainder\
    \ until n) divisors += i\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value divideAndRemainder is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDiv = n\n        while(n % maxDiv != 0){\n\
    \            maxDiv += 1\n        }\n        maxDiv\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7pmu0os.scala:15)\n\tat Problem.main(tmps7pmu0os.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.ArrayBuffer.empty[Long]\n\
    \        for( i <- 2l to n by 2l) {\n            if( n % i == 0)\n           \
    \     divisors += i\n        }\n        divisors.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfw8qgot.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Sieve of Eratosthenes - Finds all primes less\
    \ than or equal to n\n        // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        val primes = Vector.fill(Long.MaxValue){2}\n        primes(0) = 1\n \
    \       primes(1) = 1\n\n        for(i <- 2 to n-1)\n            if(!primes(i)){\n\
    \                primes(2*i+1) = primes(i)+1\n                primes(2*i+2) =\
    \ primes(i)+2\n            }\n\n        val maxDivisors = mutable.ArrayBuffer[Long]()\n\
    \n        // Filter out all numbers that are not divisible by 2 and not smaller\
    \ than n\n        for(n <- primes.filter(_<n) ){\n            for(i <- 1 to n/2){\n\
    \                if(primes(n) != 2 && (n/i) % primes(n) == 0)\n              \
    \      maxDivisors += n\n            }\n        }\n        \n        // Return\
    \ the largest divisor\n        maxDivisors.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65no3t29.scala:10:38\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = Vector.fill(Long.MaxValue){\e[31m2\e[0m}\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Found:    (\e[31m9223372036854775807L\e[0m : Long)\n\e[31m \
    \  |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp65no3t29.scala:11:8 -------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes(\e[31m0\e[0m) = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member\
    \ of Vector[Int] - did you mean primes.updated?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp65no3t29.scala:12:8 -------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        primes(\e[31m1\e[0m) = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Int]\
    \ - did you mean primes.updated?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65no3t29.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp65no3t29.scala:15:15 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mif\e[0m(!primes(i)){\n\e[31m\e[31m   |\e[0m             \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value unary_! is not a member of Int\
    \ - did you mean Int.unary_+?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp65no3t29.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                primes(\e\
    [31m2\e[0m*i+\e[31m1\e[0m) = primes(i)+\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Int]\
    \ - did you mean primes.u"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = n.toLong\n        val divisor = scala.collection.mutable.LinkedHashSet()\n\
    \        for (i <- 0 until l) {\n            val num = (i*l).floorDiv(n)\n   \
    \         divisor.add(num)\n        }\n        divisor.toSeq.sorted.last\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1uh223b.scala:10:26\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until l) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (l : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpp1uh223b.scala:11:28 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = (i*l).floorDiv(n)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value floorDiv is not a member of Long\n\e[31m\e[31m--\
    \ Error: /tmp/tmpp1uh223b.scala:14:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        divisor.toSeq.sorted.last\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msorted\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = Vector.fill(n/2+1).map(_*2-1).toSeq\n\
    \        for (i <- 0 until nums.lastIndex) {\n            if (nums(i) % n == 0)\
    \ return nums(i)\n        }\n        -1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_xudhyk6.scala:8:31\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = Vector.fill(n/\e[31m2\e[0m+\e[31m1\e[0m).map(_*\e[31m2\e[0m-\e[31m1\e[0m).toSeq\n\
    \e[31m\e[31m  |\e[0m                               ^^^^^\e[0m\n\e[31m  |\e[0m\
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = (n to 1)\n            .map(n => (n to n)\n\
    \                .filter { d => n%d == 0 }\n                .maxBy(_.toLong)\n\
    \                .get)\n            .max\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyhs21t1.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m 9 |\e[0m            .map(n => (n to n)\n\e[31m10 |\e[0m     \
    \           .filter { d => n%d == \e[31m0\e[0m }\n\e[31m11 |\e[0m            \
    \    .maxBy(_.toLong)\n\e[31m12 |\e[0m                .get)\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      value get\
    \ is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpvyhs21t1.scala:13:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \     .max\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val ds = new mutable.ListBuffer[Long]()\n      \
    \  for (d <- 0 until n) \n            if ((n % d) == 0) ds += d\n        ds.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0uhmjx7.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw0uhmjx7.scala:9:26\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (d <-\
    \ \e[31m0\e[0m until n) \n\e[31m\e[31m  |\e[0m                          ^\e[0m\n\
    \e[31m  |\e[0m                          Found:    (n : Long)\n\e[31m  |\e[0m \
    \                         Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = Vector.newBuilder[Int]\n        for(d\
    \ <- 1 to n) factors += (n / d)\n        factors.result.getOrElse(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmnpxhf9.scala:9:22\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(d <- \e\
    [31m1\e[0m to n) factors += (n / d)\n\e[31m\e[31m  |\e[0m                    \
    \  ^\e[0m\n\e[31m  |\e[0m                      Found:    (n : Long)\n\e[31m  |\e\
    [0m                      Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppmnpxhf9.scala:9:37 ---------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(d <- \e[31m1\e[0m to n) factors += (n\
    \ / d)\n\e[31m\e[31m  |\e[0m                                     ^^^^^\e[0m\n\e\
    [31m  |\e[0m                                     Found:    Long\n\e[31m  |\e[0m\
    \                                     Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppmnpxhf9.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        factors.result.getOrElse(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ getOrElse is not a member of Vector[Int]\n3 errors found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val result = mutable.ListBuffer[Long]()\n      \
    \  val div = 1 to n.toInt\n        var maxDiv = -1l\n        for (d <- div) {\n\
    \            val r = n % d\n            if (r == 0) {\n                result\
    \ += d\n                if (d > maxDiv) maxDiv = d\n            }\n        }\n\
    \        result.foldLeft(0l) { (m, v) => if (v > m) v else m }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjcba_5id.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDiv = 1\n        for (i<- 1 to n) {\n\
    \            val div = i%largestDiv\n            if (div == 0) largestDiv = div\n\
    \            else largestDiv = div\n        }\n        return largestDiv\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e14ot8c.scala:9:22\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m \
    \ |\e[0m                      Found:    (n : Long)\n\e[31m  |\e[0m           \
    \           Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val numbers = List.range(1, n).map(x => x / 2l)\n\
    \        var maxDiv = numbers.max\n\n        numbers foreach { x =>\n        \
    \    if (x / maxDiv > n) maxDiv = x\n        }\n        return maxDiv\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpej5xgxb5.scala:8:38 ------------------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = List.range(\e\
    [31m1\e[0m, n).map(\e[36mx\e[0m => x / \e[31m2l\e[0m)\n\e[31m\e[31m  |\e[0m  \
    \                                    ^\e[0m\n\e[31m  |\e[0m                  \
    \                No implicit Ordering defined for AnyVal.\n1 error found\n"
  stdout: ''
  timestamp: 1660010581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val r = n.reciprocal()\n        val r = r.toDouble\n\
    \        val v = r.toLong\n        val a = r.toInt\n\n        for(i <- 0 until\
    \ a){\n            val q = v / i \n            if(q.isEven && q.isWholeNumber){\n\
    \                return q.toLong\n            }\n        }\n\n        0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpae0qncb9.scala:9:12 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toDouble\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpae0qncb9.scala:8:18 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = n.reciprocal()\n\
    \e[31m\e[31m  |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \        value reciprocal is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Find the greatest divisor less than n\n     \
    \   var largestDivisor = 0\n        for(d <- 0 until Int\n            if(n % d\
    \ == 0){\n                largestDivisor = d\n            }\n        }\n     \
    \   // Return largest divisor that is smaller than n\n        if(largestDivisor\
    \ == 0){\n            largestDivisor = 1\n        }\n        largestDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfea9fmqc.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfea9fmqc.scala:29:0 ----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfea9fmqc.scala:10:25 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(d <- \e[31m0\e[0m until Int\n\e\
    [31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    Int\e[1m\e[31m.\e[0m\e[1m\e[31mtype\e[0m\n\e[31m \
    \  |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpfea9fmqc.scala:11:15 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(n % d == \e[31m0\e[0m){\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    \e[33mmethod\e[0m \e[35m==\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m does\
    \ not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpfea9fmqc.scala:16:11\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mif\e[0m(largestDivisor == \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m      \
    \     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   Values of types Long => Long\
    \ and Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfea9fmqc.scala:17:29 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            largestDivisor = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                             Required:\
    \ Long => Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpfea9fmqc.scala:19:8\
    \ ------------------------------------------"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max: Long = n\n        var maxCount: Int = 0\n\
    \        var maxCountDiv: Int = 0\n        while (n % 2 == 0) {\n            n\
    \ /= 2\n            maxCountDiv += 2\n        }\n        while (n != 1) {\n  \
    \          n -= 1\n            maxCountDiv += 1\n            while (n % 2 == 0)\
    \ {\n                n /= 2\n                maxCountDiv += 2\n            }\n\
    \        }\n        if (maxCountDiv > maxCount) {\n            max = maxCountDiv\n\
    \        }\n        maxCountDiv = 0\n        while (n != 1) {\n            n -=\
    \ 1\n            maxCountDiv += 1\n            while (n % 2 == 0) {\n        \
    \        n /= 2\n                maxCountDiv += 2\n            }\n        }\n\
    \        if (maxCountDiv == maxCount) {\n            max = maxCountDiv\n     \
    \   }\n        maxCountDiv = 0\n        while (n % 2 == 0) {\n            n /=\
    \ 2\n            maxCountDiv += 2\n        }\n        if (maxCountDiv == maxCount)\
    \ {\n            max = maxCountDiv\n        }\n        maxCountDiv = 0\n     \
    \   while (n % 2 == 0) {\n            n /= 2\n            maxCountDiv += 2\n \
    \       }\n        if (maxCountDiv == maxCount) {\n            max = maxCountDiv\n\
    \        }\n        maxCountDiv = 0\n        while (n % 2 == 0) {\n          \
    \  n /= 2\n            maxCountDiv += 2\n        }\n        if (maxCountDiv ==\
    \ maxCount) {\n            max = maxCountDiv\n        }\n        maxCountDiv =\
    \ 0\n        while (n % 2 == 0) {\n            n /= 2\n            maxCountDiv\
    \ += 2\n        }\n        if (maxCountDiv == maxCount) {\n            max = maxCountDiv\n\
    \        }\n        maxCountDiv = 0\n        while (n % 2 == 0) {\n          \
    \  n /= 2\n            maxCountDiv += 2\n        }\n        if (maxCountDiv ==\
    \ maxCount) {\n            max = maxCountDiv\n        }\n        maxCountDiv =\
    \ 0\n        while (n % 2 == 0) {\n            n /= 2\n            maxCountDiv\
    \ += 2\n        }\n        if (maxCountDiv == maxCount) {\n            max = maxCountDiv\n\
    \        }\n        maxCountDiv = 0\n        while (n % 2 == 0) {\n          \
    \  n /= 2\n            maxCountDiv += 2\n        }\n        if (maxCountDiv ==\
    \ maxCount) {\n            max = maxCountDiv\n        }\n        maxCountDiv =\
    \ 0\n        while (n % 2 == 0) {\n            n /= 2\n            maxCountDiv\
    \ += 2\n        }\n        if (maxCountDiv == maxCount) {\n            max = maxCountDiv\n\
    \        }\n        maxCountDiv = 0\n        while (n % 2 == 0) {\n          \
    \  n /= 2\n            maxCountDiv += 2\n        }\n        if (maxCountDiv ==\
    \ maxCount) {\n            max = maxCountDiv\n        }\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwlgv4li.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwlgv4li.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxwlgv4li.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwlgv4li.scala:28:14\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxwlgv4li.scala:31:18 ------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwlgv4li.scala:40:14\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxwlgv4li.scala:48:14 ------------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxwlgv4li.scala:56:14 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is no"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.LinkedHashMap[Long, Int]()\n\
    \        for {\n            i <- 0 to n\n        } divisors += i -> divisors.getOrElse(i,\
    \ 0) + 1\n        var max = 0\n        for (i <- divisors.keys) if (divisors(i)\
    \ > max) max = divisors(i)\n        divisors.maxBy(_._2)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplezz5cma.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.LinkedHashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplezz5cma.scala:10:22 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            i <- \e[31m0\e[0m to n\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Found: \
    \   (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = mutable.HashSet[Long]()\n        for\
    \ (i <- 1 to n) factors += (n / i)\n        factors.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwjt6fuu9.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwjt6fuu9.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) factors\
    \ += (n / i)\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m\
    \                       Found:    (n : Long)\n\e[31m  |\e[0m                 \
    \      Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val max = scala.math.max(scala.math.div(n, 2), scala.math.div(n,\
    \ 4))\n        if (max == 0) {\n            n // no divisors possible\n      \
    \  } else {\n            largestDivisor(max)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt8mrs3p.scala:8:44 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(scala.math.div(n,\
    \ \e[31m2\e[0m), scala.math.div(n, \e[31m4\e[0m))\n\e[31m\e[31m  |\e[0m      \
    \                           ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m              \
    \                   value div is not a member of math\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpbt8mrs3p.scala:8:66 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(scala.math.div(n,\
    \ \e[31m2\e[0m), scala.math.div(n, \e[31m4\e[0m))\n\e[31m\e[31m  |\e[0m      \
    \                                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                                         value div is not a member of\
    \ math\n2 errors found\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = mutable.ListBuffer.empty[Long]\n    \
    \    val d = 1l\n        while (d <= n) {\n            if (n % d == 0l) {\n  \
    \              nums.append(d)\n            }\n            d = d + 1l\n       \
    \ }\n        nums.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvidjcnx3.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpvidjcnx3.scala:14:14 -----------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            d = d + \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val d\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def largestDivisorHelper(n : Long, maxDiv : Long)\
    \ : Long = {\n            if (n == 1L) {\n                if (maxDiv > 1L)\n \
    \                   maxDiv\n                else\n                    0L\n   \
    \         } else if (n >= 2L) {\n                maxDiv = largestDivisorHelper(n\
    \ / 2L, maxDiv)\n                largestDivisorHelper(n / 2L, maxDiv)\n      \
    \      } else {\n                maxDiv\n            }\n        }\n        largestDivisorHelper(n,\
    \ 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxoj4a__v.scala:15:23 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                maxDiv = largestDivisorHelper(n / \e\
    [31m2L\e[0m, maxDiv)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxDiv\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = 0\n        var current = n\n     \
    \   while(current > 0){\n            if(current % 2 == 0) current /= 2\n     \
    \       else largest = max(largest, current)\n        }\n        largest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxghbrkaj.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e[0m largest\
    \ = max(largest, current)\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    Found:    (current : Long)\n\e[31m   |\e[0m                             \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val result = mutable.MutableList[Long]()\n     \
    \   for (d <- 2 until n) if (n % d == 0) { result += d }\n        if (result.isEmpty)\
    \ {\n            // if all divisors are even or smaller than n, then n is even\n\
    \            n / 2\n        } else {\n            if (result.head % 2 == 0) {\n\
    \                result.head / 2\n            } else {\n                result.head\
    \ / result.last\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9emzqaa.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9emzqaa.scala:9:26 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (d <- \e[31m2\e[0m until n) \e\
    [33mif\e[0m (n % d == \e[31m0\e[0m) { result += d }\n\e[31m\e[31m  |\e[0m    \
    \                      ^\e[0m\n\e[31m  |\e[0m                          Found:\
    \    (n : Long)\n\e[31m  |\e[0m                          Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val listOfDivisors = n.toInt :: List.empty\n   \
    \     var largestDivisor = 0L\n\n        for (i <- listOfDivisors) {\n       \
    \     if (n % i == 0L && i > largestDivisor) {\n                largestDivisor\
    \ = i\n            }\n        }\n\n        largestDivisor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwq6yiig3.scala:20)\n\tat Problem.main(tmpwq6yiig3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = (1 to n) map (n / _)\n        val\
    \ max_divisor = divisors.max\n        max_divisor * max_divisor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnue3iqr.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e\
    [0m = (\e[31m1\e[0m to n) map (n / _)\n\e[31m\e[31m  |\e[0m                  \
    \           ^\e[0m\n\e[31m  |\e[0m                             Found:    (n :\
    \ Long)\n\e[31m  |\e[0m                             Required: Int\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (nDiv <- (n to 1 by -1); nDiv > 1; nDiv = nDiv / 2)\n           \
    \ divisors += nDiv\n            divisors.toArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpscntaw_f.scala:9:45 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (nDiv <- (n to \e[31m1\e[0m by\
    \ -\e[31m1\e[0m); nDiv > \e[31m1\e[0m; nDiv = nDiv / \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                             ^\e[0m\n\e[31m  |\e[0m \
    \                                            '<-' expected, but ';' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpscntaw_f.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDiv = 0\n        var divisor = 0\n      \
    \  // Find all divisors until n is greater than maxDivisor \n        while ( divisor*divisor\
    \ <= n ) {\n            divisor = divisor*divisor + n\n            if ( divisor*divisor\
    \ > n ) {\n                maxDiv = divisor\n            }\n        }\n      \
    \  if ( divisor < n ) {\n            // If no divisors less than n found\n   \
    \         maxDiv = n - 1\n        }\n        if ( maxDiv*maxDiv > n ) {\n    \
    \        // If n is not prime, return the greatest divisor less than n\n     \
    \       maxDiv = n - 1\n        }\n        maxDiv\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvznttcr9.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            divisor = divisor*divisor\
    \ + n\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m           \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvznttcr9.scala:19:21 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            maxDiv = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                     Found:    Long\n\e\
    [31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvznttcr9.scala:23:21 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            maxDiv = n - \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    Long\n\e[31m   |\e[0m                     Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        require(n > 0)\n        var largest_divisor = 0l\n\
    \        var divisor_count = 0l\n        var largest_divisor_count = 0\n     \
    \   while (divisor_count < n) {\n            divisor_count = divisors_of(n, n)\n\
    \            largest_divisor_count = largest_divisors_of(divisor_count)\n    \
    \        if (largest_divisor_count == divisor_count) {\n                largest_divisor\
    \ = divisor_count\n            } else if (largest_divisor_count > divisor_count)\
    \ {\n                largest_divisor = largest_divisor_count\n            }\n\
    \        }\n        largest_divisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nzugpmq.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            divisor_count = divisors_of(n, n)\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                         Not found: divisors_of\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8nzugpmq.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            largest_divisor_count = largest_divisors_of(divisor_count)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: largest_divisors_of\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010581
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxNum = n + 1;\n        var largestDivisor\
    \ = n + 1;\n        var maxDiv = 1\n        while(maxDiv < largestDivisor) {\n\
    \            val curDivisor = maxDiv\n            val curNum = maxNum / curDivisor\n\
    \            if (curNum % 2 == 0) {\n                maxNum = curNum\n       \
    \     } else {\n                largestDivisor = curDivisor\n                maxDiv\
    \ = curDivisor\n            }\n        }\n        maxNum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divistions = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < n) {\n            divistions += i\n   \
    \         i += 1\n        }\n        divistions.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcutmsg5v.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivistions\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val numbers = mutable.ListBuffer[Long]()\n     \
    \   val rem = n\n        val r = BigInt(n)\n        while (BigInt(rem) != 0) {\n\
    \            if (rem % r == 0) {\n                numbers += r\n            }\n\
    \            r = r / 2\n        }\n        numbers.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2svmy_wn.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp2svmy_wn.scala:15:14 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            r = r / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ r\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = mutable.LinkedHashSet[Long]()\n     \
    \   while (n != 0) {\n            val d = n % 10\n            if (d == 0) {\n\
    \                nums += n\n            } else {\n                nums += d *\
    \ 10\n            }\n            n /= 10\n        }\n        nums.lastOption.getOrElse(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg04ra4cy.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.LinkedHashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpg04ra4cy.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val d = mutable.HashSet[Long]()\n        for (i\
    \ <- 2 to (math.sqrt(n).toInt)) {\n            if (n % i == 0) {\n           \
    \     d += i\n            }\n        }\n        val max = d.toSeq.max\n      \
    \  if (max >= n) max else n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jnh7_4o.scala:8:16 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var biggest = 1l\n        var divisor : Long = 1l\n\
    \        var remainder : Long = 1l\n        for(divisor <- 2l*(n + 1) to (2l*n\
    \ + 2l)) remainder <- n%divisor\n        if(remainder < n) biggest = divisor\n\
    \        else largestDivisor(biggest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw1r02yao.scala:11:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(divisor <- \e[31m2l\e[0m*(n +\
    \ \e[31m1\e[0m) to (\e[31m2l\e[0m*n + \e[31m2l\e[0m)) remainder <- n%divisor\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^\e[0m\n\e[31m   |\e[0m                                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw1r02yao.scala:12:34\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m(remainder\
    \ < n) biggest = divisor\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Unit\n\e[31m   |\e[0m\
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divi = List[Long]()\n        var maxDiv = n\n\
    \        while (maxDiv != 0) {\n            if (maxDiv % 2 == 0) {\n         \
    \       if (maxDiv / 2 > divi.length) {\n                    divi = divi :+ maxDiv\
    \ / 2\n                }\n            }\n            maxDiv = maxDiv / 2\n   \
    \     }\n        divi.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0fnjyr95.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                    divi = divi :+ maxDiv / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Reassignment to val divi\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Initialize a maximum divisor and number that\
    \ are currently divisable\n        var maxDivisor = 0\n        var maxDivisorNum\
    \ = 0\n        var currentDivisor = 0\n        var currentDivisorNum = 0\n   \
    \     for(i <- 0 until n) {\n            // Check to see if there are any divisors\
    \ left that aren't divisible by i\n            for(j <- 0 until n) {\n       \
    \         if (i % j == 0)\n                    break\n                else\n \
    \                   currentDivisorNum += 1\n            }\n            // If there\
    \ aren't any divisors that aren't divisible by i that are less than i, then\n\
    \            // this is a divisor that is greater than i\n            if (currentDivisorNum\
    \ > maxDivisorNum)\n                maxDivisorNum = currentDivisorNum\n      \
    \      // If i isn't divisible by any divisors greater than i, then it is a divisor\
    \ that is greater than i\n            else\n                currentDivisorNum\
    \ = 0\n        }\n        // Return the largest divisor that is less than n\n\
    \        return maxDivisorNum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgsku9fxm.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgsku9fxm.scala:15:29 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgsku9fxm.scala:17:20 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n      val a = n.toInt\n      val max = a\n      val b =\
    \ n.toLong\n      val l = (n - 1) >>> 1\n      while (b > 0) {\n        if (b\
    \ % 2 == 0) {\n          val t = b / 2\n          if (t >= max && t != l) {\n\
    \            max = t\n          }\n        }\n        b /= 2\n      }\n      max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1nx_k7r.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            max = t\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (t : Long)\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp1nx_k7r.scala:19:10 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        b /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean b.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Find the smallest divisor which is greater than\
    \ n\n        var smallestDivisor = n - 1\n        var largestDivisor = n - 1\n\
    \        while (smallestDivisor % 2 == 0) {\n            smallestDivisor /= 2\n\
    \            largestDivisor /= 2\n        }\n        while (smallestDivisor %\
    \ 3 == 0) {\n            smallestDivisor /= 3\n            largestDivisor /= 3\n\
    \        }\n        while (smallestDivisor % 4 == 0) {\n            smallestDivisor\
    \ /= 4\n            largestDivisor /= 4\n        }\n        while (smallestDivisor\
    \ % 5 == 0) {\n            smallestDivisor /= 5\n            largestDivisor /=\
    \ 5\n        }\n        while (smallestDivisor % 6 == 0) {\n            smallestDivisor\
    \ /= 6\n            largestDivisor /= 6\n        }\n        while (smallestDivisor\
    \ % 7 == 0) {\n            smallestDivisor /= 7\n            largestDivisor /=\
    \ 7\n        }\n        while (smallestDivisor % 8 == 0) {\n            smallestDivisor\
    \ /= 8\n            largestDivisor /= 8\n        }\n        while (smallestDivisor\
    \ % 9 == 0) {\n            smallestDivisor /= 9\n            largestDivisor /=\
    \ 9\n        }\n        while (smallestDivisor % 10 == 0) {\n            smallestDivisor\
    \ /= 10\n            largestDivisor /= 10\n        }\n        while (smallestDivisor\
    \ % 11 == 0) {\n            smallestDivisor /= 11\n            largestDivisor\
    \ /= 11\n        }\n        while (smallestDivisor % 12 == 0) {\n            smallestDivisor\
    \ /= 12\n            largestDivisor /= 12\n        }\n        while (smallestDivisor\
    \ % 13 == 0) {\n            smallestDivisor /= 13\n            largestDivisor\
    \ /= 13\n        }\n        while (smallestDivisor % 14 == 0) {\n            smallestDivisor\
    \ /= 14\n            largestDivisor /= 14\n        }\n        while (smallestDivisor\
    \ % 15 == 0) {\n            smallestDivisor /= 15\n            largestDivisor\
    \ /= 15\n        }\n        while (smallestDivisor % 16 == 0) {\n            smallestDivisor\
    \ /= 16\n            largestDivisor /= 16\n        }\n        while (smallestDivisor\
    \ % 17 == 0) {\n            smallestDivisor /= 17\n            largestDivisor\
    \ /= 17\n        }\n        while (smallestDivis\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsz7ykah.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxsz7ykah.scala:75:15\
    \ ------------------------\e[0m\e[0m\n\e[31m75 |\e[0m        \e[33mwhile\e[0m\
    \ (smallestDivis\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Not found: smallestDivis\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = Set()\n        val factors = Set()\n\
    \        val lowLimit = 0\n        var largest = 1l\n\n        // The idea is\
    \ to start from the highest divisor and keep dividing it until the factor\n  \
    \      // is smaller than n\n        while (divisors.size < factors.size) {\n\
    \            divisor = divisors.head\n            divisors = divisors ++= factor.div(divisor)\n\
    \            factors = factors ++= factor.filter(x => divisors.contains(x))\n\
    \            if (factors.size < divisors.size)\n                divisors.clear\n\
    \            val factorOfCurrent = divisors.head\n            val divisorOfCurrent\
    \ = (divisors.size / factorOfCurrent).toLong * factorOfCurrent\n            if\
    \ (n % divisorOfCurrent > divisor)\n                largest = divisorOfCurrent\n\
    \        }\n        largest\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9qhm6qe.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            divisor = divisors.head\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: divisor\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9qhm6qe.scala:17:36\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            divisors = divisors\
    \ ++= factor.div(divisor)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not found:\
    \ factor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9qhm6qe.scala:18:34\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            factors = factors\
    \ ++= factor.filter(\e[36mx\e[0m => divisors.contains(x))\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                      Not found: factor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E051]\
    \ Reference Error: /tmp/tmpj9qhm6qe.scala:22:50 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mdivisorOfCurrent\e[0m = (divisors.size\
    \ / factorOfCurrent).toLong * factorOfCurrent\n\e[31m\e[31m   |\e[0m         \
    \                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload.\
    \ The overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Int\n\e[31m   |\e[0m (x: Char): Int\n\e[31m   |\e[0m (x: Short): Int\n\e[31m\
    \   |\e[0m (x: Byte): Int\n\e[31m   |\e[0mall match arguments ((factorOfCurrent\
    \ : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Set up an Array to store our divisors\n     \
    \   var divisors = Array[Long](0)\n        // If n has no divisor then return\
    \ n\n        if (n % 2 == 0) {\n            return n\n        }\n        // Start\
    \ at 2 to the power of (n-1)\n        for (i <- 2 to n-1) {\n            // Check\
    \ if the number is evenly divisible by i\n            if (n % i == 0) {\n    \
    \            // If it is, add it to the list of divisors\n                divisors\
    \ = divisors :+ i\n                // If it isn't, then this number is greater\
    \ than any divisor we've found, so remove it from the list of divisors\n     \
    \       }\n        }\n        // Return our result\n        divisors.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw9c080ux.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m  \
    \ |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashMap.empty[Long,Long]\n\
    \        for (i <- 1 to n) {\n            val currentDivisor = i / n\n       \
    \     if (divisors.contains(currentDivisor))\n                divisors(currentDivisor)\
    \ = divisors(currentDivisor) + 1\n            else\n                divisors(currentDivisor)\
    \ = currentDivisor\n        }\n        var max = 0\n        divisors.foreach{case(k,v)\
    \ =>\n            if (v > max)\n                max = v\n        }\n        divisors.foreach{case(k,v)\
    \ =>\n            if (max > 0)\n                divisors(k) = max\n        }\n\
    \        divisors.maxBy(_._1) // return maxDivisor, maxDivisor >= n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptdfoas9w.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdfoas9w.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m              \
    \         Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if (n < 1) \n            throw new Exception(\"\
    ERROR: number must be positive\")\n        var max = n\n        var candidate\
    \ = max\n        var lowDivisor = 0\n        while (lowDivisor < max) {\n    \
    \        var lowDivisor = candidate\n            var lowDivisor2 = lowDivisor\
    \ * lowDivisor\n            val lowDivisor3 = lowDivisor2 * lowDivisor2\n    \
    \        val lowDivisor4 = lowDivisor3 * lowDivisor3\n            val lowDivisor5\
    \ = lowDivisor4 * lowDivisor4\n            val lowDivisor6 = lowDivisor5 * lowDivisor5\n\
    \            if (lowDivisor6 == candidate) {\n                lowDivisor = lowDivisor2\n\
    \                lowDivisor3 = lowDivisor2 * lowDivisor2\n                lowDivisor4\
    \ = lowDivisor3 * lowDivisor3\n                lowDivisor5 = lowDivisor4 * lowDivisor4\n\
    \                lowDivisor6 = lowDivisor5 * lowDivisor5\n            } else {\n\
    \                candidate = lowDivisor6\n            }\n            if (lowDivisor\
    \ == max) {\n                lowDivisor = lowDivisor2\n                lowDivisor3\
    \ = lowDivisor2 * lowDivisor2\n                lowDivisor4 = lowDivisor3 * lowDivisor3\n\
    \                lowDivisor5 = lowDivisor4 * lowDivisor4\n                lowDivisor6\
    \ = lowDivisor5 * lowDivisor5\n                candidate = lowDivisor6\n     \
    \       }\n            max = lowDivisor\n        }\n        candidate\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:22:28 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                lowDivisor3 = lowDivisor2 * lowDivisor2\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val lowDivisor3\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:23:28 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                lowDivisor4 = lowDivisor3 * lowDivisor3\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val lowDivisor4\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:24:28 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                lowDivisor5 = lowDivisor4 * lowDivisor4\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val lowDivisor5\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:25:28 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                lowDivisor6 = lowDivisor5 * lowDivisor5\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val lowDivisor6\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:31:28 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                lowDivisor3 = lowDivisor2 * lowDivisor2\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val lowDivisor3\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpht6edptr.scala:32:28 ------------"
  stdout: ''
  timestamp: 1660010589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var biggestDivisor = 0l\n        var biggestDivisorDivisor\
    \ = 0l\n        var biggestDivisorLastRemainder = 0l\n        var lastRemainder\
    \ = 0l\n        var firstDivisor = 2l\n        var lastDivisor = 2l\n        var\
    \ nextDivisor = 2l\n        var isDivisorEven = true\n        var nTimesDivisor\
    \ = 0l\n        var nDivisors = 0l\n        var nDivisorsDivisor = 0l\n      \
    \  var nDivisorsLastRemainder = 0l\n        while (n > 0) {\n            nDivisors\
    \ += 1\n            if (isDivisorEven) {\n                nextDivisor = firstDivisor\n\
    \            } else {\n                nextDivisor = lastDivisor\n           \
    \ }\n            isDivisorEven = !isDivisorEven\n            if (isDivisorEven)\
    \ {\n                nDivisorsDivisor += 1\n                while (n >= nextDivisor)\
    \ {\n                    nTimesDivisor += 1\n                    if (n % nextDivisor\
    \ == 0l) {\n                        biggestDivisor = nextDivisor\n           \
    \             nDivisorsLastRemainder = 0l\n                        lastRemainder\
    \ = n\n                        break\n                    } else {\n         \
    \               lastRemainder = n / nextDivisor\n                        nDivisorsLastRemainder\
    \ += 1\n                    }\n                    nextDivisor = (nextDivisor\
    \ + 1l) % (lastDivisor - 1l)\n                }\n            } else {\n      \
    \          nDivisorsDivisor += 1\n                while (n >= nextDivisor) {\n\
    \                    nTimesDivisor += 1\n                    if (n % nextDivisor\
    \ == 0l) {\n                        biggestDivisor = nextDivisor\n           \
    \             nDivisorsLastRemainder = 0l\n                        lastRemainder\
    \ = n\n                        break\n                    } else {\n         \
    \               lastRemainder = n / nextDivisor\n                        nDivisorsLastRemainder\
    \ += 1\n                    }\n                    nextDivisor = (nextDivisor\
    \ + 1l) % (lastDivisor - 1l)\n                }\n            }\n        }\n  \
    \      return biggestDivisor\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnf2rx6kn.scala:36:24 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnf2rx6kn.scala:51:24\
    \ ------------------------\e[0m\e[0m\n\e[31m51 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashMap[Long,Long]();\n \
    \       for (i <- 1L to n){\n            val divisor = math.gcd(i,n);\n      \
    \      if (divisors.contains(divisor)) {\n                divisors(divisor) =\
    \ divisors(divisor) + i\n            } else {\n                divisors += (divisor\
    \ -> (i.toLong*divisor))\n            }\n        }\n        divisors.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfs32xu0.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]();\n\e[31m\e[31m  |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjfs32xu0.scala:10:31 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mdivisor\e[0m = math.gcd(i,n);\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value gcd is not a member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1660010593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDivisor = 0\n        val divisor : Set[Long]\
    \ = Set()\n        for (a <- 1l to n) divisor.add (2 * a)\n        divisor.toList.sortWith(\
    \ (a,b) => b - a ).last\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7luwgg19.scala:11:42\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        divisor.toList.sortWith(\
    \ (\e[36ma\e[0m,\e[36mb\e[0m) => b - a ).last\n\e[31m\e[31m   |\e[0m         \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \                       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010594
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = (2l*n).toInt / 2l\n        if (l % 2 ==\
    \ 0) l\n        else largestDivisor(l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val n = n % 2\n        var result : Long = 0\n \
    \       var i = 1\n        while(i <= n/2) {\n            if(n % i == 0) {\n \
    \               result = Math.max(result, i); \n            }\n            i +=\
    \ 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7otpfz5h.scala:8:16 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n % \e[31m2\e[0m\n\
    \e[31m\e[31m  |\e[0m                ^\e[0m\n\e[31m  |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Use a mutable Set to track the largest divisor\
    \ seen\n        val divSet = mutable.HashSet[Long]()\n        // Use a mutable\
    \ Map to track the highest divisor seen seen so far\n        val maxDiv = mutable.Map[Long,Long]()\n\
    \n        // Loop until n divides evenly by any number between 1 and n / 2\n \
    \       while ((n%2 != 0) && (divSet.size < n)){\n            // Keep track of\
    \ largest divisor seen so far\n            if (divSet.size == 0){\n          \
    \      maxDiv.put(n, 2l)\n            }\n            else {\n                if\
    \ (maxDiv.get(n) > maxDiv.get(divSet.min())){\n                    maxDiv.put(n,\
    \ divSet.min())\n                }\n            }\n            // If this number\
    \ is evenly divided by any number between 1 and n / 2, add it to divSet\n    \
    \        val nextDiv = n%2\n            if (divSet.contains(nextDiv)){\n     \
    \           divSet += nextDiv\n            }\n            n = n/2\n        }\n\
    \        if (divSet.size == 0){\n            return 1l\n        }\n        else\
    \ {\n            return maxDiv.get(n).asInstanceOf[Long]\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvoxwl3a8.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvoxwl3a8.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxDiv\e[0m = mutable.Map[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpvoxwl3a8.scala:29:14 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            n = n/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.Set[Long]()\n        var\
    \ curDivisor = 1\n        for (div <- divisors.iterator ; div <= n ; div = div\
    \ * curDivisor) {\n            if (div == n) curDivisor += 1\n            divisors\
    \ += div\n        }\n        divisors.reverse.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp35gh8byp.scala:10:49 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (div <- divisors.iterator ; div\
    \ <= n ; div = div * curDivisor) {\n\e[31m\e[31m   |\e[0m                    \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                    '<-' expected, but ';' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp35gh8byp.scala:8:23 -------------------------\e[0m\e[0m\n\e[31m8\
    \ |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDiv = 2l\n        while(n > 1l){\n      \
    \      if (n % maxDiv == 0) return maxDiv\n            maxDiv += 1l\n        }\n\
    \        return maxDiv\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1h77bbs0.scala:16)\n\tat Problem.main(tmp1h77bbs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val dive = mutable.HashMap[Long, Long]()\n     \
    \   for (divisor <- 1 to n by 2) {\n            if (n % divisor == 0) dive.put(divisor,\
    \ divisor)\n        }\n        dive.foldLeft(1l){ case ((acc, divisor), (v, _))\
    \ =>\n            if (acc == 0) v\n            else if (v > acc) v\n         \
    \   else acc\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3m9agiyi.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdive\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3m9agiyi.scala:9:29 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (divisor <- \e[31m1\e[0m to n by\
    \ \e[31m2\e[0m) {\n\e[31m\e[31m  |\e[0m                             ^\e[0m\n\e\
    [31m  |\e[0m                             Found:    (n : Long)\n\e[31m  |\e[0m\
    \                             Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = n / 2\n        var numDivisors = 0\n\
    \        while ((n%largest) != 0) {\n            largest += 1\n            numDivisors\
    \ += 1\n        }\n        largest\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkpe22uy4.scala:18)\n\tat Problem.main(tmpkpe22uy4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDiv = n\n        val divisors = Vector.fill(\
    \ (2l+1) - largestDiv.toInt){\n            n / math.pow (2l,scala.math.ceil(scala.math.log2(n)))\n\
    \        }\n        val maxDiv = divisors.max\n        if (maxDiv < largestDiv)\
    \ largestDiv = maxDiv\n        largestDiv\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k4xxhyw.scala:9:36\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e\
    [0m = Vector.fill( (\e[31m2l\e[0m+\e[31m1\e[0m) - largestDiv.toInt){\n\e[31m\e\
    [31m  |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                                    Found:    Long\n\e[31m  |\e\
    [0m                                    Required: Int\n\e[31m  |\e[0m\n\e[31m \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_k4xxhyw.scala:10:56 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            n / math.pow (\e[31m2l\e[0m,scala.math.ceil(scala.math.log2(n)))\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value log2 is not a\
    \ member of math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k4xxhyw.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (maxDiv\
    \ < largestDiv) largestDiv = maxDiv\n\e[31m\e[31m   |\e[0m                   \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                        Found:    (maxDiv : Double)\n\e[31m   |\e[0m        \
    \                                     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = collection.mutable.ListBuffer[Long]()\n\
    \        for (d <- 1l to n by 2) {\n            if (n % d == 0) divisors += d\n\
    \        }\n        if (divisors.size > 1) divisors.max\n        else 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq0mj0g5b.scala:16)\n\tat Problem.main(tmpq0mj0g5b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val result = mutable.ArrayBuffer.empty[Long]\n \
    \       val divisors = mutable.ArrayBuffer.empty[Long]\n        for (d <- 2 to\
    \ math.sqrt(n) by -1) {\n            if (n%d == 0) {\n                if (divisors.length\
    \ == 0 || divisors.last < d) divisors += d\n            } else {\n           \
    \     divisors += d\n            }\n        }\n        if (divisors.length ==\
    \ 0) result += n\n        else {\n            val largest = divisors.max\n   \
    \         divisors -= largest\n            if (divisors.isEmpty) result += (largest\
    \ / divisors.last)\n            else result += largest\n        }\n        result\
    \ reduce { (x, y) => (if (x < y) x else y) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0ptoin2.scala:8:21 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk0ptoin2.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk0ptoin2.scala:10:32 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (d <- \e[31m2\e[0m to math.sqrt(n)\
    \ by -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Double\n\e[31m   |\e[0m \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = mutable.Map[Long, Int]()\n       \
    \ for {\n            i <- 2 to (n/2) if n % i == 0\n        } factors += i ->\
    \ factors(i) + 1\n        val max = factors.filter(_._2 > n).maxBy(_._1)\n   \
    \     if (max != 0) {\n            largestDivisor(max)\n        } else {\n   \
    \         n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvljw8os6.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvljw8os6.scala:10:23 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            i <- \e[31m2\e[0m to (n/\e[31m2\e[0m) \e\
    [33mif\e[0m n % i == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e\
    [0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010596
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var divi : Long = 1\n        var divisor : Long\
    \ = n \n        while (divisor != 0) {\n            divisor = n / divisor \n \
    \           divi = divisor\n        }\n        return divi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Set a variable to hold all divisors\n       \
    \ var divisors = scala.collection.mutable.Set[Long]()\n        // Test all numbers\
    \ up to and including n\n        for(i <- 0 until (n + 1)) {\n            // If\
    \ the number divides evenly, add to our divisors set\n            if((n / i) %\
    \ 2 == 0){\n                divisors += i\n            }\n        }\n        //\
    \ If our divisors set is not empty, reverse the order of the set\n        if(!divisors.isEmpty)\
    \ {\n            divisors.toSeq.reverse\n        }\n        else {\n         \
    \   0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5_give5.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until (n + \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg5_give5.scala:19:27 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            divisors.toSeq.reverse\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    \e[1m\e[31mSeq\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m\
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n   \
    \     var largeDivisor = 0L\n        for(d <- 1L until n) {\n            val testDivisor\
    \ = n/d\n            if(testDivisor % 2 == 0 && testDivisor > largeDivisor)\n\
    \                largeDivisor = testDivisor\n            nums += d\n        }\n\
    \        val largest = nums.max\n        println(s\"largest divisor = $largeDivisor\"\
    )\n        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a0kx_77.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def f(n: Long, n2: Long) : Long = {\n          \
    \  if (n == 0) n2\n            else f(n - 2, n2)\n        }\n        f(n, 0, n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbgx_rtf1.scala:12:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        f(n, \e[31m0\e[0m, n)\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m              too many arguments for \e\
    [33mmethod\e[0m \e[35mf\e[0m: (n: Long, n2: Long): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0l\n        for(d <- 2 to n\
    \ by 2){\n            if(n % d == 0){\n                largestDivisor = d\n  \
    \              n = n / d\n                break\n            }\n        }\n  \
    \      largestDivisor\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x681ehv.scala:9:22\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(d <- \e\
    [31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m  |\e[0m                      ^\e\
    [0m\n\e[31m  |\e[0m                      Found:    (n : Long)\n\e[31m  |\e[0m\
    \                      Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp5x681ehv.scala:12:18 -----------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                n = n / d\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val n\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x681ehv.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = Long.MaxValue\n        var divisor\
    \ = Long.MaxValue\n        for (i <- 0 until n){\n            if (n % i == 0){\n\
    \                if (i > divisor) {\n                    divisor = i\n       \
    \         }\n            }\n            if (largest < divisor){\n            \
    \    largest = divisor\n            }\n        }\n        divisor\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg9pgstg0.scala:10:26\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 1L\n        var currentDivisor = 1L\n\
    \        var currentMax = 1L\n        var currentNum = n\n\n        while (currentNum\
    \ > 0) {\n            if (currentDivisor / n > currentMax ) {\n              \
    \  currentMax = currentDivisor\n                currentNum = currentNum - currentMax\n\
    \            } else {\n                currentDivisor = currentDivisor + currentMax\n\
    \                currentMax = 1L\n            }\n        }\n        return currentMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuncy_us.scala:25)\n\tat Problem.main(tmpsuncy_us.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val map = mutable.Map.empty[Long, Long]\n      \
    \  var biggestDivisor = 0\n        for (i <- 0 until n) {\n            if (map.contains(i\
    \ / 2l)) {\n                biggestDivisor = Math.max(biggestDivisor, map(i/2))\n\
    \            } else {\n                map.put(i/2, i)\n            }\n      \
    \  }\n        biggestDivisor\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9soch4e.scala:8:18 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk9soch4e.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largestDivisors = mutable.HashMap[Long, Long]()\n\
    \        var candidate = 0\n\n        while (candidate <= n){\n            if\
    \ (n % candidate == 0){\n                largestDivisors += (candicate -> n)\n\
    \            }\n            candidate += 1\n        }\n        val largest = largestDivisors.sortBy(_._2).last._1\n\
    \        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpov22gz9z.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlargestDivisors\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      \
    \        ^^^^^^^\e[0m\n\e[31m  |\e[0m                              Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 1l\n        var factor = 1\n        while\
    \ (n < max) {\n            n /= factor\n            max += 1\n        }\n    \
    \    n\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0dn50gae.scala:11:14 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            n /= factor\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = mutable.Set[Long]()\n        for(i\
    \ <- 2 to n by 2){\n            val div = n/i\n            factors += div\n  \
    \          if(div <= n){\n                factors += div\n            }\n    \
    \    }\n        factors.max\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9nfxsmxu.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9nfxsmxu.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0l\n        var nextDivisor\
    \ = 0l\n\n        while(n > nextDivisor) {\n            nextDivisor += 1l\n  \
    \      }\n\n        largestDivisor = nextDivisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrv9pvrw.scala:15:23\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        largestDivisor = nextDivisor\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val arr = Array.fill(n)(1l).map(_.toLong)\n    \
    \    var div : Long = 1l\n        var cur : Long = 0l\n        while(cur < n)\
    \ {\n            val a = arr.takeWhile(!_%div).last\n            val b = arr.dropWhile(!_%div).takeWhile(!_%div).last\n\
    \            if(b%a == 0) div = b\n            else cur += 1\n        }\n    \
    \    div\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplpl8hcym.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = Array.fill(n)(\e[31m1l\e[0m).map(_.toLong)\n\e[31m\e[31m  |\e[0m       \
    \                      ^\e[0m\n\e[31m  |\e[0m                             Found:\
    \    (n : Long)\n\e[31m  |\e[0m                             Required: Int\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplpl8hcym.scala:12:34\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m\
    \ \e[36ma\e[0m = arr.takeWhile(!_%div).last\n\e[31m\e[31m   |\e[0m           \
    \                       ^^\e[0m\n\e[31m   |\e[0m       value unary_! is not a\
    \ member of Long - did you mean _$2.unary_+?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplpl8hcym.scala:13:34 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mval\e[0m \e[36mb\e[0m = arr.dropWhile(!_%div).takeWhile(!_%div).last\n\
    \e[31m\e[31m   |\e[0m                                  ^^\e[0m\n\e[31m   |\e[0m\
    \       value unary_! is not a member of Long - did you mean _$3.unary_+?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplpl8hcym.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mb\e[0m = arr.dropWhile(!_%div).takeWhile(!_%div).last\n\
    \e[31m\e[31m   |\e[0m                                                    ^^\e\
    [0m\n\e[31m   |\e[0m       value unary_! is not a member of Long - did you mean\
    \ _$4.unary_+?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = mutable.ListBuffer[Long]()\n     \
    \   for (a <- 1 to n) {\n            val factorOfN = if (n % a == 0) a else n\
    \ % a\n            if (factorOfN == 0) {\n                factors += a\n     \
    \       }\n        }\n        factors.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp05c_58un.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp05c_58un.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (a <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m              \
    \         Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 1l\n        for (div: Long\
    \ <- 2l to sqrt(n)) {\n            if (n % div == 0) {\n                if (div\
    \ > largestDivisor) {\n                    largestDivisor = div\n            \
    \    }\n            }\n        }\n        largestDivisor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6_vw83eh.scala:9:36\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (div:\
    \ \e[35mLong\e[0m <- \e[31m2l\e[0m to sqrt(n)) {\n\e[31m\e[31m  |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \         Found:    Double\n\e[31m  |\e[0m                                Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 1\n        var lastDividend = 1\n    \
    \    val numbers = mutable.ArrayBuffer(n)\n        while (numbers.size > 0) {\n\
    \            val currentDivisor = numbers.last.div(lastDividend)\n           \
    \ val nextNumber = lastDividend.multiply(nextDivisor)\n            val nextDivisor\
    \ = numbers.last.minus(lastDividend)\n            max = nextNumber\n         \
    \   lastDividend = currentDivisor\n            numbers = numbers :+ nextNumber\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv66jinqm.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpv66jinqm.scala:13:42 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnextNumber\e[0m = lastDividend.multiply(nextDivisor)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value multiply is not a member of\
    \ Int\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv66jinqm.scala:17:20 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            numbers = numbers :+ nextNumber\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Reassignment to val numbers\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDiv = n\n        while(maxDiv > 0) {\n  \
    \          maxDiv /= 2\n            if(n % maxDiv == 0) {\n                maxDiv\
    \ = Long.MaxValue\n                break\n            }\n        }\n        maxDiv\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6dhkz0i4.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largest = mutable.Set[Long]()\n        val divisor\
    \ : Long = n / 2\n        while (!largest.contains(divisor)) {\n            if\
    \ (n % divisor == 0) {\n                largest = largest.union(divisor)\n   \
    \         }\n            divisor = divisor / 2\n        }\n        divisor\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwezyhiw8.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlargest\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpwezyhiw8.scala:12:24 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                largest = largest.union(divisor)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val largest\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpwezyhiw8.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            divisor = divisor / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Reassignment to val divisor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 0l\n        for(d <- 1 to n)\n       \
    \     if( n % d == 0) {\n                max = d\n                break\n    \
    \        }\n        if(max > n) max else n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwedqdypv.scala:9:22\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(d <- \e\
    [31m1\e[0m to n)\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e\
    [0m                      Found:    (n : Long)\n\e[31m  |\e[0m                \
    \      Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwedqdypv.scala:12:16\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divised = n / 2\n        var maxDivisor = 0\n\
    \        for(i <- 1 to (Math.pow(2, n) - 1)){\n            if(n % i == 0 && divised\
    \ % i == 0){\n                maxDivisor = Math.max(maxDivisor, i)\n         \
    \   }\n        }\n        maxDivisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lfmstu8.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to (Math.pow(\e[31m2\e[0m, n) - \e[31m1\e[0m)){\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \            Found:    Double\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largest_divisor_set = scala.collection.mutable.Set[Long]()\n\
    \        var max_divisor = 0\n        var max_divisor_candidate = math.MaxLong\n\
    \        var current_divisor = 0\n        var divisor\n        while (true){\n\
    \            divisor = n\n            while (divisor % 2 == 0 && divisor > 0){\n\
    \                divisor = divisor / 2\n            }\n            if(divisor\
    \ > 0){\n                largest_divisor_set += divisor\n                if(divisor\
    \ > max_divisor_candidate){\n                    max_divisor_candidate = divisor\n\
    \                    max_divisor = divisor\n                }\n              \
    \  if(largest_divisor_set.contains(divisor)){\n                    break\n   \
    \             }\n            }\n            divisor = n * 10\n            while\
    \ (divisor % 2 == 0 && divisor > 0){\n                divisor = divisor / 2\n\
    \            }\n            if(divisor > 0){\n                largest_divisor_set\
    \ += divisor\n                if(divisor > max_divisor_candidate){\n         \
    \           max_divisor_candidate = divisor\n                    max_divisor =\
    \ divisor\n                }\n                if(largest_divisor_set.contains(divisor)){\n\
    \                    break\n                }\n            }\n            divisor\
    \ = n * 100\n            while (divisor % 2 == 0 && divisor > 0){\n          \
    \      divisor = divisor / 2\n            }\n            if(divisor > 0){\n  \
    \              largest_divisor_set += divisor\n                if(divisor > max_divisor_candidate){\n\
    \                    max_divisor_candidate = divisor\n                    max_divisor\
    \ = divisor\n                }\n                if(largest_divisor_set.contains(divisor)){\n\
    \                    break\n                }\n            }\n            divisor\
    \ = n * 1000\n            while (divisor % 2 == 0 && divisor > 0){\n         \
    \       divisor = divisor / 2\n            }\n            if(divisor > 0){\n \
    \               largest_divisor_set += divisor\n                if(divisor > max_divisor_candidate){\n\
    \                    max_divisor_candidate = divisor\n                    max_divisor\
    \ = divisor\n                }\n                if(largest_divisor_set.contains(divisor)){\n\
    \                    break\n                }\n            }\n            divisor\
    \ = n * 10000\n            while (divisor % 2 == 0 && divisor > 0){\n        \
    \        divisor = divisor / 2\n            }\n            if(divisor > 0){\n\
    \                largest_divisor_set += divisor\n                if(divisor >\
    \ max_divisor_candidate){\n                    max_divisor_candidate = divisor\n\
    \                    max_divisor = divisor\n                }\n              \
    \  if(largest_divisor_set.contains(divisor)){\n                    break\n   \
    \             }\n            }\n            divisor = n * 100000\n           \
    \ while (divisor % 2 == 0 && divisor > 0){\n                divisor = divisor\
    \ / 2\n            }\n            if(divisor > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyienfq4.scala:13:0 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m (\e[31mtrue\e[0m){\n\e[31m\e\
    [31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyienfq4.scala:89:4 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyienfq4.scala:99:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpsyienfq4.scala:10:41 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmax_divisor_candidate\e[0m = math.MaxLong\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   value MaxLong is not a member\
    \ of math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsyienfq4.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            divisor = n\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Null\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsyienfq4.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mwhile\e\
    [0m (divisor % \e[31m2\e[0m == \e[31m0\e[0m && divisor > \e[31m0\e[0m){\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Initialize max as 1, and min as n, to allow a\
    \ solution to be found even when n = 1\n        var max = 1, min = n\n       \
    \ // Keep looping until max and min are different\n        while {\n         \
    \   max += min / max\n            if (max > min) min = max\n            else return\
    \ max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_4vq6avx.scala:9:19 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = \e[31m1\e[0m,\
    \ min = n\n\e[31m\e[31m  |\e[0m                   ^\e[0m\n\e[31m  |\e[0m     \
    \              end of statement expected but ',' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp_4vq6avx.scala:16:4 ----------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  'do' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_4vq6avx.scala:12:16\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            max += min /\
    \ max\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp_4vq6avx.scala:12:19 -----------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            max += min / max\n\e[31m\e[31m   |\e[0m      \
    \             ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch expected type ?{ / : ?\
    \ }\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_4vq6avx.scala:13:20 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (max > min) min = max\n\e[31m\e\
    [31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float):\
    \ Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\
    \e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e\
    [31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments ((Int, Int)\
    \ => Int)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_4vq6avx.scala:13:33\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (max\
    \ > min) min = max\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = Long.MaxValue\n        var\
    \ nDivisor = 0\n        for (i <- 2 to n) {\n            if (n % i == 0) {\n \
    \               nDivisor += 1\n                if (nDivisor > largestDivisor)\
    \ {\n                    largestDivisor = nDivisor\n                }\n      \
    \      }\n        }\n        nDivisor += 1\n        largestDivisor\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpch6qpoqa.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val a = Array.ofDim[Long](100) // TODO: make this\
    \ a param\n        var maxDiv = n\n        var maxRem: Long = 1l\n        var\
    \ curRem: Long = 1l\n        var curDiv = 1l\n        while(true) {\n        \
    \    if(maxDiv <= 0) {\n                maxDiv = maxDiv * 2l\n               \
    \ maxRem = (maxDiv/maxRem)*n\n                maxDiv += 1l\n                maxRem\
    \ -= 1l\n            }\n            val rem = (maxDiv/maxRem)*n\n            val\
    \ div = maxDiv/maxRem\n            if(a contains div) {\n                // found\
    \ a divisor\n                if(maxDiv%curRem == 0) {\n                    return\
    \ maxDiv\n                }\n                // found a larger divisor\n     \
    \           if(maxDiv%curDiv == 0) {\n                    maxDiv = (maxDiv/div)*(2*curRem)\n\
    \                    maxRem = (maxDiv/maxRem)*n\n                    maxDiv +=\
    \ 1l\n                    maxRem -= 1l\n                }\n            }\n   \
    \         if(rem == 0) {\n                curDiv += 1l\n                curRem\
    \ = rem\n            } else {\n                curRem = rem\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnradi0cd.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m(\e\
    [31mtrue\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m14 |\e[0m     \
    \       \e[33mif\e[0m(maxDiv <= \e[31m0\e[0m) {\n\e[31m15 |\e[0m             \
    \   maxDiv = maxDiv * \e[31m2l\e[0m\n\e[31m16 |\e[0m                maxRem = (maxDiv/maxRem)*n\n\
    \e[31m17 |\e[0m                maxDiv += \e[31m1l\e[0m\n\e[31m18 |\e[0m      \
    \          maxRem -= \e[31m1l\e[0m\n\e[31m19 |\e[0m            }\n\e[31m20 |\e\
    [0m            \e[33mval\e[0m \e[36mrem\e[0m = (maxDiv/maxRem)*n\n\e[31m21 |\e\
    [0m            \e[33mval\e[0m \e[36mdiv\e[0m = maxDiv/maxRem\n\e[31m22 |\e[0m\
    \            \e[33mif\e[0m(a contains div) {\n\e[31m23 |\e[0m                \e\
    [34m// found a divisor\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m(maxDiv%curRem\
    \ == \e[31m0\e[0m) {\n\e[31m25 |\e[0m                    \e[33mreturn\e[0m maxDiv\n\
    \e[31m26 |\e[0m                }\n\e[31m27 |\e[0m                \e[34m// found\
    \ a larger divisor\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m(maxDiv%curDiv\
    \ == \e[31m0\e[0m) {\n\e[31m29 |\e[0m                    maxDiv = (maxDiv/div)*(\e\
    [31m2\e[0m*curRem)\n\e[31m30 |\e[0m                    maxRem = (maxDiv/maxRem)*n\n\
    \e[31m31 |\e[0m                    maxDiv += \e[31m1l\e[0m\n\e[31m32 |\e[0m  \
    \                  maxRem -= \e[31m1l\e[0m\n\e[31m33 |\e[0m                }\n\
    \e[31m34 |\e[0m            }\n\e[31m35 |\e[0m            \e[33mif\e[0m(rem ==\
    \ \e[31m0\e[0m) {\n\e[31m36 |\e[0m                curDiv += \e[31m1l\e[0m\n\e\
    [31m37 |\e[0m                curRem = rem\n\e[31m38 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m39 |\e[0m                curRem = rem\n\e[31m40 |\e[0m          \
    \  }\n\e[31m41 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashMap[Long, Boolean]()\n\
    \        // find largest divisor of n\n        for(divisor <- 1 to n by 1){\n\
    \            if(n % divisor == 0) {\n                divisors.put(divisor, true)\n\
    \            }\n        }\n        // find first divisor\n        val largestDivisor\
    \ = divisors.iterator.filter(x => x.get._2).maxBy(x => x._1).get._1\n        if(largestDivisor\
    \ > n) largestDivisor\n        else largestDivisor - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x9mado3.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m  |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x9mado3.scala:10:28\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(divisor\
    \ <- \e[31m1\e[0m to n by \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m              \
    \              ^\e[0m\n\e[31m   |\e[0m                            Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val map = scala.collection.mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n)\n            map(i % n) = map(i % n) + 1\n\
    \n        val max = 0l\n        for(i <- 0 until n)\n            if(map(i % n)\
    \ > max)\n                max = map(i % n)\n        max - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0ygp020.scala:9:25\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n)\n\e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m\
    \  |\e[0m                         Found:    (n : Long)\n\e[31m  |\e[0m       \
    \                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps0ygp020.scala:13:25 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n)\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmps0ygp020.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                max = map(i % n)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val list = mutable.ArrayBuffer.empty[Long]\n   \
    \     for (i <- 2 to n) \n            if (n % i == 0)\n                list +=\
    \ i\n        list.lastOption\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptu1epjrm.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmptu1epjrm.scala:9:23 ---------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) \n\e[31m\e\
    [31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m                    \
    \   Found:    (n : Long)\n\e[31m  |\e[0m                       Required: Int\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = BigInt(n)\n        var largestDivisor\
    \ = 1L\n        var remainder: Long = 0\n\n        // Search until largest divisor\
    \ found\n        while (remainder != 0) {\n            val nextDivisor = remainder\
    \ % largestDivisor\n            remainder = nextDivisor // remove from remainder\n\
    \            largestDivisor = nextDivisor // update largestDivisor\n         \
    \   largest = largest % nextDivisor // update largest\n        }\n        largestDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpflybqepk.scala:24)\n\tat Problem.main(tmpflybqepk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 1\n        for (i <- 2 until n) {\n  \
    \          if (n % i == 0) {\n                if (max > i) {\n               \
    \     max = i\n                }\n            }\n        }\n        max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5pl2rbfs.scala:9:26\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m until n) {\n\e[31m\e[31m  |\e[0m                          ^\e[0m\n\
    \e[31m  |\e[0m                          Found:    (n : Long)\n\e[31m  |\e[0m \
    \                         Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val res = new mutable.HashMap[Long, Long]\n    \
    \    for (x <- 2 to n) if (n % x == 0) res += (x, n/x) \n        res.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3g5smw5r.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3g5smw5r.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m2\e[0m to n) \e[33mif\e[0m (n % x == \e[31m0\e[0m) res += (x, n/x) \n\e\
    [31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m              \
    \         Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val div = List(0 until n).map { i => (n%i, i) }\n\
    \        val max = div.toList.maxBy(_._1)._1\n        max = div.toList.find(_._1\
    \ == max)._2\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ixr4bg5.scala:8:31\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdiv\e\
    [0m = List(\e[31m0\e[0m until n).map { \e[36mi\e[0m => (n%i, i) }\n\e[31m\e[31m\
    \  |\e[0m                               ^\e[0m\n\e[31m  |\e[0m               \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                        \
    \       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5ixr4bg5.scala:8:47\
    \ ------------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e\
    [0m \e[36mdiv\e[0m = List(\e[31m0\e[0m until n).map { \e[36mi\e[0m => (n%i, i)\
    \ }\n\e[31m\e[31m  |\e[0m                                              ^^\e[0m\n\
    \e[31m  |\e[0m  None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m%\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m  |\e[0m   (x: Double):\
    \ Double\n\e[31m  |\e[0m   (x: Float): Float\n\e[31m  |\e[0m   (x: Long): Long\n\
    \e[31m  |\e[0m   (x: Int): Long\n\e[31m  |\e[0m   (x: Char): Long\n\e[31m  |\e\
    [0m   (x: Short): Long\n\e[31m  |\e[0m   (x: Byte): Long\n\e[31m  |\e[0m  match\
    \ arguments ((i : Range))\n\e[31m\e[31m-- Error: /tmp/tmp5ixr4bg5.scala:9:40 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = div.toList.maxBy(_._1)._1\n\
    \e[31m\e[31m  |\e[0m                                        ^\e[0m\n\e[31m  |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ixr4bg5.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        max = div.toList.find(_._1 == max)._2\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value _2 is not a member of Option[(Nothing, Range)]\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val maxDivisors = scala.collection.mutable.ArrayBuffer[Long]()\n\
    \        val maxDivisor = math.max(n.toLong)\n        def divisors(n1 : Long)\
    \ : Unit = {\n            val numDivisor = n1.toLong / maxDivisor\n          \
    \  if (numDivisor == n1) maxDivisors += numDivisor\n            else if (numDivisor\
    \ > n1) divisors(numDivisor)\n            else maxDivisors += numDivisor\n   \
    \     }\n        divisors(n)\n        if (maxDivisors.isEmpty) maxDivisors.head\
    \ else maxDivisors.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmnvh7tll.scala:9:30 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxDivisor\e[0m = math.max(n.toLong)\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((n.toLong\
    \ : => Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // This array tracks the divisors that we have seen\n\
    \        // We will use this array to find the largest divisor < n\n        var\
    \ divisors = Array[Long]()\n        // Find the largest divisor < n that divides\
    \ n evenly\n        // If we find one, we return it\n        var maxDiv : Long\
    \ = n.toInt\n        for (i <- 0 until maxDiv) {\n            // If this divisor\
    \ divides n evenly, we set our flag to true\n            if (n % i == 0) {\n \
    \               divisors = divisors :+ i\n            }\n            // If this\
    \ divisor does not divide n evenly, we set our flag to false\n            else\
    \ {\n                divisors = divisors :- i\n            }\n        }\n    \
    \    // If we have seen all of the divisors, we return the largest one found\n\
    \        if (divisors.forall(x => x == 0)) {\n            return maxDiv\n    \
    \    }\n        // If we haven't seen all of the divisors yet and there are any\
    \ divisors left, return that\n        else if (divisors.forall(x => x > 0) &&\
    \ (divisors.nonEmpty > 0)) {\n            return divisors.max\n        }\n   \
    \     // If we haven't seen all of the divisors yet and there are no divisors\
    \ left, return -1\n        else if (divisors.forall(x => x < 0)) {\n         \
    \   return -1\n        }\n        else {\n            return -1\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbv0cap9j.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until maxDiv) {\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (maxDiv : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbv0cap9j.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                divisors = divisors :- i\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                    value :- is not a member of Array[Long]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbv0cap9j.scala:29:69 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (divisors.forall(x =>\
    \ x > \e[31m0\e[0m) && (divisors.nonEmpty > \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e\
    [0m                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                                     Found:   \
    \ (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                                      \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val dividers = mutable.HashMap[Long, Long]()\n \
    \       val divisors = mutable.ArrayBuffer.empty[Long]\n        n to 1 by -1 foreach\
    \ { n =>\n            n to 1 by -1 foreach { d =>\n                if (n / d ==\
    \ 0) {\n                    divisors += d\n                }\n               \
    \ if (dividers.contains(n / d)) {\n                    val max = (n / d).toLong\n\
    \                    val current = (n / d).toLong\n                    if (current\
    \ > dividers.values(key)) {\n                        dividers.put(d, max)\n  \
    \                  }\n                }\n            }\n        }\n        divisors.reverse.find(max(_,\
    \ 0l)).map(_ / n).reduce(_ + _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7tru913.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdividers\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7tru913.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        for (d <- 1 to n by 2) {\n            if (n % d\
    \ == 0) {\n                if (d > n / d) d) else n)\n                break\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbl__0x4a.scala:10:32 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                \e[33mif\e[0m (d > n / d) d) \e[33melse\e\
    [0m n)\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                '}' expected, but ')' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpbl__0x4a.scala:23:0 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbl__0x4a.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (d <-\
    \ \e[31m1\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m  |\e[0m                 \
    \      ^\e[0m\n\e[31m  |\e[0m                       Found:    (n : Long)\n\e[31m\
    \  |\e[0m                       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbl__0x4a.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbl__0x4a.scala:16:11 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    assert(largestDivisor((\e[31m3l\e[0m)) == (\e[31m1l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          Not found: largestDivisor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbl__0x4a.scala:17:11 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m    assert(largestDivisor((\e[31m7l\e[0m)) == (\e[31m1l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          Not found: largestDivisor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbl__0x4a.scala:18:11 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m    assert(largestDi"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largestDivisors = (0 to n/2).map(n => (n, n/n)).toSet\n\
    \        largestDivisors.foldLeft(1l) {\n            case (acc, x) =>\n      \
    \          if (acc.forall(n => x._2 < n))\n                    acc\n         \
    \       else\n                    acc.max { case (m, t) => t._2 * (m-1l) }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmfkwpli3.scala:8:36\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlargestDivisors\e\
    [0m = (\e[31m0\e[0m to n/\e[31m2\e[0m).map(\e[36mn\e[0m => (n, n/n)).toSet\n\e\
    [31m\e[31m  |\e[0m                                    ^^^\e[0m\n\e[31m  |\e[0m\
    \                                    Found:    Long\n\e[31m  |\e[0m          \
    \                          Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmfkwpli3.scala:11:24 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m                \e[33mif\e[0m (acc.forall(\e[36mn\e[0m =>\
    \ x._2 < n))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value forall is not a member of Long\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpmfkwpli3.scala:14:30 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    acc.max { \e[33mcase\e[0m (m, t)\
    \ => t._2 * (m-\e[31m1l\e[0m) }\n\e[31m\e[31m   |\e[0m                       \
    \       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter x$1 of expanded function:\n\
    \e[31m   |\e[0m   x$1 => \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m \
    \  |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase \e[0m(m, t) => \n\e[31m\
    \   |\e[0m           t._2 * (m - \e[31m1L\e[0m)\n\e[31m   |\e[0m       }.\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfkwpli3.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    acc.max { \e[33mcase\e[0m (m, t)\
    \ => t._2 * (m-\e[31m1l\e[0m) }\n\e[31m\e[31m   |\e[0m                       \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \              Not found: t\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val biggestNumber = Long.MaxValue - 1\n        val\
    \ divisorsEvenlyDividedByBiggestNumber = new mutable.Array[Long](n)\n\n      \
    \  for ( i <- 0 until n ) {\n            val numberDividedByBiggestNumber = n\
    \ % biggestNumber\n            divisorsEvenlyDividedByBiggestNumber(i) = numberDividedByBiggestNumber\n\
    \            biggestNumber = numberDividedByBiggestNumber\n        }\n       \
    \ largest(divisorsEvenlyDividedByBiggestNumber)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptspmf75g.scala:9:55 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisorsEvenlyDividedByBiggestNumber\e\
    [0m = \e[33mnew\e[0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m  |\e[0m \
    \                                                      ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                                                       Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptspmf75g.scala:11:27\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m ( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmptspmf75g.scala:14:26 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            biggestNumber = numberDividedByBiggestNumber\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val biggestNumber\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptspmf75g.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        largest(divisorsEvenlyDividedByBiggestNumber)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: largest\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 0L\n        var current = 0L\n       \
    \ var sum = 0L\n        val array = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 1 to n){\n            val j = i % 2\n            current += i\n         \
    \   if(j == 0){\n                array.add(current)\n            }else{\n    \
    \            if(current > max){\n                    max = current\n         \
    \       }\n                current = 0\n            }\n        }\n        array.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8ysvfgh.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa8ysvfgh.scala:12:22 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29)\n        val candidates = primes.takeWhile(_ < n).toList\n        val largest\
    \ = 0l\n        candidates.foreach(n => {\n            if ((n % _ == 0) && (largest.compareTo(_)\
    \ <= 0)) {\n                largest = n\n            }\n        })\n        largest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbbbg7dmb.scala:12:21 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m ((n % _ == \e[31m0\e[0m) &&\
    \ (largest.compareTo(_) <= \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m           \
    \          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => n % _$2 == 0.\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpbbbg7dmb.scala:13:24 -----------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m                largest = n\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val largest\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factors = mutable.Set[Long]()\n        for(d\
    \ <- 1l to n) {\n            val d = n / d\n            if(d % 2 == 0) {\n   \
    \             factors.add(d)\n            }\n        }\n        factors.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3ecss5o.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.Set[Long]()\n        while\
    \ (n > 0) {\n            divisors.add(n)\n            val newN = n//n // Divide\
    \ n by every number from 1 to n except 1\n            if (newN == 1) divisors.remove(newN)\
    \ // If we divide 1 by every number from 1 to n, that number is itself a divisor,\
    \ so remove the divisor\n            n = newN\n        }\n        // If we never\
    \ added a divisor above n, n is divisible by every number from 1 to n except 1\n\
    \        // If n is evenly divisible by every number from 1 to n except 1, n is\
    \ divisible by 2\n        // If n is evenly divisible by every number from 1 to\
    \ n except 1, n is divisible by 3\n        // ... and so on\n        divisors.maxBy(divisors.isEmpty(_)\
    \ ? 1 : (x => math.floor(n/x)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpss7ej0y4.scala:19:65 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        divisors.maxBy(divisors.isEmpty(_) ? \e[31m1\e\
    [0m : (\e[35mx\e[0m => math.floor(n/x)))\n\e[31m\e[31m   |\e[0m              \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                           ')' expected, but '(' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpss7ej0y4.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpss7ej0y4.scala:13:14 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            n = newN\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDivisor = 1\n        var maxNumber = 0\n\
    \        var current = n\n        while(current != 0) {\n            var divisor\
    \ = math.floor_divide(current,2)\n            if(divisor > maxDivisor) {\n   \
    \             maxDivisor = divisor\n                maxNumber = current\n    \
    \        }\n            current = math.floor_divide(current,2)\n        }\n  \
    \      maxNumber\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7z51bfpu.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mvar\e[0m \e[36mdivisor\e[0m = math.floor_divide(current,\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value floor_divide is not a member\
    \ of math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7z51bfpu.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                maxNumber = current\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (current : Long)\n\e[31m   |\e[0m     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7z51bfpu.scala:17:27 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            current = math.floor_divide(current,\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value floor_divide is not a member of math\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = 0\n        for (nn <- 1 to n by 2)\
    \ {\n            if (n % nn == 0)\n                if (nn > largest)\n       \
    \             largest = nn\n        }\n        largest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4n7cr1u.scala:9:24\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (nn <-\
    \ \e[31m1\e[0m to n by \e[31m2\e[0m) {\n\e[31m\e[31m  |\e[0m                 \
    \       ^\e[0m\n\e[31m  |\e[0m                        Found:    (n : Long)\n\e\
    [31m  |\e[0m                        Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(d <- 1 to n-1) divisors += n-1l\n        divisors.maxBy(d => n/d).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps8cd8q35.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps8cd8q35.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(d <- \e[31m1\e[0m to n-\e[31m1\e\
    [0m) divisors += n-\e[31m1l\e[0m\n\e[31m\e[31m  |\e[0m                      ^^^\e\
    [0m\n\e[31m  |\e[0m                      Found:    Long\n\e[31m  |\e[0m      \
    \                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val d = Array[Long](3l, 5l, 7l, 9l).sorted\n   \
    \     val r = n/d.last\n        if(r == 0) d.last\n        else d.find(x => n\
    \ % x == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpccwmatx4.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m d.find(x\
    \ => n % x == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Option[Long]\n\e[31m   |\e[0m     \
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var result = -1\n        var maxDiv = n\n      \
    \  while (maxDiv % 2 == 0) {\n            maxDiv = maxDiv / 2\n        }\n   \
    \     while (maxDiv % 3 == 0) {\n            if (result < maxDiv) result = maxDiv\n\
    \            maxDiv = maxDiv / 3\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswnlnm69.scala:14:42\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (result\
    \ < maxDiv) result = maxDiv\n\e[31m\e[31m   |\e[0m                           \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \         Found:    (maxDiv : Long)\n\e[31m   |\e[0m                         \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divs = mutable.Set[Long]()\n        var x =\
    \ n\n        while(x > 0) {\n            x % 2 == 0 && divs += x\n           \
    \ x /= 2\n        }\n        divs.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkh36xrd.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivs\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplkh36xrd.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            x % \e[31m2\e[0m == \e[31m0\e[0m && divs\
    \ += x\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m          value += is not a member of Boolean - did you mean Boolean.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largestDivisors = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        divisors.clear()\n\
    \        var divisor = 1\n\n        // while divisors contains n\n        while\
    \ (divisors.contains(n)) {\n            divisor = 1\n            // while divisor\
    \ < n\n            while (divisor < n) {\n                // if n divides evenly\
    \ into divisor add divisor to divisor array\n                if (n / divisor ==\
    \ 0) {\n                    divisors += divisor\n                    // reset\
    \ the divisor for next loop iteration\n                    divisor = 1\n     \
    \           } else {\n                    // else add divisor to divisors array\n\
    \                    divisors += divisor\n                }\n                divisor\
    \ += 1\n            }\n            divisors.clear()\n        }\n        if (divisors.contains(n))\
    \ {\n            divisors += n\n        }\n        divisors.max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93xrzwbz.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlargestDivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp93xrzwbz.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = BigInt(n) \n        while(!largest.equals(BigInt(n)))\
    \ {\n            val newDivisor = largest.divideToIntegralValue()\n          \
    \  if( newDivisor.compareTo(n) == -1 ) {\n                largest = newDivisor\
    \ \n            } else if (newDivisor.compareTo(n) == 1 ) {\n                largest\
    \ = newDivisor \n            } else {\n                largest = BigInt(n) \n\
    \            }\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphac7ctq1.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mnewDivisor\e[0m = largest.divideToIntegralValue()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value divideToIntegralValue is not a member\
    \ of BigInt\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphac7ctq1.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        largest\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (largest : BigInt)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val rem = n/2l\n        val rem2 = (rem*rem)/2l\n\
    \        val rem3 = (rem2*rem2)/2l\n        if(rem % 2 == 0) rem else rem3\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptrp68g7i.scala:14)\n\tat Problem.main(tmptrp68g7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Find factors for n, sort descending order\n \
    \       var factors = factoring(n)\n        var factors = factors.toList.sortBy(-_.length)\n\
    \        var largestFactor = factors.head\n        // Find the largest factor\
    \ larger than n\n        val isLarge = n / largestFactor > n\n        if (isLarge)\
    \ largestFactor else -1\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdg_s4a2x.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = factors.toList.sortBy(-_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactors is already defined as \e[33mvariable\e[0m \e[35mfactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdg_s4a2x.scala:9:22 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mfactors\e[0m = factoring(n)\n\e[31m\e\
    [31m  |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \         Not found: factoring\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Using a mutable Map will allow us to store all\
    \ of the divisors in ascending order\n        val divisors = mutable.Map[Long,\
    \ Boolean]()\n        divisors += (0l -> true)\n        for(i<- 1 to n-1) {\n\
    \            if (i%2 == 0){\n                if (divisors.contains((i/2))) {\n\
    \                    divisors((i/2)) = false\n                }\n            \
    \    else {\n                    divisors((i/2)) = true\n                }\n \
    \           }\n        }\n        divisors.maxBy(_._1)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8k4lmy1.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m  |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8k4lmy1.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val factorsOfN = factors(n)\n        if(factorsOfN.length\
    \ == 1) n\n        else largestDivisor(factorsOfN.removeAt(factorsOfN.length -\
    \ 1))\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyjc1lh0.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorsOfN\e[0m = factors(n)\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \                     Not found: factors\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = 0\n        for(i <- 2 to n/2){\n \
    \           if((n modulo i) == 0) largest = i\n        }\n        largest\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiyyxjsaw.scala:9:22\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n/\e[31m2\e[0m){\n\e[31m\e[31m  |\e[0m                      ^^^\e\
    [0m\n\e[31m  |\e[0m                      Found:    Long\n\e[31m  |\e[0m      \
    \                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiyyxjsaw.scala:10:18 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m            \e[33mif\e[0m((n modulo i) == \e[31m0\e[0m) largest = i\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ modulo is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var res = n // to store the result\n        var\
    \ n = n // to store the original n\n        for(i <- 1 to (2l*n)) { // 2 is the\
    \ smallest divisor of n\n            if(n % i == 0) {\n                // if i\
    \ divides n, then n must be smaller than n\n                res = i\n        \
    \        n = n / i\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz_z18ose.scala:9:16 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = n \e[34m// to store\
    \ the original n\e[0m\n\e[31m\e[31m  |\e[0m                ^\e[0m\n\e[31m  |\e\
    [0m                Recursive \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val numDivisors = n.toInt/2 // integer division\n\
    \        // create a list of all divisors of a number\n        val divisors =\
    \ for(i <- 1 to numDivisors) yield n / i\n        // find the maximum number\n\
    \        divisors.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5qzrvtdm.scala:15)\n\tat Problem.main(tmp5qzrvtdm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 0\n        var current = n\n\n       \
    \ while (current != 0) {\n            if (current%2 == 0) {\n                max\
    \ = Math.max(max, current)\n            }\n            current = current / 2\n\
    \        }\n\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbm1vm254.scala:13:36\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                max = Math.max(max,\
    \ current)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (current : Long)\n\
    \e[31m   |\e[0m                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = 0\n        for (x <- 1 to n) {\n \
    \           if (n % x == 0) {\n                largest = x :: largest\n      \
    \      }\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7bjg48g_.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7bjg48g_.scala:11:28 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m                largest = x :: largest\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ :: is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = n.toInt;\n        var ans = Long.MinValue;\n\
    \        var l = l;\n        while (l<=1) {\n            if (n%l == 0) ans = l;\n\
    \            l = l+1;\n        }\n        ans;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkmk9flva.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l;\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e\
    [0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpkmk9flva.scala:13:14 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            l = l+\e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val l\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // use n-1 as the test parameter\n        for (i<-\
    \ 0 until n-1){\n            // if the i^th bit in n is set to 1\n           \
    \ if(n & (1L << i) == (1L << i)) {\n                // then we could divide by\
    \ (i+1)\n                if(n == (1L << i)) {\n                    return (1L\
    \ << i)\n                }\n                else {\n                    // we\
    \ could divide by (n-1)\n                    if(n == (1L << (i-1))) {\n      \
    \                  return (1L << (i-1))\n                    }\n             \
    \       else {\n                        // we could divide by (n-2)\n        \
    \                if(n == (1L << (i-2))) {\n                            return\
    \ (1L << (i-2))\n                        }\n                        else {\n \
    \                           // we could divide by (n-3)\n                    \
    \        if(n == (1L << (i-3))) {\n                                return (1L\
    \ << (i-3))\n                            }\n                            else {\n\
    \                                // we could not divide by n\n               \
    \                 return -1\n                            }\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        // if we got here, then we could not divide by any number\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92jm6wxc.scala:9:25\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m until n-\e[31m1\e[0m){\n\e[31m\e[31m  |\e[0m                      \
    \   ^^^\e[0m\n\e[31m  |\e[0m                         Found:    Long\n\e[31m  |\e\
    [0m                         Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp92jm6wxc.scala:11:17 -----------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(n & (\e[31m1L\e[0m << i) == (\e\
    [31m1L\e[0m << i)) {\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e\
    [31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m\
    \ (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ (Boolean)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = math.BigInt(n)\n        val m = scala.math.BigInt(2)\n\
    \        var div = 1\n        var divMax = n\n\n        for(i <- l until n) {\n\
    \            if(i % m == 0) {\n                divMax /= m\n                div\
    \ += 1\n                m += divMax\n            }\n        }\n        return\
    \ divMax\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyg0nlqz6.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                divMax /= m\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value /= is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyg0nlqz6.scala:17:18 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                m += divMax\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of BigInt - did you mean\
    \ m.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var remainder = 0\n        var maxDivisor = 0\n\
    \        // Divide n evenly, keep track of largest divisor\n        for (d <-\
    \ 1 until n) {\n            if (n % d == 0) {\n                remainder += 1\n\
    \                if (maxDivisor < d) {\n                    maxDivisor = d\n \
    \               }\n            }\n        }\n        // No more divisors exist,\
    \ return remainder\n        if (remainder == 0) {\n            return remainder\n\
    \        }\n        // If maxDivisor is not 1, then subtract 1 from maxDivisor\
    \ and try again\n        if (maxDivisor != 1) {\n            maxDivisor -= 1\n\
    \            return largestDivisor(n).min(maxDivisor)\n        } else {\n    \
    \        return n\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr4g1m41i.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (d <-\
    \ \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.Set[Long]()\n        var\
    \ max = 1\n\n        // Find the largest divisor that's not less than n\n    \
    \    while (max < n) {\n            val divisor = max * max % n\n            if\
    \ (divisors.contains(divisor)) {\n                break\n            }\n     \
    \       divisors += divisor\n            max += 1\n        }\n\n        if (divisors.isEmpty)\
    \ {\n            return n\n        } else {\n            return divisors.min\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulgwz15k.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpulgwz15k.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val x = new mutable.Queue[Long](n.toLong)\n    \
    \    while(!x.isEmpty){\n            val y = x.dequeue\n            val factors\
    \ = new mutable.Queue[Long]()\n            for(i<-x.iterator){\n             \
    \   if(i % y != 0)\n                    factors += i\n            }\n        \
    \    while(!factors.isEmpty){\n                if(factors.dequeue % y == 0)\n\
    \                    x.enqueue(factors.dequeue)\n                else\n      \
    \              factors += factors.dequeue\n            }\n        }\n        x.dequeue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp083feker.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mnew\e[0m mutable.Queue[\e\
    [35mLong\e[0m](n.toLong)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp083feker.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largest = BigInt(0)\n        val arr = mutable.ArrayBuffer.empty[Long]\n\
    \        \n        for(x <- 1 to n){\n            \n            if(BigInt(x) %\
    \ BigInt(2) == 0){\n                \n                largest = BigInt(x) > largest\n\
    \                arr += x\n                \n                if(BigInt(x) > n){\n\
    \                    largest = true\n                    break\n             \
    \   }\n            }\n        }\n        \n        if(arr.isEmpty){\n        \
    \    largest = BigInt(n)\n        }\n        \n        if(largest == BigInt(0)){\n\
    \            largest = BigInt(1)\n        }\n        \n        largest\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rskwat4.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7rskwat4.scala:11:22 --------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(x <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rskwat4.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                largest = BigInt(x)\
    \ > largest\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Boolean\n\e[31m   |\e\
    [0m                          Required: BigInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7rskwat4.scala:19:30 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    largest = \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Found:    (\e[31mtrue\e[0m : Boolean)\n\e[31m   |\e[0m\
    \                              Required: BigInt\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rskwat4.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rskwat4.scala:33:8\
    \ ---------------------\e["
  stdout: ''
  timestamp: 1660010632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val evenDivisors = n\n            .filter(_ % 2\
    \ == 0)\n            .map(n => (n, n))\n            .groupBy(_._2)\n         \
    \   .mapValues(_.map(_._1))\n            .filter(_._2.size == 1)\n           \
    \ .map(_._2.head)\n            .toList\n        if (evenDivisors.isEmpty) n\n\
    \        else largestDivisor(largestDivisor(evenDivisors.head))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dzp9cbh.scala:9:13 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mevenDivisors\e[0m = n\n\e\
    [31m9 |\e[0m            .filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                           ^\e[0m\n\e[31m  |\e[0m                   \
    \        value filter is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divi = (n / 2l)\n        val ls = new mutable.ListBuffer[(Long,\
    \ Long)]()\n        while (divi != 0l) {\n            val rem = divi % 2l\n  \
    \          if (rem == 0l) {\n                ls.append((divi, 1l))\n         \
    \   } else if (rem > 0l) {\n                ls.append((divi, rem))\n         \
    \   }\n            divi = divi / 2l\n        }\n        ls.maxBy(_._1)._1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpryrudk9x.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mls\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]()\n\e[31m\e[31m  |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpryrudk9x.scala:17:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            divi = divi\
    \ / \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val divi\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val maxDivisor = if (n % 2 == 0) 1l else 2l\n  \
    \      val divisors = scala.collection.mutable.ArrayBuffer.empty[Long]\n     \
    \   for (divisor <- 1 to maxDivisor) {\n            if (n % divisor == 0l) {\n\
    \                divisors += divisor\n            }\n        }\n        if (divisors.isEmpty)\
    \ n\n        else largestDivisor(divisors.max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5qgxhly.scala:10:29\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (divisor\
    \ <- \e[31m1\e[0m to maxDivisor) {\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (maxDivisor : Long)\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0\n        for (i <- 1 to n)\
    \ {\n            val div = i / n\n            if (n % div == 0)\n            \
    \    largestDivisor = div\n        }\n        largestDivisor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnw5d0i8u.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnw5d0i8u.scala:12:33 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                largestDivisor = div\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Found:    (div : Long)\n\e[31m   |\e[0m                                \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Sieve of Eratosthenes - finding all the divisors\
    \ of a number\n        var l = new mutable.HashSet[Long]()\n        var k = n\n\
    \        while (k > 0) {\n            l.add(k)\n            k = (k - 1) / 2\n\
    \        }\n        var max = 0l\n        var divisor = 0l\n        for (divisor\
    \ <- l) {\n            if (n % divisor = 0l) {\n                max = divisor\n\
    \            }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfoixqd4a.scala:18:28 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (n % divisor = \e[31m0l\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            ')' expected, but '=' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfoixqd4a.scala:9:20 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var biggestDivisor = 0L\n        for (divisor <-\
    \ 1L until n by 2) {\n            if (n / divisor == BigInt(n)) {\n          \
    \      biggestDivisor = divisor\n            }\n        }\n        return biggestDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ia_b5xg.scala:19)\n\tat Problem.main(tmp6ia_b5xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if (n < 2l) n\n        else largestDivisor(n / 2l)\
    \ * largestDivisor(n % 2l)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpggf6qntx.scala:14)\n\tat Problem.main(tmpggf6qntx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashSet[Long]()\n       \
    \ var largest = 0l\n        var divisor = 0l\n        while (divisors.size < n){\n\
    \            divisor += 1l\n            while (divisors.contains(divisor)){\n\
    \                divisor += 1l\n            }\n            divisors += divisor\n\
    \            if (divisor > largest){\n                largest = divisor\n    \
    \        }\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4yetsej0.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var d = 1\n        var maxDivisor = 0L\n       \
    \ var maxDivisorDivisor = 0L\n        var maxDivisorDivisor2 = 0L\n        for\
    \ (d <- n to 2 by -1) {\n            val d = math.abs(n / d)\n            if (d\
    \ % 2 == 0) {\n                if (d > maxDivisor) {\n                    maxDivisor\
    \ = d \n                    maxDivisorDivisor = d \n                    maxDivisorDivisor2\
    \ = d \n                }\n            } else if (d % 2 != 0) {\n            \
    \    if (d < maxDivisorDivisor) {\n                    maxDivisorDivisor = d \n\
    \                    maxDivisorDivisor2 = d \n                }\n            }\n\
    \        }\n        if (maxDivisor != 0L && maxDivisor > maxDivisorDivisor2) {\n\
    \            maxDivisor\n        } else {\n            maxDivisorDivisor2\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm02mi17n.scala:13:33 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = math.abs(n\
    \ / d)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Recursive \e[33mvalue\e[0m \e[35md\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val remainder = new mutable.ListBuffer[Long]()\n\
    \        // divide n by 2 until remainder is 0\n        for (nDivisor <- 0 until\
    \ n; nDivisor <- nDivisor until n / nDivisor) {\n            if (nDivisor % 2\
    \ == 0) {\n                remainder += nDivisor\n            }\n        }\n \
    \       // The max value of remaining divisors\n        val maxValue = remainder.max\n\
    \        // The greatest divisor <= n\n        val maxDivisor = remainder.find\
    \ { case nDivisor => nDivisor <= n }\n        // Return the greatest divisor <=\
    \ n\n        maxDivisor match {\n            case Some(divisor) => divisor\n \
    \           case None =>\n                println(\"divisor not found\")\n   \
    \             0\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppmic_hyi.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mremainder\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \              ^^^^^^^\e[0m\n\e[31m  |\e[0m                            Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmic_hyi.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (nDivisor\
    \ <- \e[31m0\e[0m until n; nDivisor <- nDivisor until n / nDivisor) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppmic_hyi.scala:10:63 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (nDivisor <- \e[31m0\e[0m until n; nDivisor <-\
    \ nDivisor until n / nDivisor) {\n\e[31m\e[31m   |\e[0m                      \
    \                                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                         Found:    Long\n\e[31m\
    \   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppmic_hyi.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m Some(divisor) => divisor\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  Not found:\
    \ divisor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val n = BigInt(n)\n        val maxDivisor = BigInt(2)\n\
    \        for(divisor <- 2 until BigInt(4l) by 2 until 4l){\n            if(n %\
    \ divisor==0){\n                if(divisor>maxDivisor)\n                    maxDivisor\
    \ = divisor\n            }\n        }\n        maxDivisor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbnz4mc_n.scala:8:23 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = BigInt(n)\n\e[31m\e\
    [31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m                    \
    \   Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbnz4mc_n.scala:10:37 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(divisor <- \e[31m2\e[0m until\
    \ BigInt(\e[31m4l\e[0m) by \e[31m2\e[0m until \e[31m4l\e[0m){\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Found:    BigInt\n\e[31m   |\e[0m                  \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbnz4mc_n.scala:16:8 ---------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        maxDivisor\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (maxDivisor : BigInt)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def factorial (n : Long) : Long = {\n          \
    \  if (n == 0 || n == 1) {\n                return 1\n            } else {\n \
    \               return n * factorial(n - 1)\n            }\n        }\n\n    \
    \    // We start from n-1 to avoid zero division\n        // n is supposed to\
    \ be odd, so we start with n-1\n        var maxDivisor = 1\n        var divisor\
    \ = n\n        val maxDivisorSoFar = 0\n        // We keep dividing till the result\
    \ is smaller than the previous one\n        while (divisor > 1) {\n          \
    \  // This line can be written as: divisor = divisor / maxDivisor\n          \
    \  // divisor = divisor / maxDivisor\n            // divisor = divisor / maxDivisor\n\
    \            // divisor = divisor / maxDivisor\n            divisor = divisor\
    \ / maxDivisor\n            maxDivisor = maxDivisor.min(divisor)\n           \
    \ // maxDivisor = maxDivisor.max((divisor,maxDivisor))\n            maxDivisorSoFar\
    \ += maxDivisor - 1\n        }\n        maxDivisorSoFar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq342smw5.scala:28:40\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            maxDivisor = maxDivisor.min(divisor)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    (divisor : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq342smw5.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            maxDivisorSoFar += maxDivisor - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      value += is not a member of Int - did you mean maxDivisorSoFar.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def checkEvenDivisors(n: Long): Set[Long] = {\n\
    \            var set = new mutable.HashSet[Long]()\n            for (d <- 2 to\
    \ sqrt(n)) {\n                if (n % d == 0) {\n                    set += d\n\
    \                    if (set.size == 2) set -= 2\n                }\n        \
    \    }\n            set.filter(_ > 0).size\n        }\n        var largestDivisor\
    \ = -1\n        for (d <- 2 to n) {\n            if (checkEvenDivisors(d) > largestDivisor)\
    \ {\n                largestDivisor = d\n            }\n        }\n        largestDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8houil4f.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mvar\e[0m \e[36mset\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                 \
    \         ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8houil4f.scala:10:31\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m (d\
    \ <- \e[31m2\e[0m to sqrt(n)) {\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Double\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8houil4f.scala:19:23 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (d <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8houil4f.scala:20:37\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (checkEvenDivisors(d) > largestDivisor) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of collection.mutable.Set[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660010636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val max = n.toLong\n        // loop through all\
    \ numbers up to the largest number we encounter\n        var largestDivisor =\
    \ 0\n        var i = max\n        while (i > 0) {\n            // find the largest\
    \ divisor for i -- if i is even, then no divisor, so the greatest divisor is 1\n\
    \            if (i % 2 == 0) {\n                largestDivisor = 1\n         \
    \   } else {\n                val divisor = i / 2\n                // see if i\
    \ is a divisor of any previously found divisor\n                val lastDivisor\
    \ = largestDivisor\n                if (divisor == 1) {\n                    //\
    \ i is a divisor of a previously found divisor, so set largestDivisor to 1 and\
    \ break out of the loop\n                    largestDivisor = 1\n            \
    \        break\n                } else {\n                    // i is a divisor\
    \ of a previously found divisor, so check to see if it's the greatest divisor\
    \ so far\n                    if (lastDivisor > divisor) {\n                 \
    \       largestDivisor = divisor\n                    }\n                }\n \
    \           }\n            // move i back 1 to the right\n            i -= 1\n\
    \        }\n        largestDivisor\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm0lrseg.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgm0lrseg.scala:27:41\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                        largestDivisor\
    \ = divisor\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (divisor\
    \ : Long)\n\e[31m   |\e[0m                                         Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = Set[Long]()\n        var largest\
    \ = 0l\n        for(i <- 2l until (n/2l)) {\n            if(n % i == 0) {\n  \
    \              divisors += i\n                if(divisors.size == n) largest =\
    \ i\n            }\n        }\n        largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn11l_n49.scala:19)\n\tat Problem.main(tmpn11l_n49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010637
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0L\n        var factor = 1L\n\
    \        while(factor < n) {\n            factor *= 2L\n            if(factor\
    \ > n) factor -= n\n            if(n % factor == 0) largestDivisor = factor\n\
    \        }\n        largestDivisor\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0\n        var curr = n\n\n\
    \        // Keep iterating while there are divisors left to find\n        while\
    \ (curr != 1l && curr != 0l) {\n            // Check each of the divisors up to\
    \ current value\n            for (divisor <- 2 until curr) {\n               \
    \ // If divisor divides current value, then current is the largest divisor\n \
    \               if (n % divisor == 0) {\n                    largestDivisor =\
    \ divisor\n                    break\n                }\n            }\n     \
    \       curr = curr / 2\n        }\n\n        // If the remainder of current value\
    \ is also 1, then the number must be evenly divisible\n        if (curr == 1l)\
    \ {\n            largestDivisor = n\n        }\n\n        largestDivisor\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqq6xe_v.scala:14:36\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (divisor\
    \ <- \e[31m2\e[0m until curr) {\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (curr : Long)\n\e[31m   |\e[0m                                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqq6xe_v.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphqq6xe_v.scala:26:29 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            largestDivisor = n\n\e[31m\e[31m   |\e[0m                \
    \             ^\e[0m\n\e[31m   |\e[0m                             Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                             Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 0l\n        n /: Seq(n) {\n          \
    \  if(_ % 2 == 0) max = _\n            else _ / 2\n        }\n        max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8dirphbm.scala:10:15 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m) max = _\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 % 2\
    \ == 0.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8dirphbm.scala:10:33 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m) max = _\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => max = _$2.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8dirphbm.scala:11:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33melse\e\
    [0m _ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 =>\
    \ _$3 / 2.\n3 errors found\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var result : Long = 1l\n        var minDivisor =\
    \ 2l\n        var maxDivisor = n\n        while (maxDivisor / minDivisor > 1l)\
    \ {\n            result = minDivisor\n            minDivisor = (minDivisor + 1l).ceil\n\
    \            maxDivisor = (maxDivisor - 1l).floor\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp859cp1gq.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            minDivisor = (minDivisor + \e[31m1l\e[0m).ceil\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value ceil is not a member of Long.\n\e[31m   |\e[0m      An\
    \ extension method was tried, but could not be fully constructed:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m          floatWrapper(minDivisor.+(\e[31m1L\e[0m))\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp859cp1gq.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            maxDivisor = (maxDivisor - \e[31m1l\e[0m).floor\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value floor is not a member of Long.\n\e[31m   |\e[0m     \
    \ An extension method was tried, but could not be fully constructed:\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m          floatWrapper(maxDivisor.-(\e[31m1L\e[0m))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val r = new mutable.ListBuffer[Long]()\n       \
    \ var c = n\n        while (c > 0) {\n            if (c % 2 == 0)\n          \
    \      r ++= c\n            c /= 2\n        }\n        return r.max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0w4g6xrg.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDiv = 0L\n        var curDiv = n\n      \
    \  while (curDiv > 0L) {\n            if (curDiv mod 2 == 0L) {\n            \
    \    if (curDiv > maxDiv) {\n                    maxDiv = curDiv\n           \
    \     }\n            }\n            val newDiv = curDiv div 2\n            if\
    \ (newDiv > maxDiv) {\n                maxDiv = newDiv\n            }\n      \
    \      curDiv = newDiv\n        }\n        maxDiv\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_fhc231p.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (curDiv mod \e[31m2\e[0m ==\
    \ \e[31m0L\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_fhc231p.scala:16:32\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewDiv\e[0m = curDiv div \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ div is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n      var d = 0\n      var d = 1\n      var divisor = 0l\n\
    \      divisor = 2\n      while(divisor < n && d < divisor) {\n        if (n %\
    \ divisor == 0) {\n          d = divisor\n          divisor = divisor + 1\n  \
    \      }\n        else {\n          divisor = divisor + 1\n        }\n      }\n\
    \      d\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmnkn5_q2.scala:9:10 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m      \e[33mvar\e[0m \e[36md\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m  |\e[0m      ^^^^^^^^^\e[0m\n\e[31m  |\e[0md is already defined as \e[33mvariable\e\
    [0m \e[35md\e[0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmnkn5_q2.scala:14:14 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m          d = divisor\n\e[31m\e[31m   |\e[0m             \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    (divisor : Long)\n\e[31m\
    \   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def isDivisor(n: Long) : Boolean = {\n         \
    \   if(n % 2 == 0) true\n            else if(n % 3 == 0) true\n            else\
    \ false\n        }\n        val divisors = for (i <- 1 to n) yield isDivisor(i)\n\
    \        return divisors.max\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp68w4w3x8.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) \e[33myield\e[0m isDivisor(i)\n\e\
    [31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp68w4w3x8.scala:14:15 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m divisors.max\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    Boolean\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val primes = Vector.fill(100){2}\n        var largestDivisor\
    \ = 0\n        var largestDivisorCount = 0\n        var currentDivisor = 2\n \
    \       var currentDivisorCount = 0\n\n        primes(0) = 1\n        primes(1)\
    \ = 2\n        // The first prime factor of 15 is 3\n        while(primes.contains(currentDivisor))\
    \ {\n            currentDivisorCount = primes(currentDivisor)\n            while(currentDivisorCount\
    \ > largestDivisorCount && currentDivisor < n) {\n                currentDivisor\
    \ = currentDivisor + 1\n                currentDivisorCount = primes(currentDivisor)\n\
    \            }\n            if(currentDivisorCount > largestDivisorCount) {\n\
    \                largestDivisorCount = currentDivisorCount\n                largestDivisor\
    \ = currentDivisor\n            }\n            currentDivisorCount = primes(currentDivisor)\n\
    \        }\n        largestDivisor\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpconb3jc2.scala:14:8 -------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        primes(\e[31m0\e[0m) = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member\
    \ of Vector[Int] - did you mean primes.updated?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpconb3jc2.scala:15:8 -------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        primes(\e[31m1\e[0m) = \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of Vector[Int]\
    \ - did you mean primes.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010639
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if (n <= 0) throw new RuntimeException(\"Division\
    \ by zero!\")\n        var maxDivisor = 1\n        var maxDividend = n\n\n   \
    \     while(maxDividend != 0) {\n            if (maxDividend % 2 == 0) maxDividend\
    \ = maxDividend / 2\n            else maxDividend = maxDividend / 2 + 1\n    \
    \        maxDivisor = maxDivisor + 1\n        }\n\n        return maxDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        require(n % 2 == 0)\n        var largest_divisor\
    \ = 0\n        val largest_divisor2 = 1l\n        var i = 2l\n        while(i\
    \ <= n) {\n            if((n % i) == 0) {\n                if(largest_divisor\
    \ > i) {\n                    largest_divisor2 = i\n                }\n      \
    \          largest_divisor = i\n            }\n            i += 1\n        }\n\
    \        largest_divisor2\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4kkacb48.scala:15:37 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    largest_divisor2 = i\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               Reassignment to val largest_divisor2\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kkacb48.scala:17:34 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                largest_divisor = i\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (i : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largestDivisors = mutable.Set[Long]()\n    \
    \    var number: Long = n;\n        while (number > 1) {\n            if (number\
    \ % 2 == 0) {\n                largestDivisors += number\n            }\n    \
    \        number /= 2\n        }\n        if (largestDivisors.isEmpty) {\n    \
    \        1\n        } else {\n            largestDivisors.min\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6mip0yka.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mlargestDivisors\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val a = 1 to n by 2\n        a.max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitzmw3iv.scala:8:21\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = \e[31m1\e[0m to n by \e[31m2\e[0m\n\e[31m\e[31m  |\e[0m                \
    \     ^\e[0m\n\e[31m  |\e[0m                     Found:    (n : Long)\n\e[31m\
    \  |\e[0m                     Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        def isDivisor(n : Long, max : Long) : Boolean =\
    \ {\n            if (max == 0)\n                return false\n            if (n\
    \ % max == 0)\n                return true\n            else return isDivisor(n,\
    \ (max - 1l))\n        }\n        val maxDivisor = math.floor(n/2)\n        if\
    \ (isDivisor(n, maxDivisor))\n            maxDivisor\n        else\n         \
    \   largestDivisor(maxDivisor + 1l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4rnujk9.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (isDivisor(n,\
    \ maxDivisor))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    (maxDivisor : Double)\n\e[31m\
    \   |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4rnujk9.scala:17:12 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            maxDivisor\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (maxDivisor : Double)\n\
    \e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg4rnujk9.scala:19:27 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            largestDivisor(maxDivisor + \e[31m1l\e[0m)\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Double\n\e[31m   |\e[0m              \
    \             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var maxDivisor = 0\n        val nums = mutable.ArrayBuffer[Long]()\n\
    \        for (i <- 0 until n){\n            if (i % 2 == 0) {\n              \
    \  nums += i\n            }\n        }\n        nums.sortWith((a,b) => a > b)\n\
    \        for (i <- 0 until nums.size) {\n            val currentDivisor = nums(i)\n\
    \            if (currentDivisor % 2 == 0){\n                maxDivisor = max(maxDivisor,\
    \ currentDivisor)\n            }\n        }\n        if (maxDivisor == 0) {\n\
    \            return 0\n        } else {\n            return maxDivisor\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7soxy2td.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7soxy2td.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n){\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = Set[Long]()\n        // Start with\
    \ n, and add each divisor to divisors\n        var i = 0\n        while (i <=\
    \ n){\n            if (n % i == 0){\n                divisors.add(i)\n       \
    \     }\n            i += 1\n        }\n        // Iterate over divisors, and\
    \ find the largest one\n        var maxDivisor = divisors.iterator.next()\n  \
    \      for (divisor <- divisors){\n            if (divisor > maxDivisor){\n  \
    \              maxDivisor = divisor\n            }\n        }\n        // Return\
    \ the largest divisor\n        maxDivisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.largestDivisor(tmp9oz2016m.scala:12)\n\
    \tat Problem$.main(tmp9oz2016m.scala:28)\n\tat Problem.main(tmp9oz2016m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.HashMap[(Long, Long), Long]()\n\
    \        for (i <- 2 to n)\n            if (n % i == 0)\n                divisors\
    \ += ((i, n / i))\n        else {\n            val highest = divisors.values.max\n\
    \            val divisor = divisors.remove(highest)\n            (divisor._1 +\
    \ divisor._2, divisor._2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5_n40t2b.scala:12:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_n40t2b.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashMap[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_n40t2b.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n)\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m\
    \  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m         \
    \              Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divi = mutable.HashSet.empty[Long]\n       \
    \ var maxDivisor = 0\n        while(n > 1) {\n            divi.add(n)\n      \
    \      n /= 2\n        }\n        divi.foreach { n =>\n            if(n % 2 ==\
    \ 0) {\n                maxDivisor = n\n            }\n        }\n        maxDivisor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4fknq_r8.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivi\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4fknq_r8.scala:12:14 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long\
    \ - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var largestDivisor = 0l\n        var i = 2\n   \
    \     while (i < n) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i\n                i = i + 1\n            }\n            else {\n        \
    \        i = i + 1\n            }\n        }\n        largestDivisor\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps68mo63j.scala:22)\n\tat Problem.main(tmps68mo63j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Sort numbers smaller than n\n        // Sort\
    \ numbers smaller than n\n        val bigNs = collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0) bigNs += i\n        }\n \
    \       bigNs.sortWith((x,y) => x<y)\n\n        var max = BigInt(0)\n        var\
    \ maxDivisor = -1\n        for(i<-0 to bigNs.length-1){\n            if(bigNs(i)\
    \ % n == 0) max = max(bigNs(i)) // If the number is not divisible by n, add it\
    \ to the list\n            else if(bigNs(i) > max){\n                // If we\
    \ are adding bigNs(i) to a number already bigger than max, then add it to a new\
    \ list bigger than max\n                max = bigNs(i)\n                maxDivisor\
    \ = i\n            }\n        }\n        bigNs.drop(maxDivisor).max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vrvybkv.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp6vrvybkv.scala:19:40 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mif\e[0m(bigNs(i) % n == \e[31m0\e[0m) max = max(bigNs(i))\
    \ \e[34m// If the number is not divisible by n, add it to the list\e[0m\n\e[31m\e\
    [31m   |\e[0m                                        ^^^\e[0m\n\e[31m   |\e[0m\
    \                                   \e[33mvariable\e[0m \e[35mmax\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6vrvybkv.scala:20:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m(bigNs(i) > max){\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long):\
    \ Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\
    \e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m\
    \   |\e[0mmatch arguments ((max : BigInt))\n3 errors found\n"
  stdout: ''
  timestamp: 1660010646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = n.toInt\n        var largest = 0l\n    \
    \    var i = 1\n        while(l-- > 0) if((l & 1) == 0) largest = i; i += 1\n\
    \        largest\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6lmlcu1m.scala:11:20 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mwhile\e[0m(l-- > \e[31m0\e[0m) \e[33mif\e\
    [0m((l & \e[31m1\e[0m) == \e[31m0\e[0m) largest = i; i += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    ')'\
    \ expected, but integer literal found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6lmlcu1m.scala:11:15 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mwhile\e[0m(l-- > \e[31m0\e[0m) \e[33mif\e[0m((l & \e[31m1\e[0m)\
    \ == \e[31m0\e[0m) largest = i; i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \         ^^^\e[0m\n\e[31m   |\e[0m              value -- is not a member of Int\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6lmlcu1m.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mwhile\e[0m(l-- > \e[31m0\e[0m) \e[33mif\e\
    [0m((l & \e[31m1\e[0m) == \e[31m0\e[0m) largest = i; i += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val arr = ArrayBuffer(2, 3)\n        var num = 1\n\
    \        while(n >= num) {\n            if(n % num == 0) {\n                arr\
    \ += num\n            }\n            num += 1\n        }\n        (arr.toSeq.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnqlkgcn.scala:19)\n\tat Problem.main(tmppnqlkgcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // If n is even, n / 2 is even, \n        // and\
    \ (n-1)/2 isn't, then return n/2\n        if (n <= 1) return n\n        // If\
    \ n is odd then n / 2 isn't, and (n-1)/2 isn't, then return (n-1)/2\n        if\
    \ (n % 2 == 1) return largestDivisor(n / 2)\n        // If n is even and n-1/2\
    \ is even, \n        // and (n-1)/2 isn't, then return (n-1)/2\n        if (n\
    \ % 2 == 0 && largestDivisor(n - 1) / 2%2 == 0) return largestDivisor(n - 1) /\
    \ 2\n        // If n is odd and (n-1)/2 is odd, \n        // and n-1/2 isn't,\
    \ then return n-1/2\n        if (n % 2 == 1 && largestDivisor(n - 1) / 2 != 0)\
    \ return largestDivisor(n - 1) / 2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxbx2f29w.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (n % \e\
    [31m2\e[0m == \e[31m1\e[0m && largestDivisor(n - \e[31m1\e[0m) / \e[31m2\e[0m\
    \ != \e[31m0\e[0m) \e[33mreturn\e[0m largestDivisor(n - \e[31m1\e[0m) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val maxDivisor = n + 1 //the largest divisor is\
    \ n plus 1\n        val divisors = mutable.HashSet[Long]()\n        for (i = 1\
    \ to maxDivisor) {\n            if (n % i == 0) {\n                divisors.add(i)\n\
    \            }\n        }\n        divisors.toList.max.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7hrtcokp.scala:10:15 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m to maxDivisor)\
    \ {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m             \
    \  ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7hrtcokp.scala:10:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m to maxDivisor) {\n\e[31m\e[31m   |\e[0m                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                  '<-'\
    \ expected, but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7hrtcokp.scala:16:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7hrtcokp.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7hrtcokp.scala:14:9 -------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   "
  stdout: ''
  timestamp: 1660010648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val largest_divisor = n.toInt\n        (1 until\
    \ n) collect {\n          case i if i % largest_divisor == 0 => largest_divisor\n\
    \        }.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gu9kncb.scala:9:17\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        (\e[31m1\e[0m until n)\
    \ collect {\n\e[31m\e[31m  |\e[0m                 ^\e[0m\n\e[31m  |\e[0m     \
    \            Found:    (n : Long)\n\e[31m  |\e[0m                 Required: Int\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1gu9kncb.scala:10:10 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m          \e[33mcase\e[0m i \e[33mif\e[0m i % largest_divisor\
    \ == \e[31m0\e[0m => largest_divisor\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter x$1 of expanded function:\n\e[31m   |\e\
    [0m   x$1 => \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m    \
    \   {\n\e[31m   |\e[0m         \e[33mcase \e[0mi\e[33m if \e[0mi % largest_divisor\
    \ == 0 => \n\e[31m   |\e[0m           largest_divisor\n\e[31m   |\e[0m       }.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val ans = n / 2\n        while (ans.toString.length\
    \ < n.toString.length) {\n            ans = ans * 2\n        }\n        if (ans.toString.length\
    \ == n.toString.length) {\n            return ans\n        }\n        return largestDivisor(ans)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp22556tx_.scala:10:16 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            ans = ans * \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val ans\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var biggestDivisor = 0l\n        val r = new mutable.ArrayBuffer[Long]()\n\
    \        while ( biggestDivisor < n ) {\n            if( n % biggestDivisor !=\
    \ 0l ) {\n                biggestDivisor = biggestDivisor + 1\n              \
    \  r += biggestDivisor\n            }\n        }\n        var largest = 0l\n \
    \       for( d <- r ) if( d > n ) largest = d\n        largest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgtvakga.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = new mutable.LinkedList[Long]\n        val\
    \ r : mutable.LinkedList[Long] = new mutable.LinkedList[Long]\n        for (x\
    \ <- 1l to n)\n        {\n            if (x % 2 == 0)\n            {\n       \
    \         l.add(x)\n            }\n            else\n            {\n         \
    \       if (x % l.head == 0)\n                {\n                    l.add(x)\n\
    \                }\n                else\n                {\n                \
    \    r.addLast(x)\n                }\n            }\n        }\n        l.tail.foreach(x\
    \ => x % l.head == 0 && l.addLast(x))\n        r.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsi7pl3wr.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsi7pl3wr.scala:9:16 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m : mutable.LinkedList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                ^^^^^^^\e[0m\n\e[31m  |\e[0m                Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsi7pl3wr.scala:9:47\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mr\e[0m : mutable.LinkedList[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                                         \
    \      ^^^^^^^\e[0m\n\e[31m  |\e[0m                                          \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // This algorithm runs in O(n)\n        var maxDivisor\
    \ = 0l\n        for(i <- 0 until n){\n            var divider = 0l\n         \
    \   while(i % divider != 0){\n                divider += 1\n            }\n  \
    \          if(divider > maxDivisor){\n                maxDivisor = divider\n \
    \           }\n        }\n        maxDivisor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9po46ta1.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val result = 1l\n        var divisor : Long = 1l\n\
    \        while (divisor * divisor < n) {\n            divisor = divisor * 2l\n\
    \        }\n        n / divisor\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04kqqp8l.scala:18)\n\tat Problem.main(tmp04kqqp8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divs = mutable.Set[Long]()\n        while (n\
    \ > 1) {\n            n / 2\n            divs += n\n        }\n        divs.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp22hyajaz.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivs\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.Set[Long]()\n        for\
    \ (d <- 2l until Math.max(n,2l*n)\n             if (n % d == 0)\n            \
    \ divisors += d)\n        divisors.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoywtd7ln.scala:11:26 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m             divisors += d)\n\e[31m\e[31m   |\e[0m  \
    \                        ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoywtd7ln.scala:8:23 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpoywtd7ln.scala:11:13 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m             \e[33mif\e[0m (n % d == \e[31m0\e[0m)\n\e[31m11 |\e[0m       \
    \      divisors += d)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e\
    [0m        value divisors is not a member of Boolean.\n\e[31m   |\e[0m       \
    \ Note that `divisors` is treated as an infix operator in Scala 3.\n\e[31m   |\e\
    [0m        If you do not want that, insert a `;` or empty line in front\n\e[31m\
    \   |\e[0m        or drop any spaces behind the operator.\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoywtd7ln.scala:11:22 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m             divisors += d)\n\e[31m\e[31m   |\e[0m       \
    \               ^^\e[0m\n\e[31m   |\e[0m                      Not found: +=\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val l = new mutable.HashMap[Long, Long]()\n    \
    \    val rev = n.toReverse.iterator\n\n        while (rev.hasNext) {\n       \
    \     val (d, q) = rev.next\n            if (l.contains(q)) {\n              \
    \  l.remove(q)\n            }\n            l += q -> d * q\n        }\n\n    \
    \    val maxKey = l.toList.sortBy(_._1).reverse.head._1\n        val maxValue\
    \ = l.toList.sortBy(_._1).reverse.head._2\n\n        rev.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2l_ujq5j.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2l_ujq5j.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mrev\e[0m = n.toReverse.iterator\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \           value toReverse is not a member of Long\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp2l_ujq5j.scala:12:17 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m            \e[33mval\e[0m (d, q) = rev.next\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e\
    [0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp2l_ujq5j.scala:12:20 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m            \e[33mval\e[0m (d, q) = rev.next\n\e[31m\e[31m   |\e[0m  \
    \                  ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val numOfDivisors = n.toLong / 2\n        val maxDivisor\
    \ = (n / 2).toInt\n        var largestDivisor = Long.MaxValue\n\n        for (i\
    \ <- 0 until numOfDivisors) {\n            val nextDivisor = maxDivisor / i\n\
    \            if (nextDivisor % 2 == 0) {\n                largestDivisor = nextDivisor\n\
    \            }\n        }\n\n        largestDivisor\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5f8ap5j9.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until numOfDivisors) {\n\e[31m\e[31m   |\e[0m                 \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (numOfDivisors : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max: Long = 0l\n        var divisor: Long =\
    \ 1l\n        while ((n /= divisor) > 1l) {\n            if (divisor > max)\n\
    \                max = divisor\n            divisor = divisor + 1l\n        }\n\
    \        max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyligdcy.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mwhile\e[0m ((n /= divisor) > \e[31m1l\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value /= is not a member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val list = List((n/2l),(n/3l),(n/4l),(n/5l),(n/6l),(n/7l))\n\
    \        val max = list.reduceLeft((x, y) => if (y*y<=n) x else y)\n        if\
    \ (max%2l==0) max/2l else max/3l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmhbr_dv.scala:13)\n\tat Problem.main(tmpnmhbr_dv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val counter = mutable.HashSet[Long]()\n        var\
    \ max = 1L\n        for(i <- 1L until (n/2L)) {\n            if (n % i == 0L)\
    \ {\n                max = i\n            }\n            counter.add(i)\n    \
    \    }\n        counter.max\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xercam8.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if (n == 0) n\n        else {\n            if (n\
    \ %% 2 == 0) largestDivisor(n/2) + 1\n            else largestDivisor(n/2)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq2gcnsxx.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (n %% \e[31m2\e[0m == \e[31m0\e\
    [0m) largestDivisor(n/\e[31m2\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                value %% is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val maxDivisor = n.toInt\n        val numDivisors\
    \ = mutable.ListBuffer.empty[Long]\n\n        for(i <- 1 to n/maxDivisor)\n  \
    \          if(n % i == 0)\n                numDivisors += i\n\n        if(numDivisors.isEmpty)\n\
    \            0\n        else\n            numDivisors.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdvsvuli.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumDivisors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvdvsvuli.scala:11:22 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n/maxDivisor)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = 2\n        var maxDiv = 2\n        for(i\
    \ <- 2 to (Math.sqrt(n).toInt).toInt){\n            if(n % i == 0){\n        \
    \        for(d <- 2 to (Math.sqrt(i).toInt).toInt){\n                    if(i\
    \ % d == 0){\n                        if(maxDiv <= d){\n                     \
    \       max = i\n                            maxDiv = d\n                    \
    \    }\n                        break\n                    }\n               \
    \ }\n            }\n        }\n        if(max == 1){\n            return n\n \
    \       }\n        return max // or max / maxDiv\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpowfkfq77.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Base Case:\n        if (n <= 1) return n\n\n\
    \        // Case 1: if n is evenly divisible by 2, return that number\n      \
    \  if (n % 2 == 0) return n\n\n        // Case 2: if n is evenly divisible by\
    \ 3, return that number\n        if (n % 3 == 0) return n\n\n        // Case 3:\
    \ If n is evenly divisible by 4, 5, 6, 8, 10, 12, 14, 15, return n\n        if\
    \ (n % 4 == 0 || n % 5 == 0 || n % 6 == 0 || n % 8 == 0 || n % 10 == 0 || n %\
    \ 12 == 0 || n % 14 == 0 || n % 15 == 0) return n\n\n        // Case 4: If n is\
    \ evenly divisible by 15, return that number\n        if (n % 15 == 0) return\
    \ n\n\n        // If n is not divisible by any of the above numbers, recurse for\
    \ the next number in the sequence\n        largestDivisor(n/2) + largestDivisor(n/3)\
    \ + largestDivisor(n/4) + largestDivisor(n/5) + largestDivisor(n/6) + largestDivisor(n/8)\
    \ + largestDivisor(n/10) + largestDivisor(n/12) + largestDivisor(n/14) + largestDivisor(n/15)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wp3qcz2.scala:27)\n\tat Problem.main(tmp9wp3qcz2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = ListBuffer(2l); var divisor = 0l\n\
    \        while (divisor < n) {\n            if (n % divisor == 0) divisors +=\
    \ divisor\n            divisor += 1l\n        }\n        divisors.max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.largestDivisor(tmpdfpv0kug.scala:10)\n\
    \tat Problem$.main(tmpdfpv0kug.scala:16)\n\tat Problem.main(tmpdfpv0kug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = mutable.ListBuffer[Long]()\n    \
    \    var max = n\n        for(i <- 1 to (math.max(n/2, 1L))) {\n            if(n\
    \ % i == 0) {\n                divisors += i\n                n /= i\n       \
    \     }\n        }\n        if(n != 1) { divisors += n; max = 1L}\n        divisors.toList.max.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeww0gsx3.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpeww0gsx3.scala:10:32 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to (math.max(n/\e\
    [31m2\e[0m, \e[31m1L\e[0m))) {\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^\e[0m\n\e[31m   |\e[0m                                Found:    Long\n\
    \e[31m   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeww0gsx3.scala:10:37 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to (math.max(n/\e\
    [31m2\e[0m, \e[31m1L\e[0m))) {\n\e[31m\e[31m   |\e[0m                        \
    \             ^^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (\e[31m1L\e[0m : Long)\n\e[31m   |\e[0m                                 \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeww0gsx3.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        if(n < 2)\n            1\n        else if(n % 2\
    \ == 0)\n            n\n        else\n            largestDivisor(n / 2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63xceyni.scala:18)\n\tat Problem.main(tmp63xceyni.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val s = n.toString.toInt\n        var largestDivisor\
    \ = 0\n        val count = mutable.ArrayBuffer.empty[Long]\n        for ( i <-\
    \ 0 until s) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i\n                count += i\n            }\n        }\n        largestDivisor\
    \ * count.max\n    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcwftzwn.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n      require(n > 0, \"n must be positive\")\n      val\
    \ l = scala.math.abs(n).toInt\n      var maxDiv = 1\n      while (maxDiv < l)\
    \ {\n        maxDiv = (maxDiv * 2) if (n%maxDiv == 0)\n      }\n      maxDiv\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6dre2_q_.scala:12:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        maxDiv = (maxDiv * \e[31m2\e[0m) \e[33mif\e[0m\
    \ (n%maxDiv == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \    ^^\e[0m\n\e[31m   |\e[0m                              end of statement expected\
    \ but 'if' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val divisors = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var remainder = n\n        var candidate = n\n        while(candidate\
    \ != 0) {\n            divisors ::= candidate\n            remainder -= candidate\n\
    \            if (remainder >= 0) {\n                candidate += 1\n         \
    \   }\n        }\n        if (divisors.isEmpty) {\n            remainder\n   \
    \     } else {\n            divisors.max\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcef_06go.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            divisors ::= candidate\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of\
    \ scala.collection.mutable.ListBuffer[Long] - did you mean divisors.++=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val maxDivisor = (1l) * (1l); // this value will\
    \ not divide n\n        val maxFactor = max { n / i } \n        // Loop through\
    \ the factors\n        for (i <- 1 to maxFactor) {\n            if (n % i == 0)\
    \ {\n                maxDivisor = i // found a factor\n            }\n       \
    \ }\n        return maxDivisor // return the largest value found\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestDivisor((3l)) == (1l));\n \
    \   assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo07_qi46.scala:9:34 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxFactor\e[0m = max { n\
    \ / i } \n\e[31m\e[31m  |\e[0m                                  ^\e[0m\n\e[31m\
    \  |\e[0m                                  Not found: i\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpo07_qi46.scala:13:27 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                maxDivisor = i \e[34m// found a factor\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxDivisor\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        var max = n\n        while (max > 1) {\n       \
    \     max -= 1\n            if (isDivisor(n, max)) {\n                return max\n\
    \            }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30jv0ofx.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (isDivisor(n, max)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isDivisor\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val m = mutable.HashMap[Long, Int]()\n        val\
    \ q = mutable.Queue[Long]()\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.HashMap[Long, Int]()\n        var d = 1l\n        while(n\
    \ != 0l) {\n            m += (d -> (m get d)).getOrElse(d, 1l)\n            d\
    \ = (d + 2l) / 2l\n            r +=+ d\n            n -= 1l\n        }\n     \
    \   while(!r.isEmpty) {\n            q += (r.dequeue).toLong\n            m +=\
    \ (q dequeue).toLong -> (m get (q dequeue)).getOrElse(q.dequeue, 1l) + 1l\n  \
    \      }\n        m values.max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqdtmhoxn.scala:21:27 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            m += (q dequeue).toLong -> (m get (q dequeue)).getOrElse(q.dequeue,\
    \ \e[31m1l\e[0m) + \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \     ^\e[0m\n\e[31m   |\e[0m                           expression expected but\
    \ \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqdtmhoxn.scala:21:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            m += (q dequeue).toLong\
    \ -> (m get (q dequeue)).getOrElse(q.dequeue, \e[31m1l\e[0m) + \e[31m1l\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpqdtmhoxn.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        m values.max\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e\
    [31m   |\e[0m                expression expected but \e[31m'.'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdtmhoxn.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdtmhoxn.scala:8:16\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                ^^^^^^^\e[0m\n\e[31m  |\e[0m                Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compili"
  stdout: ''
  timestamp: 1660010657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n   \
    \     for (i <- 2 to n) nums += i\n        nums.find(num => n % num == 0) == None\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4w2vzmjg.scala:8:19 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4w2vzmjg.scala:9:23 ---------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) nums += i\n\
    \e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m            \
    \           Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        val s = scala.math.BigInt(n)\n        val divs =\
    \ mutable.Set.empty[Long]\n        while(s.isEven) {\n            divs += scala.math.min(s,\
    \ n) //smallest number that divides evenly is at least itself\n            s %=\
    \ scala.math.min(s, n) //next number is the least factor\n        }\n        divs.lastOption.get\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5aehys96.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdivs\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5aehys96.scala:10:16 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mwhile\e[0m(s.isEven) {\n\e[31m\e[31m   |\e[0m\
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m              value isEven is not\
    \ a member of BigInt\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5aehys96.scala:12:14\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            s %= scala.math.min(s,\
    \ n) \e[34m//next number is the least factor\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value %= is not a member of BigInt\
    \ - did you mean s.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5aehys96.scala:12:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            s %= scala.math.min(s,\
    \ n) \e[34m//next number is the least factor\e[0m\n\e[31m\e[31m   |\e[0m     \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((s : BigInt),\
    \ (n : Long))\n4 errors found\n"
  stdout: ''
  timestamp: 1660010657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
    \ : Long) : Long = {\n        // Use a mutable Map to store the result\n     \
    \   val map = new mutable.HashMap[Long, Long]()\n        for (i <- 2 to n/2){\n\
    \            val div = n/i\n            if (map.contains(div)) {\n           \
    \     map.update(div, map.get(div) + 1)\n            }\n            else {\n \
    \               map.put(div, 1)\n            }\n        }\n        map.values.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz73b4o8y.scala:9:22 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz73b4o8y.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n/\e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e\
    [0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010657
