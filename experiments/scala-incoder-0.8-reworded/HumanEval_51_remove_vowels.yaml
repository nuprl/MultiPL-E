name: HumanEval_51_remove_vowels
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // remove_vowels is a function that takes string and returns string without\
  \ vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"\
  abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\"\
  )\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"\
  zbcd\"))\n    // (\"zbcd\")\n    def removeVowels(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\"\
  )).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"\
  bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n\
  \    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"\
  acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\"\
  )));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"
completions: ["        def replaceChar(c : Char) : String = {\n            if (c.toLowerCase\
    \ == 'a' || c.toLowerCase == 'e' || c.toLowerCase == 'i' || c.toLowerCase == 'o'\
    \ || c.toLowerCase == 'u'){\n                return c\n            }\n       \
    \     else{\n                return \"\"\n            }\n        }\n        val\
    \ newText = text.toString.map(replaceChar)\n        newText.mkString(\"\")", " \
    \       var result = \"\"\n        for(i <- 0 until text.length){\n          \
    \  if((text(i) == \"\" || text(i) == \"a\" || text(i) == \"e\" || text(i) == \"\
    i\" || text(i) == \"o\" || text(i) == \"u\") && text(i+1) != \"\"){\n        \
    \        result += text(i) + text(i+1)\n                i = i + 1\n          \
    \  }\n        }\n        result", "        def isVowel(ch: Char): Boolean = {\n\
    \            val lower = ch.toLower\n            val upper = ch.toUpper\n    \
    \        (lower == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower\
    \ == 'u') && (upper == 'A' || upper == 'E' || upper == 'I' || upper == 'O' ||\
    \ upper == 'U')\n        }\n        val result = new StringBuilder\n        var\
    \ inWord = false\n        for (ch <- text) {\n            if (inWord) {\n    \
    \            if (isVowel(ch))\n                    continue\n                else\
    \ {\n                    inWord = false\n                }\n            }\n  \
    \          else {\n                if (isVowel(ch))\n                    inWord\
    \ = true\n                else {\n                    result.append(ch)\n    \
    \            }\n            }\n        }\n        return result.toString", " \
    \   val vowels = \"aeiou\"\n    val newText = text\n    for(c <- newText)\n  \
    \      if(vowels.contains(c))\n            newText = newText.replace(c,\"\")\n\
    \    newText", "        val vowels = \"aeiou\"\n        text.split(\"[\" + vowels\
    \ + \"]\").map(_.replaceAll(vowels, \"\")).mkString(\"\")", "        // Only consider\
    \ the cases where text contains vowels, remove them and return the result.\n \
    \       // >>> removeVowels((\"aa\"))\n        // (\"aa\")\n        // >>> removeVowels((\"\
    ab\"))\n        // (\"ab\")\n        text match {\n            case text if !text.isEmpty\
    \ => \n                val vowels = mutable.HashSet(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\").filter(x => text.contains(x))\n                text = text.filterNot(x\
    \ => vowels.contains(x))\n            case _ => text\n        }", "        val\
    \ vowels = \"aeiou\"\n        var result = \"\"\n        for(i <- 0 to text.length){\n\
    \            if(vowels.contains(text.charAt(i))){\n                result += text.charAt(i)\n\
    \            } else {\n                result += text.charAt(i).toLowerCase\n\
    \            }\n        }\n        result", "        def isVowel(c:Char) : Boolean\
    \ = {\n            c match {\n                case 'a' | 'e' | 'i' | 'o' | 'u'\
    \ =>\n                    true\n                case 'A' | 'E' | 'I' | 'O' | 'U'\
    \ =>\n                    true\n                case _ =>\n                  \
    \  false\n            }\n        }\n        if (text.length < 1)\n           \
    \ return text\n        val len = text.length\n        val newText = new StringBuilder(text.toCharArray(0))\n\
    \        text.dropWhile(c => !isVowel(c))\n        text.takeWhile(c => !isVowel(c)).foreach(newText.append)\n\
    \        newText.toString", "      var newtext = \"\"\n      for(ch <- text){\n\
    \        val vowels = \"aeiouAEIOU\"\n        for(vowel_ch <- vowels)\n      \
    \    if(ch == vowel_ch) newtext +=  ch\n      }\n      newtext", "        val\
    \ pattern = \"[aeiou]\".r\n        val res = pattern.pattern.replaceAllIn(text,\
    \ \"\")\n        if (res.isEmpty)\n            res\n        else\n           \
    \ removeVowels(res)", "        val vowels = \"aeiouAEIOU\"\n        val noVowels\
    \ = text.filter(x => !vowels.contains(x))\n        noVowels.toUpperCase", "  \
    \      if (text.length == 0) \"\"\n        else text.reverse match {\n       \
    \     case \"\" | \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => text.reverse\n    \
    \        case x => removeVowels(removeVowels(x)) ++ text.reverse\n        }",
  "        var noVowels : List[String] = Nil\n        for (i <- 0 to text.length -\
    \ 1) {\n            if (text(i).matches(\"[aeiouAEIOU]\")) {\n               \
    \ noVowels += text(i)\n            }\n        }\n        if (noVowels.isEmpty)\
    \ \"\" else noVowels.mkString", "        val withoutVowels = text.flatMap(c =>\
    \ c.toString.toList.filter(x => !List('a', 'e', 'i', 'o', 'u') contains x))\n\
    \        withoutVowels.toString.reverse", "        // Your code goes here\n  \
    \      val vowels = \"aeiouAEIOU\"\n        val newText = new StringBuilder()\n\
    \        text.foreach{ char => if (!vowels.contains(char)) newText.append(char)\
    \ }\n        newText.toString", "      val vowels = List('a','e','i','o','u','y','A','E','I','O','U','Y')\n\
    \      val text = text.toLowerCase\n      for (v <- vowels) {\n        val position\
    \ = text.indexOf(v)\n        if(position != -1) {\n          text.replace(v,\"\
    \")\n        }\n      }\n      text", "        var result = text\n        for\
    \ (letter <- text.toCharArray) {\n            if (!('a' <= letter && letter <=\
    \ 'z') || ('a' <= letter && letter <= 'z') || (('a' <= letter && letter <= 'z')\
    \ && letter != ('z')))\n                result = result.replace(letter, \"\")\n\
    \        }\n        result", "        // Define a map to store vowels here.\n\
    \        val vowels = mutable.HashSet(\"a\", \"e\", \"i\", \"o\", \"u\")\n   \
    \     val result = new StringBuilder\n\n        // Iterate over text and remove\
    \ vowels\n        for(i <- text.indices) {\n            if(!vowels.contains(text(text.length-i)))\
    \ {\n                result.append(text(text.length - i))\n            }\n   \
    \     }\n        return result.toString", "        val vowels = List(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\") \n        text.filterNot(vowels.contains)", " \
    \       val vowels = \"aeiouAEIOU\".toSet\n        var tempText = \"\"\n     \
    \   for (c: Int <- 0 until text.length) {\n            if (vowels.contains(text.charAt(c)))\
    \ {\n                tempText += text.charAt(c)\n            }\n        }\n  \
    \      return tempText", "        val vowels = \"aeiouAEIOU\"\n        var res\
    \ : String = \"\"\n        for (i <- text.indices) {\n            res += text(i)\n\
    \            if (vowels.indexOf(text(i)) < 0) res += \" \"\n        }\n      \
    \  return res", "        val vowels : (String) =\n            List(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n\n        var output : String = \"\"\n\n        if (text.length\
    \ == 0)\n            output\n        else\n            output += text.charAt(0).toLowerCase\
    \ + text.substring(1).toLowerCase\n\n        text.substring(1).split(\"\").foldLeft(output){(outputStr,\
    \ char) =>\n            val found : (Boolean) =\n                vowels.contains(char.toLowerCase)\n\
    \n            if (found)\n                outputStr\n            else\n      \
    \          outputStr + char\n        }", "        // Create a mutable array and\
    \ add characters to it using for loop.\n        var text : Array[Char] = new Array[Char](text.length)\n\
    \        for (i <- 0 until text.length) text(i ) = text(i)\n        // Loop through\
    \ all vowels and remove them from the array.\n        // Use while loop because\
    \ it can run through multiple times\n        // >>> text\n        // (a, b, c,\
    \ d)\n        // >>> for(i <- 0 until text.length) text(i ) = text(i)\n      \
    \  // >>> text\n        // (a, b, c)\n        // >>> while(i < text.length){\n\
    \        //     // remove vowel\n        //     if(text(i) == ('a') || (text(i)\
    \ == ('e') || (text(i) == ('i') || (text(i) == ('o') || (text(i) == ('u') ) )\
    \ ) ){\n        //         text(i ) = text(i )\n        //     }\n        // \
    \    i++\n        // }\n        // >>> text\n        // (a, c)\n        var vowels:\
    \ Array[Char] = new Array[Char]('a', 'e', 'i', 'o', 'u')\n        var index =\
    \ 0\n        var i = 0\n        var newString = \"\"\n        while(i < text.length){\n\
    \            // remove vowel\n            if(vowels(index) == text(i) ){\n   \
    \             text(i ) = text(i )\n            }\n            i++\n        }\n\
    \        //Loop through the array from start to end and add them to newString\n\
    \        for (i = text.length; i >=0; i--){\n            newString = newString\
    \ + text(i)\n        }\n        //Remove trailing vowel if there is one.\n   \
    \     //>>> println(newString)\n        //abc\n        var i = newString.length\n\
    \        while(i >= 0) {\n            if(vowels(i) == newString(i)){\n       \
    \         newString = newString.dropRight(1)\n            }\n            i--\n\
    \        }\n        // >>> println(newString)\n        //bc\n        return newString",
  "        val vowelsSet = Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        var res : String\
    \ = \"\"\n        for (c <- text)\n            res += if (vowelsSet.contains(c))\
    \ \"\" else c\n        return res", "        var new_text = text\n        var\
    \ charCount = 0\n        for (char <- text) {\n            charCount += 1\n  \
    \          if (char.equals(\"a\") || char.equals(\"e\") || char.equals(\"i\")\
    \ || char.equals(\"o\") || char.equals(\"u\"))\n                new_text = new_text.replace(char,\
    \ \"\")\n        }\n        return new_text", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val vowels_rev = Set(\"u\", \"o\", \"i\"\
    , \"e\", \"a\")\n        var output_text = \"\"\n        for(letter <- text) {\n\
    \            output_text += if (vowels.contains(letter)) letter else \"\"\n  \
    \      }\n        output_text.reverse.mkString", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n\n        // filter returns iterator that returns true for only elements\
    \ satisfying the given predicate.\n        // map applies a function to the elements\
    \ of the iterator and returns the transformed iterator.\n        text.filter(\
    \ c => !vowels.contains(c) ).map( c => c )", "        text.filter(c => !('A'<=c&&c<='Z')||c=='z')",
  "        var vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n       \
    \ val filtered = text.filter(letter => vowels.contains(letter));\n        return\
    \ filtered;", "        // write your implementation here\n        val vowels =\
    \ Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = text.map{c => c\
    \ match {\n            case vowel if vowels.contains(c) => c\n            case\
    \ _ => \"\"\n        }}.mkString\n        result", "        val vowels = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        def noVowels(x : String) : String =\
    \ x.filter(!vowels.contains(_))\n        text.split(\"\").map(noVowels(_)).mkString",
  "      var result = \"\"\n      for(i <- 0 until text.length){\n        if(text.charAt(i)\
    \ != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) !=\
    \ 'o' && text.charAt(i) != 'u'){\n          result += text.charAt(i)\n       \
    \ }\n      }\n      result", "        val regex = new Regex(\"[aeiou]\");\n  \
    \      val replaced = regex.replaceAllIn(text,\"*\");\n        return replaced;",
  "        // Write your logic here\n        if (text.length <= 1) return text\n \
    \       // remove the first vowel\n        if (text.head == \"a\" || text.head\
    \ == \"e\" || text.head == \"i\" || text.head == \"o\" || text.head == \"u\")\
    \ {\n            val tmp = text.drop(1)\n            val newText = removeVowels(tmp)\n\
    \            return text + newText\n        } else {\n            // remove the\
    \ last vowel\n            if (text.last == \"a\" || text.last == \"e\" || text.last\
    \ == \"i\" || text.last == \"o\" || text.last == \"u\") {\n                val\
    \ tmp = text.dropRight(1)\n                val newText = removeVowels(tmp)\n \
    \               return text + newText\n            } else {\n                //\
    \ return without vowels\n                return text\n            }\n        }",
  "        //remove all vowels and then reverse string\n        return text.toLowerCase().replace(\"\
    a\", \"\")\n                    .replace(\"e\", \"\")\n                    .replace(\"\
    i\", \"\")\n                    .replace(\"o\", \"\")\n                    .replace(\"\
    u\", \"\")\n                    .replace(\"y\", \"\")\n                    .replaceAll(\"\
    [^aeiou]\", \"\")\n                    .reverse", "        text match {\n    \
    \        case \"\" => \"\"\n            case x => x.toUpperCase.filter(c => c\
    \ != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U').mkString\n        }",
  "        if (text == \"\") text\n        val list = text.split(\" \").toList\n \
    \       for (word <- list) yield {\n            for (c <- word.chars) yield {\n\
    \                if (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i'\
    \ || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U') yield {\n     \
    \               word.remove(c)\n                }\n            }\n        }\n\
    \        val result = list.mkString(\" \")\n        result", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        // We use mutable collections\
    \ here since Scala 2.8 does not have immutable collections\n        val result\
    \ = new mutable.ArrayBuffer[Char]()\n        for (c <- text)\n            if (!vowels.contains(c))\n\
    \                result += c\n        return result.toString()", '       text.filter(x
    => !x.isLetter || x.isUpperCase || x.isLowerCase || x.isNumber).mkString', " \
    \   var result = \"\"\n    var vowels = \"aeiouAEIOU\".toCharArray\n    var text\
    \ = text.toLowerCase\n    var text = text.replaceAll(\"[aeiou]\",\"\")\n    for\
    \ (letter <- text.toCharArray) {\n        if (vowels(letter) == true) {\n    \
    \        result += letter\n        }", "        // (1) Create an empty string\
    \ with the length of the text and place \"z\" in all the positions of the string.\n\
    \        var new_text : String = \"\"\n        for (i <- 0 until text.length){\n\
    \            if (text.charAt(i) == 'a' || text.charAt(i) == 'e' || text.charAt(i)\
    \ == 'i' || text.charAt(i) == 'o' || text.charAt(i) == 'u') new_text += \"z\"\n\
    \            else new_text += text.charAt(i)\n        }\n        // (2) Remove\
    \ all the vowels from the string.\n        new_text = new_text.replaceAll(\"[aAeEiIoOuU]\"\
    , \"\")\n        new_text = new_text.replaceAll(\"[zZ]\", \"\")\n        return\
    \ new_text", "        // Remove all vowels from text.\n        text = text.toLowerCase()\n\
    \        val text = text.toLowerCase()\n        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val newText\
    \ = text.replace(vowels.toSeq, \"\")\n        val newTextAsList = newText.toList\n\
    \        // Return string without vowels.\n        newTextAsList.mkString.toUpperCase()",
  "      var new_text = \"\"\n      var count = 0\n      for(ch <- text) {\n     \
    \     if(('A' <= ch && ch <= 'Z') || ('a' <= ch && ch <= 'z')) {\n           \
    \   count += 1\n          }\n      }\n      for( ch <- text) {\n          if('A'\
    \ <= ch && ch <= 'Z') {\n              count -= 1\n          }\n      }\n    \
    \  for( ch <- text) {\n          if('a' <= ch && ch <= 'z') {\n              count\
    \ -= 1\n          }\n      }\n      for( ch <- text) {\n          if('A' <= ch\
    \ && ch <= 'Z' ||\n               'a' <= ch && ch <= 'z') {\n              new_text\
    \ += ch\n              if(count != 0) new_text += ch\n              count += 1\n\
    \          }\n      }\n      if(count == 0) new_text = \"\"\n      return new_text",
  "        // (1) count the number of vowels\n        var vowelCount : Int = 0\n \
    \       var vowels : (Char) = (_: Char)\n        // (2) go through each letter\
    \ in text and see if it is a vowel\n        for (letter : Char in text) {\n  \
    \          if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u') {\n                vowels = letter\n                vowelCount\
    \ += 1\n            }\n        }\n        // (3) keep only the letter if it has\
    \ no vowels\n        if (vowelCount == 0) {\n            return text\n       \
    \ } else {\n            var removed = \"\"\n            // (4) iterate through\
    \ the string, removing vowels and adding them back\n            for (letter :\
    \ Char in text) {\n                if (letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u') {\n                    removed +=\
    \ letter\n                } else {\n                    removed += letter\n  \
    \              }\n            }\n            return removed\n        }", "   \
    \     var vowels = \"aeiouAEIOU\"\n        var result = text\n        for (c <-\
    \ text) {\n            if (vowels.contains(c)) {\n                result = result.replace(c,\
    \ '')\n            }\n        }\n        return result", '        //removeVowels
    code here', "        // Define an empty list to contain all vowel characters\n\
    \        val vowels: List[Char] = List('a', 'e', 'i', 'o', 'u')\n        // Create\
    \ a mutable collection to hold new string\n        val newText = mutable.StringBuilder(text)\n\
    \        // Go through each character of the string\n        for (x <- newText.toSeq)\
    \ \n            // If the character is a vowel then remove it\n            if\
    \ (vowels.contains(x)) \n                newText.replace(newText.indexWhere(x\
    \ => x == x), 1, \"\")\n            // If the character is not vowel then append\
    \ it to string\n            else newText.append(x)\n        // return the new\
    \ string\n        newText.result()", "        val vowels = Array('a', 'e', 'i',\
    \ 'o', 'u')\n        val cleanedText = text.toString.filterNot(vowels.contains)\n\
    \        return cleanedText", "      var result : String = \"\"\n      var vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n      for (letter <- text) {\n   \
    \     if (!vowels.contains(letter)) {\n          result += letter\n        }\n\
    \      }\n      result", "        var result = \"\"\n        var isVowel = false\n\
    \        for(i <- 0 until text.length){\n            if(text.charAt(i) == 'a'\
    \ || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' ||\
    \ text.charAt(i) == 'u'){\n                result += text.charAt(i)\n        \
    \        isVowel = true\n            }\n            else if(text.charAt(i) !=\
    \ 'z' && text.charAt(i) != 'Z'){\n                result += text.charAt(i)\n \
    \               isVowel = false\n            }\n        }\n        if (isVowel)\
    \ result\n        else \"\"", "        // create new list containing vowels\n\
    \        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\")\n        // remove each vowel in the string and keep only those\
    \ that do not match any of the previous elements\n        val newString = text.filterNot(vowels.contains)\n\
    \        // return new string\n        newString", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ letters = text.filter(x => vowels.contains(x))\n        letters.mkString.toUpperCase",
  "        var output : String = text;\n        for {\n            currentChar <-\
    \ text.toCharArray\n            nextChar = currentChar.next\n            if (\"\
    aeiou\".contains(nextChar)) text = text.replace(nextChar, \"\")\n        } yield\
    \ output", "        val vowels = \"aeiou\"\n        var newText = text\n     \
    \   var first = true\n        for ( i <- newText.indices if !vowels.contains(newText.charAt(i))\
    \ ) {\n            if ( first ) {\n                newText = newText.drop(i)\n\
    \                first = false\n            } else {\n                newText\
    \ = newText.take(i-1)+newText.drop(i)\n            }\n        }\n        newText",
  "    \tvar chars = text.toCharArray.iterator\n    \tval vowels = \"aeiou\"\n   \
    \ \tvar removeVowelsChars = chars\n    \twhile (removeVowelsChars.hasNext) {\n\
    \    \t\tchar <- removeVowelsChars\n    \t\tif (vowels.contains(char))\n    \t\
    \t\tremoveVowelsChars = removeVowelsChars.next()\n    \t}\n    \tchars.toString.substring(0,chars.length-1)",
  "        val vowels = \"aeiouAEIOU\"\n        var newString = text\n        for(\
    \ i <- 0 until text.length ) {\n            if( vowels.contains(text.charAt(i)))\
    \ {\n                newString = newString.replaceAll( text.charAt(i), \"\")\n\
    \            }\n        }\n        return newString", "        val newText = mutable.MutableBuffer.empty[Char]\n\
    \        for(i <- 0 until text.length) \n          newText.+= text.charAt(i).toString.filterNot(c\
    \ => c=='a' || c=='e' || c=='i' || c=='o' || c=='u')\n        newText.toString.substring(1)",
  "        text match {\n            case \"\" => \"\\n\"\n            case s => s\
    \ filter (x => !vowels.contains(x))\n        }", "        val newText = Array[String]()\n\
    \        for (i <- 0 until text.length){\n            val currChar = text.charAt(i)\n\
    \            val currCharLowerCase = currChar.toLowerCase()\n            val vowels\
    \ = Array('a','e','i','o','u')\n            if (vowels.contains(currCharLowerCase))\n\
    \                newText += currCharLowerCase\n            else if (currChar ==\
    \ ' '){\n                newText += ' '\n            }\n            else{\n  \
    \              newText += currChar\n            }\n        }\n        return newText.mkString",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\")\n        val consonants = Set(\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\", \"A\", \"B\", \"C\", \"D\", \"F\", \"G\"\
    , \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"V\", \"W\", \"X\", \"Z\")\n        var result = (for (i <- text.indices) yield\
    \ {\n            if (vowels.contains(text.charAt(i))) {\n                text.substring(i,\
    \ i + 1)\n            } else consonants.contains(text.charAt(i))\n        }).mkString\n\
    \        result", "        var newText = \"\"\n        var lastChar = \"\"\n \
    \       text.split(\"a\").foreach{char =>\n            if(!(char.equals(\"a\"\
    )||char.equals(\"e\")||char.equals(\"i\")||char.equals(\"o\")||char.equals(\"\
    u\"))){\n                newText += char\n            }\n            if(char ==\
    \ lastChar){\n                return\n            }\n            lastChar = char\n\
    \        }\n        return newText", "        var result : String = \"\"\n   \
    \     var temp = \"\"\n        for ((letter, i) <- text.zipWithIndex) {\n    \
    \        if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\")\n                result += letter\n            else\n\
    \                result += temp\n            temp = letter\n        }\n      \
    \  return result", "        if (text == \"\") {\n            return \"\"\n   \
    \     }\n        var newText : String = \"\"\n        for (letter <- text) {\n\
    \            val isVowel = letter.matches(\"[aeiouAEIOU]{1}\")\n            if\
    \ (isVowel == true) {\n                newText += letter\n            }\n    \
    \    }\n        return newText", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val newText = new StringBuilder(text).reverse.foreach(c => {\n      \
    \      if (vowels.contains(c)) {\n                newText.deleteCharAt(newText.length\
    \ - 1)\n            }\n        })\n        newText.reverse.toString", "      \
    \  val vowels = \"aeiouAEIOU\".toSet\n        val text = text.toLowerCase\n  \
    \      val resultText = text\n        val resultLen = text.length\n        var\
    \ i = 0\n        while (i < text.length) {\n            var j = i + 1\n      \
    \      while (j < resultLen) {\n                if (vowels.contains(text.charAt(j))\
    \ == false)\n                    j++\n                else\n                 \
    \   break\n            }\n            resultText = resultText.substring(0,i) +\
    \ resultText.substring(i,j) + resultText.substring(j+1)\n            i = j\n \
    \       }\n        resultText", "        var result = text\n        // first we\
    \ create array of unique characters, excluding vowels\n        val uniqueChars\
    \ = text.filter(c => !c.equals('a') && !c.equals('e') && !c.equals('i') && !c.equals('o')\
    \ && !c.equals('u'))\n        // then we create array of unique vowels\n     \
    \   val uniqueVowels = uniqueChars.filter(c => c.equals('a') || c.equals('e')\
    \ || c.equals('i') || c.equals('o') || c.equals('u'))\n        // then we create\
    \ array of unique consonants\n        val uniqueConsonants = uniqueChars.filter(c\
    \ => !c.equals('a') && !c.equals('e') && !c.equals('i') && !c.equals('o') && !c.equals('u'))\n\
    \        // and then we filter out consonants and append vowels\n        result\
    \ = uniqueVowels.filter(c => uniqueConsonants.contains(c)).mkString(\"\")\n  \
    \      result", "        var output = \"\"\n        var vowels = \"aeiouAEIOU\"\
    \n        var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \      for(i <- 0 until text.length){\n            output += if (vowels.contains(text.charAt(i)))\
    \ text.charAt(i) else {consonants.charAt(text.charAt(i))}\n        }\n       \
    \ output", "        val rev = text.reverse // make text reversed (remove vowels\
    \ from the middle)\n        val vowels = \"aeiouAEIOU\" // make a list of vowels\n\
    \        val newText = \"\"\n        val positions = new mutable.ArrayBuffer[Int]()\n\
    \        var position = -1\n        while(position < rev.size) {\n           \
    \ val found = vowels.find(rev(rev(position)) + \"\")\n            if(found ==\
    \ None) {\n                newText += rev(position)\n                position\
    \ += 1 // skip the vowel\n            } else {\n                position += found.start\
    \ // skip the vowel and get to the position of first vowel in text (excluding\
    \ it)\n                positions += 1\n            }\n        }\n        // add\
    \ missing vowels\n        for(i <- positions.reverse until position) {\n     \
    \       newText += rev(i)\n        }\n        newText", "        var text = text.toLowerCase\n\
    \        var arr = text.split(\"a\").map(x => x.toString.toInt).sorted\n     \
    \   arr = arr.filter(x => x != 1)\n        arr = arr.map(x => x.toString.toInt)\n\
    \        val result = (arr.min + 1).toString.toInt\n        return arr(0).toString\
    \ + (result % 26).toChar", "        var result : String = \"\"\n        // TODO:\
    \ Complete the function to remove the vowels from the given string.\n        //\
    \ For example if the string is \"aBcD\" then the result should be \"BCD\".\n \
    \       \n        result", "        text match {\n            case \"\" => \"\"\
    \n            case x if (x contains \"aeiou\") => x\n            case x => x\n\
    \        }", "        var result = \"\"\n        val vowels = \"aeiou\"\n    \
    \    for (i <- 0 until text.length) {\n            var isVowel = false\n     \
    \       for (j <- 0 until vowels.length) {\n                if (text(i) == vowels(j))\
    \ {\n                    isVowel = true\n                }\n            }\n  \
    \          if (!isVowel) {\n                result += text(i)\n            }\n\
    \        }\n        return result", "        var removed = \"\"\n        var vowels\
    \ = \"aeiouAEIOU\"\n        for (char <- text.toCharArray) {\n            removed\
    \ += if(vowels.indexOf(char) != -1) \"\" else char\n        }\n        removed",
  "        if (text.length == 0 || text.length == 1)\n            return text\n  \
    \      val vowels = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toSet\n\
    \        val outText = text\n        val pos = text.indexOf(\"a\")\n        for\
    \ (i <- 0 until text.length -1) {\n            if (vowels(text.charAt(i)) && !vowels(text.charAt(pos\
    \ + i))) {\n                val out = text.substring(0, pos)\n               \
    \ val remaining = text.substring(pos + 1)\n                if (remaining == \"\
    \")\n                    return out\n                outText = outText + \"$\"\
    \ + remaining\n                pos = i\n            }\n        }\n        outText",
  "        var new_text = new StringBuilder(text)\n        new_text.replaceAll(\"\
    [aeiou]\", \"\")\n        return new_text.toString()", "        if(text.forall(c\
    \ => c.toUpper == 'A' || c.toUpper == 'E' || c.toUpper == 'I' || c.toUpper ==\
    \ 'O' || c.toUpper == 'U')){\n            \"\"\n        } else {\n           \
    \ text.replaceAll(\"[AEIOUaeiou]\", \"\")\n        }", "        // Create a mutable\
    \ array to store each letter in input string\n        val textCopy = mutable.ArrayBuffer(text.toCharArray)\n\
    \        // Create an empty mutable array to store letters without vowels\n  \
    \      val withoutVowels = mutable.ArrayBuffer.empty[Char]\n        // Loop through\
    \ input string and delete vowels\n        for (letter <- textCopy) {\n       \
    \     // check if letter is vowel\n            if (vowels.contains(letter)) {\n\
    \                // if it is vowel, remove it\n                withoutVowels +=\
    \ letter\n            }\n        }\n        // Create a string from withoutVowels\n\
    \        withoutVowels.mkString.toUpperCase", "        //Using pattern matching,\
    \ extract vowels and replace them with empty string.\n        text match {\n \
    \           case \"\"     => text\n            case s      => s filter { c =>\
    \ !('a' to 'z') contains c }\n        }", "        val filtered = text.flatMap(c\
    \ => if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') Nil else c\
    \ :: Nil)\n        filtered mkString \"\"", "       val vowels = \"aeiouAEIOU\"\
    .toCharArray\n       val vowelsRemoved = new StringBuilder(text.length)\n    \
    \   for (i <- 0 until text.length) \n            if (vowels(i) != text.charAt(i))\
    \ vowelsRemoved.append((text.charAt(i)))\n            \n       return vowelsRemoved.toString()",
  "        // return \"text\" if not vowel, return \"empty\" if vowel.\n        var\
    \ result = text\n        // Remove vowels and keep only alphabetical characters.\n\
    \        for(i <- 0 until text.length()) {\n            if(text.charAt(i) == 'a'\
    \ || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' ||\
    \ text.charAt(i) == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i)\
    \ == 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U') {\n              \
    \  text = text.substring(0,i) + text.substring(i+1)\n            } else {\n  \
    \              result = result + text.charAt(i)\n            }\n        }\n  \
    \      return result", "        val noVowels = new mutable.ArrayBuffer[Char]()\n\
    \        for (i <- 0 until text.length) {\n            if (text(i) != 'a' && text(i)\
    \ != 'e' && text(i) != 'i' && text(i) != 'o' &&\n                text(i) != 'u'\
    \ && text(i) != 'A' && text(i) != 'E' && text(i) != 'I' &&\n                text(i)\
    \ != 'O' && text(i) != 'U') {\n                noVowels += text(i)\n         \
    \   }\n        }\n        return noVowels.mkString", "        var vowels = Set(\"\
    \",\"a\",\"e\",\"i\",\"o\",\"u\")\n        for (c <- text) {\n            if (!vowels.contains(c))\
    \ {\n                text = text.replaceFirst(c.toString, \"\")\n            }\n\
    \        }\n        return text", "      val vowels: Set[Char] = Set('a','e','i','o','u')\n\
    \      text.filter(!vowels.contains(_)).mkString.reverse", "        val result\
    \ = text.foldLeft(\"\") {\n            (acc, c) =>\n                if (c.isLetter)\
    \ acc + (if (acc.isEmpty) \"\" else c.toLower)\n                else acc\n   \
    \     }\n        result.tail", "        var newText = \"\"\n        for(i <- text.length-1\
    \ downTo 0 by -1) {\n            val c = text.charAt(i)\n            if(c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U') {\n                newText += c\n          \
    \  }\n        }\n        newText", "        var ret = \"\";\n        var len =\
    \ text.length\n        for (i = 0; i <= len; ++i) {\n            val chr = text.charAt(i)\n\
    \            if (chr == 'a' || chr == 'A' || chr == 'e' || chr == 'E' || chr ==\
    \ 'i' || chr == 'I' || chr == 'o' || chr == 'O' || chr == 'u' || chr == 'U')\n\
    \                text = text.substring(0, i) + text.substring(i, text.length)\n\
    \        }\n        len = text.length\n        for (i = 0; i <= len; ++i) {\n\
    \            val chr = text.charAt(i)\n            if (chr == 'b' || chr == 'B'\
    \ || chr == 'd' || chr == 'D' || chr == 'f' || chr == 'F' || chr == 'g' || chr\
    \ == 'G' || chr == 'h' || chr == 'H' || chr == 'j' || chr == 'J' || chr == 'k'\
    \ || chr == 'K' || chr == 'l' || chr == 'L' || chr == 'm' || chr == 'M' || chr\
    \ == 'n' || chr == 'N' || chr == 'p' || chr == 'P' || chr == 'q' || chr == 'Q'\
    \ || chr == 'r' || chr == 'R' || chr == 's' || chr == 'S' || chr == 't' || chr\
    \ == 'T' || chr == 'v' || chr == 'V' || chr == 'w' || chr == 'W' || chr == 'x'\
    \ || chr == 'X' || chr == 'z' || chr == 'Z')\n                text = text.substring(0,\
    \ i) + text.substring(i, text.length)\n        }\n        ret = text\n       \
    \ return ret;", "        // Write your code here\n        val result : String\
    \ = \"\"\n        val vowels =  Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n     \
    \   for(x <- text.indices) {\n            if(vowels.contains(text.charAt(x)))\n\
    \                result += text.charAt(x)\n        }\n        return result",
  "        var result = text\n        var consonantCount = 0\n        for(i <- text.toLowerCase\
    \ -> 'z' until text.length){\n            if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u' || i == 'A' || i == 'E' || i == 'I' || i == 'O' || i\
    \ == 'U'){\n                consonantCount += 1\n                result +=  (consonantCount.toString)\n\
    \            }\n        }\n        result", "        val vowels : Set[String]\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val result : String\
    \ = text.replaceAll(\"[aeiouy]+\", \"\")\n        if (result != text)\n      \
    \  result else \"\"", "      val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n      text.filter(x => !vowels.contains(x))", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val res = text.toSet\n        vowels.filter(x\
    \ => !res.contains(x))", "        val vowels = \"aeiouAEIOU\"\n        val vowels_index\
    \ = text.indexOf(vowels)\n        if(vowels_index == -1)\n            text\n \
    \       else\n            text.substring(0, vowels_index)", "        var result\
    \ : String = \"\"\n        var i : Int = 0\n        while(i < text.length){\n\
    \            val c = text.charAt(i)\n            if(\"AEIOUaeiou\".contains(c))\
    \ {\n                result = result + text.charAt(i)\n                i = i +\
    \ 1\n            }else if(c == 'z'){\n                result = result + text.charAt(i)\n\
    \                i = i + 1\n            }else{\n                result = result\
    \ + c\n                i = i + 1\n            }\n        }\n        return result",
  "        val vowels = \"aeiou\"\n        val no_vowels = text.replaceAllIn(vowels,\
    \ \"\")\n        no_vowels", "        var res = \"\";\n        for (i <- 0 until\
    \ text.length) {\n            if (text(i) != \"a\" && text(i) != \"e\" && text(i)\
    \ != \"i\" && text(i) != \"o\" && text(i) != \"u\") {\n                res +=\
    \ text(i, i+1)\n            }\n        }\n        res", "        // Your code\
    \ goes here!\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val newText = new StringBuilder(text)\n        text.foreach {char =>\n\
    \          char match {\n            case 'a' | 'e' | 'i' | 'o' | 'u' =>\n   \
    \           newText.deleteCharAt(newText.length() - 1)\n          }\n        }\n\
    \        return newText.toString()", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\")\n        val lowerText = text.toLowerCase\n        val\
    \ result = for (c <- lowerText) yield {\n            if (vowels(c))\n        \
    \        c\n            else\n                \"\"\n        }\n        result.toString",
  "        var str : String = text\n        var vowels : mutable.Set[String] = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsSet = new mutable.HashSet[String](vowels)\n\
    \        vowelsSet.retain(text.filter(x => x.toString.toList.flatMap(vowelsSet.contains).contains(_)))\n\
    \        vowelsSet.clear()\n        str += vowelsSet.foldLeft(List[String]())((acc,\
    \ c) => acc :+ c).mkString(\"\")\n        return str", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val result = \"\"\n        for(i <- 0 until text.length())\
    \ {\n            if(vowels.contains(text.charAt(i))) {\n                result\
    \ += text.charAt(i)\n            }\n        }\n        result", "    \t//return\
    \ \"\"\n    \tval str = new StringBuilder\n    \tfor (letter <- text)\n    \t\
    {\n    \t\tif(letter.equalsIgnoreCase(\"a\") || letter.equalsIgnoreCase(\"e\"\
    ) || letter.equalsIgnoreCase(\"i\") || letter.equalsIgnoreCase(\"o\") || letter.equalsIgnoreCase(\"\
    u\"))\n    \t\t\tstr.append(letter)\n    \t\telse\n    \t\t\tstr.append(\" \"\
    )\n    \t}\n    \treturn str.toString()", "        val vowels = \"aeiouAEIOU\"\
    \n        val vowelsSet = scala.collection.mutable.Set[Char](vowels)\n       \
    \ val filtered = text.filter { x => !vowelsSet.contains(x) }\n        val newText\
    \ = filtered mkString \"\"\n        newText", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        text.foldLeft(\"\"){ (result, text) =>\n\
    \            val newString = text.toString.replaceAll(\"[aeiou]\", \"\")\n   \
    \         if (vowels.contains(text.toString))\n                newString\n   \
    \         else\n                result + newString\n        }", "        if (text.length\
    \ == 0) return \"\"\n        var result : String = \"\"\n        for (c <- text.characters)\
    \ {\n            if (!c.isLetter) result += c\n        }\n        return result",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"\xF4\", \"\
    \xF8\", \"\xEE\", \"\xEA\", \"\xEE\", \"\xF4\", \"\xEE\", \"\xF4\", \"\xEA\",\
    \ \"\xEE\", \"\xF4\", \"\xEA\", \"\xEE\")\n        val nonVowels = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val lowerCaseText\
    \ = text.lowercase\n        val newText = lowerCaseText.toList.filterNot(vowels.contains)\n\
    \        val newLowerCaseText = newText.mkString.toLowerCase\n        val newText\
    \ = newLowerCaseText.toList.filterNot(nonVowels.contains)\n        val newLowerCaseText\
    \ = newText.mkString.toLowerCase\n        val newText = newLowerCaseText.toList.filterNot(lowerCaseText.contains)\n\
    \        val newLowerCaseText = newText.mkString.toLowerCase\n        val newText\
    \ = newLowerCaseText.toList.filterNot(upperCaseText.contains)\n        val newLowerCaseText\
    \ = newText.mkString.toLowerCase\n        newLowerCaseText", "        var newtext\
    \ =\"\"\n        for (letter <- text.toCharArray){\n            if (letter.equals('a')||\
    \ letter.equals('e') || letter.equals('i') || letter.equals('o') || letter.equals('u'))\
    \ {\n                newtext +=\" \"\n            }\n            newtext += letter\n\
    \        }\n        return newtext", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        val result = \"\"\n        for(i <- text.toList){\n\
    \            val t = i\n            if(vowels.contains(t)){\n                result\
    \ += t\n            }\n        }\n        result", "        var output = new StringBuilder\n\
    \        var last = 0\n        for (i <- 0 until text.length){\n            if\
    \ (text(i) == 'z'){\n                last++\n            } else if (text(i) !=\
    \ 'z' && last>0){\n                output.insert(last, text(i))\n            \
    \    last = 0\n            }\n        }\n        output.toString()", "       \
    \ val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var ret = \"\"\n\
    \        for(i <- 0 until text.length) {\n            val c = text(i)\n      \
    \      if(vowels.contains(c)) {\n                ret += c\n            }\n   \
    \     }\n        return ret", "      text filter { letter => !letter.equals('a')\
    \ && !letter.equals('e') && !letter.equals('i') && !letter.equals('o') && !letter.equals('u')\
    \ }", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\",\"E\"\
    ,\"I\",\"O\",\"U\")\n        def getVowels(text : String) : String = {\n     \
    \       val result = text.filter(x => vowels(x))\n            return result\n\
    \        }\n        val result = getVowels(text)\n        return result", "  \
    \      val vowels = \"aeiouAEIOU\".toSet\n        var res = text\n        val\
    \ len = text.length\n        val charSet = text.codePoints.toSet\n        res\
    \ +=  text.codePoints.filterNot(charSet.contains).toList\n        val l = res.last\n\
    \        val res = if (l == 0) \"\" else res.dropRight(1)\n        res", "   \
    \     text.flatMap(_.toCharArray().filter(v => v != 'a' && v != 'e' && v != 'i'\
    \ && v != 'o' && v != 'u'))", "        var result : String = \"\"\n        for\
    \ (letter <- text.toCharArray) {\n            if (letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u') {\n                result\
    \ = result + letter\n            }\n        }\n        return result", "     \
    \   var result : String = \"\"\n        // Iterate over characters in the given\
    \ text.\n        for (i <- 0 until text.length) {\n            // if character\
    \ is an uppercase character or a lowercase character add it to the result string.\n\
    \            if (text(i).isUpper || text(i).isLower) {\n                result\
    \ += text(i)\n            }\n        }\n        result", '        text.filter(x
    => !x.toLower.contains("a") && !x.toLower.contains("e") && !x.toLower.contains("i")
    && !x.toLower.contains("o") && !x.toLower.contains("u"))', "        var result\
    \ = \"\"\n        for(letter <- text.toCharArray) {\n            if(letter !=\
    \ 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u' && letter\
    \ != 'A' && letter != 'E' && letter != 'I' && letter != 'O' && letter != 'U')\n\
    \                result += letter\n        }\n        return result", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val result = new StringBuilder()\n\n \
    \       for (i <- 0 until text.length) {\n            val currentChar = text(i)\n\
    \            if (vowels.contains(currentChar)) {\n                result.append(currentChar)\n\
    \            }\n        }\n\n        result.toString()", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val noVowels = text.filter(x => !vowels.contains(x))\n\
    \        if (noVowels.length == text.length) {\n            return text\n    \
    \    } else {\n            return noVowels\n        }", "        val vowels =\
    \ \"aeiou\".toSet\n        val noVowels = text.replaceAll(\"[aeiou]\", \"\").replaceAll(\"\
    [aeiouy]+\", \"\").toString.toCharArray.toList\n        var newText = String.empty\n\
    \        if (noVowels.isEmpty) {\n            return text\n        }\n       \
    \ for (i <- 0 until noVowels.length) {\n            if (vowels.contains(noVowels(i)))\
    \ {\n                newText +=  noVowels(i)\n            }\n        }\n     \
    \   newText", "       val vowelSet = mutable.HashSet[Char]()\n       text.forall(\
    \ c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' ) \n       if\
    \ (!text.forall( c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ )) text else text.filter( c => !vowelSet.contains(c) ) ++ text.filter( c =>\
    \ vowelSet.contains(c) )", "        var newString = \"\"\n        for (i <- 0\
    \ until text.length) {\n            if (!text.contains(i.toChar)) {\n        \
    \        newString += text.charAt(i)\n            }\n        }\n        return\
    \ newString", "        var new_string = \"\"\n        for (i <- 0 until text.length)\
    \ {\n            val c = text.charAt(i)\n            if (('a' <= c && c <= 'z')\
    \ || (('A' <= c && c <= 'Z'))) {\n                val v = c - 'a'\n          \
    \      if (v == 0 || v == 1) {\n                    new_string += text(i)\n  \
    \              }\n            }\n        }\n        new_string", "        // Write\
    \ your code\n        val vowels = mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val newText = mutable.Set[String]()\n        for (c <- text.toCharArray())\
    \ {\n            if(!vowels.contains(c)){\n                newText.add(c.toString)\n\
    \            }\n        }\n        val s = newText.mkString(\"\")\n        return\
    \ s", "        text.filterNot(_.equals('a') || _.equals('e') || _.equals('i')\
    \ || _.equals('o') || _.equals('u'))", "        val result = text.filterNot(\n\
    \            character => character == 'a' || character == 'e' || character ==\
    \ 'i' || character == 'o' || character == 'u' ||\n                           \
    \ character == 'A' || character == 'E' || character == 'I' || character == 'O'\
    \ || character == 'U' ||\n                            character == 'Z' || character\
    \ == 'Z')\n        \n        // Scala doesn't have tail recursion optimization,\
    \ so we have to do it ourselves.\n        if(text.length > 0 && result.length\
    \ > 0) {\n            val rest = removeVowels(text.tail)\n            if(rest.size\
    \ > 0) result += rest.head\n        }\n        result", "        var vowels =\
    \ Set[Char](\"a\", \"e\", \"i\", \"o\", \"u\")\n        var text1 = \"\"\n   \
    \     for(char <- text){\n            if(vowels.contains(char)){\n           \
    \     text1 += char\n            } else {\n                text1 += \"\"\n   \
    \         }\n        }\n        return text1", "       val vowels = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n       var count = 0\n       var outputStr =\
    \ \"\"\n       for(i <- 0 to text.length){\n           if(vowels(text.charAt(i)))\n\
    \               count++\n       }\n       outputStr = text.substring(0,count)\n\
    \       return outputStr", "        def removeVowels2(text : String) : String\
    \ = {\n            def removeVowels3(text : String) : String = {\n           \
    \     text.split(\"[aeiouAEIOU]\").filter(x => x != \"\").mkString\n         \
    \   }\n            def removeVowels4(text : String) : String = {\n           \
    \     text.split(\"[AEIOUaeiou]\").filter(x => x != \"\").mkString\n         \
    \   }\n            def removeVowels5(text : String) : String = {\n           \
    \     text.split(\"[AEIOUaeiouAEIOU]\").filter(x => x != \"\").mkString\n    \
    \        }\n            text match {\n                case \"aeiouAEIOU\" => removeVowels3(text)\n\
    \                case \"AEIOUaeiou\" => removeVowels4(text)\n                case\
    \ \"AEIOUaeiouAEIOU\" => removeVowels5(text)\n                case _ => text\n\
    \            }\n        }\n        removeVowels2(text)", "        if (text.length\
    \ == 0 || text.length == 1) return text\n\n        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val new_text = text\n        val vowels_string\
    \ = text.split(\"\")\n        for(i <- 0 until vowels_string.length) {\n     \
    \       if (vowels(vowels_string(i))) new_text = new_text.replace(vowels_string(i),\
    \ \"\")\n        }\n        new_text", "        if(text.indexOf(\"aeiou\") > -1)\
    \ text.substring(0,text.indexOf(\"aeiou\"))\n        else text", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val text = text.filter { x => !vowels.contains(x)\
    \ }\n        text.toString()", "        val vowels = Set(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n        val new_text = mutable.ListBuffer[String]()\n\
    \        for (letter <- text.toCharArray) {\n            if (vowels.contains(letter))\
    \ new_text += letter\n        }\n        (new_text.toString.trim)(0)", "     \
    \   val newText = \"\"\n        var vowels = \"aeiou\"\n        var vowelsSet\
    \ = Set(vowels)\n\n        for (i <- 0 until text.length()) {\n            var\
    \ c = text.charAt(i)\n            if (vowelsSet.contains(c)) {\n             \
    \   newText += c\n            } else {\n                newText += c\n       \
    \     }\n        }\n\n        return newText", "        var result = text\n  \
    \      for (char <- text) {\n            if (('A' <= char && char <= 'Z') || ('a'\
    \ <= char && char <= 'z')) {\n                result = result.replace(char, \"\
    \")\n            }\n        }\n        result", "        if (text.length <= 0)\
    \ {\n            return text\n        }\n        var newText : String = \"\"\n\
    \        var index = 0\n        while (index <= text.length - 1) {\n         \
    \   val c = text.charAt(index)\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                newText += text\n            }\n\
    \            index++\n        }\n        return newText", "        //To remove\
    \ vowel we can:\n        //  1.Create a set of all characters that occur in the\
    \ string using scala's collection.Set\n        //  2.Iterate over each character\
    \ in the string and remove it from the set using the set subtraction\n       \
    \ //  3.Remove the character if the set is empty or contains only vowels.\n  \
    \      //  4.Join the characters back into a string.\n        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        text.toIterator.map{ c => vowels.subsetOf(c) }.filter(_.nonEmpty).mkString",
  "        val vowels = \"aeiouAEIOU\"\n        var resultString = text\n        for\
    \ (c <- text.chars) {\n            if(!vowels.contains(c)) {\n               \
    \ resultString += c\n            }\n        }\n        resultString", "      \
    \  if(text.matches(\".*[aeiou].*\")){\n            return text.substring(0,text.length-1)\n\
    \        }\n        return text", "        var vowels = \"aeiouAEIOU\";\n    \
    \    var newText = \"\";\n        var lastIndex = 0;\n        for (index = 0;\
    \ index < text.length; index++) {\n            if (vowels.contains(text.charAt(index)))\
    \ {\n                newText = newText + text.charAt(index);\n               \
    \ lastIndex = index;\n            }\n        }\n        if (lastIndex < text.length)\
    \ {\n            newText = newText + text.substring(lastIndex);\n        }\n \
    \       return newText;", "        text split 'a' map (_.replaceAll(\"[aeiouAEIOU]\"\
    , \"\")) filter !=\"\" mkString \"\"", "        def vowel(c : String) : Boolean\
    \ = c.toUpperCase().matches(\"[AEIOUaeiou]\")\n        def isVowel(c: Char): Boolean\
    \ = vowel(c.toString)\n        def makePairs(s : String): List[(Char, Char)] =\
    \ {\n            val pairs = s.toList.flatMap { c => \n                if (vowel(c))\
    \ {\n                    (c.toUpperCase -> (c.toUpperCase -> c))\n           \
    \     } else {\n                    List( (c.toUpperCase -> c) ) \n          \
    \      }\n            }\n            pairs.reverse\n        }\n        val pairs\
    \ = makePairs(text)\n        val filtered = pairs.filter(isVowel)\n        filtered.toList",
  "        var newText : String = \"\"\n        for (i <- 0 until text.length)\n \
    \           if (text(i) == \"a\" || text(i) == \"e\" || text(i) == \"i\" || text(i)\
    \ == \"o\" || text(i) == \"u\")\n                text = text.substring(0, i) +\
    \ text.substring(i + 1, text.length)\n            newText += text(i)\n       \
    \ return newText", "        val vowels =  List('a','e','i','o','u')\n        val\
    \ textWithoutVowels = text.replaceAll(\"[aeiou]\", \"\").replaceAll(\"[^a-zA-Z]\"\
    , \"\")\n        return textWithoutVowels", "      val vowels = \"AEIOUaeiou\"\
    .toList\n      val removed = text.filterNot(vowels.contains)\n      val chars\
    \ = removed.toCharArray\n      val newString = new String(chars)\n      newString",
  "        var result : String = \"\"\n        var index = 0\n        var vowels =\
    \ \"AEIOUaeiou\".toCharArray\n        // remove first vowel\n        for(i <-\
    \ 0 until text.length) {\n            if(vowels(index) == text.charAt(i)) {\n\
    \                result += text.charAt(i)\n                index += 1\n      \
    \      } else {\n                result += text.charAt(index)\n            }\n\
    \        }\n        result", "        def filterVowels(text : String) : String\
    \ = {\n            def filterVowels(text : String) : String = {\n            \
    \    var temp = \"\"\n                for (char <- text) {\n                 \
    \   if (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u')\n\
    \                        temp = temp + char\n                    else {\n    \
    \                    temp = \"\"\n                    }\n                }\n \
    \               return temp\n            }\n            return filterVowels(text)\n\
    \        }\n        var filterVowels_text : String = filterVowels(text)\n    \
    \    var filterVowels_text2 : String = (filterVowels_text + \"z\")\n        return\
    \ filterVowels_text2", "        val vowels = \"AEIOUaeiou\"\n        var text1\
    \ = text\n        for(c <- text1 ) {\n            val index = vowels.indexOf (c)\n\
    \            if(index != -1)\n                text1 = text1.replace (c,\"\")\n\
    \        }\n        text1", "        if(text.isEmpty) {\n            return text\n\
    \        }\n        val vowels = \"aeiou\"\n        val charList = text.toCharArray\n\
    \        val charArrayLen = charList.length\n        val newArray = Array.ofDim[Char](charArrayLen)\n\
    \        val newLen = charArrayLen\n        val index = Array.ofDim[Int](charArrayLen)\n\
    \        var i = 0\n        var j = 0\n        while(i < charArrayLen) {\n   \
    \         val char = charList(i)\n            val isVowel = vowels.indexOf(char.charAt(0))\
    \ match {\n                case -1 => false\n                case 0 => true\n\
    \                case 1 => true\n            }\n            if(isVowel) {\n  \
    \              for(j <- i until (charArrayLen - 1)) {\n                    if(vowels.indexOf(charList(i+1).charAt(0))\
    \ match {\n                        case -1 => j\n                        case\
    \ 0 => j\n                        case 1 => j\n                    } != -1) {\n\
    \                        index(i) = j\n                        break\n       \
    \             }\n                }\n                newArray(i) = charList(i)\n\
    \                newLen = i + 1\n                i += 1\n            }\n     \
    \       else {\n                newArray(i) = charList(i)\n                newLen\
    \ = i + 1\n                i += 1\n            }\n        }\n        new String(newArray.take(newLen))",
  "        val vowels = \"aeiouAEIOU\".toSet\n        text.replaceAll(\"[^\" + vowels\
    \ + \"]\", \"\")", "        text match {\n            case \"\" => \"\"\n    \
    \        case str => {\n                // create a mutable map that hold each\
    \ letter and its vowel counter\n                val vowels = new mutable.HashMap[Char,\
    \ Int]()\n                for (letter <- str) vowels += letter -> (vowels(letter)+1)\n\
    \                // create an empty string\n                val newStr = \"\"\n\
    \                // iterate over the map\n                for (letter (key, value)\
    \ <- vowels.toSeq) if (value == 0) newStr += letter\n                // return\
    \ new string\n                newStr\n            }\n        }", "        if (text.length\
    \ <= 0)\n            return \"\"\n        var result = \"\"\n        for (letter\
    \ <- text.chars)\n        if (letter != 'a' && letter != 'A' && letter != 'e'\
    \ && letter != 'E' && letter != 'i' && letter != 'I' && letter != 'o' && letter\
    \ != 'O' && letter != 'u' && letter != 'U')\n            result += letter\n  \
    \      result", "        def removeVowel(text : String) : String = {\n       \
    \     val textLength = text.length\n            var removed = \"\"\n         \
    \   for (i <- 0 until textLength) {\n                val c = text(i).toChar\n\
    \                if ('a' <= c && c <= 'z') {\n                    val nextChar\
    \ = text(i + 1).toChar\n                    if ('a' <= nextChar && nextChar <=\
    \ 'z') {\n                        removed += c\n                        removed\
    \ += nextChar\n                    }\n                    else {\n           \
    \             removed += c\n                    }\n                }\n       \
    \     }\n            removed\n        }\n\n        val textLength = text.length\n\
    \        var removed = \"\"\n        for (i <- 0 until textLength) {\n       \
    \     val c = text(i).toChar\n            if ('a' <= c && c <= 'z') {\n      \
    \          removed += c\n                removed += text(i + 1).toChar\n     \
    \       }\n            else {\n                removed += c\n            }\n \
    \       }\n        removed", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ newText = text.replace(\"a\", \"\").replace(\"A\", \"\").replace(\"e\", \"\"\
    ).replace(\"E\", \"\").replace(\"o\", \"\").replace(\"O\", \"\").replace(\"i\"\
    , \"\").replace(\"I\", \"\").replace(\"u\", \"\").replace(\"U\", \"\")\n     \
    \   val newTextWithoutVowels = newText.filterNot(c => vowels.contains(c))\n  \
    \      newTextWithoutVowels", "        if (text == \"\" || text == \"A\" || text\
    \ == \"a\" || text == \"B\" || text == \"b\" || text == \"C\" || text == \"c\"\
    \ || text == \"D\" || text == \"d\")\n        {\n            return text\n   \
    \     }\n        else\n        {\n            var newText : String = \"\"\n  \
    \          for (i <- 0 until text.length)\n            {\n                if (text.charAt(i)\
    \ == 'a' || text.charAt(i) == 'A')\n                {\n                    newText\
    \ += text.charAt(i)\n                }\n            }\n            return newText\n\
    \        }", "        if(text.length == 0)\n            text\n        else {\n\
    \            val vowels = \"aeiouAEIOU\"\n            val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n            val new_text = text.filter(c => !vowels.contains(c) && !consonants.contains(c))\n\
    \            removeVowels(new_text)\n        }", "        text match {\n     \
    \       case \"\" => \"\"\n            case _ => text.replaceAll(\"[aeiouAEIOU]\"\
    , \"\")\n        }", "        val vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\", \"a\")\n        val resultSet = text.filterNot(vowelSet)\n       \
    \ resultSet.toSet", "        // removeVowels is the function which checks the\
    \ input and returns the string without vowels.\n        // >>> removeVowels(\"\
    \") \n        // \"\"\n        // >>> removeVowels(\"abcd\")\n        // \"bc\"\
    \n        // >>> removeVowels(\"aaBAA\")\n        // \"B\"\n        \n       \
    \ // Write your code in here\n        if(text.length < 1){\n            return\
    \ text\n        }\n        var vowels =  List(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        var result = text\n        for(i <- 0 to text.length){\n          \
    \  if(vowels.contains(text.charAt(i))){\n                result = result.replace(text.charAt(i),\
    \ \"\")\n            }\n        }\n        return result", "        val vowels\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    )\n        val result = text\n        for(vowel <- vowels) result = result.filterNot(x\
    \ => x == vowel)\n        result", "        var outStr = \"\"\n        for (i\
    \ <- text.indices) {\n            if (text(i) != \"a\"(0) && text(i) != \"e\"\
    (0) && text(i) != \"i\"(0) && text(i) != \"o\"(0) && text(i) != \"u\"(0)) {\n\
    \                outStr += text(i)\n            }\n        }\n        return outStr",
  "        def getVowels(text : String) : List[Char] = {\n            var vowels:\
    \ List[Char] = Nil\n            var index = 0\n            while (index < text.length)\
    \ {\n                val c = text.charAt(index)\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    vowels\
    \ ::= c\n                    index += 1\n                }\n                index\
    \ += 1\n            }\n            vowels\n        }\n        var textList = text.split(\"\
    [^aeiouAEIOU]\".toRegex)\n        val vowels = getVowels(text)\n        val lengthOfStringWithOutVowels\
    \ = textList.length\n        val resultStringWithOutVowels = textList.map((v)\
    \ => vowels.filterNot(_ == v).mkString).mkString(\"\")\n        if (resultStringWithOutVowels.length\
    \ < lengthOfStringWithOutVowels) {\n            textList = textList.map((v) =>\
    \ vowels.filter(_ == v).mkString).mkString(\"\")\n            val vowels = getVowels(textList(0))\n\
    \            resultStringWithOutVowels = textList.map((v) => vowels.filterNot(_\
    \ == v).mkString).mkString(\"\")\n        }\n        resultStringWithOutVowels",
  "      text.filter( c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ )", "        for (i <- 0 to text.length-1) {\n            if (text.charAt(i)\
    \ == 'a' || text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) ==\
    \ 'o' || text.charAt(i) == 'u' || text.charAt(i) == 'y')\n            {\n    \
    \            text = text.drop(i)\n            }\n        }\n        text", " \
    \       // Write your code here.\n        var result : String = \"\";\n      \
    \  var vowels : Set[Char] = Set('a','e','i','o','u');\n        var letters = Array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n\
    \        var index = 0;\n        var j = 0;\n        while (index < text.length)\
    \ {\n            if (letters(j).equals(text.charAt(index))) {\n              \
    \  result += letters(j);\n                j++;\n                index++;\n   \
    \         } else if (letters(j).equals(text.charAt(index))) {\n              \
    \  result += letters(j);\n                j++;\n            } else if (letters(j).equals(text.charAt(index)))\
    \ {\n                result += letters(j);\n                index++;\n       \
    \     }\n        }\n        result += letters(j);\n        return result;", " \
    \       // Create an empty StringBuilder object\n        var newText = new StringBuilder\n\
    \        // Initialize a boolean value to false\n        var removeVowel = false\n\
    \        // Iterate over the string text\n        for (i <- text) {\n        \
    \    // If the character is vowel\n            if (vowels.contains(i)) {\n   \
    \             // Set removeVowel = true and append the character in string\n \
    \               removeVowel = true\n            }\n            // If removeVowel\
    \ is true, append the character in string\n            if (removeVowel) {\n  \
    \              newText.append(i)\n            }\n        }\n        // Return\
    \ newText as String\n        return newText.toString", "        val vowels = List(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n        val newText = text.filterNot(vowels.contains)\n\
    \        newText.toList", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val filtered = text.filter(letter => !vowels.contains(letter))\n\
    \        return filtered.mkString", "        // create a mutable string from the\
    \ given text.\n        val strText = mutable.MutableString(text)\n        // remove\
    \ all vowels from the mutable string.\n        strText.filter(_ != vowels)", " \
    \       // use regex to filter the vowels\n        import scala.util.matching._\n\
    \        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val regex\
    \ = \"\"\"[aeiou]\"\"\".r\n        // use pattern matching to filter string using\
    \ regex\n        text match {\n            case regex(_) => text\n           \
    \ case _ => text.filter(c => vowels.contains(c))\n        }", "        var charArray\
    \ = text.toCharArray\n        var charArrayLength = charArray.length\n       \
    \ for (charIndex <- 0 until charArrayLength) {\n            if (charArray[charIndex]\
    \ == 'a' || charArray[charIndex] == 'e' || charArray[charIndex] == 'i' || charArray[charIndex]\
    \ == 'o' || charArray[charIndex] == 'u') {\n                charArray = charArray.drop(charIndex)\n\
    \                charArrayLength = charArray.length\n            }\n        }\n\
    \        return (new String(charArray))", "        // removeVowels(\"\") returns\
    \ empty string\n        if (text.nonEmpty) {\n            val lowercase = text.toLowerCase\n\
    \            val vowels = mutable.Set[Char]()\n            lowercase.toList.foreach\
    \ {\n            case letter: Char if (letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u') => vowels += letter\n            case\
    \ letter => letter\n            }\n            // if there's any character in\
    \ vowels\n            if (vowels.nonEmpty) {\n                val filtered = lowercase.toList.filterNot(vowels.contains)\n\
    \                text -> filtered.mkString\n            }\n            else {\n\
    \                text\n            }\n        }\n        // if there's no text,\
    \ return empty string\n        else {\n            text\n        }", "       \
    \ val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        val\
    \ vowels = \"aeiou\"\n        val textWithoutVowels = text.replaceAll(\"[\" +\
    \ vowels + \"]\", \"\")\n        val newChar = consonants.indexOf(textWithoutVowels)\n\
    \        if (newChar != -1) {\n            return newChar +: textWithoutVowels.split(\"\
    \").toList\n        }\n        return \"\"", "        var vowels = \"aeiou\"\n\
    \        val result = text.mkString.filter(c => vowels.contains(c))\n        return\
    \ result", "        val s = text.split(\"\").filter(_ != 'a' && _ != 'e' && _\
    \ != 'i' && _ != 'o' && _ != 'u')\n        s.mkString", "        val vowels: Set[Char]\
    \ = Set('a','e','i','o','u')\n        var newText = text\n        vowels.toIterator.foreach(x\
    \ => newText = newText.replaceAll(x + \"\\\\\", \"\")\n        newText", "   \
    \     var newText = \"\"\n        var temp = \"\"\n        for( i <- 0 until text.length){\n\
    \            if(text.charAt(i)==\"0\"||text.charAt(i)==\"1\"||text.charAt(i)==\"\
    2\"||text.charAt(i)==\"3\"||text.charAt(i)==\"4\"||text.charAt(i)==\"5\"||text.charAt(i)==\"\
    6\"||text.charAt(i)==\"7\"||text.charAt(i)==\"8\"||text.charAt(i)==\"9\"){\n \
    \               temp = text.substring(i)\n            }\n        }\n        newText\
    \ = temp\n        return newText", "        val vowels = \"aeiou\"\n        var\
    \ result = \"\"\n        var current = text\n        while (current != \"\") {\n\
    \            if (vowels.contains(current)) {\n                result += (current\
    \ + \"\")\n                current = current.substring(0,1)\n            } else\
    \ {\n                result += current\n                current = current.substring(0,1)\n\
    \            }\n        }\n        return result", "        text.filter(!('a'\
    \ <= _ && _ <= 'z')).filter(!('z' <= _ && _ <= 'z')).filter(!('a' <= _ && _ <=\
    \ 'z')).filter(!('z' <= _ && _ <= 'z')).mkString.replaceAll(\"\\\\W\", \"\")",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val noVowels\
    \ = text.toString.filter(c => !vowels.contains(c))\n        noVowels.mkString",
  "        for (i <- 0 until text.length)\n            if (text.charAt(i) == 'a' ||\
    \ text.charAt(i) == 'e' || text.charAt(i) == 'i' || text.charAt(i) == 'o' || text.charAt(i)\
    \ == 'u' || text.charAt(i) == 'A' || text.charAt(i) == 'E' || text.charAt(i) ==\
    \ 'I' || text.charAt(i) == 'O' || text.charAt(i) == 'U' || text.charAt(i) == 'z')\n\
    \                text = text.substring(0, i) + text.substring(i + 1)\n       \
    \ else\n            text = text\n        text", "        var vowels = List(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"\xE6\",\"\xF8\",\"\xE5\")\n        var newText\
    \ = \"\"\n        for ( a <- text.charIterator) {\n            a match {\n   \
    \             case _ if vowels.contains(a) => newText +=  a // if the letter matches\
    \ a vowel, add it to the result\n                case _ => newText += a // if\
    \ the letter does not match a vowel, just add it to the result\n            }\n\
    \        }\n        newText", "      val vowels = Set('a','e','i','o','u')\n \
    \     var result = \"\"\n      for(ch <- text) {\n        if(vowels.contains(ch))\
    \ {\n          result += ch\n        } else {\n          result += (ch)\n    \
    \    }\n      }\n      result", "        // Write your code here\n        var\
    \ newText : String = text.filterNot(text => text == \"a\" || text == \"e\" ||\
    \ text == \"i\" || text == \"o\" || text == \"u\")\n        return newText", " \
    \       var vowels = Set.empty[Char]\n        for (c <- text) if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') vowels += c\n        text = text.replaceAll(\"\
    [^\" + vowels + \"]\", \"\")\n        for (c <- text) if (vowels.contains(c))\
    \ text = text.replace(c, \"\")\n        text", "        // create a mutable list\
    \ of characters in text\n        val textChars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (char <- text) {\n            textChars += char\n        }\n\n  \
    \      // create an empty mutable list which will store characters that will be\
    \ removed\n        val vowels = mutable.ArrayBuffer.empty[Char]\n        vowels\
    \ += 'a'\n        vowels += 'e'\n        vowels += 'i'\n        vowels += 'o'\n\
    \        vowels += 'u'\n\n        // loop over characters of text\n        for\
    \ (char <- textChars) {\n            if (vowels.contains(char)) {\n          \
    \      // remove the character from the text\n                textChars -= char\n\
    \            } else {\n                // if the character is not in vowels then\
    \ add it to the list\n                vowels += char\n            }\n        }\n\
    \        textChars.mkString", "        var result = \"\"\n        var vowels =\
    \ \"aeiouAEIOU\".toCharArray\n        var length = text.length()\n        var\
    \ i = 0\n        for (i <- 0 until length) {\n            if (vowels(i) != 'a')\
    \ {\n                result += text(i , i)\n            }\n        }\n       \
    \ result", "        val vowels = \"aeiou\".toCharArray\n        val newString\
    \ = new StringBuilder\n        for (i <- 0 to text.length-1) {\n            if\
    \ (vowels.contains(text.charAt(i))) newString.append(text.charAt(i))\n       \
    \     else newString.append(\" \")\n        }\n        newString.toString()",
  "        val list = text.toList\n        val newList = mutable.ListBuffer.empty[Char]\n\
    \        for(str <- list) {\n            if(str matches \"[aeiouAEIOU]\") {\n\
    \                newList.append(str)\n            }\n        }\n        newList.toString()",
  "        var new_text = text\n        var index = 0\n        while (index < text.length\
    \ && text.substring(index, index + 1).equals(\"a\") || text.substring(index, index\
    \ + 1).equals(\"e\") || text.substring(index, index + 1).equals(\"i\") || text.substring(index,\
    \ index + 1).equals(\"o\") || text.substring(index, index + 1).equals(\"u\"))\
    \ {\n            index = index + 1\n        }\n        while ((index - 1) >= 0\
    \ && !text.substring(index - 1, index + 1).equals(\"a\") && !text.substring(index\
    \ - 1, index + 1).equals(\"e\") && !text.substring(index - 1, index + 1).equals(\"\
    i\") && !text.substring(index - 1, index + 1).equals(\"o\") && !text.substring(index\
    \ - 1, index + 1).equals(\"u\")) {\n            new_text = new_text.substring(0,\
    \ index - 1) + \"\\n\" + new_text.substring(index)\n            index = index\
    \ - 1\n        }\n        return new_text", "        val vowels = Set(\"a\",\"\
    e\",\"i\",\"o\",\"u\")\n        var result = \"\"\n        for (x <- text) {\n\
    \            if (!vowels.contains(x)) {\n                result = result + x\n\
    \            }\n        }\n        return result", "        // Write your code\
    \ here.\n        // Remove vowels from a given text\n        if (text == \"\"\
    ) return \"\"\n        var textList = text.split\n        var noVowelsText = \"\
    \"\n        for (i <- 0 until textList.length) {\n            var item = textList(i)\n\
    \            if (!item.contains(\"a\")) textList = textList.remove(i)\n      \
    \  }\n        noVowelsText = textList.toString()\n        return noVowelsText",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        var noVowel = text\n \
    \       noVowel = noVowel.filter( c => vowels.indexOf(c) == -1 )\n        return\
    \ noVowel", "        var vowels = \"aeiouAEIOU\"\n        var vowelsSet = scala.collection.mutable.Set[Char](vowels.toCharArray)\n\
    \        var result = \"\"\n        text foreach {\n            char => {\n  \
    \              if (vowelsSet.contains(char))\n                {\n            \
    \        result += char\n                }\n            }\n        }\n       \
    \ result", "        if (text.length == 0) return text\n        var vowels = \"\
    aeiou\"\n        var removed = \"\"\n        var vowelChars = text.filter(x =>\
    \ vowels.contains(x))\n        var replaced = text.filter(x => !(vowels.contains(x)))\n\
    \        for (vowelChar <- vowelChars) {\n            removed = removed + (vowelChar\
    \ + replaced.head)\n        }\n        return removed", "        var result :\
    \ String = \"\"\n        text match {\n        case letter : String if letter.toLowerCase()\
    \ in vowels => result += letter\n        case letter : String if letter.toUpperCase()\
    \ in vowels => result += letter\n        case letter : String if letter in vowels\
    \ => result += letter\n        }\n        result", "        var result = \"\"\n\
    \        text.foreach(c => if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {result += c} else result += c.toUpperCase)\n        result", "  \
    \      text.foreach(char => {\n            if((char == 'a' || char == 'e' || char\
    \ == 'i' || char == 'o' || char == 'u') && !(text.length == 1 && char == 'z'))\
    \ {\n                text = text.replace(char, \"\")\n            }\n        })\n\
    \        text", "        var result = text\n        for (c <- text) {\n      \
    \      val index = c match {\n                case \"a\" => 0\n              \
    \  case \"e\" => 1\n                case \"i\" => 2\n                case \"o\"\
    \ => 3\n                case \"u\" => 4\n                case \"A\" => 5\n   \
    \             case \"E\" => 6\n                case \"I\" => 7\n             \
    \   case \"O\" => 8\n                case \"U\" => 9\n                case _ =>\
    \ -1\n            }\n            if (index != -1) {\n                result =\
    \ result.substring(0, index) + result.substring(index + 1, result.length)\n  \
    \          }\n        }\n        return result", "        val vowels = \"aeiou\"\
    \n        val withoutVowels = text.filter(!vowels.contains(_))\n        withoutVowels"]
stop_tokens:
- "\n    }\n"
