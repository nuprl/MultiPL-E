language: scala
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val zeros = l.count(_ == 0)\n        if\
    \ (zeros == 2) true else false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhdqvt9o.scala:25)\n\tat Problem.main(tmpdhdqvt9o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val s = l.foldLeft(0l.toLong)((sum, elem)\
    \ => (sum + elem))\n        if (s == 0l.toLong)\n            true\n        else\n\
    \            false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpin087hfb.scala:28)\n\tat Problem.main(tmpin087hfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0\n        var i = 0\n      \
    \  while (i < l.length) {\n            sum += l(i)\n            i += 1\n     \
    \   }\n        sum == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpzbs1ff.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += l(i)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set = Set[Long]()\n        l.foreach\
    \ {x => set.add(x - 0); set.add(x + 0)}\n        set.size == 2 && set.count(_\
    \ > 0) == 2\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgmq4kl4l.scala:26)\n\tat Problem.main(tmpgmq4kl4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(false) { (result, item) =>\n\
    \            val (sum, count) = item match {\n                case 0 => (0l, 0)\n\
    \                case _ => (item + result, 1)\n            }\n            result\
    \ && (sum == 0l)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpt3gju8ld.scala:21:32 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m _ => (item + result,\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String):\
    \ String\n\e[31m   |\e[0mmatch arguments ((result : Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1660009680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // initialize a HashMap to keep track of\
    \ duplicate elements\n        val map = new mutable.HashMap[Long, Boolean]()\n\
    \        val pairs = l.flatMap { x =>\n            x match {\n               \
    \ case 0 => None\n                case x1 :: x2 => Some((x1, x2))\n          \
    \      case x1 :: Nil => Some((x1, x1))\n                case _ => None\n    \
    \        }\n        }.distinct\n\n        val l = pairs.count { x => map.getOrElse(x,\
    \ false) }\n        l == 0\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg_s2ett.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeg_s2ett.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = pairs.count { \e[36mx\e[0m => map.getOrElse(x, \e[31mfalse\e\
    [0m) }\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m         \
    \       Recursive \e[33mvalue\e[0m \e[35mpairs\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) return false\n     \
    \   val pairs = l.distinct\n        val (min1, min2) = pairs.minBy(x => x)\n \
    \       val (max1, max2) = pairs.maxBy(x => x)\n        if (min2 == max2 && min1\
    \ == max1) return true\n        if (min1 <= max1 && min2 <= max2) return true\n\
    \        if (min1 + min2 == max1 && max1 + max2 == min1) return true\n       \
    \ if (min1 + min2 == max1 && min2 < max2) return true\n        if (min1 < min2\
    \ && min2 < min1) return true\n        if (max1 < max2 && max2 < max1) return\
    \ true\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpikn59zwa.scala:23:17 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (min1 <= max1 && min2 <= max2)\
    \ \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue <= is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpikn59zwa.scala:24:17 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (min1 + min2 == max1 && max1 + max2\
    \ == min1) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikn59zwa.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (min1 + min2 == max1 && min2 <\
    \ max2) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpikn59zwa.scala:26:17 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (min1 <"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        for (a <- l.iterator)\n            for\
    \ (b <- l.iterator)\n                if (a + b == 0)\n                    return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3wv9z6kh.scala:25)\n\tat Problem.main(tmp3wv9z6kh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.zipWithIndex\n        val\
    \ pairCount = pairs.filter(x => x._2 < l.size).size\n        if (pairCount ==\
    \ 2) pairs.exists { x => x._2 + x._2 == 0}.head\n        else false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt3krlc_.scala:20:66 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (pairCount == \e[31m2\e[0m) pairs.exists\
    \ { \e[36mx\e[0m => x._2 + x._2 == \e[31m0\e[0m}.head\n\e[31m\e[31m   |\e[0m \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value head is not a member of Boolean\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n          case x :: xs => x.zip(x.tail).forall\
    \ { case (a,b) => b==0 }\n          case Nil => false\n          case _ => pairsSumToZero(l.reverse)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps715kbsg.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          \e[33mcase\e[0m x :: xs => x.zip(x.tail).forall\
    \ { \e[33mcase\e[0m (a,b) => b==\e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m        \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ zip is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps715kbsg.scala:19:34\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m          \e[33mcase\e[0m\
    \ x :: xs => x.zip(x.tail).forall { \e[33mcase\e[0m (a,b) => b==\e[31m0\e[0m }\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value tail is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n          case Nil => true\n\
    \          case h::t => if (h.sum == 0) pairsSumToZero(t)\n                  \
    \  else pairsSumToZero(t filter (_ != h))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt2xtsqu6.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mcase\e[0m h::t => \e[33mif\e[0m (h.sum\
    \ == \e[31m0\e[0m) pairsSumToZero(t)\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                           value sum is not\
    \ a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val seen = mutable.Set[Long]()\n      \
    \  var n = 0\n        var m = l.length\n        while(n < (m - 1) && m > 0) {\n\
    \            val n1 = n\n            val n2 = n1 + 1\n            val n3 = n2\
    \ + 1\n            if(Math.abs(l(n1) - l(n3)) < 10) {\n                n += 1\n\
    \                m -= 1\n            } else if(Math.abs(l(n2) - l(n3)) < 10) {\n\
    \                n += 2\n                m -= 1\n            } else {\n      \
    \          n += 3\n                m -= 1\n            }\n        }\n        if(l(n)\
    \ == 0) {\n            seen += l(n)\n        }\n        seen.isEmpty == false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_hhrwti.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // write your code here\n        var isTrue\
    \ = false\n        l.foreach { a =>\n            l.foreach { b =>\n          \
    \      if(a+b == 0) isTrue = true\n            }\n        }\n        return isTrue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphr2mlit5.scala:28)\n\tat Problem.main(tmphr2mlit5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.zipWithIndex\n        //\
    \ We have to start two pairs at one since we're looking for the first pair\n \
    \       // that sums to zero.\n        val pairsWithIndex = pairs.filter(_._2\
    \ > 0)\n        pairsWithIndex.size == 2 &&\n            pairsWithIndex.exists(_._1\
    \ == 0) &&\n            pairsWithIndex.exists(_._2 == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgcxtktl.scala:30)\n\tat Problem.main(tmpqgcxtktl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.tail.zip(l.tail.tail).forall { case (n1,n2)\
    \ => n1 + n2 <= 0 }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgs65p85.scala:24)\n\tat Problem.main(tmpcgs65p85.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // create a set of the elements in l\n\
    \        val set = new mutable.HashSet[Long](l)\n        // for each element of\
    \ l, see if it is in the set.\n        // if not, it is not pairs with zero.\n\
    \        l.map{ e => !set.contains(e) }.reduceLeft(_&&_)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphv_k_iwb.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m](l)\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft((false, false)) { (r, el) =>\n\
    \          val leftSum = r._1\n          val rightSum = r._2\n          if (leftSum\
    \ + el == rightSum)\n            ((leftSum, el), (leftSum + el, 0l))\n       \
    \   else\n            ((leftSum, el), (rightSum, leftSum + el))\n        }._1\
    \ != (false, false)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa_057dah.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mif\e[0m (leftSum + el == rightSum)\n\e\
    [31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of Boolean, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa_057dah.scala:22:13 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            ((leftSum, el), (leftSum + el, \e[31m0l\e\
    [0m))\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \            Found:    \e[1m\e[31m(\e[0mBoolean\e[1m\e[31m,\e[0m\e[1m\e[31m \e\
    [0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m             Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa_057dah.scala:22:37\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            ((leftSum, el),\
    \ (leftSum + el, \e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Boolean, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa_057dah.scala:24:13 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            ((leftSum, el), (rightSum, leftSum + el))\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \     Found:    \e[1m\e[31m(\e[0mBoolean\e[1m\e[31m,\e[0m\e[1m\e[31m "
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      val newList = mutable.ListBuffer[Long]()\n\
    \      val newSet = mutable.Set[Long]()\n      l.foreach { i => newList += i;\
    \ newSet += i }\n      if (newList.size == 1) newSet.size == 1\n      else if\
    \ (newList.size == 2) newSet.size == 2\n      else if (newList.size == 3) newSet.size\
    \ == 3\n      else if (newList.size == 4) newSet.size == 4\n      else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz94belz.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsz94belz.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mnewSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val l1 = l\n        val l2 = l\n      \
    \  val pairs = l1.zipWithIndex.filter(x => x._2 == l2.indexOf(_))\n        pairs.foldLeft((false,\
    \ List[Long]())) { (t, (p, n)) =>\n            if (t._1 && p._2 != n) {\n    \
    \            t._2 = p._2\n                t._1 = true\n            }\n       \
    \     t\n        }._1\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9sdb42hi.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        pairs.foldLeft((\e[31mfalse\e[0m, List[\e[35mLong\e\
    [0m]())) { (\e[36mt\e[0m, (p, n)) =>\n\e[31m\e[31m   |\e[0m                  \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                              not a legal formal parameter\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp9sdb42hi.scala:20:67 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = l1.zipWithIndex.filter(\e\
    [36mx\e[0m => x._2 == l2.indexOf(_))\n\e[31m\e[31m   |\e[0m                  \
    \                                                 ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => x._2 ==\
    \ l2.indexOf(_$1).\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sdb42hi.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (t._1 && p._2 != n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\
    \e[31m   |\e[0m                        Not found: p\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9sdb42hi.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                t._2 = p._2\n\e[31m\e[31m   |\e[0m  \
    \                     ^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ p\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9sdb42hi.scala:24:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                t._1\
    \ = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val _1\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n            case List() => false\n\
    \            case h :: t => if(h.sum == 0) pairsSumToZero(t)\n               \
    \        else h.sum != 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxmbugm6.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m h :: t => \e[33mif\e[0m(h.sum\
    \ == \e[31m0\e[0m) pairsSumToZero(t)\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                              value sum\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxmbugm6.scala:21:30\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                       \e\
    [33melse\e[0m h.sum != \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                            value sum is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0L\n        var count = 0\n \
    \       l.foreach(el => {\n            if(sum != 0) return\n            sum +=\
    \ el\n            count += 1\n        })\n        if(count == 0) return false\n\
    \        l.sortWith(_.toLong)\n        (0.until(l.reduce{(a,b) => a + b}.toLong).contains({sum}))\
    \ == true\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpshvqzi7f.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(sum\
    \ != \e[31m0\e[0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:    Unit\n\e\
    [31m   |\e[0m                         Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpshvqzi7f.scala:26:19 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        l.sortWith(_.toLong)\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Wrong number\
    \ of parameters, expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpshvqzi7f.scala:27:42\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        (\e[31m0\e[0m.until(l.reduce{(\e\
    [36ma\e[0m,\e[36mb\e[0m) => a + b}.toLong).contains({sum})) == \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 Found:    Long\n\e[31m   |\e[0m                \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = mutable.ListBuffer[Pair[Long,\
    \ Long]]()\n        var sum = 0\n        for (i<-0 until l.length-1) {\n     \
    \       sum+=l(i)\n            if (sum>0) pairs += new Pair(l(i), l(i+1))\n  \
    \      }\n        pairs.size < 2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphw1wtpvl.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mPair\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                        Not found: type Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphw1wtpvl.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mPair\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw1wtpvl.scala:21:15\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            sum+=l(i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(true) {\n            (acc,v)\
    \ => if (acc) (v != 0l) else {\n                for (x <- l if v == (x+v)) yield\
    \ (v == x)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr38h5xlj.scala:20:16\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mfor\e[0m\
    \ (x <- l \e[33mif\e[0m v == (x+v)) \e[33myield\e[0m (v == x)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mBoolean\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.grouped(2).map {\n      \
    \      x => (x._1, x._2)\n        }\n        (pairs.map(x => (x._1 + x._2)) ==\
    \ (List(0)))\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplei960t1.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[36mx\e[0m => (x._1, x._2)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ _1 is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplei960t1.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[36mx\e[0m\
    \ => (x._1, x._2)\n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e\
    [31m   |\e[0m                        value _2 is not a member of List[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplei960t1.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (pairs.map(\e[36mx\e[0m => (x._1 + x._2)) ==\
    \ (List(\e[31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) false\n        else (l.head\
    \ + l.tail.head) forall (_ == 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq2um5wcr.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m (l.head + l.tail.head) forall\
    \ (_ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value forall is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = 0\n        var pairList = new\
    \ mutable.ListBuffer[Pair[Long,Long]]()\n        var pair: Pair[Long,Long] = null\n\
    \        l.foreach{\n            elt => if (pairs == 0) pair = elt;\n        \
    \    else if (elt != pair) pairs += pairList.length\n            else pairList\
    \ += Pair(pair,elt)\n        }\n        if (pairs == 0) false\n        else pairList.size\
    \ == 1\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3yi83jwl.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mpairList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mPair\e[0m[\e[35mLong\e[0m,\e[35mLong\e[0m]]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3yi83jwl.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mpair\e[0m: \e[35mPair\e\
    [0m[\e[35mLong\e[0m,\e[35mLong\e[0m] = \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                  Not found: type\
    \ Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0\n        var pairs = scala.collection.mutable.Set[List[Long]]()\n\
    \        for (elem <- l) {\n            if (elem.toLong != 0) {\n            \
    \    sum += 1\n                if (sum > 1) pairs += (List[Long](elem))\n    \
    \            if (sum < -1) pairs += (List[Long](-elem))\n            }\n     \
    \   }\n        (pairs.size == 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiex9i1ra.scala:33)\n\tat Problem.main(tmpiex9i1ra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs : List[List[Long]] = Nil\n  \
    \      for(x <- l)\n            pairs = x :: pairs\n            pairs = pairs.filter(_\
    \ < 0)\n            pairs = pairs.filter(_ > 0)\n            pairs = pairs.filter(_\
    \ <= pairs.reduceLeft(_ + _))\n            pairs = pairs.filter(_ >= pairs.reduceLeft(_\
    \ + _))\n            pairs = pairs.filter(_ == pairs.reduceLeft(_ + _))\n    \
    \        pairs.nonEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jeqcpl0.scala:20:20\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            pairs = x :: pairs\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Found:    (x : Long)\n\e[31m   |\e[0m                    Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jeqcpl0.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            pairs = pairs.filter(_\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1jeqcpl0.scala:22:35 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            pairs = pairs.filter(_ > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0mvalue >\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1jeqcpl0.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            pairs = pairs.filter(_ <= pairs.reduceLeft(_\
    \ + _))\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue <= is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(x => (x % 2).getOrElse(true)).filter(_._2.length\
    \ > 1)\n        pairs.exists(x => (x._1._1 + x._1._2) === 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeckm2r5h.scala:18:43 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = l.groupBy(\e\
    [36mx\e[0m => (x % \e[31m2\e[0m).getOrElse(\e[31mtrue\e[0m)).filter(_._2.length\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value getOrElse is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeckm2r5h.scala:19:32\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        pairs.exists(\e[36mx\e\
    [0m => (x._1._1 + x._1._2) === \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           value\
    \ _1 is not a member of Any\n2 errors found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val nums = l.toSet\n        val zeros =\
    \ l.count(_ == 0)\n        if (zeros == nums.size)\n            return true\n\
    \        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdguzzlhv.scala:29)\n\tat Problem.main(tmpdguzzlhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) true\n        else {\n \
    \           var sum = l(0).toLong\n            var i = 0\n            var pairs\
    \ = List[(Long, Long)]()\n            while (i < l.size) {\n                if\
    \ (l(i).toLong == sum) {\n                    pairs += (l(i).toLong, sum(l(i+1).toLong))\n\
    \                    sum += l(i+1).toLong\n                }\n               \
    \ i += 2\n            }\n            if (pairs.size == 2) false\n            else\
    \ pairsSumToZero(pairs.toList)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn79114e.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    pairs += (l(i).toLong, sum(l(i+\e\
    [31m1\e[0m).toLong))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue += is not a member of List[(Long, Long)] - did you mean List[(Long,\
    \ Long)].!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmppn79114e.scala:25:43 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    pairs += (l(i).toLong, sum(l(i+\e\
    [31m1\e[0m).toLong))\n\e[31m\e[31m   |\e[0m                                  \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                   \e[33mvariable\e\
    [0m \e[35msum\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppn79114e.scala:31:38 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33melse\e[0m pairsSumToZero(pairs.toList)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    List[\e[1m\e[31m(\e[0mLong\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m\
    \   |\e[0m                                Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.toSet.size\n        if (n ==\
    \ 0) false\n        else {\n            var total = 0L\n            var i = -1\n\
    \            while (i < n) {\n                total += l.apply(i)\n          \
    \      if (total > 0) return false\n                i += 1\n            }\n  \
    \          if (total == 0) true\n            else\n            {\n           \
    \     val a = l.toList\n                var b = a(0)\n                var total\
    \ = b\n                var c = 1\n                var d = 1\n                while\
    \ ( d <= a.size ) {\n                    if ( total + b < 0 ) return false\n \
    \                   total = total + b\n                    b += 1\n          \
    \          c += 1\n                    if ( c > d ) d += 1\n                }\n\
    \                true\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.pairsSumToZero(tmpycqjcpny.scala:24)\n\tat Problem$.main(tmpycqjcpny.scala:48)\n\
    \tat Problem.main(tmpycqjcpny.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var count : Long = 0\n        var sum :\
    \ Long = 0\n        var maxValue : Long = 0\n        for (x <- l)\n          \
    \  count += x\n            sum += x\n            if (sum == 0)\n             \
    \   return false\n            if (count > maxValue)\n                maxValue\
    \ = count\n            count = 0\n            sum = 0\n        return true\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqx2c23u.scala:34)\n\tat Problem.main(tmpcqx2c23u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var l1 = l\n        while (l1.length >\
    \ 0) {\n            l1 = l1.tail\n            if (l1.head - l1.tail.head == 0)\
    \ {\n                return true\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.pairsSumToZero(tmpdtbmx68g.scala:21)\n\
    \tat Problem$.main(tmpdtbmx68g.scala:28)\n\tat Problem.main(tmpdtbmx68g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length < 2)\n            return false\n\
    \        var numPairs = 0\n        var sum = 0\n        var i = l.length\n   \
    \     while (i > 0) {\n            val x = l(i)\n            sum += x\n      \
    \      if (sum == 0) {\n                numPairs++\n                sum = x\n\
    \            }\n            i -= 1\n        }\n        if (numPairs >= 2)\n  \
    \          return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuu4n6w_g.scala:28:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                sum = x\n\e[31m\e[31m   |\e[0m      \
    \              ^\e[0m\n\e[31m   |\e[0m                    end of statement expected\
    \ but '=' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuu4n6w_g.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpuu4n6w_g.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                numPairs++\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value ++ is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.sortWith((x, y) => x.compare(y) == 0).size\
    \ == l.size-1 &&\n            l.count(x => x == 0) == 2 &&\n            l.take(1).forall(x\
    \ => l.count(y => y == x - x) == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ujxmnkj.scala:26)\n\tat Problem.main(tmp_ujxmnkj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long, Long]\n\
    \        l.foreach(x => map.update(x,x+1))\n        map.size == l.size && map.forall\
    \ { case (k,v) => v == 0 && k != 0}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopv590qr.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // your code goes here\n        var sum\
    \ = 0\n        for(i <- 0 until l.length) {\n            sum += l(i)\n       \
    \     if (sum < 0) {\n                sum = 0\n            }\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbwf28srp.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += l(i)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      val set = mutable.Set.empty[Long]\n     \
    \ val toSum = mutable.Map.empty[Long, Long]\n      val toRemove = mutable.List.empty[Long]\n\
    \      l.foreach{ x =>\n        if(toSum.contains(x)) {\n          toRemove +=\
    \ x\n        } else {\n          toSum += x -> 0\n        }\n      }\n\n     \
    \ toRemove.foreach{ x =>\n        toSum -= x\n      }\n\n      (toSum.isEmpty\
    \ && toRemove.isEmpty) match {\n        case false => false\n        case true\
    \ => true\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zzvdgbw.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mset\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9zzvdgbw.scala:19:18 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mtoSum\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zzvdgbw.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mtoRemove\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var list: mutable.Set[Long] = mutable.Set()\n\
    \        var i: Long = 0\n        while (i < l.length) {\n            if (list.isEmpty)\
    \ {\n                list += l(i)\n            } else if (list.contains(l(i) +\
    \ l(i + 1))) {\n                return true\n            } else {\n          \
    \      list += l(i + 1) + l(i + 1)\n            }\n            i += 2\n      \
    \  }\n        return false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptumlhk12.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptumlhk12.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairsSumToZero = new mutable.HashSet[(Long,\
    \ Long)] //Map from pair to boolean\n        for (i <- l.indices)\n          \
    \  for (j <- l.indices)\n                if (i + j == 0)\n                   \
    \ pairsSumToZero.add((l(i), l(j)))\n        for ( (a1,b1), (a2,b2) <- pairsSumToZero\
    \ if a1 == a2 && b1 == b2)\n            return true\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1drzd3ua.scala:23:31 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m ( (a1,b1), (a2,b2) <- pairsSumToZero\
    \ \e[33mif\e[0m a1 == a2 && b1 == b2)\n\e[31m\e[31m   |\e[0m                 \
    \              ^^\e[0m\n\e[31m   |\e[0m                               ')' expected,\
    \ but '<-' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1drzd3ua.scala:24:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m^^^^^^\e[0m\n\e[31m   |\e[0m'<-' expected,\
    \ but 'end of statement' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1drzd3ua.scala:18:33\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mpairsSumToZero\e[0m = \e[33mnew\e[0m mutable.HashSet[(\e[35mLong\e[0m, \e\
    [35mLong\e[0m)] \e[34m//Map from pair to boolean\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = 0\n        val setOfPairsSet\
    \ = new mutable.HashSet[mutable.Set[Long]]()\n        for (i <- l ) {\n      \
    \      pairs += i\n            val set = setOfPairsSet\n            if (set exists\
    \ _) {\n                val setOfPairs = setOfPairsSet get i\n               \
    \ set.retain { x => !setOfPairs.contains(x) }\n                if (set.isEmpty)\
    \ {\n                    setOfPairsSet += (i.toLong, Pairs.pairs(pairs).toSet)\n\
    \                }\n            }\n        }\n        if (setOfPairsSet.isEmpty)\n\
    \            (l exists _)\n        else\n            false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywb42g0d.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msetOfPairsSet\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[mutable.Set[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpywb42g0d.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            pairs += i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpywb42g0d.scala:23:27 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (set exists _) {\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => set exists _$1.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpywb42g0d.scala:32:22 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            (l exists _)\n\e[31m\e[31m   |\e[0m     \
    \                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => l exists _$2.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n       l.reduceLeft((x, y) => x + y == 0)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjouylcb8.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m       l.reduceLeft((\e[36mx\e\
    [0m, \e[36my\e[0m) => x + y == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      Found:    Boolean\n\e[31m   |\e[0m                              Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val xs = l.toSet\n        val ys = l.toSet\n\
    \        val ones = xs.filter(_==1).toSet\n        val zerosForAll = xs.filter(_!=1).toSet\n\
    \        xs.forall(y=>(ys-y).contains(0l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpko4te0bx.scala:28)\n\tat Problem.main(tmpko4te0bx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var ans = false\n        val pairs = l.map{\
    \ x => x }.toSet\n        pairs.forall(pair => l.filter(y => y.toLong == pair._1\
    \ && y.toLong != pair._0).length == 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbblh5dhi.scala:20:60 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        pairs.forall(\e[36mpair\e[0m => l.filter(\e[36my\e\
    [0m => y.toLong == pair._1 && y.toLong != pair._0).length == \e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sums = l.zipWithIndex.map{ case (n,i)\
    \ => n + i }.toMap\n        val pairs = l.zipWithIndex.filter { case (n,i) =>\
    \ sums.contains(n-i) }.toList\n        pairs.forall { case (n,i) => n == 0 } ||\
    \ pairs.forall { case (n,i) => n == -n }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp08s1w05m.scala:18:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = l.zipWithIndex.map{\
    \ \e[33mcase\e[0m (n,i) => n + i }.toMap\n\e[31m\e[31m   |\e[0m              \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                      Cannot prove that Long <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                       where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \         V is a type variable\n\e[31m   |\e[0m                              \
    \         .\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // Your code goes here.\n        var pairs\
    \ = l.grouped(2)\n        pairs.groupBy(_._1).map(_._2).contains(pairs.groupBy(_._1).map(_._2).map(s\
    \ => s.foldLeft(0)(_ + _) > 1))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptm26_2pl.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        pairs.groupBy(_._1).map(_._2).contains(pairs.groupBy(_._1).map(_._2).map(\e\
    [36ms\e[0m => s.foldLeft(\e[31m0\e[0m)(_ + _) > \e[31m1\e[0m))\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue groupBy is not a member\
    \ of Iterator[List[Long]] - did you mean Iterator[List[Long]].grouped?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- l) {\n            val key = i + i\n            set.add(key)\n\
    \        }\n        if (set.size == 2) false\n        else true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa43478j9.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // Use two mutable variables to store the\
    \ results of two distinct sum calculations\n        var flag1 = false\n      \
    \  var flag2 = false\n        // Keep track of the current element in the list\n\
    \        var currentElement = l(0)\n        // Keep track of any additional elements\
    \ added to the list\n        var additionalElements = List[Long]()\n        //\
    \ Keep track of the sum calculations being performed\n        var sum1 = currentElement\n\
    \        var sum2 = currentElement\n        // While there are elements in the\
    \ list\n        while (currentElement != null) {\n            // If there are\
    \ two distinct elements that sum to zero, return true\n            // If there\
    \ are not two distinct elements that sum to zero, return false\n            if\
    \ (sum1 + sum2 == 0) {\n                flag1 = true\n                flag2 =\
    \ false\n            }\n            else {\n                sum1 = sum2\n    \
    \            sum2 = currentElement\n                currentElement = additionalElements.head\n\
    \                additionalElements = additionalElements.tail\n            }\n\
    \        }\n        // Return the results of the two sum calculations\n      \
    \  flag1 && flag2\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1e6b92fq.scala:29:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mwhile\e[0m (currentElement != \e[31mnull\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          Values of types Long and Null cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l zip l.tail\n        pairs.exists(_._1\
    \ + _._2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb89z13td.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        pairs.exists(_._1 + _._2 == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m           \
    \          value _1 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def pair(l: List[Long], acc: mutable.Map[Long,\
    \ Boolean], n: Long, sum: Long) : Boolean = {\n            if (n == 1) {\n   \
    \             acc.updated(l(0), true)\n                return true\n         \
    \   }\n            pair(l.tail, acc, n - 1, sum + l(0))\n            pair(l.tail,\
    \ acc, n, sum)\n        }\n        pair(l, Map(), l.length, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycbi2t4q.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mpair\e[0m(\e[36ml\e[0m:\
    \ \e[35mList\e[0m[\e[35mLong\e[0m], \e[36macc\e[0m: mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mBoolean\e[0m], \e[36mn\e[0m: \e[35mLong\e[0m, \e[36msum\e[0m: \e[35mLong\e\
    [0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = l.toMap\n        val values =\
    \ map.values\n        val keys = map.keys\n        var pairs = 0\n        for\
    \ ( x <- keys) {\n            var sum = 0\n            var j = values.indexOf(x)\n\
    \            while(j >= 0) {\n                sum = sum + j\n                j\
    \ = values.indexOf(x,j+1)\n            }\n            if (sum == 0)\n        \
    \        pairs += 1\n        }\n        if (pairs == 2)\n            true\n  \
    \      else\n            false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkxl9bhtk.scala:18:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = l.toMap\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Cannot prove that Long <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                         where:    K is a type variable\n\e[31m   |\e[0m    \
    \                               V is a type variable\n\e[31m   |\e[0m        \
    \                 .\n1 error found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l zip l.tail\n\n        //\
    \ find pairs where the first element of the pair is less than 0\n        def pairIsLess(pair\
    \ : (Long, Long)) : Boolean = {\n            pair._1 < 0\n        }\n\n      \
    \  // find pairs where the first element of the pair is greater than or equal\
    \ to 0\n        def pairIsMoreThanEqual(pair : (Long, Long)) : Boolean = {\n \
    \           pair._1 >= 0\n        }\n\n        // find pairs where the first element\
    \ of the pair is equal to 0\n        def pairIsZero(pair : (Long, Long)) : Boolean\
    \ = {\n            pair._1 == 0\n        }\n\n        // find pairs where the\
    \ first element of the pair is greater than 0\n        def pairIsMoreThanZero(pair\
    \ : (Long, Long)) : Boolean = {\n            pair._1 > 0\n        }\n\n      \
    \  // filter pairs where the first element is less than 0\n        val less =\
    \ pairs.filter(pairIsLess)\n\n        // filter pairs where the first element\
    \ is greater than or equal to 0\n        val moreThanEqual = pairs.filter(pairIsMoreThanEqual)\n\
    \n        // filter pairs where the first element is equal to 0\n        val zero\
    \ = pairs.filter(pairIsZero)\n\n        // filter pairs where the first element\
    \ is greater than 0\n        val moreThanZero = pairs.filter(pairIsMoreThanZero)\n\
    \n        // return true if there are two distinct elements in the list that sum\
    \ to zero\n        less.size == 2 && moreThanEqual.size == 0 && zero.size == 1\
    \ && moreThanZero.size == 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpund98q79.scala:59)\n\tat Problem.main(tmpund98q79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) false\n        val set =\
    \ Set.empty[Long]\n        l.foreach( x => set += x )\n        if (set.size ==\
    \ l.size) true\n        else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt0m2x940.scala:25)\n\tat Problem.main(tmpt0m2x940.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val counter = mutable.Map[Long, Int]()\n\
    \        for (i<- 0 until l.length) {\n            val first = l(i)\n        \
    \    val second = l(i+1)\n            counter.put(first, (counter.get(first)\n\
    \                .getOrElse(0) + 1))\n            counter.put(second, (counter.get(second)\n\
    \                .getOrElse(0) + 1))\n            if (counter.get(first).getOrElse(0)\
    \ == counter.get(second).getOrElse(0)) true\n            else false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi8irmlq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvi8irmlq.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m until l.length)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Boolean\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mfirst\e[0m = l(i)\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36msecond\e\
    [0m = l(i+\e[31m1\e[0m)\n\e[31m22 |\e[0m            counter.put(first, (counter.get(first)\n\
    \e[31m23 |\e[0m                .getOrElse(\e[31m0\e[0m) + \e[31m1\e[0m))\n\e[31m24\
    \ |\e[0m            counter.put(second, (counter.get(second)\n\e[31m25 |\e[0m\
    \                .getOrElse(\e[31m0\e[0m) + \e[31m1\e[0m))\n\e[31m26 |\e[0m  \
    \          \e[33mif\e[0m (counter.get(first).getOrElse(\e[31m0\e[0m) == counter.get(second).getOrElse(\e\
    [31m0\e[0m)) \e[31mtrue\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m \e[31mfalse\e\
    [0m\n\e[31m28 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val result = if (l.length == 1) false else\n\
    \        l.foldLeft(false)(_ && (_ + _) == 0)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcb4oopgn.scala:19:26 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        l.foldLeft(\e[31mfalse\e[0m)(_ && (_ + _) ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 2\n1 error found\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val m = l\n        val n = (m.length/2)\n\
    \        var i = m.length/2-1\n        var j = 0\n        while (i>=0){\n    \
    \      while (j < n && m(j+i) == m(j)) {\n              j += 1\n          }\n\
    \          if (j == n){\n            return true\n          }\n          i--\n\
    \          j = 0\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpof9ssmen.scala:30:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m          j = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \         ^\e[0m\n\e[31m   |\e[0m            end of statement expected but '='\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpof9ssmen.scala:29:11 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m          i--\n\e[31m\e[31m   |\e[0m          ^^^\e[0m\n\
    \e[31m   |\e[0m          value -- is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var flag : Boolean = false\n        var\
    \ sum : Long = 0\n        var a : Long = 0\n        var b : Long = 0\n       \
    \ var c : Long = 0\n        for(i <- 0 until l.length) {\n            sum += l(i)\n\
    \            if(sum == 0) {\n                a = l(i)\n                flag =\
    \ true\n            } else {\n                b = l(i)\n                c = a\
    \ - b\n                if(c != 0) {\n                    flag = true\n       \
    \         } else {\n                    sum = sum - a\n                }\n   \
    \         }\n        }\n        if(!flag) {\n            false\n        } else\
    \ {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7yl1fwl.scala:45)\n\tat Problem.main(tmpw7yl1fwl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length < 2) {\n            return\
    \ false\n        }\n\n        val first = l.head + l.tail.head\n        val rest\
    \ = l.tail.tail\n\n        rest.forall { z =>\n            if (z != 0) {\n   \
    \             val z = first + z\n                val next = rest - z\n       \
    \         if (next == Nil) {\n                    return true\n              \
    \  }\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnac5f1g6.scala:27:32 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mz\e[0m = first +\
    \ z\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Recursive \e[33mvalue\e[0m \e[35mz\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnac5f1g6.scala:28:32\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e\
    [0m \e[36mnext\e[0m = rest - z\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // If there are no integers left in the\
    \ list, then there are only two distinct elements that sum to zero.\n        //\
    \ If there are multiple distinct elements that sum to zero, then there are two\
    \ pairs that sum to zero.\n        // If there is one distinct element that sums\
    \ to zero, then there is only one pair that sums to zero.\n        // The function\
    \ should return true if the list contains at least two distinct elements that\
    \ sum to zero.\n        // If there is no distinct element that sums to zero,\
    \ then the function should return false.\n        if (l.isEmpty) true\n      \
    \  else {\n            // Keep track of elements that sum to zero\n          \
    \  var sumToZero: List[Long] = Nil\n            // Keep track of pairs that sum\
    \ to zero\n            var pairsToZero: List[(Long, Long)] = Nil\n           \
    \ for (i <- l) {\n                // If the current element is 0, then the sum\
    \ to zero list is empty\n                if (i == 0L) {\n                    //\
    \ If there are no pairs that sum to zero, then there are two distinct elements\
    \ that sum to zero\n                    if (pairsToZero.isEmpty) true\n      \
    \              // Else there are two pairs that sum to zero\n                \
    \    else {\n                        // If the first pair in the pairs sum to\
    \ zero list is equal to the first element in the sum to zero list, then there\
    \ are two pairs that sum to zero.\n                        if (pairsToZero(0)\
    \ == sumToZero(0)) pairsSumToZero(pairsToZero.drop(1))\n                     \
    \   // Else the two pairs that sum to zero do not match the first element in the\
    \ sum to zero list\n                        else pairsSumToZero(pairsToZero.take(2))\n\
    \                    }\n                // Else the current element is not 0\n\
    \                } else {\n                    // If there are elements in the\
    \ sum to zero list, then there are two distinct elements that sum to zero.\n \
    \                   if (sumToZero.isEmpty) true\n                    // Else there\
    \ are multiple distinct elements that sum to zero.\n                    else {\n\
    \                        // If the second element in the sum to zero list does\
    \ not equal the first element in the sum to zero list, then there are multiple\
    \ pairs that sum to zero.\n                        if (sumToZero(1) == sumToZero(0))\
    \ pairsSumToZero(pairsToZero.drop(2))\n                        // Else there are\
    \ one distinct element that sums to zero.\n                        else pairsSumToZero(pairsToZero.take(1))\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9gck6c6g.scala:37:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        \e[33mif\e[0m (pairsToZero(\e\
    [31m0\e[0m) == sumToZero(\e[31m0\e[0m)) pairsSumToZero(pairsToZero.drop(\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  Values of types (Long, Long) and Long cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9gck6c6g.scala:37:91\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                        \e[33mif\e\
    [0m (pairsToZero(\e[31m0\e[0m) == sumToZero(\e[31m0\e[0m)) pairsSumToZero(pairsToZero.drop(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                          Found:    List[\e[1m\e[31m(\e[0mLong\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m\
    \   |\e[0m                                            Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9gck6c6g.scala:39:60\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                        \e[33melse\e\
    [0m pairsSumToZero(pairsToZero.take(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    List[\e[1m\e[31m(\e[0mLong\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m\
    \   |\e[0m                                            Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9gck6c6g.scala:48:89\
    \ --------------------\e[0m\e[0m\n\e[31m48 |\e[0m                        \e[33mif\e\
    [0m (sumToZero(\e[31m1\e[0m) == sumToZero(\e[31m0\e[0m)) pairsSumToZero(pairsToZero.drop(\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660009707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sum = l.foldLeft(0l){ (sum, num) =>\
    \ sum + num }\n        (sum == 0l) && (l.length == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp507e_fjs.scala:25)\n\tat Problem.main(tmp507e_fjs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val a = l.toSet\n        val b = a.filter(_\
    \ > 0)\n        val c = b.filter(_ > 0)\n        if ((c.isEmpty) || (a.isEmpty))\
    \ {\n            false\n        } else {\n            val zeros = c - (a.subsetOf(b))\n\
    \            if (zeros.isEmpty)\n                true\n            else\n    \
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ounwu0x.scala:24:39\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mzeros\e[0m = c - (a.subsetOf(b))\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    Boolean\n\e[31m   |\e[0m                             Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // the accumulator is of type Pair, which\
    \ has a val type member which is a\n        // Set of pairs of Longs.\n      \
    \  val accumulator = mutable.HashMap.empty[Pair[Long, Long], Set[Long]]\n    \
    \    for (i <- 0 to l.length) {\n            val currentPair = Pair(l(i), accumulator(currentPair))\n\
    \            accumulator += currentPair\n        }\n        // the accumulator\
    \ hash map is of type Map[Pair[Long, Long], Set[Long]], where each\n        //\
    \ key-value pair consists of the current pair and an empty Set\n        if (accumulator\
    \ == Map.empty[Pair[Long, Long], Set[Long]]) false\n        else true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yszg_s2.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36maccumulator\e[0m = mutable.HashMap.empty[\e\
    [35mPair\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m], \e[35mSet\e[0m[\e[35mLong\e[0m]]\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Not found: type\
    \ Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yszg_s2.scala:20:26\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36maccumulator\e[0m = mutable.HashMap.empty[\e[35mPair\e[0m[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m], \e[35mSet\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0yszg_s2.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcurrentPair\e[0m = Pair(l(i), accumulator(currentPair))\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                   Not found: Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(_ % 2)\n        pairs.exists(pairs\
    \ => pairs(0l).sum == pairs(1l).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8evydg2.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        pairs.exists(\e[36mpairs\e\
    [0m => pairs(\e[31m0l\e[0m).sum == pairs(\e[31m1l\e[0m).sum)\n\e[31m\e[31m   |\e\
    [0m                                    ^^\e[0m\n\e[31m   |\e[0m              \
    \                      Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m     \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(_ * -1)\n       \
    \ pairs.forall {\n            case (k, v) => k._2 != 0 && v == 0 && (k._1.toLong\
    \ - k._2.toLong) != 0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_sj78ah0.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (k, v) => k._2 != \e[31m0\e\
    [0m && v == \e[31m0\e[0m && (k._1.toLong - k._2.toLong) != \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                value _2 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) false\n        else\
    \ if (l.length == 1) true\n        else (l.tail.tail.head + l.head == 0l) &\n\
    \        pairsSumToZero(l.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.pairsSumToZero(tmp639mlt5l.scala:20)\n\
    \tat Problem$.pairsSumToZero(tmp639mlt5l.scala:21)\n\tat Problem$.pairsSumToZero(tmp639mlt5l.scala:21)\n\
    \tat Problem$.main(tmp639mlt5l.scala:24)\n\tat Problem.main(tmp639mlt5l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val count = mutable.HashSet[Long]()\n \
    \       val result = mutable.HashSet[Long]()\n\n        for (i<- 0 until l.length)\
    \ {\n            val sum = (l(i) + l(i + 1)) / 2\n\n            if (count.contains(sum))\
    \ {\n                if (result.contains(sum) && result.size < 2) {\n        \
    \            println(s\"sum == 0 pair is $sum\")\n                    return true\n\
    \                } else {\n                    println(s\"sum == 0 pair is $sum,\
    \ result contains $result\")\n                    return false\n             \
    \   }\n            } else {\n                count.add(sum)\n                println(s\"\
    sum == 0 pair is $sum, count contains $count\")\n                result.add(sum)\n\
    \            }\n        }\n\n        println(s\"sum == 0 pair is $sum\")\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1spf92p.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb1spf92p.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb1spf92p.scala:39:36 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        println(\e[31ms\"sum == 0 pair is \e[0m$sum\e\
    [31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: sum\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(false) {\n            case ((false,\
    \ true, tail), n) => \n                if(n != 0l && n-1l == 0l) tail orElse false\n\
    \            case ((false, false, tail), n) => \n                if(n != 0l &&\
    \ n+1l == 0l) tail orElse false\n            case ((true, false, tail), n) =>\
    \ \n                if(n != 0l && n-1l != 0l) tail orElse true\n            case\
    \ ((true, true, tail), n) => \n                if(n != 0l && n+1l != 0l) tail\
    \ orElse true\n            case _ => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm0hiul0.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m(n != \e[31m0l\e[0m && n-\e\
    [31m1l\e[0m == \e[31m0l\e[0m) tail orElse \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value orElse is not a member of Any\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm0hiul0.scala:22:47 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(n != \e[31m0l\e[0m && n+\e\
    [31m1l\e[0m == \e[31m0l\e[0m) tail orElse \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value orElse is not a member of Any\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm0hiul0.scala:24:47 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m(n != \e[31m0l\e[0m && n-\e\
    [31m1l\e[0m != \e[31m0l\e[0m) tail orElse \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value orElse is not a member of Any\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm0hiul0.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m(n != \e[31m0l\e[0m && n+\e\
    [31m1l\e[0m != \e[31m0l\e[0m) tail orElse \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value orElse is not a member of Any\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) false\n        if (l.length\
    \ == 1) l.head == 0\n        else {\n            var firstElem = l.head\n    \
    \        var secondElem = l.head\n            l.tail.foreach{t => {\n        \
    \        if(t != 0)\n                    if(firstElem + t != 0) return false\n\
    \                    firstElem = t\n                    secondElem = firstElem\
    \ }\n            }\n            return firstElem + secondElem == 0\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp96frm0lb.scala:36)\n\tat Problem.main(tmp96frm0lb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sum : Long = l.foldLeft((0,0l)) {\n\
    \            case ((x, y), i) => x + i\n        }\n\n        if (sum < 0)\n  \
    \          false\n        else if (sum == 0)\n            true\n        else\n\
    \            pairsSumToZero(l.tail) && pairsSumToZero(l.init)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcwqq9eh1.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m ((x,\
    \ y), i) => x + i\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    Long\n\e[31m   |\e\
    [0m                                Required: \e[1m\e[32m(\e[0m\e[1m\e[32mInt\e\
    [0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mLong\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val nums = new HashSet[Long]()\n      \
    \  l.foreach(x => if (nums.contains(x + x)) nums.remove(x))\n        nums.size\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedc07amc.scala:23)\n\tat Problem.main(tmpedc07amc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l\n            .distinct\n\
    \            .groupBy(x => math.abs(x))\n            .filter(_._2.size == 2)\n\
    \            .map(_._1)\n        pairs.forall(pair => pairs.contains(pair + pairs.last))\
    \ || pairs.forall(pair => pairs.contains(pair - pairs.last))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vpp9bpy.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        pairs.forall(\e[36mpair\e[0m => pairs.contains(pair\
    \ + pairs.last)) || pairs.forall(\e[36mpair\e[0m => pairs.contains(pair - pairs.last))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue contains is not a member of scala.collection.immutable.Iterable[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vpp9bpy.scala:23:94 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        pairs.forall(\e[36mpair\e[0m => pairs.contains(pair\
    \ + pairs.last)) || pairs.forall(\e[36mpair\e[0m => pairs.contains(pair - pairs.last))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains\
    \ is not a member of scala.collection.immutable.Iterable[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.collection asJava\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\e\
    [31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.size != l.distinct && l.map(e => e).map(e\
    \ => if (e < 0) -e else e).distinct.size == 1 && l.map(e => e).map(e => if (e\
    \ < 0) -e else e).distinct.size == 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqb64_7bz.scala:18:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        l.size != l.distinct && l.map(\e[36me\e[0m =>\
    \ e).map(\e[36me\e[0m => \e[33mif\e[0m (e < \e[31m0\e[0m) -e \e[33melse\e[0m e).distinct.size\
    \ == \e[31m1\e[0m && l.map(\e[36me\e[0m => e).map(\e[36me\e[0m => \e[33mif\e[0m\
    \ (e < \e[31m0\e[0m) -e \e[33melse\e[0m e).distinct.size == \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values of\
    \ types Int and List[Long] cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.distinct.length == l.length && l.distinct\
    \ zip l map {\n            case (l,l2) => l2.reduce(_ + _) == 0\n        } forall\
    \ {\n            case true => false\n            case _ => true\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1y1vi8w.scala:18:43\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        l.distinct.length ==\
    \ l.length && l.distinct zip l map {\n\e[31m\e[31m   |\e[0m                  \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                    Found:    List[Long]\n\e[31m   |\e[0m                   \
    \                      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(e => e%2==0).filter(p\
    \ => p._2.length == 2).map(e => (e._1, e._2.last)).toList\n        val nonPairs\
    \ = l.filterNot(e => e % 2 == 0)\n        val zero = pairs.isEmpty\n        if\
    \ (nonPairs.isEmpty) zero else pairs.exists(e => e._1._1 + e._2._1 == 0) && nonPairs.size\
    \ == nonPairs.distinct && zero\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrxympt3.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (nonPairs.isEmpty) zero \e[33melse\e\
    [0m pairs.exists(\e[36me\e[0m => e._1._1 + e._2._1 == \e[31m0\e[0m) && nonPairs.size\
    \ == nonPairs.distinct && zero\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                        value _1 is not a member of Boolean\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpnrxympt3.scala:21:85 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (nonPairs.isEmpty) zero \e[33melse\e\
    [0m pairs.exists(\e[36me\e[0m => e._1._1 + e._2._1 == \e[31m0\e[0m) && nonPairs.size\
    \ == nonPairs.distinct && zero\n\e[31m\e[31m   |\e[0m                        \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Int and List[Long] cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long, List[Long]]()\n\
    \        for (i <- l) { map.getOrElse(i, Nil) += i }\n        if (map.isEmpty)\
    \ {\n            false\n        } else {\n            val keys = map.keys\n  \
    \          if (keys.size == 2) \n                map.get(keys.head).last == 0l.toLong\n\
    \            else \n                false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp94kv9zep.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var max: Long = l.head\n        var min:\
    \ Long = l.last\n        l.tail.foreach { x =>\n            if(x.toLong + min\
    \ > max)\n                max = x.toLong\n            if(x.toLong + max > 0)\n\
    \                return false\n            max = max * -1\n            min = min\
    \ * -1\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoovyfps4.scala:34)\n\tat Problem.main(tmpoovyfps4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val xs = l.distinct\n        var total\
    \ = 0l\n        for (x <- xs) {\n            total += x\n            if (total\
    \ == 0l) {\n                return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk0y3nami.scala:32)\n\tat Problem.main(tmpk0y3nami.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.size\n        var sum = 0\n \
    \       var i = 0\n        var j = 0\n        var k = 0\n        var isSummingPair\
    \ = false\n        while (i < n) {\n            while (j < n) {\n            \
    \    val temp = l(i) + l(j)\n                sum = if (sum == 0) temp else (temp\
    \ % sum)\n                j += 1\n            }\n            isSummingPair = sum\
    \ > 0\n            if (isSummingPair) break\n            j += 1\n            i\
    \ += 1\n        }\n        isSummingPair\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkoogmrev.scala:27:36\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                sum = \e[33mif\e\
    [0m (sum == \e[31m0\e[0m) temp \e[33melse\e[0m (temp % sum)\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \                        Found:    (temp : Long)\n\e[31m   |\e[0m            \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkoogmrev.scala:27:47 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                sum = \e[33mif\e[0m (sum == \e[31m0\e[0m)\
    \ temp \e[33melse\e[0m (temp % sum)\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Found:    Long\n\e[31m   |\e[0m              \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkoogmrev.scala:31:31 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (isSummingPair) break\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l groupBy {\n            case\
    \ x if x > 0 => x\n            case _ => 0\n        }\n        pairs.exists(_._2.size\
    \ == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3a6j9777.scala:25)\n\tat Problem.main(tmp3a6j9777.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set = mutable.Set.empty[Long]\n   \
    \     l foreach {x => set += x}\n        val res = !set.toSet.size == l.size -\
    \ 1\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqq5kgw8s.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n       var i = 0\n       var j = 1\n       var\
    \ sum = 0\n       while (j < l.length) {\n          sum += j\n          if (sum\
    \ == 0) return true\n          i += 1\n          j += 1\n       }\n       return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fxz3q4g.scala:33)\n\tat Problem.main(tmp_fxz3q4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def pairs(a : Long, b : Long) : List[(Long,\
    \ Long)] = {\n            if (a > b) List((a, b))\n            else List( (a,\
    \ b), (a, b - a) :: pairs(a + b, b) )\n        }\n\n        l match {\n      \
    \      case Nil => false\n            case a :: b :: Nil =>\n                val\
    \ (aa, bb) = a\n                val (ba, bb) = b\n                aa + bb == 0L\
    \ && aa + ba == bb\n            case a :: b :: c :: Nil =>\n                val\
    \ (aa, bb) = a\n                val (ba, bb, cc) = b\n                aa + bb\
    \ == 0L && aa + bb == bb && aa + cc == 0L && aa + ba == bb\n            case a\
    \ :: b :: c :: d :: Nil =>\n                val (aa, bb) = a\n               \
    \ val (ba, bb, cc, dd) = c\n                aa + bb == 0L && aa + bb == bb &&\
    \ aa + cc == 0L && aa + bb == bb && aa + dd == cc\n            case a :: b ::\
    \ c :: d :: e :: Nil =>\n                val (aa, bb) = a\n                val\
    \ (ba, bb, cc, dd, ee) = c\n                aa + bb == 0L && aa + bb == bb &&\
    \ aa + cc == 0L && aa + bb == bb && aa + dd == cc\n            case a :: b ::\
    \ c :: d :: e :: f :: Nil =>\n                val (aa, bb) = a\n             \
    \   val (ba, bb, cc, dd, ee, ff) = c\n                aa + bb == 0L && aa + bb\
    \ == bb && aa + cc == 0L && aa + bb == bb && aa + dd == cc\n            case a\
    \ :: b :: c :: d :: e :: f :: g :: Nil =>\n                val (aa, bb) = a\n\
    \                val (ba, bb, cc, dd, ee, ff, gg) = c\n                aa + bb\
    \ == 0L && aa + bb == bb && aa + cc == 0L && aa + bb == bb && aa + dd == cc\n\
    \            case a :: b :: c :: d :: e :: f :: g :: h :: Nil =>\n           \
    \     val (aa, bb) = a\n                val (ba, bb, cc, dd, ee, ff, gg, hh) =\
    \ c\n                aa + bb == 0L && aa + bb == bb && aa + cc == 0L && aa + bb\
    \ == bb && aa + dd == cc\n            case a :: b :: c :: d :: e :: f :: g ::\
    \ h :: i :: Nil =>\n                \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8s6lkjd.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8s6lkjd.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m List(\
    \ (a, b), (a, b - a) :: pairs(a + b, b) )\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m(Long,\
    \ Long)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                               Required:\
    \ (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd8s6lkjd.scala:27:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e\
    [0m (ba, bb) = b\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e[31m\
    \   |\e[0mbb is already defined as \e[33mvalue\e[0m \e[35mbb\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd8s6lkjd.scala:28:19\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                aa + bb ==\
    \ \e[31m0L\e[0m && aa + ba == bb\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpd8s6lkjd.scala:31:25 ---------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                \e[33mval\e[0m (ba, bb, cc) = b\n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0mbb is already defined\
    \ as \e[33mvalue\e[0m \e[35mbb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overload"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.distinct\n        if (pairs.size\
    \ == 0) {\n            return false\n        }\n        var sum = 0L\n       \
    \ val pairsWithSum = pairs.map { n => sum <- sum + n; n }\n        for (a <- pairsWithSum)\
    \ {\n            for (b <- pairsWithSum) {\n                if (a + b == 0L &&\
    \ a == b) {\n                    return true\n                }\n            \
    \    if (a == b && (a == 0 || b == 0)) {\n                    return false\n \
    \               }\n            }\n        }\n        return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl6j1tyvj.scala:23:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpairsWithSum\e[0m = pairs.map\
    \ { \e[36mn\e[0m => sum <- sum + n; n }\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^\e[0m\n\e[31m   |\e[0m                   \
    \             end of statement expected but '<-' found\n1 error found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.forall{i => l.contains(i) && l.filter(x\
    \ => x == i).size == 1}\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk456qjzl.scala:21)\n\tat Problem.main(tmpk456qjzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.flatMap(x => (x to x + 1)\
    \ collect {\n            x => (x, x + 1)\n        })\n        val result = pairs.toSet.size\
    \ == 1\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8gp3aubt.scala:28)\n\tat Problem.main(tmp8gp3aubt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) l.length == 1 && l.head\
    \ == 0\n        else {\n            val lastIndex = l.length - 1\n           \
    \ val firstElement = l.head\n            val secondElement = l.tail.head\n   \
    \         val currentSum = firstElement + secondElement\n            val previousSum\
    \ = l.tail.tail.head\n\n            if (currentSum == 0 || previousSum == 0 ||\
    \ currentSum == previousSum) {\n                return false\n            }\n\
    \            else {\n                println(l.head)\n                println(l.tail)\n\
    \                println(currentSum)\n                println(previousSum)\n \
    \               println(currentSum - previousSum)\n                println(currentSum\
    \ - previousSum == 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                println(currentSum - previousSum != 0)\n                println(currentSum\
    \ - previousSum != 0)\n                println(currentSum - previousSum != 0)\n\
    \                print\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ng_i_6x.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ng_i_6x.scala:84:1\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp9ng_i_6x.scala:72:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val zero = l.filter(_ == 0)\n        if\
    \ (zero.isEmpty) false\n        else {\n            val list: List[Long] = l filter\
    \ (x => x != 0)\n            val first = list.head\n            val rest = list.tail\n\
    \            val sum = 0l\n            for(x <- rest){\n                val y\
    \ = x - first\n                sum += y\n            }\n            if (sum ==\
    \ 0l) return false\n            else return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_11bfm5_.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                sum += y\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val lList = l.toList\n        var i : Int\
    \ = 0\n        var j : Int = 0\n        val pairs = List(List(l(i), l(i+1)), List(l(i+1),\
    \ l(i+2)), List(l(i+1), l(i+2)))\n        var sum : Long = 0\n        while (\
    \ i < lList.length-1 && j < lList.length-1){\n            sum = lList(i) + lList(j)\
    \ + pairs(i).head + pairs(j).head\n            if (sum == 0)\n               \
    \ i += 1\n            else\n                j += 1\n        }\n        if (i <\
    \ lList.length-1)\n            pairsSumToZero(l.tail)\n        else\n        \
    \    j >= lList.length-1\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.pairsSumToZero(tmp_di96i6i.scala:21)\n\tat Problem$.main(tmp_di96i6i.scala:36)\n\
    \tat Problem.main(tmp_di96i6i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = scala.collection.mutable.HashSet[(Long,Long)]()\n\
    \        l.foreach {\n            pairs += ((_,l(_)))\n        }\n        pairs.size\
    \ > 0 && pairs.size == l.length && pairs.forall { case (l, r) => l+r==0l}\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2pcgdyv3.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            pairs += ((_,l(_)))\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => (_$1, _$2 => l(_$2)).\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long, Int]()\n\
    \        for ( e <- l) {\n            val i = map.getOrElseUpdate(e, 0)\n    \
    \        i += 1\n            map.put(e, i)\n        }\n        if (map.size <\
    \ 2) false\n        else if (map.get(1l.toLong) + map.get(3l.toLong) == 0) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwbuucrw.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.count(_ > 0) == l.count(_ == 0) || l.count(_\
    \ < 0) == l.count(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gzbf6yp.scala:23)\n\tat Problem.main(tmp4gzbf6yp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // sort list first\n        val sortedList\
    \ = l.sorted\n        // use two pointers, one starts at the beginning of the\
    \ list, and one at the\n        // current element of the list\n        val firstElem\
    \ = sortedList(0)\n        val secondElem = sortedList(1)\n        if (firstElem\
    \ == 0l && secondElem == 0l) {\n            return true\n        } else if (firstElem\
    \ == 0l && secondElem != 0l) {\n            return false\n        } else if (firstElem\
    \ != 0l && secondElem == 0l) {\n            return false\n        }\n        var\
    \ thirdElem = sortedList(2)\n        while (thirdElem != 0l) {\n            val\
    \ pair = sortedList(thirdElem)\n            thirdElem += 1\n            val currentFirstElem\
    \ = sortedList(thirdElem)\n            thirdElem += 1\n            val currentSecondElem\
    \ = sortedList(thirdElem)\n            if (currentFirstElem + currentSecondElem\
    \ == 0l) {\n                val newPair = currentFirstElem + currentSecondElem\n\
    \                if (newPair != 0l) {\n                    val oldPair = sortedList(thirdElem)\n\
    \                    thirdElem += 1\n                    if (oldPair == newPair)\
    \ {\n                        return pairsSumToZero(l)\n                    }\n\
    \                }\n            }\n        }\n        return pairsSumToZero(l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppalovigk.scala:33:34\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e\
    [36mpair\e[0m = sortedList(thirdElem)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \      Found:    (thirdElem : Long)\n\e[31m   |\e[0m                         \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppalovigk.scala:35:46\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e\
    [36mcurrentFirstElem\e[0m = sortedList(thirdElem)\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                        Found:    (thirdElem : Long)\n\e[31m\
    \   |\e[0m                                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppalovigk.scala:37:47 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mcurrentSecondElem\e\
    [0m = sortedList(thirdElem)\n\e[31m\e[31m   |\e[0m                           \
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                   Found:    (thirdElem : Long)\n\e[31m   |\e[0m            \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppalovigk.scala:41:45 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mval\e[0m \e[36moldPair\e[0m\
    \ = sortedList(thirdElem)\n\e[31m\e[31m   |\e[0m                             \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \               Found:    (thirdElem : Long)\n\e[31m   |\e[0m                \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.size\n        // O(n)\n     \
    \   var i = 0\n        var j = 1\n        var k = 0\n        // O(n)\n       \
    \ while (i < n) {\n            if (j > n) {\n                false\n         \
    \   } else {\n                if (l(i) + l(j) == 0) {\n                    k =\
    \ k + 1\n                    i = i + 1\n                    j = j + 1\n      \
    \          } else {\n                    k = k\n                }\n          \
    \  }\n        }\n        if (k == n) {\n            true\n        } else {\n \
    \           false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) true\n        else {\n \
    \           val pairs = l.grouped(2).filter{case (x, y) => x + y == 0}\n     \
    \       if (pairs.size == 2) pairs.toList.length == 1\n            else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeejljoqc.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mpairs\e[0m = l.grouped(\e\
    [31m2\e[0m).filter{\e[33mcase\e[0m (x, y) => x + y == \e[31m0\e[0m}\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs : List[Long] = Nil\n        var\
    \ pair : List[Long] = Nil\n        var sum : Long = 0\n        for (i <- l) {\n\
    \            sum += i\n            if (pairs.isEmpty) {\n                pairs\
    \ = List(List(sum))\n                pair = List(sum)\n            } else if (sum\
    \ == pairs.last.head) {\n                pairs = pairs :+ (sum)\n            \
    \    pair = pairs :+ (sum)\n            } else if (sum > pairs.last.head) {\n\
    \                pairs = pairs :+ (sum)\n                pair = pairs :+ (sum)\n\
    \            }\n        }\n        return pairs.distinct.size == 2\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjonj0agy.scala:24:33\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                pairs = List(List(sum))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                             Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjonj0agy.scala:26:41\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (sum == pairs.last.head) {\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           value head is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjonj0agy.scala:29:40 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (sum > pairs.last.head) {\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value head is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val m = l.toSet\n        l.filter (i =>\
    \ m.contains(i)).isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposn5llwx.scala:25)\n\tat Problem.main(tmposn5llwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val a = l\n        val sum = 0\n      \
    \  // create list of pairs of adjacent elements \n        // with adjacent elements\
    \ having the same value\n        val pairs: List[(Long, Long)] = (a.zip(a diff\
    \ 1 ) ++ a drop 1).map(x => (x._1, x._2))\n        // check if there is at least\
    \ one pair with zero\n        // If not then return false\n        pairs.exists(_._2\
    \ == 0) == true\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9qisiqd.scala:22:54\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpairs\e\
    [0m: \e[35mList\e[0m[(\e[35mLong\e[0m, \e[35mLong\e[0m)] = (a.zip(a diff \e[31m1\e\
    [0m ) ++ a drop \e[31m1\e[0m).map(\e[36mx\e[0m => (x._1, x._2))\n\e[31m\e[31m\
    \   |\e[0m                                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (\e[31m1\e[0m : Int)\n\
    \e[31m   |\e[0m                                    Required: scala.collection.Seq[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9qisiqd.scala:22:83\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mpairs\e[0m: \e[35mList\e[0m[(\e[35mLong\e[0m, \e[35mLong\e[0m)] = (a.zip(a\
    \ diff \e[31m1\e[0m ) ++ a drop \e[31m1\e[0m).map(\e[36mx\e[0m => (x._1, x._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          value _1 is not a member of Matchable\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpk9qisiqd.scala:22:89 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m: \e[35mList\e[0m[(\e[35mLong\e\
    [0m, \e[35mLong\e[0m)] = (a.zip(a diff \e[31m1\e[0m ) ++ a drop \e[31m1\e[0m).map(\e\
    [36mx\e[0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m                           \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value _2 is not a member of Matchable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) false\n        else\
    \ {\n            val pairs = l.grouped(2).filter(_ => _.sum > 0)\n           \
    \ val pairCount = pairs.size\n            if (pairCount == 0) false\n        \
    \    else if (pairCount == 1) true\n            else pairsSumToZero(pairs.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpas0zz9sv.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mpairs\e[0m = l.grouped(\e\
    [31m2\e[0m).filter(_ => _.sum > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.sum > 0.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpas0zz9sv.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m pairsSumToZero(pairs.tail)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue tail is not a member of Iterator[List[Long]] - did you mean pairs.take?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def pairSum(i : Long, j : Long) : Boolean\
    \ = {\n            if (i == 0l && j == 0l) return true\n            else if ((i\
    \ == 0l || j == 0l) && i == j) return true\n            else if (i != 0l && j\
    \ != 0l) Math.abs(i - j) == 0\n            else false\n        }\n        val\
    \ pairs = l.toSet.toList.sortWith(_ < _).map(i => (i.toLong, i.toLong))\n    \
    \    for ((i, j) <- pairs) {\n            if (!pairSum(i, j) && pairSum(j, i))\
    \ {\n                return false\n            }\n        }\n        true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgc45hbs1.scala:33)\n\tat Problem.main(tmpgc45hbs1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n            case Nil => false\n\
    \            case x :: Nil => true\n            case x :: xs => if (x + xs.sum\
    \ == 0) true else pairsSumToZero(xs)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppit8d3rt.scala:25)\n\tat Problem.main(tmppit8d3rt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.map( _+_ )\n        pairs.distinct().size\
    \ < pairs.size\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpxs9uu6fl.scala:18:27 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = l.map( _+_\
    \ )\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m\
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmpxs9uu6fl.scala:19:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        pairs.distinct().size < pairs.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for\
    \ parameter n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e\
    [0m: (n: Int): Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1660009724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(l => l).filter(_._2.size\
    \ == 1).map(_._1)\n        pairs.forall(x => x.filter(_ != 0).sum == 0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpscsgmkux.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        pairs.forall(\e[36mx\e[0m => x.filter(_ != \e\
    [31m0\e[0m).sum == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value filter is not\
    \ a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var a = l\n        val n = l.length\n \
    \       for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n       \
    \         if (l(i) + l(j) == 0)\n                    return true\n           \
    \ }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.pairsSumToZero$$anonfun$1$$anonfun$1(tmp8o363x5d.scala:22)\n\tat\
    \ scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\t\
    at scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.pairsSumToZero$$anonfun$1(tmp8o363x5d.scala:24)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.pairsSumToZero(tmp8o363x5d.scala:25)\n\
    \tat Problem$.main(tmp8o363x5d.scala:29)\n\tat Problem.main(tmp8o363x5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tool"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var flag = false;\n        for(i <- 0 until\
    \ l.length-1){\n            var sum = 0\n            for(j <- 0 until i){\n  \
    \              sum += l(i-j);\n            }\n            if(sum != 0){\n    \
    \            flag = true\n                return true\n            }\n       \
    \ }\n        flag = false\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp75k83m1t.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                sum += l(i-j);\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      val pairs = l.groupBy( x => x/2 )\n     \
    \ pairs.map( x => x(1)-x).forall( x => x == 0 )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph2qx49rw.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      pairs.map( \e[36mx\e[0m => x(\e[31m1\e[0m)-x).forall(\
    \ \e[36mx\e[0m => x == \e[31m0\e[0m )\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // TODO: Write a function that given a\
    \ list and a target number, finds the pairs\n        //       of the list with\
    \ that target that sum to that target number.\n        //       For example, given\
    \ l=[1, 3, -3, 5, -7] and target=5 we would return\n        //       pairs = [[1,\
    \ 3], [-3, 5, -7]].\n\n        var pairs : List[List[Long]] = None\n        for\
    \ (i<- l ) {\n            for (j<- l ) {\n                if(i != j && i + j ==\
    \ 0 ) {\n                    if(pairs == None) {\n                        pairs\
    \ = List(List(i))\n                    }\n                    else {\n       \
    \                 pairs = pairs :+ List(i)\n                    }\n          \
    \      }\n            }\n        }\n        if(pairs == None) {\n            pairs\
    \ = List(List(l.toLong))\n        }\n        else pairs\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy6xd5vp4.scala:23:39\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e\
    [0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]] = None\n\e[31m\e[31m \
    \  |\e[0m                                       ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Found:    None.type\n\e[31m   |\e[0m    \
    \                                   Required: List[List[Long]]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpy6xd5vp4.scala:27:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e[0m(pairs == None) {\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types List[List[Long]] and object None cannot be compared with == or !=\n\
    \e[31m\e[31m-- Error: /tmp/tmpy6xd5vp4.scala:36:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mif\e[0m(pairs == None) {\n\e[31m\e[31m\
    \   |\e[0m           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types List[List[Long]]\
    \ and object None cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpy6xd5vp4.scala:37:32 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m            pairs = List(List(l.toLong))\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpy6xd5vp4.scala:39:13 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33melse\e[0m pairs\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (pairs : List[List[Long]])\n\
    \e[31m   |\e[0m             Required: Boolean\n\e["
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(x => math.abs(x))\n\
    \        pairs.exists(x => x._2.size < 2) || pairs.exists(x => x._2.size == 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1_6_7d7.scala:22)\n\tat Problem.main(tmpt1_6_7d7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var count = 0\n        for (x <- l)\n \
    \           count += x\n        count == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6pzua42.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            count += x\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(false)((acc, el) =>\n      \
    \      if (acc && el != 0l) {\n                val others = l.filter( v => v !=\
    \ el )\n                if (others.forall( v => v == el.longValue)) {\n      \
    \              acc = false\n                }\n            }\n            acc\n\
    \        )\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2gdypw_o.scala:22:24 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    acc = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Reassignment to val acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // Write your code here\n        val pairs\
    \ = l.groupBy(i => (i % 2))\n        pairs.exists(x => (x._2 - x._1).isZero)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqg5ambcv.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        pairs.exists(\e[36mx\e[0m => (x._2 - x._1).isZero)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) false\n        else\
    \ if (l.length == 1) true\n        else (l.tail.zip(l.tail.tail).forall { case\
    \ (y,z) => y + z == 0 })\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nud9dwh.scala:26)\n\tat Problem.main(tmp_nud9dwh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var total = 0L\n        l.foreach { elem\
    \ =>\n            if (elem.toLong > 0) {\n                total += elem.toLong\n\
    \            }\n        }\n        if (l.length == 0 || total < 0) {\n       \
    \     false\n        } else {\n            if (l.last.toLong == total) {\n   \
    \             false\n            } else {\n                pairsSumToZero(l.removeLast)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1995nm8r.scala:30:33 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                pairsSumToZero(l.removeLast)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value removeLast is not a member of List[Long]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val h = new HashSet[Long]()\n        for\
    \ (x <- l) if (h.contains(x + 0)) \n            false\n        else h.add(x +\
    \ 0)\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptla4bv1q.scala:25)\n\tat Problem.main(tmptla4bv1q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val count = l.filter(_ != 0l).size\n  \
    \      val pairs = (0 to (count / 2)) map (i => l(i), l(i + count / 2))\n    \
    \    pairs.size == 2 &&\n            pairs.exists(x => x._1 + x._2 == 0l)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwj90pf1.scala:19:57 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = (\e[31m0\e\
    [0m to (count / \e[31m2\e[0m)) map (\e[36mi\e[0m => l(i), l(i + count / \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \            Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkwj90pf1.scala:21:32 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            pairs.exists(\e[36mx\e[0m => x._1 + x._2 == \e[31m0l\e[0m)\n\e\
    [31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                            value _1 is not a member of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val m = l.map(_+1).sum\n        val n =\
    \ l.map(_-1).sum\n        if(m==0) {\n          val m = l.dropRight(1).map(_+1).sum\n\
    \          if(m==0) {\n            true\n          } else false\n        } else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy80mhmlk.scala:31)\n\tat Problem.main(tmpy80mhmlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = mutable.ListBuffer[Pair[Long,\
    \ Long]]()\n        for (x<-l) pairs += new Pair(x, l(x).toLong)\n        pairs.toList.distinct.length\
    \ == 2\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6pfzavaw.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mPair\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                        Not found: type Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6pfzavaw.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mPair\e[0m[\e[35mLong\e[0m, \e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.length < 2 ||\n        l.zip(l.tail).filter{\
    \ t => t._2 == 0 } != l.tail\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hu4ccp2.scala:22)\n\tat Problem.main(tmp0hu4ccp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0L\n        var count  = 0\n\
    \        for (e <- l) {\n            sum += e\n            count += 1\n      \
    \      if (sum == 0) return true\n        }\n        return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsmehr76.scala:31)\n\tat Problem.main(tmpgsmehr76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l groupBy (_ % 2) mapValues(_.length)\
    \ toSeq\n        pairs.forall { case (val, count) => val + count == 0 }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9rs64sol.scala:19:29 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        pairs.forall { \e[33mcase\e[0m (\e[33mval\e[0m,\
    \ count) => \e[33mval\e[0m + count == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^\e[0m\n\e[31m   |\e[0m                        \
    \     pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rs64sol.scala:19:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        pairs.forall {\
    \ \e[33mcase\e[0m (\e[33mval\e[0m, count) => \e[33mval\e[0m + count == \e[31m0\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                                 \
    \          ^\e[0m\n\e[31m   |\e[0m                                 '=' expected,\
    \ but integer literal found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9rs64sol.scala:19:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        pairs.forall\
    \ { \e[33mcase\e[0m (\e[33mval\e[0m, count) => \e[33mval\e[0m + count == \e[31m0\e\
    [0m }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Recursive \e\
    [33mvalue\e[0m \e[35mpairs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9rs64sol.scala:20:5 ---------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = l.groupBy(x => x % 2).toList\n\
    \        if(pairs.isEmpty) false\n        else if(pairs.size == 1) true\n    \
    \    else {\n            val pairs1 = pairs.filter(_._1 != 0)\n            val\
    \ pairs2 = pairs.filter(_._1 == 0)\n            if(pairs1 == pairs) true\n   \
    \         else if(pairs1 == pairs2.filter(_._1 != 0)) return true\n          \
    \  else if(pairs1 == pairs2.filter(_._1 == 0)) return true\n            else if(pairs1\
    \ == pairs2) return true\n            else return false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8em7ho0f.scala:35)\n\tat Problem.main(tmp8em7ho0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // Create a map of the pairs so that we\
    \ don't need to check the\n        // pair more than once.\n        val pairs\
    \ = l.groupBy(x => (x - l.head)).toMap\n        pairs.size == 1 && pairs.head._2\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp05s5dyhh.scala:21:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        pairs.size == \e[31m1\e[0m && pairs.head._2 ==\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types List[Long] and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // create a map of integers to their sums.\n\
    \        val map = l.map(x => (x, x)).groupBy(_._2).map(_._1).map(_._1)\n    \
    \    // check that there are at least two elements that have the same sum\n  \
    \      // and that there is not more than two elements that have the same sum\n\
    \        (map.size() >= 2) &&\n        (map.size <= 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmply0gj443.scala:19:67 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = l.map(\e[36mx\e\
    [0m => (x, x)).groupBy(_._2).map(_._1).map(_._1)\n\e[31m\e[31m   |\e[0m      \
    \                                                           ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmply0gj443.scala:22:13 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        (map.size() >= \e[31m2\e[0m) &&\n\e[31m\e[31m\
    \   |\e[0m         ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \e[33mmethod\e[0m \e\
    [35msize\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty)\n            return false\n\
    \        val s = l.tail\n        def f(x : Long, y : Long) : Boolean = {\n   \
    \         if (x == y)\n                return true\n            if (x > y)\n \
    \               return false\n            if (s == null || s.isEmpty)\n      \
    \          return true\n            val last = s.last\n            if (last -\
    \ x == 0)\n                return f(x + last, y)\n            if (last - x > 0)\n\
    \                return f(x + last, y - last)\n            val a = last - x\n\
    \            if (a < last)\n                return f(x + a, y - a)\n         \
    \   val b = last - y\n            if (b < a)\n                return f(x + b,\
    \ y - b)\n            val c = a - b\n            if (c < -2)\n               \
    \ return f(x + c, y - c)\n            val d = -2 - c\n            if (d < last)\n\
    \                return f(x + d, y - d)\n            false\n        }\n      \
    \  return f(l.head, l.last)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51szzgx9.scala:51)\n\tat Problem.main(tmp51szzgx9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty)\n            false\n   \
    \     val pairs = l zip l.tail\n        pairs.forall(x => x._1 + x._2 == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputaixhz5.scala:27)\n\tat Problem.main(tmputaixhz5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0\n        val pairs = mutable.Map[Long,\
    \ (Long, Long)]()\n        l.foreach(x => pairs += x -> (x+sum))\n        pairs.forall(p\
    \ => (p._1 - p._2) != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb7lwgh7.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = mutable.Map[\e\
    [35mLong\e[0m, (\e[35mLong\e[0m, \e[35mLong\e[0m)]()\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val m = l.map(x => (x + 0).toLong).distinct\n\
    \        val n = l.map(x => (x + 0).toLong).distinct.filter(x => l.contains(x))\n\
    \        m.size == n.size && m.size == l.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x2vzshh.scala:23)\n\tat Problem.main(tmp3x2vzshh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.isEmpty) {\n            true\n  \
    \      } else {\n            var sum = 0\n            var pair: Int = 0\n    \
    \        for (i <- 0 until l.length) {\n                sum += l(i)\n        \
    \        if (sum == 0) {\n                    pair += 1\n                    sum\
    \ = 0\n                }\n            }\n            if (pair > 1) {\n       \
    \         true\n            } else {\n                false\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfpmuylti.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                sum += l(i)\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      var i : Int = 0\n      while (i < l.length)\
    \ {\n          if (l(i) < 0 || l(i) > 0) {\n              val j = i + 1\n    \
    \          val k = j + 1\n              while (j < l.length) {\n             \
    \     if (l(i) + l(i) > 0 && l(i) + l(j) < 0 && l(j) + l(i) < 0 && l(j) + l(k)\
    \ < 0) {\n                      return true\n                  }\n           \
    \       j += 1\n              }\n          }\n          i += 1\n      }\n    \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa36b3a2g.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                  j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                  ^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean j.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.toList.foldLeft(false)( (acc, cur) =>\
    \ {\n            if(cur - acc + 1 != 0L)\n                return acc\n       \
    \     else\n                return acc\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp671h8spt.scala:19:19 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(cur - acc + \e[31m1\e[0m !=\
    \ \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((acc\
    \ : Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val distinctList = new mutable.LinkedHashSet[Long]()\n\
    \        for ((x, y) <- l zip l.tail) {\n            if (distinctList.contains(y\
    \ + x)) {\n                return false\n            } else {\n              \
    \  distinctList += y\n                distinctList += x\n            }\n     \
    \   }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8t1xwt74.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdistinctList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n            case List() => false\n\
    \            case a :: b::c if b - a == 0 :: c => true\n            case _ =>\
    \ pairsSumToZero(b.tail + a.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnucwlxbv.scala:20:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m a :: b::c \e[33mif\e[0m b\
    \ - a == \e[31m0\e[0m :: c => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  Values of types Long\
    \ and List[AnyVal] cannot be compared with == or !=\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpnucwlxbv.scala:21:37 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mcase\e[0m _ => pairsSumToZero(b.tail + a.tail)\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Not found: b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      var pairSet = collection.mutable.Set[(Long,\
    \ Long)]()\n      for (i <- 0 until l.length) {\n        val newPairSet = collection.mutable.Set[(Long,\
    \ Long)]()\n        for (j <- 0 until l.length) {\n          if (i != j && l(i)\
    \ + l(j) == 0) {\n            newPairSet = (l(i), l(j))\n            break\n \
    \         }\n        }\n        pairSet = pairSet ++ newPairSet\n      }\n   \
    \   pairSet.size == 2\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprbifowfu.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            newPairSet = (l(i),\
    \ l(j))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    (Long, Long)\n\e[31m   |\e[0m        \
    \            Required: scala.collection.mutable.Set[(Long, Long)]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprbifowfu.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            break\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = (1 to l.length).map (x => x ->\
    \ l.drop(x).foldLeft(0l) { (x,y) => x+y } ) \n        if (map.containKey(l.drop(1)))\
    \ map.get(l.drop(1)).getOrElse(0) == 0\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xha3dz0.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (map.containKey(l.drop(\e[31m1\e\
    [0m))) map.get(l.drop(\e[31m1\e[0m)).getOrElse(\e[31m0\e[0m) == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue containKey\
    \ is not a member of IndexedSeq[(Int, Long)] - did you mean map.contains?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xha3dz0.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (map.containKey(l.drop(\e[31m1\e\
    [0m))) map.get(l.drop(\e[31m1\e[0m)).getOrElse(\e[31m0\e[0m) == \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue get is not a member of IndexedSeq[(Int, Long)], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = List(Pair(0, l(0)))\n     \
    \   var current = Pair(0, l(0))\n        var hasPair = false\n        var sum\
    \ = 0\n        while (pairs.nonEmpty) {\n            current = pairs.head\n  \
    \          pairs = pairs.tail\n            if (current.second == 0) {\n      \
    \          hasPair = false\n            } else {\n                sum = current.first\
    \ + current.second\n                if (pairs.contains(pairs.find(_._2 == sum)))\
    \ {\n                    hasPair = true\n                } else {\n          \
    \          pairs = pairs :+ Pair(sum, 0)\n                }\n            }\n \
    \       }\n        !hasPair\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87xzvk_1.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = List(Pair(\e\
    [31m0\e[0m, l(\e[31m0\e[0m)))\n\e[31m\e[31m   |\e[0m                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: Pair\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp87xzvk_1.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mcurrent\e[0m = Pair(\e[31m0\e\
    [0m, l(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: Pair\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp87xzvk_1.scala:29:48 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m (pairs.contains(pairs.find(_._2\
    \ == sum))) {\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^\e[0m\n\e[31m   |\e[0m                                     value _2\
    \ is not a member of Nothing\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87xzvk_1.scala:32:37\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    pairs\
    \ = pairs :+ Pair(sum, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \      Not found: Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map = mutable.HashMap[(Long, Long),\
    \ Boolean]()\n        var sum : Long = 0\n        for (i <- l : i : 0) {\n   \
    \         if (map.get((sum, i))) {\n                return false\n           \
    \ } else {\n                map.put((sum, i), true)\n                sum += i\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaxr7s99p.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- l : \e[35mi\e[0m : \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m \
    \                       ')' expected, but ':' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpaxr7s99p.scala:18:18 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[(\e[35mLong\e\
    [0m, \e[35mLong\e[0m), \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxr7s99p.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i\
    \ <- l : \e[35mi\e[0m : \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               \
    \       ^\e[0m\n\e[31m   |\e[0m                      Not found: type i\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val l1 = l.toList.sortWith(_.compare(_.toLong)\
    \ < 0)\n        val l2 = l1.map(i => -i)\n        l2.distinct.size == 2 && l2.forall(i\
    \ => l1(i) < 0l) && l1.forall(i => l1(i) < 0l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbc1dndoe.scala:18:35 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ml1\e[0m = l.toList.sortWith(_.compare(_.toLong)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbc1dndoe.scala:20:51\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        l2.distinct.size == \e\
    [31m2\e[0m && l2.forall(\e[36mi\e[0m => l1(i) < \e[31m0l\e[0m) && l1.forall(\e\
    [36mi\e[0m => l1(i) < \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                               Found:    (i : Long)\n\e[31m   |\e[0m        \
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbc1dndoe.scala:20:81 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        l2.distinct.size == \e[31m2\e[0m && l2.forall(\e\
    [36mi\e[0m => l1(i) < \e[31m0l\e[0m) && l1.forall(\e[36mi\e[0m => l1(i) < \e[31m0l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                              Found:    (i : Long)\n\e[31m   |\e[0m         \
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sums = mutable.Map[(Long, Long), Double]()\n\
    \        l.foreach { n =>\n            val sum = (n*n).toLong\n            sums\
    \ += ((n, sum) -> sum.toDouble)\n        }\n        sums.size == 1 && !sums.contains(\
    \ _._1._1 == 0) && !sums.contains( _._1._1 == _._1._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_es809kr.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.Map[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m), \e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val a = l.toSet\n        val b = l.toSet.filter(_\
    \ > 0)\n        a.forall(b.contains)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8aw8_ku.scala:25)\n\tat Problem.main(tmpc8aw8_ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l match {\n          case Nil => false\n\
    \          case x :: Nil => true\n          case xs => val sum = sum(xs)\n   \
    \                if(sum == 0) pairsSumToZero(xs)\n                   else pairsSumToZero(List(xs.head,\
    \ sum - xs.head))\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplky2ff4z.scala:21:31 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mcase\e[0m xs => \e[33mval\e[0m sum =\
    \ sum(xs)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m\
    \   |\e[0m                               Recursive \e[33mvalue\e[0m \e[35msum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var last = 0l\n        val resultSet =\
    \ HashSet[Long]()\n        for (i <- l ) {\n            if (i != 0l) {\n     \
    \           if (last + i != 0l) {\n                    resultSet.add(last)\n \
    \                   resultSet.add(i)\n                } else {\n             \
    \       resultSet.add(i)\n                }\n            }\n            last +=\
    \ i\n        }\n        return !resultSet.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo73irkd8.scala:34)\n\tat Problem.main(tmpo73irkd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val zero = l.tail.foldLeft((0l, 0l)) {\
    \ (t,x) => (t._1 + x, t._2 + 1) }\n        !l.forall(_%2 == 0) && l.forall(_%2\
    \ == 1) && l.forall(t => t._2 == zero._1 + t._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpx5cz3r.scala:19:69 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        !l.forall(_%\e[31m2\e[0m == \e[31m0\e[0m) &&\
    \ l.forall(_%\e[31m2\e[0m == \e[31m1\e[0m) && l.forall(\e[36mt\e[0m => t._2 ==\
    \ zero._1 + t._1)\n\e[31m\e[31m   |\e[0m                                     \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                    value _2 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      val x = l.foldLeft(0)((a, b) => a + b)\n\
    \      (l.count(_ == x) == 2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkj8qdb3p.scala:18:38\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mx\e\
    [0m = l.foldLeft(\e[31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      Found:    Long\n\e[31m   |\e[0m       \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0L\n        var count = 0L\n\
    \        for (i <- l)\n            if (i != 0L) {\n                sum += i\n\
    \                count += 1L\n            }\n        if (count == 2L) {\n    \
    \        false\n        }\n        else {\n            (sum == 0L) && (count !=\
    \ 2L)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptuz2z25g.scala:36)\n\tat Problem.main(tmptuz2z25g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def pairs(l1: List[Long], l2: List[Long])\
    \ : List[(Long, Long)] = {\n            val l3 = l1 +: l2\n            val l4\
    \ = l3.toList\n            var i1 = 0\n            var i2 = 0\n            var\
    \ j1 = 1\n            var j2 = 1\n            var sum = 0\n            while (l4.nonEmpty)\
    \ {\n                if (i2 >= l4.length) {\n                    (i1, i2) = (j1,\
    \ j2)\n                    j1 += 1\n                    j2 = 1\n             \
    \       sum = 0\n                } else if (j2 >= l4.length) {\n             \
    \       (j1, j2) = (i1, i2)\n                    i1 += 1\n                   \
    \ i2 = 0\n                    sum = 0\n                } else {\n            \
    \        sum += l4(i2++) min l4(i1++)\n                }\n            }\n    \
    \        if (sum != 0) ((sum, i1), (i2, j2))\n            else false\n       \
    \ }\n        l match {\n            case Nil => false\n            case x :: xs\
    \ => pairs(xs, xs)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuryqffb5.scala:28:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    (i1, i2) = (j1, j2)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              end of statement expected but '=' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpuryqffb5.scala:33:29 -----------------------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                    (j1, j2) = (i1, i2)\n\e[31m\e[31m   |\e\
    [0m                             ^\e[0m\n\e[31m   |\e[0m                      \
    \       end of statement expected but '=' found\n\e[31m\e[31m-- [E018] Syntax\
    \ Error: /tmp/tmpuryqffb5.scala:38:34 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m                    sum += l4(i2++) min l4(i1++)\n\e[31m\e[31m  \
    \ |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m            \
    \                      expression expected but \e[31m')'\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuryqffb5.scala:38:47 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    sum += l4(i2++) min l4(i1++)\n\e\
    [31m\e[31m   |\e[0m                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuryqffb5.scala:38:24\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                    sum +=\
    \ l4(i2++) min l4(i1++)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuryqffb5.scala:41:26\
    \ --------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mif\e[0m (sum\
    \ != \e[31m0\e[0m) ((sum, i1), (i2, j2))\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Found:    ((Int, Int), (Int, Int))\n\e[31m   |\e[0m                    \
    \      Requi"
  stdout: ''
  timestamp: 1660009747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val (zeroList, nonZeroList) = l.partition(_.toLong\
    \ == 0)\n        if ((nonZeroList.length == 2) && !(nonZeroList(1).toLong == zeroList(1).toLong))\
    \ {\n            true\n        } else {\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplia9day1.scala:29)\n\tat Problem.main(tmplia9day1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0\n        val pairs = l groupBy\
    \ (_ % 2L) \n        pairs.foreach{ case (k,v) =>\n            val l = k.asInstanceOf[Long]\n\
    \            val v = v.asInstanceOf[List[Long]]\n            sum +=l :: v.length\n\
    \        }\n        val pairs = pairs.filter(_._1.toLong != 0L)\n        pairs.length\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6ivazjcr.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = pairs.filter(_._1.toLong\
    \ != \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpairs is already defined as \e[33mvalue\e[0m \e[35mpairs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6ivazjcr.scala:26:14 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        pairs.length == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value length is not a member of\
    \ Map[Long, List[Long]]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var ans = false\n        var l = l\n  \
    \      var pairs = mutable.Map[Long, Long]()\n        l.foreach { x =>\n     \
    \       pairs += ((x): (x))\n        }\n        pairs.foreach {\n            case\
    \ (x,y) => if (x != y) {\n                ans = true\n                pairs.remove(y)\n\
    \            }\n        }\n        pairs\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3oek9bgg.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3oek9bgg.scala:20:20 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft((l.size, l.size))((x, y) =>\
    \ x match {\n            case (size, 0) => (y._1, y._2)\n            case (_,\
    \ size) => y\n        }) == (0, l.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps8ef3tsy.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (size, \e[31m0\e[0m) => (y._1,\
    \ y._2)\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value _1 is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps8ef3tsy.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (size, \e[31m0\e[0m) => (y._1,\
    \ y._2)\n\e[31m\e[31m   |\e[0m                                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value _2 is not a member of\
    \ Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8ef3tsy.scala:20:30\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (_,\
    \ size) => y\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (y : Long)\n\e[31m   |\e[0m\
    \                              Required: (Int, Int)\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // initialize to a map where the key is\
    \ the sum of the elements in the list\n        // and the value is a list containing\
    \ all the elements that sum to 0.\n        val sumToZeroMap: Map[Long, List[Long]]\
    \ = l.foldLeft((0l, new mutable.LinkedList[Long]())) {\n            (sumToZeroMap,\
    \ l: List[Long]) => \n                (l.foldRight(pairSum(l.head)) { (sumToZeroMap,\
    \ x: Long) => \n                    (sumToZeroMap += (sumToZeroMap.getOrElse(sumToZeroMap.getOrElse(x,\
    \ 0l) + l.head, l.head) -> l) \n                    } , sumToZeroMap)\n      \
    \          }\n            )\n        }\n\n        // the sum of all the elements\
    \ that sum to 0 is zero.\n        sumToZeroMap.getOrElse(0l, 0l) == l.head\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkukl1um_.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    } , sumToZeroMap)\n\e[31m\e[31m \
    \  |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    ')' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkukl1um_.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            )\n\e[31m\e\
    [31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            '}' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkukl1um_.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkukl1um_.scala:20:70\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36msumToZeroMap\e[0m: \e[35mMap\e[0m[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e\
    [0m]] = l.foldLeft((\e[31m0l\e[0m, \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e\
    [0m]())) {\n\e[31m\e[31m   |\e[0m                                            \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkukl1um_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                (l.foldRight(pairSum(l.head)) { (\e[36msumToZeroMap\e\
    [0m, \e[36mx\e[0m: \e[35mLong\e[0m) => \n\e[31m\e[31m   |\e[0m               \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ pairSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkukl1um_.scala:23:34\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    (sumToZeroMap\
    \ += (sumToZeroMap.getOrElse(sumToZeroMap.getOrElse(x, \e[31m0l\e[0m) + l.head,\
    \ l.head) -> l) \n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Long - did you mean sumToZeroMap.!=?\n\
    \e[31m\e[31m-- [E008] Not Fo"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if(l.length == 1) return false\n      \
    \  val pairs = l.groupBy(_.toLong)\n        val pairs_set = pairs.toSet\n    \
    \    // only pairs with one element satisfy the condition\n        if(pairs_set.size\
    \ < 2) return false\n        // pairs with one element and sum to zero\n     \
    \   if(pairs_set.size % 2 == 0) pairs.forall { case (k, v) =>\n            val\
    \ sum_v = v.sum\n            if(sum_v == 0) false\n            else sum_v != 0\
    \ && pairs.filter(k._2 > k._1).exists(k._2.toLong == sum_v)\n        }\n     \
    \   // pairs with two elements and sum to zero\n        else pairs.forall { case\
    \ (k, v) =>\n            val sum_v = v.sum\n            if(sum_v == 0) false\n\
    \            else sum_v != 0 && pairs.filter(k._2 > k._1).exists(k._2.toLong ==\
    \ sum_v)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2hhgwjas.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m sum_v != \e[31m0\e[0m &&\
    \ pairs.filter(k._2 > k._1).exists(k._2.toLong == sum_v)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                  value _2 is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2hhgwjas.scala:27:66 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m sum_v != \e[31m0\e[0m &&\
    \ pairs.filter(k._2 > k._1).exists(k._2.toLong == sum_v)\n\e[31m\e[31m   |\e[0m\
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2hhgwjas.scala:33:46\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33melse\e\
    [0m sum_v != \e[31m0\e[0m && pairs.filter(k._2 > k._1).exists(k._2.toLong == sum_v)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2hhgwjas.scala:33:66\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33melse\e\
    [0m sum_v != \e[31m0\e[0m && pairs.filter(k._2 > k._1).exists(k._2.toLong == sum_v)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var foundTwoZero = false\n        val pairs\
    \ = l.map{_ * 2}\n        val set = new mutable.HashSet[Long]()\n        val twoZeroPairs\
    \ = pairs.filter { p => set += (p - 0l) > 0}\n        if (!twoZeroPairs.isEmpty)\n\
    \            foundTwoZero = true\n        set.toList.exists(x => pairs.find(y\
    \ => y - 0l == x) != pairs.last)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43hemmms.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sum = l.foldLeft(0l) { (sum, e) =>\
    \ sum + e }\n        l.forall(_ != 0l) && l.distinct.size == 2 &&  sum == 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnfzod11d.scala:25)\n\tat Problem.main(tmpnfzod11d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // Write your code here\n        // let\
    \ pairs be the list of (first elem, second elem) pairs that sum to zero\n    \
    \    // (i.e. for each pair (a, b), a must be less than b)\n        val pairs\
    \ = l.zipWithIndex\n            .toList\n            .sortBy(_._1)\n         \
    \   .map(p => (p._1, p._2))\n            .toList\n\n        // let distinctPairs\
    \ be a list of (first elem, second elem) pairs that do not sum to zero\n     \
    \   // i.e. for each pair (a, b), a and b are distinct pairs.\n        val distinctPairs\
    \ = pairs\n            .filter(p => !pairs.exists(q=>q._1 == p._1 && q._2 == p._2))\n\
    \            .sortBy(_._1)\n            .map(p => (p._1, p._2))\n            .toList\n\
    \n        // return false if there are 2 distinct elements in the list that sum\
    \ to zero\n        // and true otherwise\n        if (distinctPairs.size == 2)\
    \ {\n            distinctPairs.head._1.toLong == distinctPairs.head._2.toLong\n\
    \        } else {\n            false\n        }\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kmkje1p.scala:48)\n\tat Problem.main(tmp6kmkje1p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var zero = 0\n        var one = 0\n   \
    \     var two = 0\n        var three = 0\n        var four = 0\n        var five\
    \ = 0\n        var six = 0\n        l foreach {\n            elem =>\n       \
    \     zero += elem\n            one += elem\n            if(elem == 1) two++\n\
    \            if(elem == 2) three++\n            if(elem == 3) four++\n       \
    \     if(elem == 4) five++\n            if(elem == 5) six++\n        }\n     \
    \   if(three == 0 && four == 0 && five == 0 && six == 1) return false\n      \
    \  if(three == 1 && four == 0 && five == 0 && six == 1) return false\n       \
    \ if(three == 1 && four == 1 && five == 0 && six == 1) return false\n        if(three\
    \ == 1 && four == 1 && five == 1 && six == 1) return false\n        if(three ==\
    \ 2 && four == 0 && five == 0 && six == 1) return false\n        if(three == 2\
    \ && four == 1 && five == 0 && six == 1) return false\n        if(three == 2 &&\
    \ four == 1 && five == 1 && six == 1) return false\n        if(three == 2 && four\
    \ == 2 && five == 0 && six == 1) return false\n        if(three == 2 && four ==\
    \ 2 && five == 1 && six == 1) return false\n        if(three == 2 && four == 2\
    \ && five == 2 && six == 1) return false\n        if(three == 3 && four == 0 &&\
    \ five == 0 && six == 1) return false\n        if(three == 3 && four == 1 && five\
    \ == 0 && six == 1) return false\n        if(three == 3 && four == 1 && five ==\
    \ 1 && six == 1) return false\n        if(three == 3 && four == 2 && five == 0\
    \ && six == 1) return false\n        if(three == 3 && four == 2 && five == 1 &&\
    \ six == 1) return false\n        if(three == 3 && four == 2 && five == 2 && six\
    \ == 1) return false\n        if(three == 4 && four == 0 && five == 0 && six ==\
    \ 1) return false\n        if(three == 4 && four == 1 && five == 0 && six == 1)\
    \ return false\n        if(three == 4 && four == 1 && five == 1 && six == 1) return\
    \ false\n        if(three == 4 && four == 2 && five == 0 && six == 1) return false\n\
    \        if(three == 4 && four == 2 && five == 1 && six == 1) return false\n \
    \       if(three == 4 && four == 3 && five == 0 && six == 1) return false\n  \
    \      if(three == 4 && four == 3 && five == 1 && six == 1) return false\n   \
    \     if(three == 4 && four == 3 && five == 2 && six == 1) return false\n    \
    \    if(three == \n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpueyzhcvz.scala:29:31 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(elem == \e[31m1\e[0m) two++\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             expression expected but \e[31mif\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpueyzhcvz.scala:31:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e\
    [0m(elem == \e[31m3\e[0m) four++\n\e[31m\e[31m   |\e[0m                      \
    \          ^\e[0m\n\e[31m   |\e[0m                                expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpueyzhcvz.scala:33:31 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m            \e[33mif\e[0m(elem == \e[31m5\e[0m) six++\n\e[31m\e[31m  \
    \ |\e[0m                               ^\e[0m\n\e[31m   |\e[0m               \
    \                expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpueyzhcvz.scala:59:19 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mif\e[0m(three == \n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpueyzhcvz.scala:27:17 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            zero += elem\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpueyzhcvz.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            one += elem\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n6 error"
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        for (a <- l)\n            for (b <- l)\n\
    \                if (a + b == 0)\n                    return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_k2nr2o.scala:25)\n\tat Problem.main(tmpv_k2nr2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val list = l.toSet\n        val n = list.size\n\
    \        if (n == 1) true\n        else {\n            val first = list.head\n\
    \            val last = list.last\n            var sum = first\n            var\
    \ currentSum = 0\n            for (i<- 1 to n-1) {\n                currentSum\
    \ += list.apply(i)\n                if (currentSum != sum) {\n               \
    \     sum = currentSum\n                    false\n                } else {\n\
    \                    currentSum = 0\n                }\n            }\n      \
    \      true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3__upxfl.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                currentSum += list.apply(i)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // initialize two accumulators\n      \
    \  var a = 0\n        var b = 0\n        for( n <- l ) {\n            // check\
    \ if first element is already zero\n            if( n == 0 ) a += 1\n        \
    \    // if first element is not zero and second one already equals to zero\n \
    \           else if( n == a && b == 0 ) {\n                a += 1\n          \
    \      b += 1\n            }\n            // if first element is not zero and\
    \ second one is not zero\n            else if( n != a && n != b ) {\n        \
    \        return true\n            }\n            // otherwise if first element\
    \ is not zero\n            else if (n != a) {\n                b += 1\n      \
    \      }\n        }\n        // if we get here a equals zero, b equals zero\n\
    \        // otherwise both are different from zero\n        return a == 0 && b\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvc7a6zg.scala:43)\n\tat Problem.main(tmpuvc7a6zg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.length\n        if (n <= 1) false\n\
    \        else {\n            var sum = 0\n            var j = 0\n            while(j\
    \ < n) {\n                if (l(j) <= 0) break\n                else {\n     \
    \               sum += l(j)\n                    j += 1\n                }\n \
    \           }\n            val zeros = l.filter(_ <= 0).length\n            return\
    \ (zero != 0 && (sum == 0 || sum == n) && zeros == n) ? true : false\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x_5gieo.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (l(j) <= \e[31m0\e[0m)\
    \ break\n\e[31m\e[31m   |\e[0m                               ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6x_5gieo.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    sum += l(j)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp6x_5gieo.scala:31:20 ------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            \e[33mreturn\e[0m (zero != \e[31m0\e[0m && (sum == \e[31m0\e\
    [0m || sum == n) && zeros == n) ? \e[31mtrue\e[0m : \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: zero\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set: Set[Long] = l.distinct\n     \
    \   set.toList.forall(!set.contains)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48y4t58w.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e\
    [0m: \e[35mSet\e[0m[\e[35mLong\e[0m] = l.distinct\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \         Found:    List[Long]\n\e[31m   |\e[0m                             Required:\
    \ collection.mutable.Set[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp48y4t58w.scala:19:26 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        set.toList.forall(!set.contains)\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value\
    \ unary_! is not a member of Long => Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        if (l.length == 0) false\n        else\
    \ l.head == l.tail.head && pairsSumToZero(l.tail.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3_cwigv4.scala:25)\n\tat Problem.main(tmp3_cwigv4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(true) {\n            (acc: Boolean,\
    \ elem: Long) =>\n            if (elem > 0) acc || elem == l.lastOption.getOrElse(0L)\
    \ || \n                       ((acc && elem == 0L) || (!acc && (l.lastOption.getOrElse(0L)\
    \ + elem == 0L)))\n            else acc\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptaujkok4.scala:26)\n\tat Problem.main(tmptaujkok4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var firstPair = False\n        var secondPair\
    \ = False\n        var thirdPair = False\n        var fourthPair = False\n   \
    \     var fivethPair = False\n        var sixthPair = False\n        var seventhPair\
    \ = False\n        var firstPairSet = Set[Long]()\n        var secondPairSet =\
    \ Set[Long]()\n        var thirdPairSet = Set[Long]()\n        var fourthPairSet\
    \ = Set[Long]()\n        var fivethPairSet = Set[Long]()\n        var sixthPairSet\
    \ = Set[Long]()\n        var seventhPairSet = Set[Long]()\n\n        for(i <-\
    \ 0 until l.length)\n            if( (l.take(i)).sum == 0l)\n                if(\
    \ (l.drop(i)).sum == 0l) {\n                    if( (l.take(i)).sum != 0l)\n \
    \                       firstPair = True\n                    if( (l.drop(i)).sum\
    \ != 0l)\n                        secondPair = True\n                }\n     \
    \           else if( (l.take(i)).sum != 0l)\n                    if( (l.drop(i)).sum\
    \ == 0l) {\n                        thirdPair = True\n                       \
    \ if( (l.take(i)).sum != 0l)\n                            fourthPair = True\n\
    \                    }\n                    else {\n                        if(\
    \ (l.take(i)).sum != 0l)\n                            fivethPair = True\n    \
    \                    if( (l.drop(i)).sum != 0l) {\n                          \
    \  sixthPair = True\n                            if( (l.take(i)).sum != 0l)\n\
    \                                seventhPair = True\n                        }\n\
    \                    }\n        }\n        if(firstPairSet.isEmpty || secondPairSet.isEmpty\
    \ || thirdPairSet.isEmpty || fourthPairSet.isEmpty || fivethPairSet.isEmpty ||\
    \ sixthPairSet.isEmpty || seventhPairSet.isEmpty)\n            return false\n\
    \        else {\n            if(firstPairSet.size == 1)\n                return\
    \ (firstPairSet._1 == 0l)\n            if(secondPairSet.size == 1)\n         \
    \       return (secondPairSet._1 == 0l)\n            if(thirdPairSet.size == 1)\n\
    \                return (thirdPairSet._1 == 0l)\n            if(fourthPairSet.size\
    \ == 1)\n                return (fourthPairSet._1 == 0l)\n            if(fivethPairSet.size\
    \ == 1)\n                return (fivethPairSet._1 == 0l)\n            if(sixthPairSet.size\
    \ == 1)\n                return (sixthPairSet._1 == 0l)\n            if(seventhPairSet.size\
    \ == 1)\n                return (seventhPairSet._1 == 0l)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnvkp9ta.scala:88:0 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnvkp9ta.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfirstPair\e[0m = False\n\e[31m\e[31m   |\e[0m                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: False\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnvkp9ta.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36msecondPair\e[0m = False\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgnvkp9ta.scala:20:24 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mthirdPair\e[0m = False\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \           Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgnvkp9ta.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mvar\e[0m \e[36mfourthPair\e[0m = False\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnvkp9ta.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e\
    [36mfivethPair\e[0m = False\n\e[31m\e[31m   |\e[0m                         ^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: False\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnvkp9ta.scala:23:24 ------------------------"
  stdout: ''
  timestamp: 1660009753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n  \
    \      var sum : Long = l.foldLeft(0L)(_ + _)\n        for (i <- 0 until l.size)\
    \ {\n            val c = l(i)\n            if (seen(c)) {\n                sum\
    \ -= c\n            }\n            seen.add(sum)\n            sum += c\n     \
    \   }\n        sum == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxy6jtzfc.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // pairs is a list of all possible pairs\
    \ in the list\n        // we keep track of the number of pairs up to a certain\
    \ index\n        // to know if the sum is zero.\n        val pairs = l.sliding(2).map(i\
    \ => (i(0), i(1)))\n        var sum = 0L\n        pairs.foreach( pair => {\n \
    \           sum += pair._1\n            sum += pair._2\n        })\n        sum\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphstce1_m.scala:33)\n\tat Problem.main(tmphstce1_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var x = 0L\n        var y = 0L\n      \
    \  var sum = 0L\n        for ((x, y) <- l.zipWithIndex) {\n            sum +=\
    \ y\n            if (sum > 0) {\n                x = sum\n                sum\
    \ = 0\n            }\n        }\n        sum == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsa_vu_xa.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                x = sum\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val x\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set = Set[Long]()\n        l.foreach\
    \ { v =>\n            if (v != 0) {\n                val newSum = l filter (v\
    \ => v != 0) filter (v => v != v) reduce (_ + _)\n                if (newSum ==\
    \ 0) {\n                    val newPairs = l.filter (v => v != 0) filter (v =>\
    \ v != v) map (v => v.toLong)\n                    set.add(v.toLong)\n       \
    \             set.add(newPairs.headOption.getOrElse(0))\n                }\n \
    \           }\n        }\n        set.size == 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.pairsSumToZero$$anonfun$1(tmp0p6tocj_.scala:21)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.pairsSumToZero(tmp0p6tocj_.scala:27)\n\
    \tat Problem$.main(tmp0p6tocj_.scala:32)\n\tat Problem.main(tmp0p6tocj_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(Ma"
  stdout: ''
  timestamp: 1660009758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var count = 0\n        l.foreach {\n  \
    \          i => count = count + 1\n        }\n        count <= 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73f08ny5.scala:28)\n\tat Problem.main(tmp73f08ny5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // create two separate data structures\
    \ to track pairs\n        // with sum zero\n        val pairs = mutable.Map[Long,\
    \ List[Long]]()\n        val notPairs = mutable.Map[Long, List[Long]]()\n\n  \
    \      // initialize two lists to hold pairs\n        var first = 0\n        var\
    \ second = 0\n        for (i <- l) {\n            val s = i / 2l.toLong\n    \
    \        pairs.getOrElseUpdate(s, l :: Nil) match {\n                case Nil\
    \ =>\n                    first = s\n                    second = s\n        \
    \        case l :: Nil =>\n                    first = s\n                   \
    \ second = s\n                case l :: r =>\n                    // pair exists,\
    \ check if first and second have opposite signs\n                    val sign1\
    \ = l.toLong * -1l.toLong\n                    val sign2 = r.toLong * -1r.toLong\n\
    \                    if (sign1 > sign2) {\n                        notPairs.getOrElseUpdate(s,\
    \ l :: r) match {\n                            case Nil =>\n                 \
    \               first = s\n                                second = s\n      \
    \                      case l :: r =>\n                                first =\
    \ s\n                                second = s\n                        }\n \
    \                   } else {\n                        notPairs.getOrElseUpdate(s,\
    \ l :: r) match {\n                            case Nil =>\n                 \
    \               first = s\n                                second = s\n      \
    \                      case l :: r =>\n                                first =\
    \ s\n                                second = s\n                        }\n \
    \                   }\n            }\n        }\n\n        // if no pair exists,\
    \ return false\n        if (notPairs.isEmpty) false\n        // if a pair exists,\
    \ return true\n        else true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_42ozc92.scala:38:46 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mval\e[0m \e[36msign2\e[0m =\
    \ r.toLong * -\e[31m1\e[0mr.toLong\n\e[31m\e[31m   |\e[0m                    \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_42ozc92.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_42ozc92.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mnotPairs\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e\
    [0m]]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_42ozc92.scala:30:28 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    first = s\n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   Found:    (s : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_42ozc92.scala:31:29\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    second =\
    \ s\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    (s : Long)\n\e[31m   |\e[0m          \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-ex"
  stdout: ''
  timestamp: 1660009759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n       l.map(x => if (x == 0l) 1l else x).sum ==\
    \ 0l\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyb4bjbat.scala:24)\n\tat Problem.main(tmpyb4bjbat.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val a = 0l\n        val b = l.size\n  \
    \      while (a < b) {\n            val c = a + 1l\n            while (c < b)\
    \ {\n                if (l(c) + l(c) == 0) {\n                    return true\n\
    \                }\n                c += 1l\n            }\n            a += 1l\n\
    \        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfn8m9l08.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m\
    \ (l(c) + l(c) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \ ^\e[0m\n\e[31m   |\e[0m                      Found:    (c : Long)\n\e[31m  \
    \ |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfn8m9l08.scala:23:29 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (l(c) + l(c) == \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Found:    (c : Long)\n\e[31m   |\e[0m        \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfn8m9l08.scala:26:18 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                c += \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean c.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfn8m9l08.scala:28:14\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            a += \e[31m1l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var lastElement = -1\n        var lastZero\
    \ = -1\n        var pairsSumToZero : Boolean = false\n        for(i <- 0 until\
    \ l.length) {\n            if(l(i) == lastElement && lastZero != 0) {\n      \
    \          pairsSumToZero = false\n            }\n            if(l(i) == lastZero\
    \ && lastElement != 0) {\n                pairsSumToZero = true\n            }\n\
    \            lastElement = l(i)\n            lastZero = l(i) == 0 ? 0 : l(i)\n\
    \        }\n        pairsSumToZero\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvuqhsi99.scala:29:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            lastZero = l(i) == \e[31m0\e[0m ? \e[31m0\e\
    [0m : \e[35ml\e[0m(i)\n\e[31m\e[31m   |\e[0m                                 \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '(' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuqhsi99.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            lastElement = l(i)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvuqhsi99.scala:29:33\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            lastZero = l(i)\
    \ == \e[31m0\e[0m ? \e[31m0\e[0m : \e[35ml\e[0m(i)\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^\e[0m\n\e[31m   |\e[0m                        \
    \       value ? is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum_of_pairs = 0\n        for (i <-\
    \ 0 until l.length) {\n            // find all pairs whose values add to zero\n\
    \            val new_list = l filterNot (i+1 until l.length).map (x => x.toLong).toSet\n\
    \            sum_of_pairs += new_list.count{x => x == 0}.asInstanceOf[Long]\n\
    \            if (sum_of_pairs == 2) {\n                return true\n         \
    \   }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzitvt5_e.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum_of_pairs += new_list.count{\e[36mx\e\
    [0m => x == \e[31m0\e[0m}.asInstanceOf[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val zeros = l.toSet\n        if (zeros.size\
    \ == 0) false\n        else {\n            val pairs = l.groupBy(x => x - zeros.head)\n\
    \            if (pairs.size == 0) false\n            else {\n                val\
    \ nonZeroes = pairs.values.toSet\n                if (nonZeroes.size == 0) false\n\
    \                else {\n                    val diff = nonZeroes.size - zeros.size\n\
    \                    nonZeroes.size == zeros.size || nonZeroes.size == (diff+1)\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpme2v5cdg.scala:34)\n\tat Problem.main(tmpme2v5cdg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        // initialize result to false\n       \
    \ var result : Boolean = false\n        // loop through the input list\n     \
    \   for (x <- l)\n            // if the input list contains a pair of elements\
    \ whose sum is\n            // zero, return false and exit the loop\n        \
    \    if (l.count(y => y == x + y) == 2)\n                result = true\n     \
    \   // return the result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_cioxuc7.scala:33)\n\tat Problem.main(tmp_cioxuc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def isPair(l: List[Long]) : Boolean = {\n\
    \            if (l.size % 2 != 0)\n                return false\n            else\n\
    \                var i : Int = 0\n                var j : Int = 0\n          \
    \      var sum : Long = 0\n                var found : Boolean = false\n     \
    \           while (i < l.length) {\n                    sum = sum + l(i)\n   \
    \                 if (sum != 0) {\n                        found = true\n    \
    \                }\n                    i = i + 1\n                }\n       \
    \         if (found) {\n                    if (i == l.length-1)\n           \
    \             return true\n                    else {\n                      \
    \  while (j < l.length) {\n                            sum = sum + l(j)\n    \
    \                        if (sum != 0) {\n                                found\
    \ = true\n                                break\n                            }\n\
    \                            j = j + 1\n                        }\n          \
    \              return found\n                    }\n                }\n      \
    \          return false\n        }\n        if (isPair(l))\n            return\
    \ false\n        else {\n            var i = 0\n            var j = 0\n      \
    \      var sum : Long = 0\n            var found : Boolean = false\n         \
    \   while (i < l.length) {\n                sum = sum + l(i)\n               \
    \ if (sum != 0) {\n                    found = true\n                }\n     \
    \           i = i + 1\n            }\n            if (found) {\n             \
    \   if (i == l.length-1)\n                    return true\n                else\
    \ {\n                    while (j < l.length) {\n                        sum =\
    \ sum + l(j)\n                        if (sum != 0) {\n                      \
    \      found = true\n                            break\n                     \
    \   }\n                        j = j + 1\n                    }\n            \
    \        return found\n                }\n            }\n            return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gu1dcey.scala:41:32 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                                break\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5gu1dcey.scala:72:28 ------------------------\e[0m\e\
    [0m\n\e[31m72 |\e[0m                            break\n\e[31m\e[31m   |\e[0m \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \      Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val zero = l.find(_ == 0)\n        val\
    \ nonZero = l.find(_ != 0)\n        nonZero.isEmpty && zero.isEmpty\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqzea06_0.scala:26)\n\tat Problem.main(tmpqzea06_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map1 = new mutable.HashMap[Long, Long]()\n\
    \        val map2 = new mutable.HashMap[Long, Long]()\n        for (i <- 0 until\
    \ l.size) {\n            if (map1.contains(l(i))) {\n                map2.put(l(i),\
    \ map1(l(i)))\n            } else {\n                map1.put(l(i), l(i))\n  \
    \          }\n        }\n        map2.size == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcz2vazo1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcz2vazo1.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val map1 = l.map(_ => 0l)\n        val\
    \ map2 = l.map(_ => 0l)\n        l.zip(l.tail).foreach { e =>\n            map1(e._1)\
    \ += e._2\n            map2(e._1) -= e._2\n            if (map1(e._1) != 0 ||\
    \ map2(e._1) != 0) return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpir3ynvdy.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            map1(e._1) += e._2\n\
    \e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    Long\n\e[31m   |\e[0m                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpir3ynvdy.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            map2(e._1) -= e._2\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Long\n\e\
    [31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpir3ynvdy.scala:23:23 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (map1(e._1) != \e[31m0\e[0m\
    \ || map2(e._1) != \e[31m0\e[0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Found:    Long\n\e[31m   |\e[0m                     Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpir3ynvdy.scala:23:42 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (map1(e._1) != \e[31m0\e[0m\
    \ || map2(e._1) != \e[31m0\e[0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        Found:    Long\n\e[31m   |\e[0m     \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var sum = 0\n        var count = 0\n  \
    \      l.foreach{e => if(e > 0) sum += e else sum += -e}\n        while(sum >\
    \ 0){\n            var min = math.abs(sum)\n            var sumOfMin = 0\n   \
    \         count = 0\n            l.foreach{e => if(sumOfMin < e){\n          \
    \      count += 1\n                sumOfMin += e\n            }}\n           \
    \ if(count > 1){\n                return true\n            }\n            sum\
    \ -= min\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcbou45yw.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        l.foreach{\e[36me\e[0m => \e[33mif\e[0m(e > \e\
    [31m0\e[0m) sum += e \e[33melse\e[0m sum += -e}\n\e[31m\e[31m   |\e[0m       \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpcbou45yw.scala:20:51 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        l.foreach{\e[36me\e[0m => \e[33mif\e[0m(e > \e[31m0\e[0m)\
    \ sum += e \e[33melse\e[0m sum += -e}\n\e[31m\e[31m   |\e[0m                 \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpcbou45yw.scala:27:25 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                sumOfMin += e\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var i = 0\n        var sum = 0\n      \
    \  var first = l(i).asInstanceOf[Long]\n        for(i <- i until l.length) {\n\
    \            sum += l(i).asInstanceOf[Long]\n            if(sum < 0)\n       \
    \         return false\n        }\n        return sum == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdiccrvj8.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            sum += l(i).asInstanceOf[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        l.foldLeft(false){\n            case (true,\
    \ (a, b)) if a+b == 0 => false\n            case (true, (a, b)) => true\n    \
    \        case (false, (a, b)) => false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg7eq7y0c.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (\e[31mtrue\e[0m, (a, b))\
    \ \e[33mif\e[0m a+b == \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val set = l.reduceLeft{ (a, b) => a + b\
    \ }.toSet\n        set.size == l.length && set.size == l.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpclpnf47n.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = l.reduceLeft{\
    \ (\e[36ma\e[0m, \e[36mb\e[0m) => a + b }.toSet\n\e[31m\e[31m   |\e[0m       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \    value toSet is not a member of Long - did you mean Long.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(l => l.toLong / 2).filter(_._1.size\
    \ == 2).map(_._2)\n        val allZeros = pairs.forall { p =>\n            p.forall(l\
    \ => l.toLong == 0 || l == 0)\n        }\n        return allZeros\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamixph7v.scala:18:61 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = l.groupBy(\e\
    [36ml\e[0m => l.toLong / \e[31m2\e[0m).filter(_._1.size == \e[31m2\e[0m).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value size is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.length\n        val pairs = mutable.HashSet[Long]()\n\
    \        for (i <- 0 until n)\n            for (j <- i + 1 until n)\n        \
    \        if (l(i) + l(j) == 0) pairs += l(i) -> l(j)\n        pairs.size == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kf5yqib.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = (for {\n            i <- l.iterator\n\
    \            j = l.filter(_ != i).iterator\n        } yield (i, j)).groupBy(t\
    \ => t._1).filterNot(t => t._2.isEmpty)\n        var sum = 0.0\n        for (k\
    \ <- pairs) sum += k._2.sum\n        (sum != 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4n2geoe4.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpairs\e[0m = (\e[33mfor\e\
    [0m {\n\e[31m19 |\e[0m            i <- l.iterator\n\e[31m20 |\e[0m           \
    \ j = l.filter(_ != i).iterator\n\e[31m21 |\e[0m        } \e[33myield\e[0m (i,\
    \ j)).groupBy(\e[36mt\e[0m => t._1).filterNot(\e[36mt\e[0m => t._2.isEmpty)\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0mvalue groupBy is\
    \ not a member of Iterator[(Long, Iterator[Long])] - did you mean Iterator[(Long,\
    \ Iterator[Long])].grouped?\n1 error found\n"
  stdout: ''
  timestamp: 1660009765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val l1 = l.toSet.toList\n        if (l1.size\
    \ == 1) false\n        else if (l1.size == 2) l1.head == 0l\n        else {\n\
    \            val two = l1.head + l1.last\n            val twoSet = Set(l1.last,\
    \ l1.head)\n            val three = l1.last + l1.head\n            val threeSet\
    \ = Set(l1.last)\n            if (twoSet.subsetOf(twoSet) && threeSet.subsetOf(threeSet))\
    \ false\n            else true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hy0vu49.scala:34)\n\tat Problem.main(tmp9hy0vu49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.map(x => (x, l.filter( y\
    \ => x != y).length)).toSet\n        if (pairs.size == 1)\n            pairs(0)\
    \ != 0\n        else\n            pairs.forall { case (a, b) => a == 0 && b !=\
    \ 0 }\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp77ln8yar.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            pairs(\e[31m0\e[0m)\
    \ != \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m         \
    \         Required: (Long, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        def pairsSumToZeroHelper(l : List[Long],\
    \ found : mutable.Set[Long]) : Boolean = {\n            if (l.isEmpty) found.contains(0)\n\
    \            else {\n                if (l.reduceLeft(_ + _) == 0) pairsSumToZeroHelper(l.tail,\
    \ found + l.head)\n                else {\n                    pairsSumToZeroHelper(l.tail,\
    \ found)\n                }\n            }\n        }\n        pairsSumToZeroHelper(l,\
    \ mutable.Set(0))\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmple5q5gn5.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mdef\e[0m \e[36mpairsSumToZeroHelper\e[0m(\e\
    [36ml\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mfound\e[0m : mutable.Set[\e\
    [35mLong\e[0m]) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m              \
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmple5q5gn5.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        pairsSumToZeroHelper(l, mutable.Set(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var pairs = mutable.ListBuffer[Long]()\n\
    \        for (i <- l)\n            if (i > 0) {\n                var pair = (i.toLong,\
    \ (i-1).toLong)\n                if (!pairs.contains(pair))\n                \
    \    pairs += pair\n            }\n        pairs.size == 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotvowa7g.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mpairs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.groupBy(_ % 2)\n        pairs\
    \ exists { case (x, y) => y > 0 && x == 2 }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkqehubm.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        pairs exists { \e[33mcase\e[0m (x, y) => y >\
    \ \e[31m0\e[0m && x == \e[31m2\e[0m }\n\e[31m\e[31m   |\e[0m                 \
    \                     ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.length\n        if (n == 0) false\n\
    \        else if (n == 1) true\n        else {\n            var i = n-1\n    \
    \        val pairs = mutable.Map[Long, List[Long]()]\n            while (i >=\
    \ 0) {\n                pairs(l(i)) = l(i).toList :: pairs.get(l(i))\n       \
    \         i -= 1\n            }\n            val x = pairs.get(0).get(0)\n   \
    \         if (x == 0) pairsSumToZero(pairs.values.toList)\n            else pairsSumToZero(pairs.values.filter(_(_)\
    \ == x).flatten)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8mjas15v.scala:23:52 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mpairs\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]()]\n\e[31m\e[31m   |\e[0m    \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                        ']' expected, but '(' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8mjas15v.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mpairs\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]()]\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val pairs = l.toSeq.groupBy(x => x % 2\
    \ == 0).toSeq\n        val twoCounts = pairs.count(x => x._2)\n        val oneCounts\
    \ = pairs.count(x => x._1)\n        if (twoCounts == 0 || oneCounts == 0)\n  \
    \          false\n        else\n            pairs.forall { x =>\n            \
    \    if (x._1 && !x._2) oneCounts\n                else if (x._2 && !x._1) twoCounts\n\
    \                else false\n            }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5s4339o.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtwoCounts\e\
    [0m = pairs.count(\e[36mx\e[0m => x._2)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                 Found:    List[Long]\n\e[31m   |\e[0m                      \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpx5s4339o.scala:25:28 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (x._1 && !x._2) oneCounts\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                         value unary_! is not a member of List[Long]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx5s4339o.scala:25:35 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (x._1 && !x._2) oneCounts\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (oneCounts : Int)\n\e[31m\
    \   |\e[0m                                   Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpx5s4339o.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (x._2 &&\
    \ !x._1) twoCounts\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value && is not a member of List[Long]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx5s4339o.scala:26:40 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (x._2 &&\
    \ !x._1) twoCounts\n\e[31m\e[31m   |\e[0m                                    \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    (twoCounts : Int)\n\e[31m   |\e[0m                                      \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling w"
  stdout: ''
  timestamp: 1660009768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val n = l.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0\n        for (i<-n;i>=0;i--) {\n            sum += l(i)\n\
    \            sums += sum\n        }\n        for (j<-n;j>=0;j--) {\n         \
    \   sum += sums(j)\n            if (sum == 0) return false\n            sums -=\
    \ sum\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc37edrs0.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) {\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmpc37edrs0.scala:21:26 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc37edrs0.scala:25:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m\
    \ (j<-n;j>=\e[31m0\e[0m;j--) {\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmpc37edrs0.scala:25:26 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (j<-n;j>=\e[31m0\e[0m;j--) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc37edrs0.scala:19:19 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc37edrs0.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-n;i>=\e[31m0\e[0m;i--) {\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ foreach is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc37edrs0.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (j<-n;j>=\e\
    [31m0\e[0m;j--"
  stdout: ''
  timestamp: 1660009768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n      l.foldLeft((false, 0l)) {\n        case ((sum,\
    \ lastSum), x) =>\n          if (x == lastSum && sum != 0l) \n              (true,\
    \ x) else (false, x)\n      }._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7oylra5u.scala:20:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mif\e[0m (x == lastSum && sum != \e[31m0l\e\
    [0m) \n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       Values of types Boolean and Long cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val sumToZero = l.map({ n => n * n }).sum\n\
    \        val noOfPairs = l.size / 2\n        val differences = l.zip(l.tail).map\
    \ { case (x, y) => x - y }\n        val distinctValues = differences.distinct\n\
    \        distinctValues.size == noOfPairs && distinctValues.forall(n => sumToZero\
    \ - n == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf_bu87au.scala:28)\n\tat Problem.main(tmpf_bu87au.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var countOnes = false\n        var countTwos\
    \ = false\n        var total = 0\n        for (i <- l) {\n            total +=\
    \ i\n            if (i > 0) {\n                if (i % 2 == 0) {\n           \
    \         countTwos = true\n                } else {\n                    countOnes\
    \ = true\n                }\n            }\n        }\n        return (total ==\
    \ 0) || (countOnes && countTwos)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong,\
    \ 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0hw7t9zq.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            total += i\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        val nList = l.toSet\n        val m = nList.size\n\
    \        if(m == 0){\n            true\n        }else if(m == 1){\n          \
    \  false\n        }else{\n            val zeros = nList.filter(x => x==0)\n  \
    \          val pairs = nList.filter(x => x>0)\n            val pairs2zeros = pairs.filter(x\
    \ => x==0)\n            if(zeros.size == 0){\n                if(pairs2zeros.size\
    \ ==0){\n                    false\n                }else{\n                 \
    \   pairsSumToZero(pairs2zeros)\n                }\n            }else{\n     \
    \           pairsSumToZero(pairs)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vex7_l4.scala:32:35\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    pairsSumToZero(pairs2zeros)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (pairs2zeros : Set[Long])\n\
    \e[31m   |\e[0m                                   Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vex7_l4.scala:35:31 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                pairsSumToZero(pairs)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                     Found:    (pairs : Set[Long])\n\e[31m   |\e[0m         \
    \                      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        var last = 0\n        val pairs = l map\
    \ { t => last = t; last }\n        val pairs1 = pairs.distinct\n        val pairs2\
    \ = pairs1.filterNot(pairs1.contains)\n        val pairs3 = (pairs zip pairs1)\
    \ map {\n            case (x, y) => if (x + y == 0) true\n            else false\n\
    \        }\n        pairs2.forall(x => x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpajt8oq7f.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpairs\e\
    [0m = l map { \e[36mt\e[0m => last = t; last }\n\e[31m\e[31m   |\e[0m        \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                   Found:    (t : Long)\n\e[31m   |\e[0m                    \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpajt8oq7f.scala:26:27 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        pairs2.forall(\e[36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m      \
    \                     ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (x : Int)\n\e[31m   |\e[0m                           Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it\
    \ returns true if there are two distinct elements in the list that\n    // sum\
    \ to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n \
    \   // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
    \ : List[Long]) : Boolean = {\n        import scala.math._\n        import scala.collection.mutable._\n\
    \        val set = new mutable.HashSet[Long]()\n        for (x <- l) set += x\n\
    \        return set.size == 2 && (set.contains(0l) && set.contains(l.last))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
    \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n   \
    \ assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong, 4l.toLong,\
    \ 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
    \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuibnnlbq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009767
