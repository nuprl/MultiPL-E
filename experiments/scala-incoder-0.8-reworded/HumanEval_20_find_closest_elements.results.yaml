language: scala
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numbers = numbers.toArray\n        val minNum = math.abs(numbers(0)).min(math.abs(numbers(1)))\n\
    \        val maxNum = math.abs(numbers(0)).max(math.abs(numbers(1)))\n       \
    \ val index0 = numbers.indexOf(minNum)\n        val index1 = numbers.indexOf(maxNum)\n\
    \        numbers match {\n            case Array(num1, num2) => if (num1 <= num2)\
    \ (index0, index1) else (index1, index0)\n            case _ => (index0, index1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9pyqzliu.scala:11:22 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = numbers.toArray\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mnumbers\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pyqzliu.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m Array(num1, num2) => \e[33mif\e\
    [0m (num1 <= num2) (index0, index1) \e[33melse\e[0m (index1, index0)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^\e[0m\n\e[31m   |\e\
    [0m                                          Not found: num1\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var i = 0\n        var minDiff = numbers(0).abs().asInstanceOf[Float]\
    \ - numbers(1).abs().asInstanceOf[Float]\n        var closestElement = (numbers(0),\
    \ numbers(1))\n        var nextElement = (numbers(1), numbers(0))\n\n        while(i\
    \ < numbers.size) {\n            val current = numbers(i)\n            val diff\
    \ = current.abs().asInstanceOf[Float] - minDiff\n            if(diff < minDiff)\
    \ {\n                minDiff = diff\n                closestElement = current\n\
    \            }\n            i += 1\n            nextElement = numbers(i)\n   \
    \     }\n        (closestElement, nextElement)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpyeb7vicu.scala:12:33 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mminDiff\e[0m = numbers(\e\
    [31m0\e[0m).abs().asInstanceOf[\e[35mFloat\e[0m] - numbers(\e[31m1\e[0m).abs().asInstanceOf[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e\
    [0m \e[35mRichFloat\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpyeb7vicu.scala:18:31 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = current.abs().asInstanceOf[\e\
    [35mFloat\e[0m] - minDiff\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e\
    [0m \e[35mRichFloat\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyeb7vicu.scala:21:33 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                closestElement = current\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Found:    (\e[1m\e[31mcurrent\e[0m\e[1m\e[31m \e\
    [0m\e[1m\e[31m:\e[0m Float)\n\e[31m   |\e[0m                                 Required:\
    \ (\e[1m\e[32mFloat\e[0m\e[1m\e[32m,\e[0m Float)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyeb7vicu.scala:24:33 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            nextElement = numbers(i)\n\e[31m\e[31m  \
    \ |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \               Found:    Float\n\e[31m   |\e[0m                          Required:\
    \ \e[1m\e[32m(\e[0m\e[1m\e[32mFloat\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mFloat\e\
    [1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numArray = numbers.toArray\n        val minDiff = math.abs(numArray(0)\
    \ - numArray(1))\n        val minDiffIndex = -1\n        val minNumIndex = -1\n\
    \        for ((i, e) <- 0 until numArray.length - 1) {\n            val diff =\
    \ math.abs(numArray(i) - numArray(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minDiffIndex = i\n          \
    \      minNumIndex = i + 1\n            }\n        }\n        (numArray(minNumIndex),\
    \ numArray(minDiffIndex))\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qi6qr09.scala:16:41\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36mdiff\e[0m = math.abs(numArray(i) - numArray(i + \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    (i : Any)\n\e[31m   |\e[0m  \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8qi6qr09.scala:16:57 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = math.abs(numArray(i)\
    \ - numArray(i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                                ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp8qi6qr09.scala:18:24 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                minDiff = diff\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minDiff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qi6qr09.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                minDiffIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (i : Any)\n\e[31m   |\e[0m       \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8qi6qr09.scala:20:32 ------------------------\e[0m\e\
    [0"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestDiff = math.min(numbers.map(math.abs).max)\n\
    \        val closest = numbers.sortWith(math.abs)\n        (closest(1), closest(2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3lcun1fo.scala:11:32 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msmallestDiff\e[0m = math.min(numbers.map(math.abs).max)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Float)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3lcun1fo.scala:12:44\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mclosest\e[0m = numbers.sortWith(math.abs)\n\e[31m\e[31m   |\e[0m   \
    \                                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e\
    [31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0mmatch expected type (Float, Float) => Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val arrayOfNumbers = numbers.toArray\n        val min: Float\
    \ = arrayOfNumbers.min\n        val max: Float = arrayOfNumbers.max\n        if(min\
    \ == max) {\n            return (min,min)\n        }\n        val minIndex: Int\
    \ = arrayOfNumbers.indexWhere(x => x == min)\n        val maxIndex: Int = arrayOfNumbers.indexWhere(x\
    \ => x == max)\n        if(minIndex == maxIndex) {\n            return (min,max)\n\
    \        }\n        val min1 = arrayOfNumbers(minIndex)\n        val min2 = arrayOfNumbers(minIndex\
    \ + 1)\n        val max1 = arrayOfNumbers(maxIndex)\n        val max2 = arrayOfNumbers(maxIndex\
    \ + 1)\n        val minDistance = math.abs(max1 - min2)\n        val maxDistance\
    \ = math.abs(min1 - max2)\n        if(minDistance < maxDistance) {\n         \
    \   return (min1,max1)\n        }\n        return (max1,min1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2s_ik9c3.scala:34)\n\tat Problem.main(tmp2s_ik9c3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val differences = numbers.zip(numbers.tail).map { case (cur,\
    \ prev) =>\n            (math.abs(cur - prev), cur)\n        }\n        val minDiff\
    \ = differences.min\n        val closestToMin = differences.find { case (cur,\
    \ prev) => cur < minDiff._1 }._2\n        val minIndex = differences.indexWhere(_._2\
    \ == minDiff)\n        (closestToMin, minIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsbxpmi3.scala:15:85 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mclosestToMin\e[0m = differences.find\
    \ { \e[33mcase\e[0m (cur, prev) => cur < minDiff._1 }._2\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value _2 is not a member of Option[(Float,\
    \ Float)]\n\e[31m\e[31m-- Error: /tmp/tmpnsbxpmi3.scala:16:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = differences.indexWhere(_._2\
    \ == minDiff)\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Float and (Float, Float)\
    \ cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val mins = numbers.minBy(math.abs)\n        val maxs = numbers.maxBy(math.abs)\n\
    \        return (mins, maxs)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34xie2_a.scala:16)\n\tat Problem.main(tmp34xie2_a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.sortWith(math.abs)\n        val lo = numbers.head\n\
    \        val hi = numbers.last\n        if(math.abs(hi-lo) <= .000001f) lo,hi\n\
    \        else {\n            if(hi < lo) (hi, lo)\n            else if(hi > lo)\
    \ (lo, hi)\n            else lo,hi\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi1sfaohm.scala:14:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(math.abs(hi-lo) <= \e[31m.000001f\e\
    [0m) lo,hi\n\e[31m\e[31m   |\e[0m                                          ^\e\
    [0m\n\e[31m   |\e[0m                                 end of statement expected\
    \ but ',' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpi1sfaohm.scala:11:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.sortWith(math.abs)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e\
    [31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Int\n\e[31m   |\e[0mmatch expected type (Float, Float) => Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Sort numbers from smallest (smallest) to largest (largest)\n\
    \        numbers.sortWith((a: Float, b: Float) => math.abs(a-b))\n        // Return\
    \ element at index (i+1) (+1 to skip the first element) as the closest number\n\
    \        // and the element at index (i) as the next number in the sorted list.\n\
    \        (numbers(numbers.indexOf(numbers(1))+1),numbers(0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcvdfs2_.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        numbers.sortWith((\e\
    [36ma\e[0m: \e[35mFloat\e[0m, \e[36mb\e[0m: \e[35mFloat\e[0m) => math.abs(a-b))\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Float\n\e[31m   |\e[0m                                                 Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val list = numbers.toList\n        val list2 = numbers.toList.reverse\n\
    \        var lowest = list(0)\n        var highest = list(1)\n        for (i<-list2.length)\
    \ {\n            if (list2(i) < lowest ) {\n                lowest = list2(i)\n\
    \            }\n            if (list2(i) > highest ) {\n                highest\
    \ = list2(i)\n            }\n        }\n        return (highest, lowest)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm3w8m39h.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-list2.length) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val l = numbers.last\n        val r = numbers.head\n   \
    \     // A set of numbers that have not yet been chosen\n        val unchosenNumbers\
    \ = numbers.dropWhile(_ <= l).takeWhile(_ >= r)\n        // A set of numbers that\
    \ have already been chosen\n        val chosenNumbers = numbers.filter(_ > l)\n\
    \n        // If there is a number in the set that is less than the middle of the\n\
    \        // unchosen numbers, then we select that.\n        val middle = unchosenNumbers.findIndex(num\
    \ => num == (l+r)/2)\n        // If the middle is negative, then we select from\
    \ the beginning\n        if (middle < 0)\n            (l, r)\n        else\n \
    \           // Otherwise, we select from the middle\n            val middleToSelect\
    \ = middle match {\n                case 0 => l\n                case 1 => r\n\
    \                case _ => unchosenNumbers(middle)\n            }\n          \
    \  (l, r, middleToSelect)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0e1psb6e.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmiddle\e[0m = unchosenNumbers.findIndex(\e\
    [36mnum\e[0m => num == (l+r)/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ value findIndex is not a member of List[Float]\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0e1psb6e.scala:31:12 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            (l, r, middleToSelect)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (Float, Float\e[1m\e[31m,\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31mFloat\e[0m)\n\e[31m   |\e[0m            Required: (Float,\
    \ Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val distances = numbers.map(n => math.abs(n-1.toFloat))\n\
    \        distances.minBy(distances.min)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnbl3got.scala:12:24\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        distances.minBy(distances.min)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Found:    (ord : Float)\n\e[31m   |\e[0m                     \
    \   Required: Ordering[Float]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Find the closest pair from the supplied list\n      \
    \  val (smallestDifference,secondSmallestDifference) = numbers.minBy(numbers.getOrElse(0f))\n\
    \        return (secondSmallestDifference,smallestDifference)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2bcpxdj.scala:12:82 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (smallestDifference,secondSmallestDifference)\
    \ = numbers.minBy(numbers.getOrElse(\e[31m0f\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                                                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value getOrElse is not a member\
    \ of List[Float]\n\e[31m\e[31m-- Error: /tmp/tmpi2bcpxdj.scala:12:96 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (smallestDifference,secondSmallestDifference)\
    \ = numbers.minBy(numbers.getOrElse(\e[31m0f\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi2bcpxdj.scala:12:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ (smallestDifference,secondSmallestDifference) = numbers.minBy(numbers.getOrElse(\e\
    [31m0f\e[0m))\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m     \
    \        Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi2bcpxdj.scala:12:32 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (smallestDifference,secondSmallestDifference)\
    \ = numbers.minBy(numbers.getOrElse(\e[31m0f\e[0m))\n\e[31m\e[31m   |\e[0m   \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \        Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sortedNumbers = numbers.sorted\n        val min1 = sortedNumbers(0)\n\
    \        val min2 = sortedNumbers(1)\n        if (min1 > min2)\n            (min2,\
    \ min1)\n        else\n            (min1, min2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmhy9g0a.scala:20)\n\tat Problem.main(tmpsmhy9g0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var minDiff = numbers(0) - numbers(1)\n        var minIndex\
    \ = 0\n        var maxIndex = 0\n        numbers match {\n            case x ::\
    \ y :: z :: Nil =>\n                val maxDiff = Math.abs(x - z)\n          \
    \      val maxIndexInArray = numbers.indexWhere(_.toFloat == Math.max(minDiff,\
    \ maxDiff))\n                val minIndexInArray = numbers.indexWhere(_.toFloat\
    \ == Math.min(minDiff, maxDiff))\n                if (minIndexInArray > maxIndexInArray)\
    \ {\n                    maxIndexInArray\n                } else {\n         \
    \           minIndexInArray\n                }\n            case x :: y :: Nil\
    \ =>\n                val maxDiff = Math.abs(y - x)\n                val minIndexInArray\
    \ = numbers.indexWhere(_.toFloat == Math.min(minDiff, maxDiff))\n            \
    \    if (minIndexInArray > maxIndexInArray) {\n                    minIndexInArray\n\
    \                } else {\n                    maxIndexInArray\n             \
    \   }\n            case x :: Nil =>\n                val maxDiff = Math.abs(x\
    \ - numbers(1))\n                val minIndexInArray = numbers.indexWhere(_.toFloat\
    \ == Math.min(minDiff, maxDiff))\n                if (minIndexInArray > maxIndexInArray)\
    \ {\n                    minIndexInArray\n                } else {\n         \
    \           maxIndexInArray\n                }\n            case Nil =>\n    \
    \            throw new RuntimeException(\"findClosestElements was passed an empty\
    \ list.\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3efe2e_j.scala:20:20\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    maxIndexInArray\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    (maxIndexInArray : Int)\n\e[31m   |\e[0m      \
    \              Required: (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3efe2e_j.scala:22:20 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                    minIndexInArray\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Found:    (minIndexInArray : Int)\n\e[31m   |\e[0m                    Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3efe2e_j.scala:27:38\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m (minIndexInArray > maxIndexInArray) {\n\e[31m\e[31m   |\e[0m             \
    \                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        Not found: maxIndexInArray\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3efe2e_j.scala:28:20 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    minIndexInArray\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Found:    (minIndexInArray : Int)\n\e[31m   |\e[0m                    Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3efe2e_j.scala:30:20\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    maxIndexInArray\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: maxIndexInArray\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E00"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallest = numbers(0)\n        val largest = numbers(0)\n\
    \        // For every number we compare it to smallest\n        numbers foreach\
    \ { x =>\n            if (x < smallest) {\n                smallest = x\n    \
    \        }\n            if (x > largest) {\n                largest = x\n    \
    \        }\n        }\n        // Return the smallest and largest\n        (smallest,\
    \ largest)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpw9u2bh5o.scala:16:25 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                smallest = x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val smallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpw9u2bh5o.scala:19:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                largest\
    \ = x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val largest\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var lowest1 = numbers(0)\n        var highest1 = numbers(0)\n\
    \        var lowest2 = numbers(0)\n        var highest2 = numbers(0)\n       \
    \ var lowestDiff = lowest1 - lowest2\n        var highestDiff = highest1 - highest2\n\
    \        var diff = 0\n        if (numbers.size() > 1) {\n            for (i <-\
    \ 1 to numbers.size()) {\n                if (numbers(i) < lowest1) {\n      \
    \              lowest1 = numbers(i)\n                }\n                if (numbers(i)\
    \ > highest1) {\n                    highest1 = numbers(i)\n                }\n\
    \                if (numbers(i) < lowest2) {\n                    lowest2 = numbers(i)\n\
    \                }\n                if (numbers(i) > highest2) {\n           \
    \         highest2 = numbers(i)\n                }\n                if (numbers(i)\
    \ != lowest2 && numbers(i) != highest2 && numbers(i) > lowestDiff && numbers(i)\
    \ < highestDiff) {\n                    diff += numbers(i)\n                }\n\
    \            }\n            if (diff < lowestDiff) {\n                lowestDiff\
    \ = diff\n                lowest1 = lowest2\n            }\n            if (diff\
    \ > highestDiff) {\n                highestDiff = diff\n                highest1\
    \ = highest2\n            }\n        }\n        ((lowest1, highest1))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2o6wzqk1.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (numbers.size() > \e[31m1\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp2o6wzqk1.scala:19:35 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mfor\e[0m (i <- \e[31m1\e[0m to numbers.size()) {\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e\
    [35mSeqOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2o6wzqk1.scala:33:25 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                    diff += numbers(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Sort the list from smallest to largest first\n      \
    \  numbers.sortWith( (n1, n2) => {\n            if (n1 < n2)\n               \
    \ true\n            else\n                false\n        })\n        // If two\
    \ numbers are equidistant, return the lower one\n        if (numbers(0) == numbers(1))\n\
    \            return (numbers(0), numbers(1))\n        // If the numbers differ\
    \ by a much (less than 0.01%) then we return the first one that is smaller\n \
    \       else if  (Math.abs(numbers(0) - numbers(1)) < 0.01f)\n            return\
    \ (numbers(0), numbers(1))\n        // If n1 and n2 are too close to each other,\
    \ then return the one that is closer to the middle one\n        else\n       \
    \     val middle = (numbers(0) + numbers(1)) / 2\n            // Check which number\
    \ is closer to the middle one\n            if (Math.abs(numbers(0) - middle) <\
    \ Math.abs(numbers(1) - middle))\n                (numbers(0), middle)\n     \
    \       else\n                (middle, numbers(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjontvke.scala:34)\n\tat Problem.main(tmpfjontvke.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val indexMap = numbers.map(x => (x, 0)).zipWithIndex.toMap\n\
    \        var minDistance = math.max(numbers.map(x => math.abs(x - numbers.min))).min\n\
    \        var result = numbers.min\n        var minIndex = 0\n        for ((value,\
    \ index) <- indexMap) {\n            if (math.abs(value - result) < minDistance)\
    \ {\n                minDistance = math.abs(value - numbers.min)\n           \
    \     result = value\n                minIndex = index\n            }\n      \
    \  }\n        (result, numbers.max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1_xe2vt4.scala:12:31 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mminDistance\e[0m = math.max(numbers.map(\e\
    [36mx\e[0m => math.abs(x - numbers.min))).min\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (List[Float])\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_xe2vt4.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (math.abs(value - result) <\
    \ minDistance) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of (Float, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1_xe2vt4.scala:17:45 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                minDistance = math.abs(value - numbers.min)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of (Float, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1_xe2vt4.scala:18:25 --------------------\e[0m\e\
    [0m"
  stdout: ''
  timestamp: 1660028914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val (minLoc, maxLoc) = (numbers.min, numbers.max)\n    \
    \    val minI = numbers.indexOf(minLoc)\n        val maxI = numbers.indexOf(maxLoc)\n\
    \        if(minI == -1) //return (maxLoc, minLoc)\n        (maxLoc, minLoc)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplanffr2v.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(minI ==\
    \ -\e[31m1\e[0m) \e[34m//return (maxLoc, minLoc)\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m       \
    \ Required: (Float, Float)\n\e[31m   |\e[0m        Maybe you are missing an else\
    \ part for the conditional?\n\e[31m15 |\e[0m        (maxLoc, minLoc)\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallest = math.min(numbers.head)\n        val largest\
    \ = math.max(numbers.last)\n        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val halfwayPoint = (sortedNumbers.head + sortedNumbers.last) / 2\n  \
    \      if (smallest == largest ) {\n            (smallest, largest)\n        }\
    \ else {\n            if (smallest < halfwayPoint) {\n                findClosestElements(sortedNumbers.takeWhile(_\
    \ < smallest))\n            } else {\n                findClosestElements(sortedNumbers.takeWhile(_\
    \ > largest))\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpavmjyb9q.scala:11:28 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers.head)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers.head : => Float))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpavmjyb9q.scala:12:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers.last)\n\e[31m\e[31m   |\e[0m       \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers.last\
    \ : => Float))\n2 errors found\n"
  stdout: ''
  timestamp: 1660028910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val setOfClosest = new mutable.HashSet[Float]\n        numbers.zip(numbers.drop(1)).foreach{\
    \ t =>\n            val distance = math.sqrt(math.pow(t[0] - t[1], 2.0f))\n  \
    \          setOfClosest.add(distance)\n        }\n        if (setOfClosest.size\
    \ == 1) {\n            return (numbers(0), numbers(0))\n        }\n        if\
    \ (setOfClosest.size == 2) {\n            return (numbers(0), numbers(1))\n  \
    \      }\n        val sortedSetOfClosest = setOfClosest.sortWith(_ < _)\n    \
    \    return (numbers(sortedSetOfClosest.head), numbers(sortedSetOfClosest.last))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyfe6p6o.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msetOfClosest\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpwyfe6p6o.scala:13:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \     \e[33mval\e[0m \e[36mdistance\e[0m = math.sqrt(math.pow(t[\e[31m0\e[0m]\
    \ - t[\e[31m1\e[0m], \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m               missing\
    \ arguments for \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mNonEmptyTuple\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpwyfe6p6o.scala:13:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mdistance\e[0m = math.sqrt(math.pow(t[\e\
    [31m0\e[0m] - t[\e[31m1\e[0m], \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                                             ^\e[0m\n\e[31m   |\e[0m      Match\
    \ type reduction failed since selector  (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m\
    \      matches none of the cases\n\e[31m   |\e[0m\n\e[31m   |\e[0m          case\
    \ x *: xs => n.type\e[33m match \e[0m{\n\e[31m   |\e[0m        case (\e[31m0\e\
    [0m : Int) => x\n\e[31m   |\e[0m        case scala.compiletime.ops.int.S[n1] =>\
    \ scala.Tuple.Elem[xs, n1]\n\e[31m   |\e[0m      }\n\e[31m\e[31m-- Error: /tmp/tmpwyfe6p6o.scala:13:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \     \e[33mval\e[0m \e[36mdistance\e[0m = math.sqrt(math.pow(t[\e[31m0\e[0m]\
    \ - t[\e[31m1\e[0m], \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0m             \
    \  missing arguments for \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m\
    \ \e[35mNonEmptyTuple\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val distances = new mutable.HashMap[Float, Float]()\n  \
    \      // Use first and last elements as keys and values will initially be undefined\n\
    \        distances.put(numbers(0), numbers(0))\n        distances.put(numbers(numbers.length\
    \ - 1), numbers(numbers.length - 1))\n        var smallestDistance = distances.getOrElse(numbers(0),\
    \ Float.PositiveInfinity)\n        var largestDistance = distances.getOrElse(numbers(0),\
    \ Float.NegativeInfinity)\n\n        // Loop through the rest of the elements\
    \ in the list\n        for {i <- 1 to numbers.length - 2} {\n            val currentDistance\
    \ = numbers(i) - numbers(i - 1)\n            if (currentDistance < smallestDistance)\
    \ {\n                smallestDistance = currentDistance\n            }\n     \
    \       if (currentDistance > largestDistance) {\n                largestDistance\
    \ = currentDistance\n            }\n            distances.put(numbers(i), currentDistance)\n\
    \        }\n        // Return the smallest and largest number pair in the list\
    \ as required\n        (numbers(numbers.length - 1), numbers(numbers.length -\
    \ 2))\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2k4_3py.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdistances\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mFloat\e[0m, \e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sortedNums = numbers.sortBy(_)\n        val leftIndex\
    \    = sortedNums.indexWhere(_ < sortedNums(0))\n        val rightIndex   = sortedNums.indexWhere(_\
    \ > sortedNums(1))\n        val leftVal      = sortedNums(leftIndex)\n       \
    \ val rightVal     = sortedNums(rightIndex)\n        (leftVal, rightVal)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx4_3dhz3.scala:11:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msortedNums\e[0m = numbers.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660028920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n      val aToB = (numbers.map(_.abs) - numbers.map(_.abs).min).max\n\
    \      (numbers.min(aToB), numbers.max(aToB))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnf2_bbwg.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mval\e[0m \e[36maToB\e[0m = (numbers.map(_.abs)\
    \ - numbers.map(_.abs).min).max\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.sortWith(_ < _)\n        if (numbers.length < 2)\n\
    \            numbers.head\n        else\n            math.abs(numbers.head - numbers.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3x0pi6o.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            numbers.head\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Float\n\e[31m   |\e[0m            Required: \e[1m\e[32m(\e[0m\e[1m\e[32mFloat\e\
    [0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mFloat\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3x0pi6o.scala:15:20 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            math.abs(numbers.head - numbers.last)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Found:    Float\n\e[31m   |\e[0m            Required:\
    \ \e[1m\e[32m(\e[0m\e[1m\e[32mFloat\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mFloat\e\
    [1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var largest = numbers.head\n        var smallest = numbers.head\n\
    \        for (i <- numbers.tail) {\n            if (i < smallest || (i == smallest\
    \ && i != largest)) {\n                smallest = i\n            } else if (i\
    \ > largest || (i == largest && i != smallest)) {\n                largest = i\n\
    \            }\n        }\n        (largest, smallest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1i8xfrof.scala:23)\n\tat Problem.main(tmp1i8xfrof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestElement = numbers.min\n        val largestElement\
    \ = numbers.max\n        (smallestElement, largestElement)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bnf_fyx.scala:16)\n\tat Problem.main(tmp6bnf_fyx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.length < 2) throw new IllegalArgumentException(\"\
    Numbers must have two or more elements!\");\n        val n = numbers.size\n  \
    \      val min1 = math.min(numbers(0), numbers(1))\n        val max1 = math.max(numbers(0),\
    \ numbers(1))\n        for (i <- 2 to n) {\n            val min2 = math.min(numbers(i),\
    \ numbers(i - 1))\n            val max2 = math.max(numbers(i), numbers(i - 1))\n\
    \            val diff = math.abs(min2 - min1)\n            if (diff < math.min(max1,\
    \ max2)) min2 = min1\n            if (diff < math.max(max1, max2)) max2 = max1\n\
    \            min1 = min2\n            max1 = max2\n        }\n        (min1, max1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpy5xozbmh.scala:19:50 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (diff < math.min(max1, max2))\
    \ min2 = min1\n\e[31m\e[31m   |\e[0m                                         \
    \    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \      Reassignment to val min2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpy5xozbmh.scala:20:50 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mif\e[0m (diff < math.max(max1, max2)) max2 = max1\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Reassignment\
    \ to val max2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpy5xozbmh.scala:21:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            min1 = min2\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Reassignment to val min1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpy5xozbmh.scala:22:17 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            max1 = max2\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val max1\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Return first two numbers in order (smaller number, larger\
    \ number).\n        // Return them as tuple. (Smallest number, Largest number)\n\
    \        val result = numbers.minBy(x => x) (numbers.maxBy(x => x) )\n       \
    \ (result, result)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmwfwldv7.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = numbers.minBy(\e[36mx\e[0m => x) (numbers.maxBy(\e[36mx\e[0m => x) )\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    Float\n\
    \e[31m   |\e[0m                                            Required: Ordering[Float]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.minBy { x => math.abs(x - numbers.last) }.last.asInstanceOf[Float],\
    \ numbers.maxBy { x => math.abs(x - numbers.last) }.last.asInstanceOf[Float]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp183r3d7g.scala:11:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        numbers.minBy { \e[36mx\e[0m => math.abs(x -\
    \ numbers.last) }.last.asInstanceOf[\e[35mFloat\e[0m], numbers.maxBy { x => math.abs(x\
    \ - numbers.last) }.last.asInstanceOf[Float]\n\e[31m\e[31m   |\e[0m          \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                 end of statement expected but\
    \ ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp183r3d7g.scala:11:58\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.minBy { \e\
    [36mx\e[0m => math.abs(x - numbers.last) }.last.asInstanceOf[\e[35mFloat\e[0m],\
    \ numbers.maxBy { x => math.abs(x - numbers.last) }.last.asInstanceOf[Float]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value last is not a member of Float\n2 errors found\n"
  stdout: ''
  timestamp: 1660028921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minDiff = numbers(0) - numbers(1)\n        val minDiffIndex\
    \ = numbers.indexWhere(_ == minDiff)\n        numbers(0), numbers(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeanao9g_.scala:13:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers(\e[31m0\e[0m), numbers(\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   end of statement expected but ',' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numSet = numbers.toSet\n        val sortedNumbers =\
    \ numbers.sort\n        if (sortedNumbers.head == sortedNumbers.last)\n      \
    \      (sortedNumbers.head, sortedNumbers.last)\n        else {\n            val\
    \ first = sortedNumbers.head\n            val last = sortedNumbers.last\n    \
    \        val diff = last - first\n            val maxDiff = diff / 2\n       \
    \     for (i <- 0 until sortedNumbers.length - 1 by -1) {\n                val\
    \ testVal = sortedNumbers(i)\n                val testDiff = testVal - first\n\
    \                if (diff <= testDiff && testDiff <= maxDiff) {\n            \
    \        return (sortedNumbers(i), sortedNumbers(i + 1))\n                }\n\
    \            }\n            (sortedNumbers.last, sortedNumbers.first)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6yv892d_.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msortedNumbers\e[0m = numbers.sort\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue sort is not a member of List[Float] - did you mean numbers.sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smaller = numbers.min\n        val larger = numbers.max\n\
    \        numbers.zip(numbers.tail).map {\n            case (currentVal, nextVal)\
    \ => math.abs(nextVal - currentVal) < math.abs(nextVal - smaller) ? currentVal\
    \ : nextVal\n        }.sortWith(_ > _).take(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9ml22pu.scala:14:118 -----------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (currentVal, nextVal) =>\
    \ math.abs(nextVal - currentVal) < math.abs(nextVal - smaller) ? currentVal :\
    \ nextVal\n\e[31m\e[31m   |\e[0m                                             \
    \                                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ type nextVal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9ml22pu.scala:14:103\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m\
    \ (currentVal, nextVal) => math.abs(nextVal - currentVal) < math.abs(nextVal -\
    \ smaller) ? currentVal : nextVal\n\e[31m\e[31m   |\e[0m                     \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value ? is not a member\
    \ of Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9ml22pu.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        }.sortWith(_ > _).take(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val m = numbers.length\n        if (m <= 1) throw new IllegalArgumentException\n\
    \n        // Find the two closest numbers\n        var minDiff = numbers(0) -\
    \ numbers(1)\n        var minIndex = 0\n        var maxIndex = 1\n        for\
    \ (i <- 1 to m) {\n            val diff = numbers(i) - numbers(minIndex)\n   \
    \         if (diff < minDiff) {\n                minDiff = diff\n            \
    \    minIndex = i\n            } else if (diff > maxDiff) {\n                maxIndex\
    \ = i\n            }\n        }\n\n        // Return the two closest numbers\n\
    \        (numbers(minIndex), numbers(maxIndex))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7radc05.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (diff > maxDiff)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                              Not found: maxDiff\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = numbers.min\n        val max = numbers.max\n \
    \       val listWithClosestPair = (numbers zip numbers).filter(\n            n\
    \ => (Math.abs(n._1 - min) < Math.abs(n._2 - min))\n                || (Math.abs(n._1\
    \ - max) < Math.abs(n._2 - max))\n        ).sortWith(\n            (a : Float,\
    \ b : Float) => a.toInt - b.toInt\n        ).take(2)\n        (listWithClosestPair.head._1,\
    \ listWithClosestPair.head._2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnae2ya59.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            (\e[36ma\e[0m : \e\
    [35mFloat\e[0m, \e[36mb\e[0m : \e[35mFloat\e[0m) => a.toInt - b.toInt\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      Found:    Int\n\e[31m   |\e\
    [0m                                      Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val m = numbers.foldLeft(numbers.min){\n            case\
    \ (min, num) => (num < min) ? num : min\n        }\n\n        val n = numbers.foldLeft(numbers.max){\n\
    \            case (min, num) => (num > min) ? num : min\n        }\n\n       \
    \ (m, n)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwncmwli.scala:12:51 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m (min, num) => (num < min)\
    \ ? num : min\n\e[31m\e[31m   |\e[0m                                         \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                         \
    \          Not found: type min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkwncmwli.scala:12:43 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            \e[33mcase\e[0m (min, num) => (num < min) ? num : min\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value ? is not a member of Boolean\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkwncmwli.scala:16:51 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (min, num) => (num > min)\
    \ ? num : min\n\e[31m\e[31m   |\e[0m                                         \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                         \
    \          Not found: type min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkwncmwli.scala:16:43 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mcase\e[0m (min, num) => (num > min) ? num : min\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.size == 0) return (numbers(0), numbers(0))\n\
    \        var smallestValue : Float = numbers(0)\n        var biggestValue : Float\
    \ = numbers(0)\n        numbers.foreach(n => { if (n > smallestValue) smallestValue\
    \ = n })\n        numbers.foreach(n => { if (n < biggestValue) biggestValue =\
    \ n })\n        (smallestValue, biggestValue)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk5k62yro.scala:19)\n\tat Problem.main(tmpk5k62yro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minDist = numbers.foldLeft(0.0f){ (minDist, number)\
    \ =>\n            val dist = math.abs(number - minDist)\n            if (dist\
    \ < minDist)\n                dist\n            else\n                minDist\n\
    \        }\n        numbers(numbers.indexOfMin(numbers))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwu2gtbsx.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        numbers(numbers.indexOfMin(numbers))\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMin\
    \ is not a member of List[Float] - did you mean numbers.indexOf?\n1 error found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sorted = numbers.toList.sorted\n        val minDiff\
    \ = math.abs(sorted((sorted[1] - sorted[0]) / 2.0f))\n        (sorted((sorted[1]\
    \ - sorted[0]) / 2.0f), sorted((sorted[-1] - sorted[-2]) / 2.0f))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptmvfxj5x.scala:12:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mminDiff\e[0m = math.abs(sorted((sorted[\e\
    [31m1\e[0m] - sorted[\e[31m0\e[0m]) / \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e\
    [0m does not take type parameters\n\e[31m\e[31m-- Error: /tmp/tmptmvfxj5x.scala:13:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ (sorted((sorted[\e[31m1\e[0m] - sorted[\e[31m0\e[0m]) / \e[31m2.0f\e[0m), sorted((sorted[-\e\
    [31m1\e[0m] - sorted[-\e[31m2\e[0m]) / \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e\
    [35mapply\e[0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m does not take type\
    \ parameters\n\e[31m\e[31m-- Error: /tmp/tmptmvfxj5x.scala:13:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        (sorted((sorted[\e[31m1\e[0m] - sorted[\e[31m0\e\
    [0m]) / \e[31m2.0f\e[0m), sorted((sorted[-\e[31m1\e[0m] - sorted[-\e[31m2\e[0m])\
    \ / \e[31m2.0f\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e\
    [0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m does not take\
    \ type parameters\n3 errors found\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val x = numbers.min\n        val y = numbers.max\n     \
    \   val leftClosest = numbers(numbers.indexWhere(_ == x) + 1)\n        val rightClosest\
    \ = numbers(numbers.indexWhere(_ == y) - 1)\n        (leftClosest, rightClosest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1myrl4k_.scala:18)\n\tat Problem.main(tmp1myrl4k_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var minDistance = math.abs(numbers(0) - numbers(1))\n  \
    \      var minIndex = 0\n        var minValue = numbers(0)\n        var minNumber\
    \ = numbers(1)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ difference = math.abs(numbers(i) - numbers(i+1))\n            if (difference\
    \ < minDistance) {\n                minDistance = difference\n               \
    \ minIndex = i\n                minValue = numbers(i)\n                minNumber\
    \ = numbers(i+1)\n            }\n        }\n        (minValue, minNumber)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkeytfaoc.scala:28)\n\tat Problem.main(tmpkeytfaoc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val nums = numbers.toSeq\n        val minDist = nums.minBy(_\
    \ * -1)\n        val maxDist = nums.maxBy(_ * -1)\n        return (minDist, maxDist)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bs2cfg9.scala:17)\n\tat Problem.main(tmp6bs2cfg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.size > 2, \"numbers.length <= 2\")\n   \
    \     val a = numbers.head + numbers.last\n        val smallestClosest = numbers.sortWith(_\
    \ < _).min\n        val largestClosest = numbers.sortWith(_ > _).max\n       \
    \ smallestClosest -> largestClosest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb27bv05.scala:18)\n\tat Problem.main(tmpdb27bv05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var largest = numbers.last\n        var smallest = numbers.head\n\
    \n        for (number <- numbers) {\n            if (number > largest) {\n   \
    \             largest = number\n            } else if (number < smallest) {\n\
    \                smallest = number\n            }\n        }\n\n        (smallest,\
    \ largest)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rueel7p.scala:25)\n\tat Problem.main(tmp9rueel7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Find two numbers, each closest to each other in the supplied\
    \ list\n        val diffs = numbers.zipWithIndex.filter { case (n, _) => n !=\
    \ numbers.last._ }\n        // Return the smaller number as the smaller index\
    \ value\n        val small = diffs.minBy(_._2)\n        // Return the larger number\
    \ as the larger index value\n        val large = diffs.maxBy(_._2)\n        (small._1,\
    \ large._1)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1a4txd9_.scala:12:83 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e[0m = numbers.zipWithIndex.filter\
    \ { \e[33mcase\e[0m (n, _) => n != numbers.last._ }\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                   an identifier expected,\
    \ but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var sortedNumbers = numbers.sortBy(-_)\n        var smallNumber\
    \ = sortedNumbers.head\n        var bigNumber = sortedNumbers.last\n        sortedNumbers\
    \ = sortedNumbers.dropRight(1)\n        sortedNumbers.foreach(n => {\n       \
    \     if (n < smallNumber) {\n                smallNumber = n\n            }\n\
    \            if (n > bigNumber) {\n                bigNumber = n\n           \
    \ }\n        })\n        if (smallNumber == bigNumber) {\n            return (smallNumber,\
    \ bigNumber)\n        }\n        if (smallNumber < bigNumber) {\n            val\
    \ smallestDistance = closestDistance(smallNumber, bigNumber, sortedNumbers)\n\
    \            return smallestDistance._1 -> smallestDistance._2\n        }\n  \
    \      val largestDistance = closestDistance(smallNumber, bigNumber, sortedNumbers)\n\
    \        return largestDistance._2 -> largestDistance._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1ck6021.scala:27:35 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36msmallestDistance\e[0m\
    \ = closestDistance(smallNumber, bigNumber, sortedNumbers)\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                 Not found: closestDistance\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1ck6021.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mlargestDistance\e[0m = closestDistance(smallNumber,\
    \ bigNumber, sortedNumbers)\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ closestDistance\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Using a map function and a fold function to calculate\
    \ the average\n        val m = (1 to numbers.size).map(i => numbers(i)).foldLeft(0.0f)\
    \ {\n            case (acc, x) => acc + (x * x)\n        }\n        val n = (1\
    \ to numbers.size).map(i => numbers(i)).foldLeft(0.0f) {\n            case (acc,\
    \ x) => acc + (x * x)\n        }\n        val d = (m - n) / (2.0f * n)\n     \
    \   // Return the two values closest to each other\n        val diffs = (0.0 to\
    \ n).map { i => (i, (numbers(i) - m) / d) }\n        val min = diffs.minBy(_._1)._2\n\
    \        val max = diffs.maxBy(_._1)._2\n        (min, max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_za_2lp.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e[0m = (\e[31m0.0\e\
    [0m to n).map { \e[36mi\e[0m => (i, (numbers(i) - m) / d) }\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue to is not a member of\
    \ Double, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigDecimal.double2bigDecimal\n\e[31m   |\e[0m\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.size == 0) return null\n        if (numbers.size\
    \ < 2) return null\n        val minDistance = numbers(numbers.size - 1)\n    \
    \    val maxDistance = numbers(0)\n        for (i <- 1 to numbers.size - 1) {\n\
    \            val distance = math.sqrt(numbers(i) * (numbers(i) - minDistance)\
    \ * (numbers(i) - minDistance))\n            if (distance < maxDistance) {\n \
    \               maxDistance = distance\n            } else if (distance > maxDistance)\
    \ {\n                minDistance = distance\n            } else {\n          \
    \      val temp = numbers(i).toFloat\n                if (temp < minDistance)\
    \ {\n                    minDistance = temp\n                }\n            }\n\
    \        }\n        (minDistance, maxDistance)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxe2xiwgj.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                maxDistance =\
    \ distance\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (distance : Double)\n\e\
    [31m   |\e[0m                              Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxe2xiwgj.scala:20:30 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                minDistance = distance\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Found:    (distance : Double)\n\e[31m   |\e[0m       \
    \                       Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpxe2xiwgj.scala:24:32 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    minDistance = temp\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \      Reassignment to val minDistance\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val maxPairs = numbers.map(_ => math.abs(_)).toSet\n   \
    \     numbers.toList.sortWith(maxPairs.min)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzfp0wqhu.scala:11:49 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxPairs\e[0m = numbers.map(_\
    \ => math.abs(_)).toSet\n\e[31m\e[31m   |\e[0m                               \
    \                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of\
    \ expanded function:\n\e[31m   |\e[0m   _$2 => math.abs(_$2).\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzfp0wqhu.scala:12:32 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numbers.toList.sortWith(maxPairs.min)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    Any\n\e[31m   |\e[0m              \
    \                  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallest = numbers(0)\n        val largest = numbers(0)\n\
    \        numbers foreach {\n            (number : Float) => {\n              \
    \  if (number < smallest ) {\n                    smallest = number\n        \
    \        }\n                if (number > largest ) {\n                    largest\
    \ = number\n                }\n            }\n        }\n        (smallest, largest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpiscx54r0.scala:16:29 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    smallest = number\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Reassignment to val smallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpiscx54r0.scala:19:28 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                    largest = number\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Reassignment to val largest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.minBy {\n        case (first, second) =>\n     \
    \       (second - first).abs()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_w6f_th3.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            (second - first).abs()\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp_w6f_th3.scala:14:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.length > 1)\n        val min: Float = numbers.min\n\
    \        val max: Float = numbers.max\n        var low: Float = min\n        var\
    \ high: Float = max\n        var index: Int = 0\n        while (index < numbers.length)\
    \ {\n            if (low + numbers(index) < high) {\n                low = low\
    \ + numbers(index)\n                index+=1\n            } else {\n         \
    \       high = high + numbers(index)\n                index+=1\n            }\n\
    \        }\n        (min, max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnyvfa3u.scala:29)\n\tat Problem.main(tmprnyvfa3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numberSorted = numbers.sortWith(_ < _)\n        val\
    \ first = numberSorted.head\n        val second = numberSorted.last\n        (first,\
    \ second)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp96vnvyf8.scala:17)\n\tat Problem.main(tmp96vnvyf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.sortWith(_ < _)\n        val min1 = numbers.head\n\
    \        val min2 = numbers.last\n        (min1, min2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeq045efj.scala:17)\n\tat Problem.main(tmpeq045efj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val m = numbers.size\n        if (m > 2) {\n           \
    \ val xDiff = numbers.map(_-numbers(0))\n            val yDiff = numbers.map(_-numbers(1))\n\
    \            val min = xDiff.min\n            val max = xDiff.max\n          \
    \  val min = yDiff.min\n            if (min < max) {\n                if (min\
    \ < 0.0f) {\n                    val (x, _) = numbers.span(_ < min)\n        \
    \            val (y, _) = numbers.span(_ < min)\n                    val (min,\
    \ _) = numbers.span(_ < min)\n                    ((x, y), (min, _))\n       \
    \         } else {\n                    val (_, _) = numbers.span(_ < min)\n \
    \                   val (y, _) = numbers.span(_ < min)\n                    val\
    \ (min, _) = numbers.span(_ < min)\n                    ((min, _), (y, x))\n \
    \               }\n            } else {\n                val (_, _) = numbers.span(_\
    \ < min)\n                val (_, _) = numbers.span(_ < min)\n               \
    \ val (min, _) = numbers.span(_ < min)\n                ((min, _), (x, y))\n \
    \           }\n        } else {\n            (numbers(0), numbers(1))\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8nlvarp5.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmin\e[0m = yDiff.min\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmin\
    \ is already defined as \e[33mvalue\e[0m \e[35mmin\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nlvarp5.scala:22:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e\
    [33mval\e[0m (min, _) = numbers.span(_ < min)\n\e[31m\e[31m   |\e[0m         \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                Recursive \e[33mvalue\e[0m \e[35mmin\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8nlvarp5.scala:20:48\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                   \
    \ \e[33mval\e[0m (x, _) = numbers.span(_ < min)\n\e[31m\e[31m   |\e[0m       \
    \                                       ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mFloat\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float):\
    \ Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\
    \e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m\
    \   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((min : List[Float]))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmp8nlvarp5.scala:21:48 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m (y, _) = numbers.span(_\
    \ < min)\n\e[31m\e[31m   |\e[0m                                              ^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m<\e[0m in \e[33mclass\e[0m \e[35mFloat\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long):\
    \ Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\
    \e[31m  "
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sortedNumbers = numbers.sort\n        if (sortedNumbers.size\
    \ == 2) {\n            (sortedNumbers(0), sortedNumbers(1))\n        } else {\n\
    \            val smallestOne = sortedNumbers(0)\n            val largestOne =\
    \ sortedNumbers(sortedNumbers.size - 1)\n            val smallestTwo = sortedNumbers(1)\n\
    \            val largestTwo = sortedNumbers(sortedNumbers.size - 2)\n        \
    \    val newNumbers = List(smallestOne, smallestTwo, largestOne, largestTwo)\n\
    \            (findClosestElements(newNumbers), findClosestElements(newNumbers))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkhl3xttb.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msortedNumbers\e[0m = numbers.sort\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue sort is not a member of List[Float] - did you mean numbers.sortBy?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkhl3xttb.scala:20:32 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            (findClosestElements(newNumbers), findClosestElements(newNumbers))\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mFloat\e[0m\e[1m\e\
    [31m,\e[0m\e[1m\e[31m \e[0mFloat\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkhl3xttb.scala:20:65\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            (findClosestElements(newNumbers),\
    \ findClosestElements(newNumbers))\n\e[31m\e[31m   |\e[0m                    \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    \e[1m\e[31m(\e[0m\e\
    [1m\e[31mFloat\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mFloat\e[1m\e[31m)\e[0m\n\e\
    [31m   |\e[0m                                              Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val listSize = numbers.size\n        val mid = numbers.size\
    \ / 2\n        numbers.take(mid).zip(numbers.drop(mid)).map {\n            case\
    \ (firstElement, secondElement) => (secondElement - firstElement).toInt\n    \
    \    }.min match {\n            case smallestElement if (smallestElement < listSize\
    \ / 2) => (smallestElement + smallestElement) / 2\n            case smallestElement\
    \ if (smallestElement > listSize / 2) => (listSize / 2 + listSize / 2) / 2\n \
    \           case _ => listSize / 2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncx4ldhi.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m smallestElement\
    \ \e[33mif\e[0m (smallestElement < listSize / \e[31m2\e[0m) => (smallestElement\
    \ + smallestElement) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Int\n\e[31m   |\e[0m                                                Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncx4ldhi.scala:17:72\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m smallestElement\
    \ \e[33mif\e[0m (smallestElement > listSize / \e[31m2\e[0m) => (listSize / \e\
    [31m2\e[0m + listSize / \e[31m2\e[0m) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Int\n\e[31m   |\e[0m                                                Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncx4ldhi.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m _\
    \ => listSize / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Int\n\e[31m   |\e[0m     \
    \                 Required: (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = numbers.min\n        val max = numbers.max\n \
    \       val minIdx = 0\n        val maxIdx = numbers.length - 1\n\n        if\
    \ (maxIdx <= minIdx) {\n            return (minIdx -> maxIdx)\n        }\n   \
    \     else {\n            val midIdx = math.ceil(Math.ceil((maxIdx - minIdx) /\
    \ 2.0f))\n            val midVal = numbers(midIdx)\n            val numMidVals\
    \ = numbers.length - midIdx // how many times will midVal be repeated\n      \
    \      val closestPair : Tuple2[Int, Float] = numbers.sliding(numMidVals + 1).sliding(numMidVals\
    \ + 1).map {\n                case List(a,b,c) => new Tuple2[Int, Float](a,b)\n\
    \            }.toList\n            if (closestPair.head._1 == maxIdx) {\n    \
    \            return (minIdx -> maxIdx)\n            }\n            else if (closestPair.head._1\
    \ == minIdx) {\n                return (maxIdx -> minIdx)\n            }\n   \
    \         else {\n                val smallerIdx = closestPair.head._1\n     \
    \           val largerIdx = closestPair.last._1\n                val smallerVal\
    \ = closestPair.head._2\n                val largerVal = closestPair.last._2\n\
    \                if (largerVal == smallerVal) {\n                    return (smallerIdx\
    \ -> largerIdx)\n                }\n                else {\n                 \
    \   val nextSmaller = closestPair.head._1 + 1\n                    if (nextSmaller\
    \ > numbers.length - 1) {\n                        return (smallerIdx -> maxIdx)\n\
    \                    }\n                    else {\n                        val\
    \ nextLarger = closestPair.last._1 - 1\n                        val nextSmaller\
    \ = closestPair.last._1 + 1\n                        if (nextSmaller > numbers.length\
    \ - 1) {\n                            return (nextLarger -> maxIdx)\n        \
    \                }\n                        else {\n                         \
    \   val nextLargerNextSmaller = closestPair.last._1 - 1 + 1\n                \
    \            val nextSmallerNextLarger = closestPair.last._1 + 1 + 1\n       \
    \                     if (nextLargerNextSmaller > numbers.length - 1) {\n    \
    \                            return (nextLarger -> nextSmallerNextLarger)\n  \
    \                          }\n                            else {\n           \
    \                     val nextSmallerNextLargerNextSmaller = closestPair.last._1\
    \ + 1 + 1 + 1\n                                val nextLargerNextSmallerNextLarger\
    \ = closestPair.last._1 + 1 + 1 + 1 + 1\n                                if (nextSmallerNextLargerNextSmaller\
    \ > numbers.length - 1) {\n                                    return (nextSmallerNextL\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8i7z9az.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8i7z9az.scala:72:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpu8i7z9az.scala:17:20 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            \e[33mreturn\e[0m (minIdx -> maxIdx)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (Int, Int)\n\e[31m   |\e[0m                    Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8i7z9az.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e\
    [36mmidVal\e[0m = numbers(midIdx)\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (midIdx : Double)\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8i7z9az.scala:23:67\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mclosestPair\e[0m : \e[35mTuple2\e[0m[\e[35mInt\e[0m, \e[35mFloat\e[0m] = numbers.sliding(numMidVals\
    \ + \e[31m1\e[0m).sliding(numMidVals + \e[31m1\e[0m).map {\n\e[31m\e[31m   |\e\
    [0m                                                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8i7z9az.scala:23:91\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36mclosestPair\e[0m"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = math.min(numbers)\n        val max = math.max(numbers)\n\
    \        if (max < min) (min,max)\n        else {\n            var smallest =\
    \ smallest : Option[Float] = None\n            var largest = largest : Option[Float]\
    \ = None\n            var index = numbers.indexOf(min)\n            while (index\
    \ != -1) {\n                if (largest == None) {\n                    largest\
    \ = Some(numbers.get(index))\n                } else {\n                    if\
    \ (numbers.get(index) < largest.get) {\n                        largest = Some(numbers.get(index))\n\
    \                    }\n                }\n                index = numbers.indexOf(min)\n\
    \            }\n            if (smallest == None) {\n                smallest\
    \ = Some(numbers.get(index))\n            } else {\n                if (numbers.get(index)\
    \ > smallest.get) {\n                    smallest = Some(numbers.get(index))\n\
    \                }\n            }\n            (smallest.get,largest.get)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp42vgms9.scala:15:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mvar\e[0m \e[36msmallest\e[0m = smallest\
    \ : \e[35mOption\e[0m[\e[35mFloat\e[0m] = None\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                        end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpp42vgms9.scala:16:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mvar\e[0m \e[36mlargest\e[0m = largest\
    \ : \e[35mOption\e[0m[\e[35mFloat\e[0m] = None\n\e[31m\e[31m   |\e[0m        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                      end of statement expected but '=' found\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpp42vgms9.scala:11:23 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : List[Float]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpp42vgms9.scala:12:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : List[Float]))\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpp42vgms9.scala:15:27 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mvar\e[0m \e[36msmallest\e[0m = smallest\
    \ : \e[35mOption\e[0m[\e["
  stdout: ''
  timestamp: 1660028937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var min = numbers(0)\n        var max = numbers(0)\n   \
    \     for (n1 <- numbers) {\n            for (n2 <- numbers) {\n             \
    \   if(n1 < n2 && n1 > min && n2 > max) {\n                    min = n2\n    \
    \                max = n1\n                }\n            }\n        }\n     \
    \   (min, max)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq_z58mlq.scala:24)\n\tat Problem.main(tmpq_z58mlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.length < 2) throw new IllegalArgumentException(\"\
    Insufficient number of elements supplied!\")\n        val sortedNumbers = numbers.sorted\n\
    \        val diffs = sortedNumbers.zip(sortedNumbers.drop(1)).map{_ - _}\n   \
    \     val minDiffIndex = diffs.indexOf(diffs.min())\n        (sortedNumbers(minDiffIndex),\
    \ sortedNumbers(minDiffIndex+1))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr739whrj.scala:14:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminDiffIndex\e[0m = diffs.indexOf(diffs.min())\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord:\
    \ Ordering[B]): Float\n1 error found\n"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.size > 2, \"You entered too few numbers\
    \ try again\")\n        require(numbers.forall( x => x > 0.0 && x < 1.0), \"Only\
    \ numbers between 0.0 and 1.0 please!\")\n\n        // Create a list of closest\
    \ numbers by calculating the distance of each from each other\n        // and\
    \ sort the list from smallest to largest\n        val closestNumbers = numbers.map(x\
    \ => numbers.map((x -_).abs).reduce(_ + _).abs).map(x => (x, x)).sortBy(_._1)\n\
    \        // Return the two numbers closest to eachother\n        closestNumbers.take(2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxscicelt.scala:16:62 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosestNumbers\e[0m = numbers.map(\e\
    [36mx\e[0m => numbers.map((x -_).abs).reduce(_ + _).abs).map(\e[36mx\e[0m => (x,\
    \ x)).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                    \
    \                          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => x - _$1.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxscicelt.scala:16:79 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosestNumbers\e[0m = numbers.map(\e\
    [36mx\e[0m => numbers.map((x -_).abs).reduce(_ + _).abs).map(\e[36mx\e[0m => (x,\
    \ x)).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                    \
    \                                         ^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpxscicelt.scala:16:118 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mclosestNumbers\e[0m = numbers.map(\e\
    [36mx\e[0m => numbers.map((x -_).abs).reduce(_ + _).abs).map(\e[36mx\e[0m => (x,\
    \ x)).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mString\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min1 = math.abs(numbers(0) - numbers(1))\n        val\
    \ min2 = math.abs(numbers(0) - numbers(2))\n        if (min1 < min2) {\n     \
    \       (numbers(1), numbers(0))\n        } else {\n            (numbers(0), numbers(2))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dc0_77t.scala:20)\n\tat Problem.main(tmp_dc0_77t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Initialize distance to infinity and to negative infinity\n\
    \        var distance = sys.float.NegativeInfinity\n        var closest = 0.0f\n\
    \        for (number <- numbers) {\n            val diff = number - closest\n\
    \            if (diff < 0.0f) {\n                val temp = Math.abs(distance)\n\
    \                val closestDiff = Math.abs(diff)\n                if (temp <\
    \ closestDiff) {\n                    distance = diff\n                    closest\
    \ = number\n                }\n            }\n        }\n        (closest, distance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi6ic4umx.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mdistance\e[0m = sys.float.NegativeInfinity\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                     value float is not a member of sys\n1 error found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Make two new lists of two elements\n        val firstDifferences\
    \ = (numbers - numbers.min) diff (numbers.min)\n        val secondDifferences\
    \ = (numbers.max - numbers) diff (numbers.max)\n        // Find the closest value\
    \ for each list and return the smallest and largest ones\n        (firstDifferences.min.asInstanceOf[Float],\
    \ secondDifferences.max.asInstanceOf[Float])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp65lc2_i7.scala:12:40 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfirstDifferences\e[0m =\
    \ (numbers - numbers.min) diff (numbers.min)\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of List[Float], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp65lc2_i7.scala:13:45 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msecondDifferences\e[0m =\
    \ (numbers.max - numbers) diff (numbers.max)\n\e[31m\e[31m   |\e[0m          \
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mFloat\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Float\n\e[31m   |\e[0m (x: Int): Float\n\e\
    [31m   |\e[0m (x: Char): Float\n\e[31m   |\e[0m (x: Short): Float\n\e[31m   |\e\
    [0m (x: Byte): Float\n\e[31m   |\e[0mmatch arguments ((numbers : List[Float]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val differences = numbers.zipWithIndex.map {\n         \
    \   case (number, index) => (index.toFloat - number.toFloat)\n        }\n    \
    \    val minDifferenceIndex = differences.min\n\n        val minDifference = differences(minDifferenceIndex)\n\
    \n        val minIndex = differences.zipWithIndex.minBy(_._1)._2\n\n        return\
    \ (numbers(minIndex), numbers(minDifferenceIndex))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi46ksblq.scala:16:40\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminDifference\e\
    [0m = differences(minDifferenceIndex)\n\e[31m\e[31m   |\e[0m                 \
    \                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    (minDifferenceIndex : Float)\n\e[31m   |\e[0m\
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpi46ksblq.scala:20:43 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m (numbers(minIndex), numbers(minDifferenceIndex))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (minDifferenceIndex\
    \ : Float)\n\e[31m   |\e[0m                                  Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val n = numbers.size\n        if (n <= 1) {\n          \
    \  return (numbers(0), numbers(0))\n        }\n        val half = n / 2\n    \
    \    numbers.sortWith((a, b) => math.abs(b - a) < math.abs(b - half))\n      \
    \  if (numbers(n-1) < numbers(half)) {\n            (numbers(n-1), numbers(half))\n\
    \        } else {\n            (numbers(half), numbers(n-1))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9hfjv1o.scala:24)\n\tat Problem.main(tmpc9hfjv1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var minElement = numbers(0)\n        var maxElement = numbers(0)\n\
    \        var minValue = numbers(0)\n        var maxValue = numbers(0)\n\n    \
    \    for (number <- numbers) {\n            if (number < minValue) {\n       \
    \         minValue = number\n            } else if (number > maxValue) {\n   \
    \             maxValue = number\n            }\n\n            minElement = number\n\
    \            maxElement = number\n        }\n\n        (minElement, maxElement)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc6j0uqp7.scala:30)\n\tat Problem.main(tmpc6j0uqp7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.size < 2) {\n            throw new RuntimeException(\"\
    List must have at least two elements\")\n        }\n        var minDiff = numbers.head.toFloat\
    \ - numbers.last.toFloat\n        var minNum : Float = numbers.head.toFloat\n\
    \        var maxNum : Float = numbers.last.toFloat\n        for (n <- numbers.drop(1)){\n\
    \            var diff = (n - maxNum).toFloat\n            if (diff < minDiff){\n\
    \                minDiff = diff\n                minNum = n\n                maxNum\
    \ = n\n            }\n        }\n        (minNum, maxNum)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9xmqtjag.scala:28)\n\tat Problem.main(tmp9xmqtjag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val distances = numbers.map {\n            number => Math.abs(number.toFloat\
    \ - numbers.max).toFloat\n        }\n        val firstIndex = distances.index(distances.min)\
    \ // Index of smallest number in distances\n        val secondIndex = distances.index(distances.max)\
    \ // Index of biggest number in distances\n        distances.take(firstIndex).zip(distances.take(secondIndex))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ur47w6d.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfirstIndex\e[0m = distances.index(distances.min)\
    \ \e[34m// Index of smallest number in distances\e[0m\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue index is not\
    \ a member of List[Float] - did you mean distances.indexOf?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9ur47w6d.scala:15:36 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msecondIndex\e[0m = distances.index(distances.max)\
    \ \e[34m// Index of biggest number in distances\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue index is not\
    \ a member of List[Float] - did you mean distances.indexOf?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9ur47w6d.scala:16:38 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        distances.take(firstIndex).zip(distances.take(secondIndex))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m(Float,\
    \ Float)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: (Float, Float)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val nums = numbers.toList\n        val min1 = nums.min\n\
    \        val max1 = nums.max\n        val min2 = nums.minBy(x => x)\n        val\
    \ max2 = nums.maxBy(x => x)\n        if(min1 == max1) (min2, max2)\n        else\
    \ {\n            val diff1 = Math.abs(min1 - max1)\n            val diff2 = Math.abs(min2\
    \ - max2)\n            if(diff1 < diff2) (min1, max1)\n            else (min2,\
    \ max2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjzythrl3.scala:25)\n\tat Problem.main(tmpjzythrl3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minList = (numbers, numbers.min) match {\n         \
    \   case (x::xs, y::ys) => xs.zip(ys)\n        }\n        val maxList = (numbers,\
    \ numbers.max) match {\n            case (x::xs, y::ys) => xs.zip(ys)\n      \
    \  }\n        if (minList.size < 2) throw new IndexOutOfBoundsException(\"List\
    \ is too small for two elements.\")\n        if (maxList.size < 2) throw new IndexOutOfBoundsException(\"\
    List is too small for two elements.\")\n        val closest = minList._1.minBy(_\
    \ - numbers.get(0))\n        (numbers.get(1), numbers.get(0) - (closest - numbers.get(0))).sorted.unzip\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxo0namlu.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = minList._1.minBy(_\
    \ - numbers.get(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value _1 is not a member of List[(Float,\
    \ Any)]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxo0namlu.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        (numbers.get(\e[31m1\e[0m), numbers.get(\e[31m0\e\
    [0m) - (closest - numbers.get(\e[31m0\e[0m))).sorted.unzip\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[Float],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxo0namlu.scala:20:33\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        (numbers.get(\e[31m1\e\
    [0m), numbers.get(\e[31m0\e[0m) - (closest - numbers.get(\e[31m0\e[0m))).sorted.unzip\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ get is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Get max and min\n        var max = numbers.max\n    \
    \    var min = numbers.min\n        // For each number in the list\n        for\
    \ ( i <- numbers) {\n            // Get squared difference between i and max\n\
    \            val diff = math.pow((i - max), 2)\n            // If this is less\
    \ than the smallest so far\n            if (diff < min) {\n                //\
    \ Set the smallest so far to be this number\n                min = diff\n    \
    \        }\n            // If this is greater than the largest so far\n      \
    \      if (diff > max) {\n                // Set the largest so far to be this\
    \ number\n                max = diff\n            }\n        }\n        // Return\
    \ the smallest two numbers in the list\n        (min, max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ku7p44l.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                min = diff\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    (diff : Double)\n\e[31m   |\e[0m                      Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ku7p44l.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = diff\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    (diff : Double)\n\e[31m   |\e[0m                      Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var smallest = math.Int.MinValue\n        var largest =\
    \ math.Int.MaxValue\n        for (number <- numbers) {\n            if(smallest\
    \ > number) {\n                smallest = number\n            }\n            if(largest\
    \ < number) {\n                largest = number\n            }\n        }\n  \
    \      return (smallest, largest)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mnblukp.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36msmallest\e[0m = math.Int.MinValue\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                    value Int is not a member of math\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5mnblukp.scala:12:27 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mlargest\e[0m = math.Int.MaxValue\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  value Int is not a member of math\n2 errors found\n"
  stdout: ''
  timestamp: 1660028945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n      val sortedNumbers = numbers.sortBy(-_)\n      (sortedNumbers.take(2),\
    \ sortedNumbers.last)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj83adof0.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m      (sortedNumbers.take(\e\
    [31m2\e[0m), sortedNumbers.last)\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mFloat\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m       Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Start with first number and check if it is closer to\
    \ second number than first\n        var closestIndex : Int = -1\n        val closestElement\
    \ = numbers(0)\n        val difference = math.abs(closestElement - numbers(1))\n\
    \        if (difference < 1.0E-6) {\n            // If first number is closer\
    \ to second number than first\n            closestIndex = 0\n        } else if\
    \ (difference < 2.0E-6) {\n            // If second number is closer to first\
    \ number than first\n            closestIndex = 1\n        }\n        if (closestIndex\
    \ != -1) {\n            // Found closest number in given list\n            val\
    \ closestNumber = numbers(closestIndex)\n            // Return tuple (closest\
    \ number 1, closest number 2)\n            return (closestNumber, closestNumber)\n\
    \        } else {\n            // Return tuple (first number 1, first number 2)\n\
    \            return (numbers(0), numbers(1))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqcabin2t.scala:33)\n\tat Problem.main(tmpqcabin2t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Find the difference between each number in the list\n\
    \        var diffs = numbers.zipWithIndex.map { case (n,i) => n - numbers.lift(i)\
    \ }\n\n        // Find the two smallest differences\n        val minDif = diffs.min\n\
    \        val index1 = diffs.indexOf(minDif)\n\n        // The second smallest\
    \ difference is the one not in the previous list\n        val index2 = index1\
    \ + 1\n\n        // Now that we've determined which numbers are closest to eachother,\
    \ we can use these to determine the two closest\n        // elements in the list\n\
    \        // Get the two numbers\n        val (firstClosest, secondClosest) = numbers.span(i\
    \ => i <= index1)\n        (firstClosest, secondClosest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwbcichy0.scala:12:63 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mdiffs\e[0m = numbers.zipWithIndex.map\
    \ { \e[33mcase\e[0m (n,i) => n - numbers.lift(i) }\n\e[31m\e[31m   |\e[0m    \
    \                                                         ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e\
    [33mclass\e[0m \e[35mFloat\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Float\n\e[31m  \
    \ |\e[0m (x: Int): Float\n\e[31m   |\e[0m (x: Char): Float\n\e[31m   |\e[0m (x:\
    \ Short): Float\n\e[31m   |\e[0m (x: Byte): Float\n\e[31m   |\e[0mmatch arguments\
    \ (Option[Float])\n\e[31m\e[31m-- Error: /tmp/tmpwbcichy0.scala:15:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminDif\e[0m = diffs.min\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwbcichy0.scala:25:9 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        (firstClosest, secondClosest)\n\e[31m\e[31m \
    \  |\e[0m         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (firstClosest\
    \ : List[Float])\n\e[31m   |\e[0m         Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwbcichy0.scala:25:23 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        (firstClosest, secondClosest)\n\e[31m\e[31m \
    \  |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             Found:    (secondClosest : List[Float])\n\e[31m   |\e[0m       \
    \                Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val m = numbers.toSet\n        val n = (numbers.head + numbers.last)\
    \ / 2\n        m.map(n).minBy(x => math.abs(x - n))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn_m575jj.scala:13:14\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        m.map(n).minBy(\e[36mx\e\
    [0m => math.abs(x - n))\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              Found:    (n : Float)\n\e[31m   |\e[0m              Required:\
    \ Float => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_m575jj.scala:13:39\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        m.map(n).minBy(\e\
    [36mx\e[0m => math.abs(x - n))\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of (Float, Float),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpn_m575jj.scala:13:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        m.map(n).minBy(\e[36mx\e[0m => math.abs(x - n))\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var smallest: Float = _\n        var largest: Float = _\n\
    \        numbers.sortWith(_ < _).foreach(n => {\n            if(n == smallest\
    \ || n == largest) {\n                return\n            }\n            if(smallest\
    \ == _) {\n                smallest = n\n            } else {\n              \
    \  largest = n\n            }\n        })\n        (smallest, largest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps79yrt0n.scala:15:16\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    Unit\n\e[31m   |\e[0m                Required: (Float, Float)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmps79yrt0n.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(smallest == _) {\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$5 of expanded function:\n\e[31m   |\e[0m   _$5 => smallest == _$5.\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Get the numbers in order (smaller number, larger number)\n\
    \        val sortedNumbers = numbers.sortBy(_.toDouble).toList\n        // Check\
    \ if two numbers arent the same\n        var closestToOther = 0\n        var closestToMe\
    \ = 0\n        var closestToOtherIndex = 0\n        // Iterate the list until\
    \ we find a different number or we reach the end of the list\n        while(sortedNumbers.nonEmpty\
    \ && sortedNumbers.tail.nonEmpty && sortedNumbers.head == sortedNumbers.tail.head)\
    \ {\n            // Check to see if we found the number we are looking for and\
    \ stop looking if we did\n            if(sortedNumbers.head == closestToOther)\
    \ {\n                closestToOtherIndex = 1\n            }\n            else\
    \ {\n                closestToOtherIndex = 0\n            }\n            // Check\
    \ if the current number is smaller than the previously found number in the list\n\
    \            if((sortedNumbers.head - closestToOther < sortedNumbers.tail.head\
    \ - closestToOther) && closestToOtherIndex == 0) {\n                // Store the\
    \ new number if we find it\n                closestToOther = sortedNumbers.head\n\
    \            }\n            // Check if the current number is larger than the\
    \ previously found number in the list\n            else if((sortedNumbers.head\
    \ - closestToOther > sortedNumbers.tail.head - closestToOther) && closestToOtherIndex\
    \ == 1) {\n                // Store the new number if we find it\n           \
    \     closestToOther = sortedNumbers.tail.head\n            }\n            sortedNumbers.head\
    \ = sortedNumbers.tail.head\n            sortedNumbers.tail = sortedNumbers.tail.tail\n\
    \        }\n        // Return the number we are looking for and store it\n   \
    \     return (closestToOther, closestToOther)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkgph88oj.scala:29:47\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                closestToOther\
    \ = sortedNumbers.head\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    Float\n\e[31m   |\e[0m                                 Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkgph88oj.scala:34:52\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                closestToOther\
    \ = sortedNumbers.tail.head\n\e[31m\e[31m   |\e[0m                           \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Found:    Float\n\e[31m   |\e[0m                                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpkgph88oj.scala:36:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            sortedNumbers.head\
    \ = sortedNumbers.tail.head\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val head\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpkgph88oj.scala:37:31 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            sortedNumbers.tail = sortedNumbers.tail.tail\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val tail\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def min(numbers : Seq[Float]) : Float = {\n            val\
    \ min = numbers(0)\n            for (n <- numbers)\n                if (n < min)\n\
    \                    min = n\n            min\n        }\n        def max(numbers\
    \ : Seq[Float]) : Float = {\n            val max = numbers(0)\n            for\
    \ (n <- numbers)\n                if (n > max)\n                    max = n\n\
    \            max\n        }\n\n        // Create an empty list to store the sorted\
    \ elements\n        val sortedElements = mutable.ListBuffer.empty[Float]\n   \
    \     // Get the min/max and sort them\n        (min(numbers), max(numbers)).foreach(sortedElements\
    \ += _)\n        sortedElements.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp19df1rka.scala:15:24 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    min = n\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp19df1rka.scala:22:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                   \
    \ max = n\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp19df1rka.scala:27:29 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msortedElements\e[0m = mutable.ListBuffer.empty[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19df1rka.scala:29:13 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        (min(numbers), max(numbers)).foreach(sortedElements\
    \ += _)\n\e[31m\e[31m   |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \        Found:    (numbers : List[Float])\n\e[31m   |\e[0m             Required:\
    \ collection.mutable.Seq[Float]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp19df1rka.scala:29:27 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        (min(numbers), max(numbers)).foreach(sortedElements += _)\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Found:    (numbers : List[Float])\n\e[31m   |\e[0m \
    \                          Required: collection.mutable.Seq[Float]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = numbers.head\n        val max = numbers.last\n\
    \        numbers.zipWithIndex.filter{ case (x, y) => math.abs(x - y) < math.abs(max\
    \ - min) }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5u8pimw.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.zipWithIndex.filter{\
    \ \e[33mcase\e[0m (x, y) => math.abs(x - y) < math.abs(max - min) }\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m(Float,\
    \ \e[1m\e[31mInt\e[0m)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: (Float,\
    \ \e[1m\e[32mFloat\e[0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var smallestDistance = 0f\n        var smallestElement:\
    \ Float = 0f\n        var largestDistance = 0f\n        var largestElement: Float\
    \ = 0f\n\n        // For each element in the list\n        for (i <- 0 until numbers.size)\n\
    \        {\n            // Set the current distance for this element to 0\n  \
    \          var distance = 0f\n\n            // For each element in the list\n\
    \            for (j <- 0 until numbers.size)\n            {\n                //\
    \ Calculate the distance between the current element and each other element\n\
    \                var distanceSquared : Float = Math.pow(numbers(i) - numbers(j),\
    \ 2).toFloat\n\n                // If the distance is less than the current distance\n\
    \                // set it as the current distance for this element\n        \
    \        // and set the other element as the current element\n               \
    \ if (distanceSquared < distance)\n                {\n                    distance\
    \ = distanceSquared\n                    smallestElement = numbers(j)\n      \
    \              largestElement = numbers(i)\n                }\n            }\n\
    \n            // If the distance is equal to the smallest distance\n         \
    \   // set the smallest distance for this element\n            // and set the\
    \ smallest element as the current element\n            if (distance == smallestDistance)\n\
    \            {\n                smallestDistance = distance\n                smallestElement\
    \ = numbers(i)\n            }\n\n            // If the distance is equal to the\
    \ largest distance\n            // set the largest distance for this element\n\
    \            // and set the largest element as the current element\n         \
    \   if (distance == largestDistance)\n            {\n                largestDistance\
    \ = distance\n                largestElement = numbers(i)\n            }\n   \
    \     }\n\n        // Return smallest and largest in order\n        (smallestElement,\
    \ largestElement)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiae514nd.scala:62)\n\tat Problem.main(tmpiae514nd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.isEmpty) throw new Exception(\"Invalid input.\
    \ Must have at least two numbers!\")\n        // Create empty lists\n        var\
    \ firstDist : Float = 0.0f\n        var secondDist : Float = 0.0f\n        var\
    \ newList : mutable.MutableList[Float] = scala.collection.mutable.MutableList()\
    \ // The list we return\n        numbers.foreach(n => {\n            // Calculate\
    \ the distance between first two elements\n            val distance = (n - numbers(0)).lengthSquared\n\
    \            if (firstDist == 0.0f) {\n                firstDist = distance\n\
    \            } else {\n                val diff: Float = firstDist - distance\n\
    \                if (diff < secondDist) {\n                    secondDist = diff\n\
    \                    newList = newList :+ (numbers(1))\n                } else\
    \ {\n                    newList = newList :+ (numbers(0))\n                }\n\
    \            }\n        })\n        (newList.head, newList.last)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp49ss2ro9.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mnewList\e[0m : mutable.MutableList[\e\
    [35mFloat\e[0m] = scala.collection.mutable.MutableList() \e[34m// The list we\
    \ return\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp49ss2ro9.scala:15:76 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mnewList\e[0m : mutable.MutableList[\e\
    [35mFloat\e[0m] = scala.collection.mutable.MutableList() \e[34m// The list we\
    \ return\e[0m\n\e[31m\e[31m   |\e[0m                                         \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value MutableList is not a member of scala.collection.mutable\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp49ss2ro9.scala:18:44 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mdistance\e[0m = (n -\
    \ numbers(\e[31m0\e[0m)).lengthSquared\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              value lengthSquared is not a member of Float\n3 errors found\n"
  stdout: ''
  timestamp: 1660028948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val distances = numbers.map(x => (x - numbers(0)))\n   \
    \     val largestDistance = distances.max\n        val smallestDistance = distances.min\n\
    \        (smallestDistance, largestDistance)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_bnga2kd.scala:17)\n\tat Problem.main(tmp_bnga2kd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minDist = math.min(numbers(0), numbers(1))\n       \
    \ val maxDist = math.max(numbers(0), numbers(1))\n        (minDist, maxDist)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6mwsznk_.scala:16)\n\tat Problem.main(tmp6mwsznk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = numbers.min\n        val max = numbers.max\n \
    \       numbers.zip(numbers.tail).map{ case (x, y) => \n            if(min ==\
    \ x) y else if(max == x) y else ((x - min)/(max - min) * (y - x) + x) \n     \
    \   }.minBy(x => x).toList match {\n            case Nil => (min, max)\n     \
    \       case head :: tail => findClosestElements(tail)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7sbxxysm.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.zip(numbers.tail).map{ \e[33mcase\e[0m\
    \ (x, y) => \n\e[31m14 |\e[0m            \e[33mif\e[0m(min == x) y \e[33melse\e\
    [0m \e[33mif\e[0m(max == x) y \e[33melse\e[0m ((x - min)/(max - min) * (y - x)\
    \ + x) \n\e[31m15 |\e[0m        }.minBy(\e[36mx\e[0m => x).toList \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m       value toList\
    \ is not a member of Float - did you mean Float.toInt?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7sbxxysm.scala:17:53 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m head :: tail => findClosestElements(tail)\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ tail\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.length >= 2, numbers.mkString(\", \") +\
    \ \" must be at least two long\")\n        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        (sortedNumbers(0), sortedNumbers(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpob11ir_3.scala:16)\n\tat Problem.main(tmpob11ir_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Set up two lists, one containing the smaller number and\
    \ the other containing the\n        // bigger number for each element in the input\
    \ list\n        var smallestNumbers = numbers.sortBy(_.toFloat).reverse\n    \
    \    var biggestNumbers = numbers.sortBy(_.toFloat)\n        val smallestNum =\
    \ smallestNumbers.head\n        val biggestNum = biggestNumbers.head\n       \
    \ // The smaller and bigger numbers are now set. Iterate through each element\
    \ and\n        // calculate and return the smallest and biggest number that match\
    \ for that element.\n        // Return these in a tuple ordered by smaller number\n\
    \        var smallestClosestNum = smallestNum\n        var biggestClosestNum =\
    \ biggestNum\n        for(i <- 0 until numbers.length) {\n            val currentNumber\
    \ = numbers(i)\n            val currentSmallest = smallestNumbers(i)\n       \
    \     val currentBiggest = biggestNumbers(i)\n            if (currentBiggest <\
    \ currentSmallest) {\n                smallestNumbers = smallestNumbers.drop(i)\n\
    \                smallestClosestNum = currentSmallest\n            } else if (currentSmallest\
    \ < currentBiggest) {\n                biggestNumbers = biggestNumbers.drop(i)\n\
    \                biggestClosestNum = currentBiggest\n            } else if (currentNumber\
    \ == smallestClosestNum && currentNumber == biggestClosestNum) {\n           \
    \     smallestNumbers = smallestNumbers.drop(i)\n                biggestNumbers\
    \ = biggestNumbers.drop(i)\n            }\n        }\n        (smallestClosestNum,\
    \ biggestClosestNum)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.findClosestElements$$anonfun$1(tmpv7bxd25y.scala:25)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.findClosestElements(tmpv7bxd25y.scala:36)\n\
    \tat Problem$.main(tmpv7bxd25y.scala:40)\n\tat Problem.main(tmpv7bxd25y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sorted = numbers.sortBy(x => x); // ((2.0f, 2.2f), (1.0f,\
    \ 2.0f), (4.0f, 5.0f), (3.0f, 3.0f), (2.0f, 2.0f))\n        val diffs = sorted\n\
    \            .map((n, d) => math.abs(n - sorted(0)) + math.abs(n - sorted(1)))\n\
    \            .toList\n            .sortBy(_); // ((-2.0, -2.0), (-2.0, 2.0), (-5.0,\
    \ -2.0), (5.0, -5.0), (-3.0, -3.0), (-3.0, -3.0))\n        if (diffs.tail.forall(math.abs(_)\
    \ > 0.01)) { // ((-2.0, -2.0), (-2.0, 2.0), (-3.0, -3.0))\n            diffs.tail.map(_\
    \ - diffs.head).map(math.abs)\n        } else {\n            diffs.tail.map(math.abs)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpdhyjc8hy.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            .sortBy(_); \e[34m// ((-2.0, -2.0), (-2.0,\
    \ 2.0), (-5.0, -2.0), (5.0, -5.0), (-3.0, -3.0), (-3.0, -3.0))\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0mMissing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mI could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m_$1 => \n\e[31m   |\e[0m  sorted.map((n,\
    \ d) => math.abs(n - sorted(0)) + math.abs(n - sorted(1))).toList\n\e[31m   |\e\
    [0m    .\n\e[31m   |\e[0m  sortBy(_$1).\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdhyjc8hy.scala:13:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            .map((n, d)\
    \ => math.abs(n - sorted(\e[31m0\e[0m)) + math.abs(n - sorted(\e[31m1\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- Error: /tmp/tmpdhyjc8hy.scala:15:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            .sortBy(_); \e[34m// ((-2.0, -2.0), (-2.0,\
    \ 2.0), (-5.0, -2.0), (5.0, -5.0), (-3.0, -3.0), (-3.0, -3.0))\e[0m\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var closest = numbers.min\n        var second = numbers.max\n\
    \        var index = 0\n        while (index < numbers.size) {\n            if\
    \ ((numbers.size - index) < 2) {\n                return (closest, second)\n \
    \           }\n            else {\n                if ((numbers.size - index)\
    \ == 2) {\n                    first = Math.abs(numbers(index) - numbers(index+1))\n\
    \                    second = Math.abs(numbers(index) - numbers(index+1))\n  \
    \              }\n                else {\n                    first = Math.abs(numbers(index)\
    \ - numbers(index+1))\n                    second = Math.abs(numbers(index+1)\
    \ - numbers(index+2))\n                }\n                if ((first < second)\
    \ && (first < closest)) {\n                    closest = first\n             \
    \   }\n                if ((second < first) && (second < closest)) {\n       \
    \             closest = second\n                }\n                index += 1\n\
    \            }\n        }\n        return (closest, second)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hxk8azd.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    first = Math.abs(numbers(index) -\
    \ numbers(index+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: first\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hxk8azd.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    first = Math.abs(numbers(index) -\
    \ numbers(index+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: first\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hxk8azd.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m ((first < second) && (first\
    \ < closest)) {\n\e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: first\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5hxk8azd.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    closest = first\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: first\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5hxk8azd.scala:30:30 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m                \e[33mif\e[0m ((second < first) && (second < closest)) {\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: first\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val n = numbers.length\n        if (n <= 1) {\n        \
    \    numbers(0), numbers(1)\n        } else {\n            // Find smallest\n\
    \            val smallest = numbers.min\n            // Find second smallest and\
    \ find index of smallest in array\n            val secondSmallest = numbers.min\n\
    \            val secondSmallestIndex = numbers.indexOf(secondSmallest)\n     \
    \       val smallestIndex = numbers.indexOf(smallest)\n\n            // If smallest\
    \ is second smallest and second smallest is smallest, swap them\n            if\
    \ (secondSmallestIndex == smallestIndex && secondSmallest < smallest) {\n    \
    \            val temp = secondSmallest\n                secondSmallest = smallest\n\
    \                smallest = temp\n            }\n\n            // If second smallest\
    \ is smallest and smallest is second smallest, swap them\n            else if\
    \ (secondSmallestIndex == smallestIndex && smallest < secondSmallest) {\n    \
    \            val temp = secondSmallest\n                secondSmallest = smallest\n\
    \                smallest = temp\n            }\n\n            val largest = numbers.max\n\
    \            // Find second largest and find index of largest in array\n     \
    \       val secondLargest = numbers.max\n            val secondLargestIndex =\
    \ numbers.indexOf(secondLargest)\n            val largestIndex = numbers.indexOf(largest)\n\
    \n            // If largest is second largest and second largest is largest, swap\
    \ them\n            if (secondLargestIndex == largestIndex && secondLargest >\
    \ largest) {\n                val temp = secondLargest\n                secondLargest\
    \ = largest\n                largest = temp\n            }\n\n            // If\
    \ second largest is largest and largest is second largest, swap them\n       \
    \     else if (secondLargestIndex == largestIndex && largest > secondLargest)\
    \ {\n                val temp = secondLargest\n                secondLargest =\
    \ largest\n                largest = temp\n            }\n\n            // Compare\
    \ them and return smallest and largest\n            (smallest, largest)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4thydwjd.scala:13:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            numbers(\e[31m0\e[0m), numbers(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m     \
    \                 end of statement expected but ',' found\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp4thydwjd.scala:25:31 -----------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                secondSmallest = smallest\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val secondSmallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp4thydwjd.scala:26:25 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                smallest = temp\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val smallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4thydwjd.scala:32:31\
    \ -----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                secondSmallest\
    \ = smallest\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val secondSmallest\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp4thydwjd.scala:33:25 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                smallest = temp\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val smallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4thydwjd.scala:45:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                secondLargest\
    \ = largest\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val secondLargest\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1660028950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.length < 2) (numbers(0), numbers(0))\n     \
    \   else {\n            var bestDistance = math.pow(math.abs(numbers(0) - numbers(1)),\
    \ 2).toFloat\n            var bestIndex = 0\n            numbers.foreach {\n \
    \               case number => {\n                    var currentDistance = math.pow(math.abs(number\
    \ - numbers(bestIndex)), 2).toFloat\n                    if (currentDistance <\
    \ bestDistance) {\n                        bestDistance = currentDistance\n  \
    \                      bestIndex = number\n                    }\n           \
    \     }\n            }\n            (numbers(bestIndex), numbers(bestIndex))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpprdnit92.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        bestIndex\
    \ = number\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (number : Float)\n\
    \e[31m   |\e[0m                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if(numbers.size() < 2) {\n            return numbers.size()\
    \ > 0 ? numbers.minBy(_ - numbers(0)) match { case (n, _) => n -> n } : numbers.size()\
    \ > 0 ? numbers.minBy(_ - numbers(0)) match { case (n, _) => n -> n }\n      \
    \  }\n        val largestNumber = numbers.max\n        val smallestNumber = numbers.min\n\
    \        numbers.minBy { n =>\n            val absDiff = n.abs\n            val\
    \ relativeDiff = absDiff / (largestNumber - smallestNumber)\n            val relativeDiffInt\
    \ = Math.floor(relativeDiff)\n            if(relativeDiffInt > 0.5) largestNumber\
    \ - n else n - smallestNumber\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphs9focan.scala:12:116 ----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mreturn\e[0m numbers.size() > \e[31m0\e\
    [0m ? numbers.minBy(_ - numbers(\e[31m0\e[0m)) \e[33mmatch\e[0m { \e[33mcase\e\
    [0m (n, _) => n -> n } : numbers.size() > \e[31m0\e[0m ? numbers.minBy(_ - numbers(\e\
    [31m0\e[0m)) \e[33mmatch\e[0m { \e[33mcase\e[0m (n, _) => n -> n }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                             end of statement expected but '(' found\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmphs9focan.scala:11:19 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(numbers.size() < \e[31m2\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \     \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmphs9focan.scala:12:27 -----------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m            \e[33mreturn\e[0m numbers.size() > \e[31m0\e[0m ? numbers.minBy(_\
    \ - numbers(\e[31m0\e[0m)) \e[33mmatch\e[0m { \e[33mcase\e[0m (n, _) => n -> n\
    \ } : numbers.size() > \e[31m0\e[0m ? numbers.minBy(_ - numbers(\e[31m0\e[0m))\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m (n, _) => n -> n }\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \e[33mmethod\e\
    [0m \e[35msize\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphs9focan.scala:12:93\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mreturn\e\
    [0m numbers.size() > \e[31m0\e[0m ? numbers.minBy(_ - numbers(\e[31m0\e[0m)) \e\
    [33mmatch\e[0m { \e[33mcase\e[0m (n, _) => n -> n } : numbers.size() > \e[31m0\e\
    [0m ? numbers.minBy(_ - numbers(\e[31m0\e[0m)) \e[33mmatch\e[0m { \e[33mcase\e\
    [0m (n, _) => n -> n }\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660028952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numbersSorted: Seq[Float] = numbers.sortWith(_ < _)\n\
    \        if (numbersSorted.size == 0) (0.0f, 0.0f) else {\n            // find\
    \ smallest and largest numbers\n            val (minIn, maxIn) = numbersSorted\n\
    \            // find middle point between min and max\n            val (medianIn,\
    \ middleIn) = numbersSorted.span(_ == minIn.asInstanceOf[Float])\n           \
    \ // if median == max, then median is closer to min\n            if (middleIn\
    \ == numbersSorted.last) minIn else {\n                // if median > max, then\
    \ median is closer to min\n                // and if median < min, then median\
    \ is closer to max\n                if (middleIn.asInstanceOf[Float] < (minIn.asInstanceOf[Float])\
    \ &&  middleIn.asInstanceOf[Float] > (maxIn.asInstanceOf[Float])) minIn else maxIn\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0v7fu0v4.scala:11:56\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mnumbersSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mFloat\e[0m] = numbers.sortWith(_ < _)\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    List[Float]\n\e[31m\
    \   |\e[0m                                 Required: collection.mutable.Seq[Float]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0v7fu0v4.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (middleIn == numbersSorted.last)\
    \ minIn \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types scala.collection.mutable.Seq[Float] and Float\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0v7fu0v4.scala:18:48 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \            \e[33mif\e[0m (middleIn == numbersSorted.last) minIn \e[33melse\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (minIn : Any)\n\e[31m   |\e[0m                                             \
    \   Required: (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0v7fu0v4.scala:21:143 -------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mif\e[0m (middleIn.asInstanceOf[\e[35mFloat\e[0m]\
    \ < (minIn.asInstanceOf[\e[35mFloat\e[0m]) &&  middleIn.asInstanceOf[\e[35mFloat\e\
    [0m] > (maxIn.asInstanceOf[\e[35mFloat\e[0m])) minIn \e[33melse\e[0m maxIn\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \        Found:    (minIn : Any)\n\e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1660028957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val max = numbers(0)\n        val min: Float = numbers(0).abs().min\n\
    \        numbers.filter(n => n.abs().min <= max).sortBy(n => n.abs()).take(2).map(n\
    \ => (max, n))\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpf4qhed9n.scala:12:36 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m: \e[35mFloat\e\
    [0m = numbers(\e[31m0\e[0m).abs().min\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \e[33mmethod\e\
    [0m \e[35mabs\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpf4qhed9n.scala:13:30 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.filter(\e[36mn\e[0m => n.abs().min <=\
    \ max).sortBy(\e[36mn\e[0m => n.abs()).take(\e[31m2\e[0m).map(\e[36mn\e[0m =>\
    \ (max, n))\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e\
    [0m \e[35mRichFloat\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpf4qhed9n.scala:13:62 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.filter(\e[36mn\e[0m => n.abs().min <=\
    \ max).sortBy(\e[36mn\e[0m => n.abs()).take(\e[31m2\e[0m).map(\e[36mn\e[0m =>\
    \ (max, n))\n\e[31m\e[31m   |\e[0m                                           \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                  \e[33mmethod\e\
    [0m \e[35mabs\e[0m in \e[33mclass\e[0m \e[35mRichFloat\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpf4qhed9n.scala:13:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.filter(\e[36mn\e[0m => n.abs().min <=\
    \ max).sortBy(\e[36mn\e[0m => n.abs()).take(\e[31m2\e[0m).map(\e[36mn\e[0m =>\
    \ (max, n))\n\e[31m\e[31m   |\e[0m                                           \
    \                         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ match type"
  stdout: ''
  timestamp: 1660028954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def swap(a,b) => b<=>a\n        numbers.zipWithIndex.sortBy(swap).take(2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfhjw_qkr.scala:11:18 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) => b<=>a\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m  \
    \ |\e[0m                  ':' expected, but ',' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpfhjw_qkr.scala:11:20 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36ma\e[0m,\e[36mb\e[0m)\
    \ => b<=>a\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m \
    \                   ':' expected, but ')' found\n\e[31m\e[31m-- [E019] Syntax\
    \ Error: /tmp/tmpfhjw_qkr.scala:11:21 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36ma\e[0m,\e[36mb\e[0m)\
    \ => b<=>a\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \                     Missing return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfhjw_qkr.scala:12:46 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        numbers.zipWithIndex.sortBy(swap).take(\e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m(Float, \e\
    [1m\e[31mInt\e[0m)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: (Float,\
    \ \e[1m\e[32mFloat\e[0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = math.min(numbers(0), numbers(1))\n        val\
    \ max = math.max(numbers(0), numbers(1))\n        if (min == max) min -> max\n\
    \        else {\n            val middle = (min + max) / 2\n            val left\
    \ = (numbers(0) < middle && numbers(1) > middle) match {\n                case\
    \ false => numbers(0) -> middle\n                case true => middle -> numbers(1)\n\
    \            }\n            val right = (numbers(0) < middle && numbers(1) < middle)\
    \ match {\n                case false => middle -> numbers(1)\n              \
    \  case true => numbers(0) -> middle\n            }\n            left.toList.sortWith(_\
    \ > _).head.toList -> right.toList.sortWith(_ < _).head.toList\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_4jemdiu.scala:24:45 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            left.toList.sortWith(_ > _).head.toList ->\
    \ right.toList.sortWith(_ < _).head.toList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toList is not a member of Float | Float - did you mean\
    \ Float | Float.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660028957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val n = numbers.head\n        val v = numbers.last\n   \
    \     val sortedNumbers = numbers.sortWith(math.abs<=>)\n        val i = sortedNumbers.indexOf(v)\n\
    \        val j = (i + 1)%sortedNumbers.length\n        (sortedNumbers(i), sortedNumbers(j))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0gkv70fw.scala:13:56 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msortedNumbers\e[0m = numbers.sortWith(math.abs<=>)\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp0gkv70fw.scala:13:50 -----------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36msortedNumbers\e[0m = numbers.sortWith(math.abs<=>)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0mmatch expected type ?{ <=>\
    \ : ? }\n2 errors found\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var largest = 0.0f\n        var smallest = Float.PositiveInfinity\n\
    \        numbers.sortWith(_ < _)\n        numbers.foreach(x => if (largest < x)\
    \ largest = x)\n        numbers.foreach(x => if (smallest > x) smallest = x)\n\
    \        (smallest, largest)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ctnn1tf.scala:19)\n\tat Problem.main(tmp2ctnn1tf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        if (minNum == maxNum)\n            (minNum, minNum)\n        else {\n\
    \            def isClose(num : Float, other : Float) = math.abs(num-other) < 0.01\n\
    \            def findClosestToMin(other : Float) : Option[Float] = {\n       \
    \         for {\n                    first <- numbers.filter(isClose(first,other))\n\
    \                    second <- numbers.filter(isClose(other,second))\n       \
    \         } yield second\n            }\n            def findClosestToMax(other\
    \ : Float) : Option[Float] = {\n                for {\n                    first\
    \ <- numbers.filter(isClose(first,other))\n                    second <- numbers.filter(isClose(other,second))\n\
    \                } yield first\n            }\n            val minClosest = findClosestToMin(minNum).getOrElse(minNum)\n\
    \            val maxClosest = findClosestToMax(maxNum).getOrElse(maxNum)\n   \
    \         (minClosest, maxClosest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf25_8g9.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    first <- numbers.filter(isClose(first,other))\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ first\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf25_8g9.scala:20:59\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    second\
    \ <- numbers.filter(isClose(other,second))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                      Not found: second\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf25_8g9.scala:25:52 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    first <- numbers.filter(isClose(first,other))\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ first\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf25_8g9.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    second\
    \ <- numbers.filter(isClose(other,second))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                      Not found: second\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val d = numbers.min.abs - numbers.max.abs\n        if(d\
    \ == 0) (numbers(0), numbers(1)) else (numbers(1), numbers(0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsbcks7a.scala:15)\n\tat Problem.main(tmpbsbcks7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val lmin = numbers.min\n        val lmax = numbers.max\n\
    \        // the midpoint between the two points\n        val mid = (lmin + lmax)\
    \ / 2\n        // the two points furthest from each other\n        val lmid =\
    \ numbers.length/2\n        val rmin = numbers(lmid)\n        val rmax = numbers(lmid+1)\n\
    \        val dMin = lmax - lmin\n        val dMax = lmax - rmax\n        val dDiff\
    \ = rmax - lmax\n        // the two points that are furthest from each other\n\
    \        val lmax = if (dDiff < dMin) mid else lmin\n        val rmin = if (dDiff\
    \ < dMin) mid else rmax\n        // the two points that are closest to each other\n\
    \        val lmin = if (dDiff < dMin) rmin else lmin\n        val lmid = if (dDiff\
    \ < dMin) mid else lmid\n        val rmin = if (dDiff < dMin) lmin else rmin\n\
    \        val rmid = if (dDiff < dMin) mid else rmid\n        // the two points\
    \ that are closest to each other\n        val lmin = if (dDiff < dMin) rmid else\
    \ lmin\n        val lmid = if (dDiff < dMin) rmax else lmid\n        val rmin\
    \ = if (dDiff < dMin) lmax else rmin\n        val rmid = if (dDiff < dMin) rmid\
    \ else rmid\n        Tuple2(lmin, lmid)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzqdcqhs8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlmax\e[0m = \e[33mif\e[0m\
    \ (dDiff < dMin) mid \e[33melse\e[0m lmin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlmax is already defined as \e[33mvalue\e[0m \e[35mlmax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzqdcqhs8.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mrmin\e[0m = \e[33mif\e[0m (dDiff < dMin)\
    \ mid \e[33melse\e[0m rmax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrmin is already defined as \e[33mvalue\e[0m \e[35mrmin\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzqdcqhs8.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mlmin\e[0m = \e[33mif\e[0m (dDiff < dMin)\
    \ rmin \e[33melse\e[0m lmin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlmin is already defined as \e[33mvalue\e[0m \e[35mlmin\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzqdcqhs8.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mlmid\e[0m = \e[33mif\e[0m (dDiff < dMin)\
    \ mid \e[33melse\e[0m lmid\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlmid is already defined as \e[33mvalue\e[0m \e[35mlmid\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzqdcqhs8.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mrmin\e[0m = \e[33mif\e[0m (dDiff < dMin)\
    \ lmin \e[33melse\e[0m rmin\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660028955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val list: List[Float] = numbers sortBy (_.abs); list.tail\
    \ match {\n            case head :: tail =>\n                if (head.abs - tail.head\
    \ < 0f) findClosestElements(tail.head :: tail.tail)\n                else (head\
    \ :: tail.head, head)\n            case _ => throw new ArithmeticException(\"\
    Problem findClosestElements: cannot sort list of numbers\")\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3idk6het.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33melse\e[0m (head :: tail.head, head)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value :: is not a member of Float\n1 error found\n"
  stdout: ''
  timestamp: 1660028957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestNumber = numbers.min\n        val largestNumber\
    \ = numbers.max\n\n        numbers.find(x => abs(x - smallestNumber) < abs(x -\
    \ largestNumber)).sortBy(_)(0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp697bzf1d.scala:14:83 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.find(\e[36mx\e[0m => abs(x - smallestNumber)\
    \ < abs(x - largestNumber)).sortBy(_)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mI could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m_$1 => \n\e[31m   |\e[0m  numbers.find(x => abs(x - smallestNumber)\
    \ < abs(x - largestNumber)).sortBy(_$1\n\e[31m   |\e[0m    )\n\e[31m   |\e[0m\
    \  (0).\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp697bzf1d.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.find(\e[36mx\e[0m => abs(x - smallestNumber)\
    \ < abs(x - largestNumber)).sortBy(_)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value sortBy is not a member of Option[Float]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestDifference = math.max(numbers(0).toFloat, numbers(1).toFloat)\n\
    \        val firstElement = numbers.minBy(math.abs)\n        val secondElement\
    \ = numbers.maxBy(math.abs)\n        firstElement -> secondElement\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvn6b7gsh.scala:17)\n\tat Problem.main(tmpvn6b7gsh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sorted = numbers.sorted\n        val index = sorted.indexOf(0)\n\
    \        if (index > 0) {\n            (sorted[index - 1], sorted[index])\n  \
    \      } else {\n            (sorted[0], sorted[sorted.length - 1])\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmporooefay.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (sorted[\e[35mindex\e[0m \e[35m-\e[0m \e\
    [31m1\e[0m], sorted[\e[35mindex\e[0m])\n\e[31m\e[31m   |\e[0m                \
    \          ^\e[0m\n\e[31m   |\e[0m                          Not found: type -\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmporooefay.scala:14:39\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            (sorted[\e[35mindex\e\
    [0m \e[35m-\e[0m \e[31m1\e[0m], sorted[\e[35mindex\e[0m])\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                               Not found: type index\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmporooefay.scala:16:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (sorted[\e[31m0\e[0m], sorted[sorted.length\
    \ \e[35m-\e[0m \e[31m1\e[0m])\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m\
    \ \e[35mLinearSeqOps\e[0m does not take type parameters\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmporooefay.scala:16:45 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            (sorted[\e[31m0\e[0m], sorted[sorted.length \e\
    [35m-\e[0m \e[31m1\e[0m])\n\e[31m\e[31m   |\e[0m                             \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \        Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val ns = numbers.toSet\n        val (min1, min2) = for (i\
    \ <- ns ; if ns contains i) yield (numbers.min, (numbers.min - i))\n        val\
    \ (max1, max2) = for (i <- ns ; if ns contains i) yield (i, numbers.max)\n   \
    \     val m = min1.max max max2.max\n        (min1 min min2) + ((m - min1).abs,\
    \ (m - min2).abs)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8cil__l.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = min1.max max max2.max\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue max is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8cil__l.scala:15:14\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (min1 min min2) +\
    \ ((m - min1).abs, (m - min2).abs)\n\e[31m\e[31m   |\e[0m         ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue min is not a member of Any, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Calculate the distances between the supplied numbers\n\
    \        val distances: Array[Double] = numbers.zipWithIndex.map { case (n, i)\
    \ => \n            // Calculate the distance between the first and second element\n\
    \            math.sqrt((math.pow(n,2) - math.pow(numbers(i), 2)).abs.toDouble)\n\
    \        }\n\n        // Sort the distances from smallest to largest\n       \
    \ distances.sortWith(_ < _)\n\n        // Return the two numbers at the distance\
    \ from each other\n        (numbers(distances.indexWhere(_ == distances.min)),\
    \ numbers(distances.indexWhere(_ == distances.max)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbv4i091s.scala:12:64\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdistances\e\
    [0m: \e[35mArray\e[0m[\e[35mDouble\e[0m] = numbers.zipWithIndex.map { \e[33mcase\e\
    [0m (n, i) => \n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    \e[1m\e[31mList\e\
    [0m[Double]\n\e[31m   |\e[0m                                       Required: \e\
    [1m\e[32mArray\e[0m[Double]\n\e[31m13 |\e[0m            \e[34m// Calculate the\
    \ distance between the first and second element\e[0m\n\e[31m14 |\e[0m        \
    \    math.sqrt((math.pow(n,\e[31m2\e[0m) - math.pow(numbers(i), \e[31m2\e[0m)).abs.toDouble)\n\
    \e[31m15 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var bestElement = numbers.head\n        var bestDifference\
    \ = 0.0f\n\n        for (element <- numbers)\n            if(element - bestElement\
    \ < bestDifference) {\n                bestElement = element\n               \
    \ bestDifference = element - bestElement\n            }\n\n        (bestElement,\
    \ bestDifference)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7v0v5c4p.scala:23)\n\tat Problem.main(tmp7v0v5c4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestDistance = numbers.min\n\n        def check(a:\
    \ Float, b: Float): Boolean =\n            Math.abs(a - b) < smallestDistance\n\
    \n        val (biggestDistance, secondSmallestDistance) = numbers\n          \
    \  .foldRight(smallestDistance) {\n              case ((smallestDistance, secondSmallestDistance),\
    \ a) =>\n                if (check(a, secondSmallestDistance)) {\n           \
    \       (smallestDistance, a)\n                } else {\n                  (smallestDistance,\
    \ secondSmallestDistance)\n                }\n            }\n\n        (smallestDistance,\
    \ biggestDistance)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplensvfp4.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m\
    \ (check(a, secondSmallestDistance)) {\n\e[31m\e[31m   |\e[0m                \
    \             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \          Found:    (secondSmallestDistance : Any)\n\e[31m   |\e[0m         \
    \                    Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplensvfp4.scala:20:18 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                  (smallestDistance, a)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \     Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mAny\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0mFloat\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                  Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplensvfp4.scala:22:18\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                  (smallestDistance,\
    \ secondSmallestDistance)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (Any, Any)\n\e[31m   |\e[0m  \
    \                Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplensvfp4.scala:26:27 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        (smallestDistance, biggestDistance)\n\e[31m\e[31m   |\e[0m   \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \            Found:    (biggestDistance : Any)\n\e[31m   |\e[0m              \
    \             Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallestValue = numbers.min\n        val smallestIndex\
    \ : Int = numbers.indexOf(smallestValue)\n        val largestValue = numbers.max\n\
    \        val largestIndex : Int = numbers.indexOf(largestValue)\n        (smallestValue,\
    \ largestValue)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptpgqebz_.scala:18)\n\tat Problem.main(tmptpgqebz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n      val (smaller, larger) = (numbers.min, numbers.max)\n     \
    \ (numbers, numbers)\n        .zipped.find(number => number == smaller)\n    \
    \    .map {\n          n => if (n == smaller) larger else smaller\n        }.minBy\
    \ {\n          n => if (n == larger) larger else smaller\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzl_80woc.scala:13:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        .zipped.find(number => number == smaller)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types (Float, Float) and Float cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpzl_80woc.scala:15:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m          \e[36mn\e[0m => \e[33mif\e[0m (n == smaller)\
    \ larger \e[33melse\e[0m smaller\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types (Float, Float) and Float cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660028962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val n = numbers.size + 1\n        val low = numbers(0)\n\
    \        val high = numbers(0)\n        val maxDiff = numbers(0)\n        for\
    \ (i <- 1 to n) {\n            val diff = (numbers(i) - low).abs.max\n       \
    \     if (diff < maxDiff) {\n                low = numbers(i)\n              \
    \  maxDiff = diff\n            }\n            high = numbers(i)\n        }\n \
    \       (low, high)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtv68hug.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (diff < maxDiff) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of Float => Float, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgtv68hug.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                low = numbers(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtv68hug.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                maxDiff = diff\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (diff : Float => Float)\n\e[31m   |\e[0m    \
    \                      Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpgtv68hug.scala:21:17 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            high = numbers(i)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ high\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min = numbers(0)\n        val max = numbers(0)\n   \
    \     for (x <- numbers) {\n            if (min > x) min = x\n            if (max\
    \ < x) max = x\n        }\n        (min, max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmph1uliqv3.scala:14:29 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (min > x) min = x\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Reassignment to val min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmph1uliqv3.scala:15:29 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (max < x) max = x\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var currentBest: Float = 0.0f\n        var currentWorst:\
    \ Float = 0.0f\n        var smallest: Float = 0.0f\n        var largest: Float\
    \ = 0.0f\n        var smallerIndex: Int = -1\n        var largerIndex: Int = -1\n\
    \        numbers.foreach {\n            num => {\n                val currentDifference\
    \ = num - currentBest\n                val currentWorstDifference = num - currentWorst\n\
    \                if (currentDifference < currentWorstDifference) {\n         \
    \           currentBest = num\n                    currentWorst = num\n      \
    \          } else {\n                    currentWorst = num\n                }\n\
    \                val currentSmallerDifference = currentDifference - smallest\n\
    \                val currentLargerDifference = currentWorstDifference - largest\n\
    \                if (currentSmallerDifference < currentLargerDifference) {\n \
    \                   smallest = num\n                    smallerIndex = numbers.indexOf(num)\n\
    \                    currentLargerDifference = currentDifference - largest\n \
    \                   largest = num\n                    largerIndex = numbers.indexOf(num)\n\
    \                } else {\n                    largest = num\n               \
    \     largerIndex = numbers.indexOf(num)\n                    currentSmallerDifference\
    \ = currentDifference - smallest\n                    smallest = num\n       \
    \             smallerIndex = numbers.indexOf(num)\n                }\n       \
    \     }\n        }\n        (smallest, largest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp684els_f.scala:32:44 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    currentLargerDifference = currentDifference\
    \ - largest\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val currentLargerDifference\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp684els_f.scala:38:45 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    currentSmallerDifference = currentDifference\
    \ - smallest\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val currentSmallerDifference\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var largest = numbers(0)\n        var smallest = numbers(0)\n\
    \        var index = numbers.size() - 1\n\n        var i = index\n        while\
    \ (i>=0) {\n            if (numbers(i) <= largest) {\n                largest\
    \ = numbers(i)\n                index = i\n            } else if (numbers(i) >=\
    \ smallest) {\n                smallest = numbers(i)\n                index =\
    \ i\n            }\n            i -= 1\n        }\n        (smallest, largest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpz6j36u9t.scala:13:28 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mindex\e[0m = numbers.size()\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    \e[33mmethod\e[0m \e[35msize\e[0m in \e[33mtrait\e\
    [0m \e[35mSeqOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numberSet = numbers.toSet\n        val firstClosest\
    \ = numbers.min\n        val secondClosest = numbers.max\n        numberSet.find(x\
    \ => x == firstClosest) match {\n            case Some(first) -> numberSet.find(x\
    \ => x == secondClosest) match {\n                case Some(second) => if (first\
    \ < second) { (first, second) } else { second }\n                case None =>\
    \ second\n            }\n            case None => first\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd4k1vz__.scala:15:49 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Some(first) -> numberSet.find(x\
    \ => x == secondClosest) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \                                      ^^\e[0m\n\e[31m   |\e[0m              \
    \                              ')' expected, but '=>' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpd4k1vz__.scala:19:12 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m None => first\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            '=>' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4k1vz__.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Some(first) -> numberSet.find(x\
    \ => x == secondClosest) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: first\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4k1vz__.scala:15:47\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e\
    [0m Some(first) -> numberSet.find(x => x == secondClosest) \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                               Not found: x\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4k1vz__.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m Some(second) => \e[33mif\e\
    [0m (first < second) { (first, second) } \e[33melse\e[0m { second }\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Not found: first\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4k1vz__.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                "
  stdout: ''
  timestamp: 1660028965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Write your answer here\n        // Use map to create\
    \ a new list of tuples containing the indices and values of the number list \n\
    \        val indexAndVal = numbers.zipWithIndex.map { case (x, index) => index\
    \ -> (x, x) }\n        // Find the indices of the elements that are closest to\
    \ each other\n        val closestToIndex: MutableList[Int] = new MutableList[Int]\n\
    \        indexAndVal.zipWithIndex.foreach { case (pair, index) =>\n          \
    \  if (pair.element.isCloseTo(pair.element.next.asInstanceOf[Float])) {\n    \
    \            val prevIndex = pair.element.index\n                val nextIndex\
    \ = pair.element.next.index\n                if (prevIndex < nextIndex) {\n  \
    \                  closestToIndex.update(prevIndex + 1, nextIndex)\n         \
    \       } else if (prevIndex > nextIndex) {\n                    closestToIndex.update(prevIndex,\
    \ nextIndex + 1)\n                } else if (prevIndex == nextIndex) {\n     \
    \               closestToIndex.update(prevIndex + 1, nextIndex + 1)\n        \
    \        }\n            }\n        }\n        // Use the indices to get a list\
    \ of tuples containing the closest numbers \n        closestToIndex.zipWithIndex.map\
    \ { case (index, value) => index -> numbers }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8eacpmd.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mclosestToIndex\e[0m: \e\
    [35mMutableList\e[0m[\e[35mInt\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: type MutableList\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8eacpmd.scala:15:51\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mclosestToIndex\e[0m: \e[35mMutableList\e[0m[\e[35mInt\e[0m] = \e[33mnew\e\
    [0m \e[35mMutableList\e[0m[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                         Not found: type MutableList\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa8eacpmd.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (pair.element.isCloseTo(pair.element.next.asInstanceOf[\e\
    [35mFloat\e[0m])) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                value element is not a member of (Int, (Float, Float))\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa8eacpmd.scala:18:37 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mprevIndex\e[0m =\
    \ pair.element.index\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value element is not a member of (Int, (Float,\
    \ Float))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa8eacpmd.scala:19:37\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mnextIndex\e[0m = pair.element.next.index\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value element is not a member of (Int, (Float, Float))\n5 errors found\n"
  stdout: ''
  timestamp: 1660028967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val map: Map[Float, Float] = numbers.zipWithIndex.filter(_._2\
    \ < numbers.size/2)\n        val min: Float = minBy(map)(_)\n        val max:\
    \ Float = maxBy(map)(_)\n        Tuple2(min, max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50_to2xr.scala:11:64\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmap\e\
    [0m: \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mFloat\e[0m] = numbers.zipWithIndex.filter(_._2\
    \ < numbers.size/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    List[(Float, Int)]\n\e[31m   |\e\
    [0m                          Required: collection.mutable.Map[Float, Float]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp50_to2xr.scala:12:36 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m: \e[35mFloat\e\
    [0m = minBy(map)(_)\n\e[31m\e[31m   |\e[0m                                   \
    \ ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => minBy(map)(_$2).\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp50_to2xr.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mmin\e[0m: \e[35mFloat\e[0m = minBy(map)(_)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   Not found: minBy\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp50_to2xr.scala:13:36 -----------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m: \e[35mFloat\e[0m =\
    \ maxBy(map)(_)\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$3 of expanded function:\n\e\
    [31m   |\e[0m   _$3 => maxBy(map)(_$3).\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp50_to2xr.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m: \e[35mFloat\e[0m = maxBy(map)(_)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660028966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val mins = numbers.zipWithIndex.minBy(_._1)._2\n       \
    \ val maxs = numbers.zipWithIndex.maxBy(_._1)._2\n        val closest = mins.map(_._2).zip(maxs).map{case\
    \ (prev, next) => (prev, next)}\n        closest.toSeq\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwq05cy5a.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = mins.map(_._2).zip(maxs).map{\e\
    [33mcase\e[0m (prev, next) => (prev, next)}\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value map is not\
    \ a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660028967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val aList = numbers.toList\n        var closest1 = -1.0\n\
    \        var closest2 = -1.0\n        val diffBetweenClosests = aList.map(x =>\
    \ Math.abs(x - closest1)).min\n\n        val diffBetweenClosests2 = aList.map(x\
    \ => Math.abs(x - closest2)).min\n\n        if ((diffBetweenClosests == 0.0f)\
    \ && (diffBetweenClosests2 == 0.0f)) {\n            closest1 = closest2 = aList.head\n\
    \        } else\n            if (diffBetweenClosests > diffBetweenClosests2) {\n\
    \                closest1 = aList.head\n                closest2 = aList.last\n\
    \            } else {\n                closest1 = aList.last\n               \
    \ closest2 = aList.head\n            }\n        (closest1, closest2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkf9h7o_d.scala:19:32\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            closest1 = closest2\
    \ = aList.head\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Unit\n\e[31m   |\e[0m   \
    \                    Required: Double\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkf9h7o_d.scala:28:9 ---------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        (closest1, closest2)\n\e[31m\e[31m   |\e[0m      \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (closest1 : Double)\n\e[31m\
    \   |\e[0m         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkf9h7o_d.scala:28:19 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        (closest1, closest2)\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (closest2 : Double)\n\
    \e[31m   |\e[0m                   Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val smallest = numbers.min\n        val largest = numbers.max\n\
    \        numbers.getOrElse(numbers.indexWhere(x => smallest == x) + 1, numbers.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy1sdvt3x.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.getOrElse(numbers.indexWhere(\e[36mx\e\
    [0m => smallest == x) + \e[31m1\e[0m, numbers.last)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value getOrElse is not a\
    \ member of List[Float]\n1 error found\n"
  stdout: ''
  timestamp: 1660028967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val sortedNumbers = numbers.sortWith(_ < _)\n        if(sortedNumbers.isEmpty)\
    \ throw new NoSuchElementException\n        val firstValue = sortedNumbers(0)\n\
    \        val lastValue = sortedNumbers.last\n        if(firstValue == lastValue)\
    \ throw new NoSuchElementException\n\n        val lower = sortedNumbers.takeWhile(_\
    \ > firstValue).reverse\n        val upper = sortedNumbers.dropWhile(_ < lastValue).reverse\n\
    \        val tuple = (lower, upper)\n\n        tuple\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5c44kpj.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        tuple\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (\e[1m\e[31mtuple\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m(\e[0m\e[1m\e\
    [31mList\e[0m\e[1m\e[31m[\e[0mFloat\e[1m\e[31m]\e[0m, \e[1m\e[31mList\e[0m\e[1m\e\
    [31m[\e[0mFloat\e[1m\e[31m]\e[0m\e[1m\e[31m)\e[0m)\n\e[31m   |\e[0m        Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val nums = numbers :+ numbers(0)\n        val d = new mutable.HashMap[Float,\
    \ Float]()\n        for (i <- 0 until nums.size - 1) {\n            val tmp =\
    \ nums(i)\n            d.put(nums(i), tmp)\n        }\n        val smallest =\
    \ d.getOrElse(numbers.head, 0.0001)\n        val largest = d.getOrElse(numbers.last,\
    \ 0.0001) \n        (smallest, largest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjs8y0lco.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mFloat\e[0m, \e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val closest = numbers.get(0)\n        var closeIndex = 0\n\
    \        for (i <- 1 to numbers.size)\n            if (numbers(i) < closest)\n\
    \            {\n                closest = numbers(i)\n                closeIndex\
    \ = i\n            }\n        val tuple2Result = numbers.zipWithIndex.filter{x\
    \ => x._1 == closest && x._2 == closeIndex}.sortBy(_._1).head\n        tuple2Result._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwsib39ic.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = numbers.get(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value get is not a member of List[Float] - did you mean numbers.seq?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpwsib39ic.scala:16:24 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                closest = numbers(i)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val closest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwsib39ic.scala:20:21 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        tuple2Result._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Float\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32m(\e[0m\e[1m\e[32mFloat\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mFloat\e\
    [1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val pairs = for {\n            a <- numbers.slice(1, numbers.length)\n\
    \            b <- numbers.slice(1, numbers.length)\n        } yield {\n      \
    \      Math.abs(a - b)\n        }\n\n        // Find the pair with the smallest\
    \ value\n        val smallest = pairs.min\n\n        // Find the pair with the\
    \ largest value\n        val largest = pairs.max\n\n        val result = (smallest,\
    \ largest)\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0utcwy43.scala:28)\n\tat Problem.main(tmp0utcwy43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val diff = (maxNum - minNum).abs\n\n        if (diff < 0.5f) numbers\
    \ else (numbers(0), numbers(1))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhsl2s2g.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (diff <\
    \ \e[31m0.5f\e[0m) numbers \e[33melse\e[0m (numbers(\e[31m0\e[0m), numbers(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    (numbers : List[Float])\n\e[31m \
    \  |\e[0m                         Required: (Float, Float)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val minLargerNumber = numbers.minBy(_ > _)\n        val\
    \ minSmallerNumber = numbers.minBy(_ < _)\n        (minLargerNumber, minSmallerNumber)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp88c3v8_i.scala:11:44 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mminLargerNumber\e[0m = numbers.minBy(_\
    \ > _)\n\e[31m\e[31m   |\e[0m                                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmp88c3v8_i.scala:11:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mminLargerNumber\e[0m = numbers.minBy(_\
    \ > _)\n\e[31m\e[31m   |\e[0m                                                \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m\
    \ \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp88c3v8_i.scala:12:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSmallerNumber\e[0m = numbers.minBy(_ < _)\n\e[31m\e[31m   |\e[0m  \
    \                                           ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- Error: /tmp/tmp88c3v8_i.scala:12:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mminSmallerNumber\e[0m =\
    \ numbers.minBy(_ < _)\n\e[31m\e[31m   |\e[0m                                \
    \                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e\
    [33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660028968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val min1 = numbers.min\n        val min2 = numbers.max\n\
    \        if (min1 == min2)\n            (min1, min1)\n        else if (min1 ==\
    \ min2)\n            (min1, min2)\n        else if (min2 == min1)\n          \
    \  (min2, min2)\n        else if (min1 > min2) {\n            val diff = min1\
    \ - min2\n            val r1 = (min1 + diff) / 2\n            val r2 = (min2 +\
    \ diff) / 2\n            ((r1, r2))\n        } else {\n            val diff =\
    \ min2 - min1\n            val r1 = (min1 + diff) / 2\n            val r2 = (min2\
    \ + diff) / 2\n            ((r1, r2))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cec7b78.scala:32)\n\tat Problem.main(tmp8cec7b78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Select the first number\n        val (closestVal, currentClosestVal)\
    \ = numbers.minBy(math.abs(_)) match {\n            case (closestVal, currentClosestVal)\
    \ => closestVal, currentClosestVal\n            case _ => numbers.minBy(math.abs)\n\
    \        }\n\n        // If the current value is the closest value to the first\
    \ value then return the first value\n        if (currentClosestVal == closestVal)\
    \ {\n            (closestVal, closestVal)\n        } else {\n            // If\
    \ the current value is not the closest value to the first value then return the\
    \ second value\n            (closestVal, currentClosestVal)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpetrqbwd3.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m (closestVal, currentClosestVal)\
    \ => closestVal, currentClosestVal\n\e[31m\e[31m   |\e[0m                    \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                      end of statement expected but ',' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpetrqbwd3.scala:19:13 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            (closestVal, closestVal)\n\e[31m\e[31m  \
    \ |\e[0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (closestVal\
    \ : Any)\n\e[31m   |\e[0m             Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpetrqbwd3.scala:19:25 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            (closestVal, closestVal)\n\e[31m\e[31m  \
    \ |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Found:    (closestVal : Any)\n\e[31m   |\e[0m                  \
    \       Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpetrqbwd3.scala:22:13\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            (closestVal, currentClosestVal)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \  Found:    (closestVal : Any)\n\e[31m   |\e[0m             Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpetrqbwd3.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            (closestVal, currentClosestVal)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    (currentClosestVal : Any)\n\e[31m\
    \   |\e[0m                         Required: Float\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val map: Map[Int, Float] = numbers.map(x => x -> x).toMap\n\
    \        val list1: List[(Float, Float)] =\n            numbers.map(x => (x -\
    \ map.getOrElse(maps.indexOf(x), 0.0f), x)).sorted\n        val list2: List[(Float,\
    \ Float)] =\n            numbers.map(x => (map.getOrElse(maps.indexOf(x), 0.0f)\
    \ - x, x)).sorted\n        list1.zip(list2).minBy(_._1)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj77bofwb.scala:11:35\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmap\e\
    [0m: \e[35mMap\e[0m[\e[35mInt\e[0m, \e[35mFloat\e[0m] = numbers.map(\e[36mx\e\
    [0m => x -> x).toMap\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    Map[Float, Float]\n\e[31m   |\e[0m                           \
    \ Required: collection.mutable.Map[Int, Float]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj77bofwb.scala:13:48 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            numbers.map(\e[36mx\e[0m => (x - map.getOrElse(maps.indexOf(x),\
    \ \e[31m0.0f\e[0m), x)).sorted\n\e[31m\e[31m   |\e[0m                        \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                      Not found: maps\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj77bofwb.scala:15:44 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            numbers.map(\e[36mx\e[0m => (map.getOrElse(maps.indexOf(x),\
    \ \e[31m0.0f\e[0m) - x, x)).sorted\n\e[31m\e[31m   |\e[0m                    \
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                  Not found: maps\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val nums = numbers map Math.abs\n        val max = nums.max\n\
    \        val min = (nums diff max).min\n        (min, max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m03kzw.scala:13:29\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmin\e\
    [0m = (nums diff max).min\n\e[31m\e[31m   |\e[0m                             ^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (max : Float)\n\e[31m\
    \   |\e[0m                             Required: scala.collection.Seq[Float]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val numberSet = numbers.toSet\n        val largest = numberSet.last\n\
    \        val smallest = numberSet.head\n        var closestPair : Tuple2[Float,\
    \ Float] = null\n        var closestDistance : Float = Float.PositiveInfinity\n\
    \        for(x <- numberSet) {\n            val distance = Math.abs(x - largest)\n\
    \            val newDistance = Math.abs(x - smallest)\n            if (newDistance\
    \ < closestDistance) {\n                closestDistance = newDistance\n      \
    \          closestPair = (x, newDistance)\n            }\n        }\n        closestPair\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp754zceuz.scala:27)\n\tat Problem.main(tmp754zceuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.size < 2) throw new IllegalArgumentException(\"\
    numbers list must be at least of size 2\");\n        var smallestNumber = numbers(0);\n\
    \        var largestNumber = numbers(0);\n        for (number <- numbers) {\n\
    \            if (number < smallestNumber) smallestNumber = number;\n         \
    \   if (number > largestNumber) largestNumber = number;\n        }\n        return\
    \ (smallestNumber, largestNumber)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmbk4ylkd.scala:21)\n\tat Problem.main(tmpmbk4ylkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def findClosestPair(first: Float, second: Float) : Option[Float]\
    \ = {\n            // Use a binary search to find the closest pair\n         \
    \   // https://en.wikipedia.org/wiki/Binary_search_algorithm\n            if (first\
    \ > second) {\n                val firstHalf = math.round(first / 2.0).toInt\n\
    \                val secondHalf = math.round(second / 2.0).toInt\n           \
    \     findClosestPair(firstHalf, secondHalf)\n            } else {\n         \
    \       val firstHalf = math.round(first / 2.0).toInt\n                val secondHalf\
    \ = math.round(second / 2.0).toInt\n                findClosestPair(secondHalf,\
    \ firstHalf)\n            }\n        }\n\n        val pairs = numbers.sliding(2).map(x\
    \ => findClosestPair(x(0), x(1))).toList\n        if (pairs.nonEmpty) {\n    \
    \        pairs.sortBy(x => x._1).reverse\n        } else {\n            None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnw_mqjsf.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            pairs.sortBy(\e[36mx\e[0m => x._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of Option[Float]\n\e[31m\e\
    [31m-- Error: /tmp/tmpnw_mqjsf.scala:27:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            pairs.sortBy(\e[36mx\e[0m => x._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnw_mqjsf.scala:29:12 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            None\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    None.type\n\e[31m   |\e[0m         \
    \   Required: (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def computeDistance(x : Float, y : Float) : Float = {\n\
    \            val distance = java.lang.Math.abs(x - y)\n            if (distance\
    \ > 1.0) 1.0f else distance\n        }\n        def findClosest(xs : List[Float],\
    \ y :Float) : Float = {\n            val minDistance = java.lang.Math.abs(xs.head()\
    \ - y)\n            var index = 0\n            var minIndex = -1\n           \
    \ val min = java.lang.Math.abs(xs.head() - y)\n            if (xs.isEmpty) {\n\
    \                return java.lang.Math.abs(y - xs.head())\n            }\n   \
    \         while (index < xs.size) {\n                if (computeDistance(y, xs(index))\
    \ < minDistance) {\n                    minDistance = computeDistance(y, xs(index))\n\
    \                    minIndex = index\n                }\n                index++\n\
    \            }\n            minIndex\n        }\n        def sortByDistance(x\
    \ : Float, y : Float) : Float = {\n            if (x < y) -1f else 1f\n      \
    \  }\n        val sortedNumber = numbers.toList.sortBy(sortByDistance)\n     \
    \   (findClosest(sortedNumber, numbers.head), findClosest(sortedNumber, numbers.last))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_cce3iqo.scala:28:23 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp_cce3iqo.scala:16:52 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mval\e[0m \e[36mminDistance\e[0m = java.lang.Math.abs(xs.head()\
    \ - y)\n\e[31m\e[31m   |\e[0m                                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35mhead\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOps\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp_cce3iqo.scala:19:44 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmin\e[0m = java.lang.Math.abs(xs.head()\
    \ - y)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35mhead\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp_cce3iqo.scala:21:49 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mreturn\e[0m java.lang.Math.abs(y\
    \ - xs.head())\n\e[31m\e[31m   |\e[0m                                        \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35mhead\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOps\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp_cce3iqo.scala:25:32 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    minDistance = computeDistance(y,\
    \ xs(index))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660028973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.nonEmpty)\n        val minVal = numbers.min\n\
    \        val maxVal = numbers.max\n        numbers.zipWithIndex.map { case (elem,\
    \ index) =>\n            val diff = elem - minVal\n            if (diff > maxVal)\
    \ elem -> maxVal\n            else if (diff < -maxVal) elem -> -maxVal\n     \
    \       else if (diff == 0) elem -> elem\n            else elem -> minVal\n  \
    \      }.minByOrdered.head\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk14_mqtt.scala:20:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.zipWithIndex.map { \e[33mcase\e[0m (elem,\
    \ index) =>\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mdiff\e[0m = elem\
    \ - minVal\n\e[31m16 |\e[0m            \e[33mif\e[0m (diff > maxVal) elem -> maxVal\n\
    \e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (diff < -maxVal) elem\
    \ -> -maxVal\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (diff ==\
    \ \e[31m0\e[0m) elem -> elem\n\e[31m19 |\e[0m            \e[33melse\e[0m elem\
    \ -> minVal\n\e[31m20 |\e[0m        }.minByOrdered.head\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        value minByOrdered is not a member of\
    \ List[(Float, Float)]\n1 error found\n"
  stdout: ''
  timestamp: 1660028973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var smallest = numbers(0)\n        var largest = numbers(0)\n\
    \        var smallestDiff = math.max(numbers(1).abs, numbers.last.abs)\n\n   \
    \     for (nm <- numbers) {\n            if (nm <= smallest || smallest == largest)\
    \ {\n                continue\n            }\n            var diff = Math.abs(nm\
    \ - largest)\n            if (diff < smallestDiff) {\n                smallestDiff\
    \ = diff\n                smallest = nm;\n            }\n            diff = Math.abs(nm\
    \ - smallest)\n            if (diff > smallestDiff) {\n                largest\
    \ = nm;\n            }\n        }\n        (smallest, largest)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rypeojm.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val nums = numbers.toList\n        val mins = nums.map(_\
    \ => (math.min(nums.head, _), math.max(nums.head, _))).toList\n        val maxes\
    \ = mins.map(_.swap)\n        val minDistances = mins.zip(maxes)\n        val\
    \ maxDistances = maxes.zip(mins)\n        val minMaxIndices = minDistances.zip(maxDistances).filter(_._1\
    \ < _._1).sortBy(_._1)\n        val minMax = minMaxIndices.head._2\n        val\
    \ maxIndices = minMaxIndices.filter(_._1 < minMax).map(_.swap)\n        val maxDistance\
    \ = maxIndices.map(_.swap)\n        (minMax._1, minMax._2, maxDistance._1, maxDistance._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpivsxtaxa.scala:12:54 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmins\e[0m = nums.map(_ =>\
    \ (math.min(nums.head, _), math.max(nums.head, _))).toList\n\e[31m\e[31m   |\e\
    [0m                                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ math.min(nums.head, _$2).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpivsxtaxa.scala:12:78\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mmins\e[0m = nums.map(_ => (math.min(nums.head, _), math.max(nums.head,\
    \ _))).toList\n\e[31m\e[31m   |\e[0m                                         \
    \                                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => math.max(nums.head, _$3).\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivsxtaxa.scala:16:71 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminMaxIndices\e[0m = minDistances.zip(maxDistances).filter(_._1\
    \ < _._1).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of (Any, Any), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpivsxtaxa.scala:16:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminMaxIndices\e[0m = minDistances.zip(maxDistances).filter(_._1\
    \ < _._1).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for "
  stdout: ''
  timestamp: 1660028978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val mins = numbers.minBy(_._1).map(_._1).take(2) // find\
    \ pair with smallest element\n        val maxes = numbers.maxBy(_._2).map(_._2).take(2)\n\
    \        if(maxes == mins) maxes else mins\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpro2xhs6a.scala:11:35 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmins\e[0m = numbers.minBy(_._1).map(_._1).take(\e\
    [31m2\e[0m) \e[34m// find pair with smallest element\e[0m\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpro2xhs6a.scala:11:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmins\e[0m = numbers.minBy(_._1).map(_._1).take(\e[31m2\e\
    [0m) \e[34m// find pair with smallest element\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpro2xhs6a.scala:12:36 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = numbers.maxBy(_._2).map(_._2).take(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value _2 is not a member of Float\n\
    \e[31m\e[31m-- Error: /tmp/tmpro2xhs6a.scala:12:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = numbers.maxBy(_._2).map(_._2).take(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660028977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val mins = ListBuffer[Float]()\n        val maxs = ListBuffer[Float]()\n\
    \        for (i <- numbers.indices) {\n            mins += numbers(i)\n      \
    \      maxs += numbers(i)\n        }\n        mins.zip(maxs).sortWith(_._1 > _._1).take(2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxd7dgdr2.scala:17:49\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        mins.zip(maxs).sortWith(_._1\
    \ > _._1).take(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[(Float,\
    \ Float)]\n\e[31m   |\e[0m        Required: (Float, Float)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var smallestDifference = Number.MAX_VALUE\n        var biggestDifference\
    \ = Number.MIN_VALUE\n\n        numbers.foreach{ number =>\n            var difference\
    \ = number - numbers.head\n\n            if (difference < smallestDifference)\
    \ {\n                smallestDifference = difference\n            } else if (difference\
    \ > biggestDifference) {\n                biggestDifference = difference\n   \
    \         }\n        }\n\n        (numbers.head + smallestDifference, biggestDifference\
    \ + smallestDifference)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_i40wsqj.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36msmallestDifference\e[0m\
    \ = Number.MAX_VALUE\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value MAX_VALUE is not a member of\
    \ object Number\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_i40wsqj.scala:12:39\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e\
    [36mbiggestDifference\e[0m = Number.MIN_VALUE\n\e[31m\e[31m   |\e[0m         \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \         value MIN_VALUE is not a member of object Number\n2 errors found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.sortBy(_.abs).take(2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9wfztktz.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.sortBy(_.abs).take(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    List[Float]\n\e[31m   |\e[0m        Required:\
    \ (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        var low = math.max(numbers.head, 0.0)\n        var high\
    \ = math.min(numbers.last, 0.0)\n        var pair : Tuple2[Float, Float] = null\n\
    \        var found : Boolean = false\n        numbers match {\n            case\
    \ Nil => pair = null\n            case x :: xs => {\n                val diff\
    \ : Float = math.abs(x - low)\n                if (math.abs(x - high) < diff)\
    \ {\n                    found = true // first pair found\n                  \
    \  if (pair != null) {\n                        val xHigh : Float = math.abs(pair._1\
    \ - high)\n                        if (xHigh < diff) pair = (pair._1, pair._2)\n\
    \                    }\n                }\n                else if (found && diff\
    \ < math.abs(x - high)) {\n                    pair = (x, x)\n               \
    \     found = false\n                }\n                else {\n             \
    \       pair = (x, high)\n                }\n            }\n        }\n      \
    \  if (pair != null) pair\n        else (low, high)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0kkns3d.scala:18:43\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m\
    \ \e[36mdiff\e[0m : \e[35mFloat\e[0m = math.abs(x - low)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                 Found:    Double\n\e[31m   |\e[0m          \
    \                         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps0kkns3d.scala:22:52 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                        \e[33mval\e[0m \e[36mxHigh\e[0m :\
    \ \e[35mFloat\e[0m = math.abs(pair._1 - high)\n\e[31m\e[31m   |\e[0m         \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Double\n\e[31m   |\e\
    [0m                                            Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0kkns3d.scala:31:31 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    pair = (x, high)\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Found:    (high : Double)\n\e[31m   |\e[0m               \
    \                Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps0kkns3d.scala:36:14 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33melse\e[0m (low, high)\n\e[31m\e[31m   |\e[0m           \
    \   ^^^\e[0m\n\e[31m   |\e[0m              Found:    (low : Double)\n\e[31m  \
    \ |\e[0m              Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps0kkns3d.scala:36:19 --------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33melse\e[0m (low, high)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                   Found:    (h"
  stdout: ''
  timestamp: 1660028980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val m1 = math.abs(numbers.head-numbers.last)\n        val\
    \ m2 = math.abs(numbers(0)-numbers(1))\n        if(m1 < m2){\n            return\
    \ numbers(0).toFloat, numbers(1).toFloat\n        }else{\n            return numbers(1).toFloat,\
    \ numbers(0).toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0m9m9zzf.scala:14:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mreturn\e[0m numbers(\e[31m0\e[0m).toFloat,\
    \ numbers(\e[31m1\e[0m).toFloat\n\e[31m\e[31m   |\e[0m                       \
    \              ^\e[0m\n\e[31m   |\e[0m                                 end of\
    \ statement expected but ',' found\n\e[31m\e[31m-- Error: /tmp/tmp0m9m9zzf.scala:16:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \     \e[33mreturn\e[0m numbers(\e[31m1\e[0m).toFloat, numbers(\e[31m0\e[0m).toFloat\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but ',' found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Convert numbers to List\n        val numbersList = numbers.toList\n\
    \        // Initialize minDistance and minElement to very large values so that\
    \ any number is considered the minimum\n        val minDistance = numbersList(0).toFloat\n\
    \        val minElement = numbersList(0).toFloat\n        // Iterate over remaining\
    \ numbers, find the smallest distance between current numbers and find the element\
    \ that\n        // is closest to current numbers\n        numbersList.foreach(n\
    \ => {\n            if (Math.abs(n - minElement) < minDistance) {\n          \
    \      minElement = n\n                minDistance = Math.abs(n - minElement)\n\
    \            }\n        })\n        (minElement, minDistance)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnfk18dhw.scala:20:27 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                minElement = n\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minElement\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnfk18dhw.scala:21:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                minDistance\
    \ = Math.abs(n - minElement)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val minDistance\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        numbers.zipWithIndex.map {\n            case (number, index)\
    \ => (Math.abs(number - numbers(index)), numbers(index)) }\n            .sortWith((x,\
    \ y) => x._1 < y._1).take(2)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9s1jeyaz.scala:13:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        numbers.zipWithIndex.map\
    \ {\n\e[31m12 |\e[0m            \e[33mcase\e[0m (number, index) => (Math.abs(number\
    \ - numbers(index)), numbers(index)) }\n\e[31m13 |\e[0m            .sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x._1 < y._1).take(\e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e\
    [31m[\e[0m(Float, Float)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: (Float,\
    \ Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def closest[T](l : List[T]) : Option[(T, T)] = {\n     \
    \       val m = l.minBy(x => Math.abs(x - l.min))\n            if (Math.abs(l.min\
    \ - m) < Math.abs(l.max - m)) Some((l, m))\n            else None\n        }\n\
    \n        val list = numbers.toList\n        val firstClosest = closest[Float](list)\n\
    \        val secondClosest = closest[Float](list.drop(1))\n\n        firstClosest\
    \ match {\n            case Some((l, m)) => secondClosest match {\n          \
    \      case Some((m, l2)) => Some((l, m, l2))\n                case None => None\n\
    \            }\n            case None => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl5lzcpzz.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = l.minBy(\e\
    [36mx\e[0m => Math.abs(x - l.min))\n\e[31m\e[31m   |\e[0m                    \
    \                      ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of T,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpl5lzcpzz.scala:12:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = l.minBy(\e\
    [36mx\e[0m => Math.abs(x - l.min))\n\e[31m\e[31m   |\e[0m                    \
    \                               ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ >: T\n\e[31m   |\e[0m..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mB\e[0m](\n\e[31m  \
    \ |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\e[31m   |\e[0m  \
    \  )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that match\
    \ type java.util.Comparator[B].\n\e[31m\e[31m-- Error: /tmp/tmpl5lzcpzz.scala:12:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \     \e[33mval\e[0m \e[36mm\e[0m = l.minBy(\e[36mx\e[0m => Math.abs(x - l.min))\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpl5lzcpzz.scala:13:30 -----------------------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1660028984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        val arrayOfFloat = numbers.toArray\n        val minValues\
    \ = arrayOfFloat.sortWith( (number1: Float, number2: Float) => number1 < number2\
    \ )\n        minValues.tail\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f, 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f,\
    \ 2.0f))));\n    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqg7sxgn0.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        minValues.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Array[Float]\n\
    \e[31m   |\e[0m        Required: (Float, Float)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // find smallest and largest numbers\n        val (minIndex,\
    \ maxIndex) = numbers.zipWithIndex.minBy { case (number, index) => (number, index)\
    \ }\n        // remove smallest number\n        numbers.remove(minIndex)\n   \
    \     // find closest number to the smallest number\n        val (closestIndex,\
    \ closestDistance) = numbers.zipWithIndex.minBy { case (number, index) => (math.abs(number\
    \ - minIndex), number) }\n        // remove closest number\n        numbers.remove(closestIndex)\n\
    \        // return smallest number first, then closest number\n        (minIndex,\
    \ closestDistance)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7avjorwb.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        numbers.remove(minIndex)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ List[Float] - did you mean numbers.reduce?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp7avjorwb.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        numbers.remove(closestIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of List[Float], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        if (numbers.size() < 2) throw new IllegalArgumentException(\"\
    The list must have at least two numbers.\")\n        var smallest = numbers(0)\n\
    \        var largest = numbers(0)\n        var smallestIndex = -1\n        var\
    \ largestIndex = -1\n        for ((index, number) <- numbers.zipWithIndex.toList\
    \ if index == 0) {\n            if (smallest == number && smallest != 0.0f) smallestIndex\
    \ = (index + 1)\n            if (largest == number && largest != 0.0f) largestIndex\
    \ = (index + 1)\n            if (number < smallest && smallest != 0.0f) smallest\
    \ = number\n            if (number > largest && largest != 0.0f) largest = number\n\
    \        }\n        return (smallest, largest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f, 4.0f))));\n\
    \    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmphba84hre.scala:11:20 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (numbers.size() < \e[31m2\e[0m)\
    \ \e[33mthrow\e[0m \e[33mnew\e[0m \e[35mIllegalArgumentException\e[0m(\e[31m\"\
    The list must have at least two numbers.\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \e[33mmethod\e[0m \e[35msize\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphba84hre.scala:17:73 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (smallest == number && smallest\
    \ != \e[31m0.0f\e[0m) smallestIndex = (index + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Found:\
    \    Float\n\e[31m   |\e[0m                                                  \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphba84hre.scala:18:70\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (largest\
    \ == number && largest != \e[31m0.0f\e[0m) largestIndex = (index + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                          Found:    Float\n\e[31m   |\e[0m                  \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        // Sort numbers in ascending order\n        numbers.sortWith((a,\
    \ b) => a.toFloat - b.toFloat)\n        val closestNums = List(numbers(numbers.size\
    \ - 1), numbers(0))\n        // Find the closest numbers in the list\n       \
    \ val closestResults = closestNums.zip(numbers.zip(closestNums).map(_._1 - _._1)).map\
    \ { case (x, y) => (x, y) }\n        // Find closest numbers in order\n      \
    \  (closestResults.head._2, closestResults.last._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp532tq3w7.scala:12:35\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        numbers.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.toFloat - b.toFloat)\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                  Found:    Float\n\e[31m   |\e[0m          \
    \                         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp532tq3w7.scala:15:76 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mclosestResults\e[0m = closestNums.zip(numbers.zip(closestNums).map(_._1\
    \ - _._1)).map { \e[33mcase\e[0m (x, y) => (x, y) }\n\e[31m\e[31m   |\e[0m   \
    \                                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value _1 is not a member\
    \ of Float\n2 errors found\n"
  stdout: ''
  timestamp: 1660028984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        def nextBigger(n : Float) : Float = {\n            val bigger\
    \ = numbers.head - n\n            numbers.removeAt(0)\n            bigger\n  \
    \      }\n        def nextSmaller(n : Float) : Float = {\n            val smaller\
    \ = numbers.head - n\n            numbers.removeAt(0)\n            smaller\n \
    \       }\n        val bigger = nextBigger(numbers.head).abs() < nextBigger(numbers.last).abs()\
    \ ? numbers.head : numbers.last\n        val smaller = nextSmaller(numbers.head).abs()\
    \ < nextSmaller(numbers.last).abs() ? numbers.head : numbers.last\n        (bigger,\
    \ smaller)\n    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34pfsl9z.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            numbers.removeAt(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ removeAt is not a member of List[Float]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp34pfsl9z.scala:18:20 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            numbers.removeAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value removeAt is not a\
    \ member of List[Float]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34pfsl9z.scala:21:110\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mbigger\e[0m = nextBigger(numbers.head).abs() < nextBigger(numbers.last).abs()\
    \ ? numbers.head : numbers.last\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                type last\
    \ is not a member of List[Float]\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp34pfsl9z.scala:21:46\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e\
    [0m \e[36mbigger\e[0m = nextBigger(numbers.head).abs() < nextBigger(numbers.last).abs()\
    \ ? numbers.head : numbers.last\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mclass\e\
    [0m \e[35mRichFloat\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp34pfsl9z.scala:22:113 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msmaller\e[0m = nextSmaller(numbers.head).abs()\
    \ < nextSmaller(numbers.last).abs() ? numbers.head : numbers.last\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            type last is not a member of List[Float]\n\e[31m\e\
    [31m-- [E050] Type Erro"
  stdout: ''
  timestamp: 1660028984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n    // other and return them in order\
    \ (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n  \
    \  // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n  \
    \  // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float,\
    \ Float] = {\n        require(numbers.size > 2)\n        val sortedNumbers = numbers.sortWith(math.abs)\n\
    \        val min = sortedNumbers(0)\n        val max = sortedNumbers(numbers.size\
    \ - 1)\n        if(numbers.size < 3) {\n            (min, max)\n        } else\
    \ {\n            (sortedNumbers(1) - min, sortedNumbers(1) - max)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
    \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
    \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
    \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0r06jc4f.scala:12:50 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msortedNumbers\e[0m = numbers.sortWith(math.abs)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m   |\e[0mmatch expected type (Float,\
    \ Float) => Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660028981
