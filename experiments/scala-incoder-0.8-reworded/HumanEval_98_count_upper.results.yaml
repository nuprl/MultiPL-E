language: scala
name: HumanEval_98_count_upper
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 1L\n        for (i<- s.indices) if (s.charAt(i) == 'A' || s.charAt(i) == 'a')\
    \ count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'B' || s.charAt(i)\
    \ == 'b') count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'C' || s.charAt(i)\
    \ == 'c') count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'D' || s.charAt(i)\
    \ == 'd') count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'E' || s.charAt(i)\
    \ == 'e') count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'F' || s.charAt(i)\
    \ == 'f') count += 1\n        for (i<- s.indices) if (s.charAt(i) == 'G' || s.charAt(i)\
    \ == 'g') count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0ho3v9x.scala:24)\n\tat Problem.main(tmpn0ho3v9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        if (s.isEmpty)\
    \ 0\n        else s.map(x => ((x =:= \"a\") || (x =:= \"e\") || (x =:= \"i\")\
    \ || (x =:= \"o\") || (x =:= \"u\"))).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61_kgwak.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m s.map(x => ((x =:= \e[31m\"a\"\
    \e[0m) || (x =:= \e[31m\"e\"\e[0m) || (x =:= \e[31m\"i\"\e[0m) || (x =:= \e[31m\"\
    o\"\e[0m) || (x =:= \e[31m\"u\"\e[0m))).sum\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                  value =:= is not\
    \ a member of Char - did you mean x.==?\n1 error found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Count the\
    \ number of uppercase vowels in even indices.\n        // We use Map to do the\
    \ counting.\n        val vowelCounts = Map(\"a\" -> 0, \"e\" -> 0, \"i\" -> 0,\
    \ \"o\" -> 0, \"u\" -> 0)\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowelCounts(s(i).toLowerCase) == vowelCounts(\"u\"))\n      \
    \          count += 1\n            else\n                vowelCounts(s(i).toLowerCase)\
    \ match {\n                    case \"a\" =>\n                        vowelCounts(\"\
    u\") = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"a\") = 0\n\
    \                    case \"e\" =>\n                        vowelCounts(\"u\"\
    ) = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"e\") = 0\n \
    \                   case \"i\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"i\") = 0\n \
    \                   case \"o\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"o\") = 0\n \
    \                   case \"u\" =>\n                        vowelCounts(\"u\")\
    \ = vowelCounts[\"u\"] + 1\n                        vowelCounts(\"u\") = 0\n \
    \                   case \"a\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"a\") = 0\n \
    \                   case \"e\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"e\") = 0\n \
    \                   case \"i\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"i\") = 0\n \
    \                   case \"o\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"o\") = 0\n \
    \                   case \"u\" =>\n                        vowelCounts(\"i\")\
    \ = vowelCounts[\"i\"] + 1\n                        vowelCounts(\"u\") = 0\n \
    \               }\n        vowelCounts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzjontzhv.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (vowelCounts(s(i).toLowerCase)\
    \ == vowelCounts(\e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m                   \
    \         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzjontzhv.scala:21:33 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                vowelCounts(s(i).toLowerCase) \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpzjontzhv.scala:22:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m\"a\"\e[0m\
    \ =>\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m\
    \         Values of types String and Int cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpzjontzhv.scala:23:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        vowelCounts(\e[31m\"u\"\e[0m)\
    \ = vowelCounts[\e[31m\"u\"\e[0m] + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \             \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mMapOps\e\
    [0m does not take type parameters\n\e[31m\e[31m-- Error: /tmp/tmpzjontzhv.scala:25:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m\"e\"\e[0m =>\n\e[31m\e[31m   |\e[0m     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Values of types String\
    \ and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzjontzhv.scala:26:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \                 vowelCounts(\e[31m\"u\"\e[0m) = vowelCounts[\e[31m\"u\"\e[0m]\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \e[33mmethod\e[0m \e\
    [35mapply\e[0m in \e[33mtrait\e[0m \e[35mMapOp"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val map = mutable.HashMap[Char, Int]()\n        s.toList\n\
    \            .zipWithIndex\n            .foreach {\n                case (v, i)\
    \ =>\n                    if (i % 2 == 0 && vowels.indexOf(v) > -1) {\n      \
    \                  map.update(v, map.getOrElse(v, 0) + 1)\n                  \
    \  }\n            }\n        map.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5domt8q3.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\", \"a\")\n        s.toList foreach\
    \ (x => {\n            if (vowels.contains(x.charAt(0))) {\n                x\
    \ match {\n                    case \"A\" | \"a\" => vowels += \"A\"\n       \
    \             case \"E\" | \"e\" => vowels += \"E\"\n                    case\
    \ \"I\" | \"i\" => vowels += \"I\"\n                    case \"O\" | \"o\" =>\
    \ vowels += \"O\"\n                    case \"U\" | \"u\" => vowels += \"U\"\n\
    \                    case _ => vowels += x.charAt(0)\n                }\n    \
    \        }\n        })\n        vowels.toSet.size * (vowels.toSet diff \"a\").size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzkpizm8j.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set(\e\
    [31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpzkpizm8j.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    \e[33mcase\e[0m \e[31m\"A\"\e[0m\
    \ | \e[31m\"a\"\e[0m => vowels += \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzkpizm8j.scala:17:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m\"A\"\e[0m | \e[31m\"a\"\e[0m => vowels +=\
    \ \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzkpizm8j.scala:18:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mcase\e[0m \e[31m\"E\"\e[0m\
    \ | \e[31m\"e\"\e[0m => vowels += \e[31m\"E\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzkpizm8j.scala:18:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m\"E\"\e[0m | \e[31m\"e\"\e[0m => vowels +=\
    \ \e[31m\"E\"\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpzkpizm8j.scala:19:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    \e[33mcase\e[0m \e[31m\"I\"\e[0m\
    \ | \e[31m\"i\"\e[0m => vowels += \e[31m\"I\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^\e[0"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val upperCaseVowels = vowels.filter(vowel\
    \ => s match { case \"a\" => vowel == \"A\" })\n        val evenIndices = s filter\
    \ (_ isDigit) filter (_ % 2 == 0) map (_.toInt)\n        evenIndices.foldLeft(0)(_\
    \ + upperCaseVowels.size)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpye8e0n_l.scala:15:45 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = s filter\
    \ (_ isDigit) filter (_ % \e[31m2\e[0m == \e[31m0\e[0m) map (_.toInt)\n\e[31m\e\
    [31m   |\e[0m                                             ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpye8e0n_l.scala:16:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenIndices.foldLeft(\e\
    [31m0\e[0m)(_ + upperCaseVowels.size)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Wrong number of parameters, expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowelSet\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val upperSet = Set(\"A\",\"\
    E\",\"I\",\"O\",\"U\")\n        val vowelSetIterator = vowelSet.iterator\n   \
    \     s.flatMap(x => vowelSetIterator ++ upperSet.iterator).count(x => x.toUpperCase\
    \ == x)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4rzpr80h.scala:19)\n\tat Problem.main(tmp4rzpr80h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var vowelCount\
    \ = 0\n        for (i <- s.indices) {\n            if (s(i) == 'A' || s(i) ==\
    \ 'a') {\n                if (s(i) mod 2 == 0)\n                    vowelCount\
    \ += 1\n            }\n        }\n        return vowelCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw0fc6ixr.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (s(i) mod \e[31m2\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue mod is not a member of Char, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Step 1:\
    \ compute length\n        var len = s.length\n        // Step 2: create result\
    \ map\n        var result = new HashMap[Character, Long]()\n        // Step 3:\
    \ for each letter in the input string, increment result map\n        for (char\
    \ <- s) {\n            result + ((char match { case 'A' | 'a' => 0 }) + (char\
    \ match { case 'B' | 'b' => 1 }) + (char match { case 'C' | 'c' => 2 })) + (char\
    \ match { case 'D' | 'd' => 3 }) + (char match { case 'E' | 'e' => 4 }) + (char\
    \ match { case 'F' | 'f' => 5 }) + (char match { case 'G' | 'g' => 6 }) + (char\
    \ match { case 'H' | 'h' => 7 }) + (char match { case 'I' | 'i' => 8 }) + (char\
    \ match { case 'J' | 'j' => 9 }) + (char match { case 'K' | 'k' => 10 }) + (char\
    \ match { case 'L' | 'l' => 11 }) + (char match { case 'M' | 'm' => 12 }) + (char\
    \ match { case 'N' | 'n' => 13 }) + (char match { case 'O' | 'o' => 14 }) + (char\
    \ match { case 'P' | 'p' => 15 }) + (char match { case 'Q' | 'q' => 16 }) + (char\
    \ match { case 'R' | 'r' => 17 }) + (char match { case 'S' | 's' => 18 }) + (char\
    \ match { case 'T' | 't' => 19 }) + (char match { case 'U' | 'u' => 20 }) + (char\
    \ match { case 'V' | 'v' => 21 }) + (char match { case 'W' | 'w' => 22 }) + (char\
    \ match { case 'X' | 'x' => 23 }) + (char match { case 'Y' | 'y' => 24 }) + (char\
    \ match { case 'Z' | 'z' => 25 }))\n        }\n        // Step 4: return result\
    \ length\n        len\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj6pxqg1x.scala:19:1050 -------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            result + ((char \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31m'A'\e[0m | \e[31m'a'\e[0m => \e[31m0\e[0m }) + (char \e[33mmatch\e[0m\
    \ { \e[33mcase\e[0m \e[31m'B'\e[0m | \e[31m'b'\e[0m => \e[31m1\e[0m }) + (char\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'C'\e[0m | \e[31m'c'\e[0m => \e[31m2\e\
    [0m })) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'D'\e[0m | \e[31m'd'\e\
    [0m => \e[31m3\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'E'\e\
    [0m | \e[31m'e'\e[0m => \e[31m4\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31m'F'\e[0m | \e[31m'f'\e[0m => \e[31m5\e[0m }) + (char \e[33mmatch\e[0m\
    \ { \e[33mcase\e[0m \e[31m'G'\e[0m | \e[31m'g'\e[0m => \e[31m6\e[0m }) + (char\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'H'\e[0m | \e[31m'h'\e[0m => \e[31m7\e\
    [0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'I'\e[0m | \e[31m'i'\e\
    [0m => \e[31m8\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'J'\e\
    [0m | \e[31m'j'\e[0m => \e[31m9\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31m'K'\e[0m | \e[31m'k'\e[0m => \e[31m10\e[0m }) + (char \e[33mmatch\e\
    [0m { \e[33mcase\e[0m \e[31m'L'\e[0m | \e[31m'l'\e[0m => \e[31m11\e[0m }) + (char\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'M'\e[0m | \e[31m'm'\e[0m => \e[31m12\e\
    [0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'N'\e[0m | \e[31m'n'\e\
    [0m => \e[31m13\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'O'\e\
    [0m | \e[31m'o'\e[0m => \e[31m14\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31m'P'\e[0m | \e[31m'p'\e[0m => \e[31m15\e[0m }) + (char \e[33mmatch\e\
    [0m { \e[33mcase\e[0m \e[31m'Q'\e[0m | \e[31m'q'\e[0m => \e[31m16\e[0m }) + (char\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'R'\e[0m | \e[31m'r'\e[0m => \e[31m17\e\
    [0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'S'\e[0m | \e[31m's'\e\
    [0m => \e[31m18\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'T'\e\
    [0m | \e[31m't'\e[0m => \e[31m19\e[0m }) + (char \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31m'U'\e[0m | \e[31m'u'\e[0m => \e[31m20\e[0m }) + (char \e[33mmatch\e\
    [0m { \e[33mcase\e[0m \e[31m'V'\e[0m | \e[31m'v'\e[0m => \e[31m21\e[0m }) + (char\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31m'W'\e[0m | \e"
  stdout: ''
  timestamp: 1659978851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var evenCount\
    \ = 0\n        for (i<-0 until s.length()) {\n            if (s(i).isLetter) if\
    \ (s(i).isUpper) evenCount += 1\n        }\n        (s.length()-evenCount) * evenCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ex5me5o.scala:20)\n\tat Problem.main(tmp5ex5me5o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Array(\"A\", \"a\", \"B\", \"b\", \"C\", \"c\", \"D\", \"d\", \"E\", \"e\"\
    , \"F\", \"f\", \"G\", \"g\", \"H\", \"h\", \"I\", \"i\", \"J\", \"j\", \"K\"\
    , \"k\", \"L\", \"l\", \"M\", \"m\", \"N\", \"n\", \"O\", \"o\", \"P\", \"p\"\
    , \"Q\", \"q\", \"R\", \"r\", \"S\", \"s\", \"T\", \"t\", \"U\", \"u\", \"V\"\
    , \"v\", \"W\", \"w\", \"X\", \"x\", \"Y\", \"y\", \"Z\", \"z\")\n        var\
    \ count = 0L\n        for (i <- 0 until s.length; if ((i % 2) == 0) {\n      \
    \      if (vowels(i.toString.toUpperCase().charAt(0)) >= 'a')\n              \
    \  count += 1L\n        }) count\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpj029avo6.scala:15:40 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length;\
    \ \e[33mif\e[0m ((i % \e[31m2\e[0m) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  \e[33mmethod\e[0m \e[35m==\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj029avo6.scala:16:62 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (vowels(i.toString.toUpperCase().charAt(\e[31m0\e\
    [0m)) >= \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e\
    [0m                                                  Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var vowels:mutable.Set[Char]\
    \ = scala.collection.mutable.Set[Char]()\n        for (i <- 0 until s.length)\
    \ \n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' ||\
    \ s(i) == 'u') vowels += s(i)\n        vowels.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprr2_6lf9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mvowels\e[0m:mutable.Set[\e\
    [35mChar\e[0m] = scala.collection.mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var even =\
    \ 0\n        var upper = 0\n        var evenChars = List[Char](s.charAt(2))\n\
    \        for (cc <- s.toCharArray) {\n            if (cc == 'a' || cc == 'e' ||\
    \ cc == 'i'\n            || cc == 'o' || cc == 'u') {\n                even +=\
    \ evenChars.indexOf(cc)\n            }\n            if (cc == 'B' || cc == 'D'\
    \ || cc == 'F' || cc == 'G') {\n                upper += 1\n            }\n  \
    \      }\n        (even + upper)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1992ee6y.scala:28)\n\tat Problem.main(tmp1992ee6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val even =\
    \ s.filter( _.isEven) ; val upper = even.map( _.toUpperCase )\n        val count\
    \ = upper.filter( x => x ==\"A\" || x == \"E\" || x == \"I\" || x == \"O\" ||\
    \ x == \"U\" ).length\n        (count)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprottkkmv.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = s.filter( _.isEven)\
    \ ; \e[33mval\e[0m \e[36mupper\e[0m = even.map( _.toUpperCase )\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                     value isEven is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmprottkkmv.scala:13:65 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = s.filter( _.isEven)\
    \ ; \e[33mval\e[0m \e[36mupper\e[0m = even.map( _.toUpperCase )\n\e[31m\e[31m\
    \   |\e[0m                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.HashSet[Char]('a','e','i','o','u')\n        for (c <- s.toCharArray)\
    \ {\n            if(vowels(c).nonEmpty) vowels(c) += c // vowel count\n      \
    \  }\n        vowels.toSet.count { case c => c.isUpperCase } % 2L\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvs5gq2p.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m](\e[31m'a'\e[0m,\e[31m'e'\e[0m,\e[31m'i'\e[0m,\e[31m'o'\e[0m,\e\
    [31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for (i <- 0 until s.length; if (i % 2 == 0) {\n        \
    \    if (\"AEIOU\".contains(s.charAt(i))) {\n                count += 1\n    \
    \        }\n        }) {\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpzaim_b28.scala:14:40 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length;\
    \ \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \              \e[33mmethod\e[0m \e[35m==\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0l\n        for (i <- 0 to s.length-1) {\n            if (s.charAt(i) == 'A'\
    \ && i%2==0)\n                count = count + 1\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1o4hg1yp.scala:21)\n\tat Problem.main(tmp1o4hg1yp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Split s\
    \ into an array based on the separator \"Ef\".\n        // Then filter out the\
    \ even indices.\n        s.split(\"Ef\").filter(i => i % 2 == 0).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplbg6i773.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        s.split(\e[31m\"Ef\"\e[0m).filter(\e[36mi\e[0m\
    \ => i % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m         \
    \                         ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val vowels =\
    \ \"AEIOU\".toCharArray\n      val evenIndices = Vector(0 to s.length-1)\n   \
    \   val count = mutable.Map[Int, Int]()\n      for (i <- evenIndices) {\n    \
    \      count += vowels(i) -> vowels.count(e => e == s.charAt(i))\n      }\n  \
    \    count.getOrElse(0, 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_yhj0sb.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      var counter\
    \ = 0\n      var evenIndices = mutable.Buffer.empty[Int]\n      for (i <- 0 until\
    \ s.length; i = (i + 2)) {\n        if (s(i).toUpperCase == 'A' || s(i).toUpperCase\
    \ == 'E') {\n          if (s(i).nonEmpty) {\n            evenIndices += i\n  \
    \          counter += 1\n          }\n        }\n      }\n      counter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfw_ag1d5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mvar\e[0m \e[36mevenIndices\e[0m = mutable.Buffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E005] Naming Error: /tmp/tmpfw_ag1d5.scala:15:34 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length;\
    \ i = (i + \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                  duplicate pattern\
    \ variable: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfw_ag1d5.scala:16:17\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (s(i).toUpperCase\
    \ == \e[31m'A'\e[0m || s(i).toUpperCase == \e[31m'E'\e[0m) {\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfw_ag1d5.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m          \e[33mif\e[0m (s(i).nonEmpty)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \            value nonEmpty is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.Map.empty[String, Long]\n        for ((pos, x) <- s.zipWithIndex)\
    \ {\n            counts.getOrElse(x.toString, 0L) match {\n                case\
    \ 0 => counts += (x.toString -> 1L)\n                case count => (counts(x.toString)\
    \ + count)(1)\n            }\n        }\n        counts.valuesIterator.sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjfpgu6q.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val c = s.toCharArray\n\
    \        val ev = c.filter(_ >= 'A' && _ <='Z')\n                    .filter(_\
    \ % 2 == 0)\n                    .map(_ % 26)\n        ev.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2html10v.scala:14:26 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mev\e[0m = c.filter(_ >=\
    \ \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \  Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if s(i) == 'a') {\n            if ((s(i)\
    \ == s('A')) || (s(i) == s('a'))) {\n                count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 65\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.countUpper$$anonfun$2(tmp8za7_8cf.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)\n\tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)\n\
    \tat scala.collection.AbstractIterable.foreach(Iterable.scala:926)\n\tat scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:896)\n\
    \tat Problem$.countUpper(tmp8za7_8cf.scala:18)\n\tat Problem$.main(tmp8za7_8cf.scala:22)\n\
    \tat Problem.main(tmp8za7_8cf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(Mai"
  stdout: ''
  timestamp: 1659978849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var res =\
    \ 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'A') {\n \
    \               res += 1\n            }\n            if (s(i) == 'a') {\n    \
    \            res += 1\n            }\n            if (s(i) == 'E') {\n       \
    \         res += 1\n            }\n            if (s(i) == 'e') {\n          \
    \      res += 1\n            }\n            if (s(i) == 'I') {\n             \
    \   res += 1\n            }\n            if (s(i) == 'i') {\n                res\
    \ += 1\n            }\n            if (s(i) == 'O') {\n                res +=\
    \ 1\n            }\n            if (s(i) == 'o') {\n                res += 1\n\
    \            }\n            if (s(i) == 'U') {\n                res += 1\n   \
    \         }\n            if (s(i) == 'u') {\n                res += 1\n      \
    \      }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcw8yi2e.scala:49)\n\tat Problem.main(tmpdcw8yi2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for( i <- 0 until s.length ) {\n            if( s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u' ) {\n                count += 1\n            }\n        }\n\
    \        \n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv39j6bs.scala:24)\n\tat Problem.main(tmplv39j6bs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val map =\
    \ mutable.HashMap.empty[String, Int]\n        for (i <- s.indices) {\n       \
    \     val c = s(i)\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') map(s(i) -> 1)\n        }\n        map.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bqpiprj.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var counter\
    \ = 1\n        var i = 0\n        while (i < s.length)\n            if (s(i).isUpper)\n\
    \                counter += 1\n            i += 1\n        if (counter % 2 ==\
    \ 0)\n            1\n        else\n            0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth1fs7g6.scala:27)\n\tat Problem.main(tmpth1fs7g6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.count(_\
    \ == 'A' || _ == 'a')\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5nivrqb1.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        s.count(_ == \e[31m'A'\e[0m || _ == \e[31m'a'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0L\n       \
    \ for(i <- 0 until s.length) {\n            if(vowels(i) % 2 == 0) {\n       \
    \         count += s.length - i - 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmchwkgwo.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(vowels(i) % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 1\n        for (i <- 0 until s.length if s(i) == 'a') count += 1\n       \
    \ for (i <- 0 until s.length if s(i) == 'e') count += 1\n        for (i <- 0 until\
    \ s.length if s(i) == 'i') count += 1\n        for (i <- 0 until s.length if s(i)\
    \ == 'o') count += 1\n        for (i <- 0 until s.length if s(i) == 'u') count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6c83mgfe.scala:22)\n\tat Problem.main(tmp6c83mgfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val count\
    \ = mutable.HashMap.empty[Char, Long]\n        for (i <- s.indices) {\n      \
    \      if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i)\
    \ == 'O' || s.charAt(i) == 'U') {\n                if (count.contains(s.charAt(i)))\
    \ {\n                    count(s.charAt(i)) += 1\n                }\n        \
    \        else {\n                    count(s.charAt(i)) += 1\n               \
    \ }\n            }\n        }\n        for (x <- count.keySet()) {\n         \
    \   if (count(x) % 2 != 0) {\n                return 0l\n            }\n     \
    \   }\n        count(s.charAt(0)) + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ltakf41.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var counter=0\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U')\n\
    \                counter = counter + 1\n\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n                counter = counter\
    \ - 1\n        counter\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl6wwtgo6.scala:24)\n\tat Problem.main(tmpl6wwtgo6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val (even,odd)\
    \ =  s span (_ % 2 == 0)\n      val c = even.count{ _.isUpperCase }\n      if\
    \ (odd.isEmpty) c\n      else c + countUpper(odd)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9caxyuhx.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mc\e[0m = even.count{ _.isUpperCase\
    \ }\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value isUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for (i <- 0 to s.length - 1) {\n            if (s(i) match\
    \ {\n                case 'a' | 'A' | ... | 'Z' => count += 1\n              \
    \  case _ =>\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpii_a2wtu.scala:16:33 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m | \e[31m'A'\e\
    [0m | ... | \e[31m'Z'\e[0m => count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \          pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpii_a2wtu.scala:19:8 ----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m      \
    \  ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpii_a2wtu.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            }\n\e[31m\e[31m \
    \  |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count = 1\n        for\
    \ (i<-0 to s.length-2; i+=2L) {\n            if (vowels(s(i)) == 'U' && vowels(s(i+1))\
    \ == 'U') count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2z83jz2k.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m to s.length-\e\
    [31m2\e[0m; i+=\e[31m2L\e[0m) {\n\e[31m\e[31m   |\e[0m                       \
    \               ^\e[0m\n\e[31m   |\e[0m                                      '<-'\
    \ expected, but ')' found\n1 error found\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        var i = 0\n        var count : Long\
    \ = 0\n        while (i < s.length) {\n            if (vowels.contains(s(i)))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkyzzlkz7.scala:26)\n\tat Problem.main(tmpkyzzlkz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val n = 0l\n        for (i <- 0 until\
    \ s.length / 2 by 2) {\n            if (vowels(2 * i) > vowels(2 * i + 1) && vowels(2\
    \ * i) != 'a'\n                && vowels(2 * i) != 'e' && vowels(2 * i) != 'i')\
    \ {\n                n += 1\n            }\n        }\n        n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bdmw9d1.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                n += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var num =\
    \ 0L\n        for (i <- 0 until s.length) { \n            if(i%2 == 0){\n    \
    \            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u'){\n                    num += 1\n\
    \                }\n            }\n        }\n        return num\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9imqvyl.scala:25)\n\tat Problem.main(tmpb9imqvyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val a = Array('A'..'Z')\
    \ ++ Array('a','o','u','I','O','U')\n        val r = new mutable.ArrayBuffer[Char]()\n\
    \        var i = 0\n        while (i < s.length) {\n            val c = s(i)\n\
    \            if (a.contains(c))\n                r.add(c)\n            i += 1\n\
    \        }\n        if (s.length % 2 == 0) (s.length - r.length) / 2 else r.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbf21qdlf.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array(\e[31m'A'\e\
    [0m..\e[31m'Z'\e[0m) ++ Array(\e[31m'a'\e[0m,\e[31m'o'\e[0m,\e[31m'u'\e[0m,\e\
    [31m'I'\e[0m,\e[31m'O'\e[0m,\e[31m'U'\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \               ^\e[0m\n\e[31m   |\e[0m                          an identifier\
    \ expected, but '.' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbf21qdlf.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mr\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val count\
    \ = mutable.ArrayBuffer.empty[Int]\n        var count = 0\n        var i = 0\n\
    \        while (i < s.length) if (s(i).isUpper) count += 1\n        if (count\
    \ > 0) i = 0\n        while (i < s.length) if (s(i).isUpper) count -= 1\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp02idrf9q.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is already\
    \ defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp02idrf9q.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val chars\
    \ = \n                s.toList.map(c => c match {\n                    case 'A'->1\n\
    \                    case 'a'->1\n                    case 'E'->1\n          \
    \          case 'e'->1\n                    case 'I'->1\n                    case\
    \ 'i'->1\n                    case 'O'->1\n                    case 'o'->1\n \
    \                   case 'U'->1\n                    case 'u'->1\n           \
    \         case 'Y'->1\n                    case 'y'->1\n                    case\
    \ 'a'->1\n                    case 'E'->1\n                    case 'e'->1\n \
    \                   case 'I'->1\n                    case 'i'->1\n           \
    \         case 'O'->1\n                    case 'o'->1\n                    case\
    \ 'U'->1\n                    case 'u'->1\n                    case 'Y'->1\n \
    \                   case 'y'->1\n                    case 'a'->1\n           \
    \         case 'E'->1\n                    case 'e'->1\n                    case\
    \ 'I'->1\n                    case 'i'->1\n                    case 'O'->1\n \
    \                   case 'o'->1\n                    case 'U'->1\n           \
    \         case 'u'->1\n                    case 'Y'->1\n                    case\
    \ 'y'->1\n                    case 'a'->1\n                    case 'E'->1\n \
    \                   case 'e'->1\n                    case 'I'->1\n           \
    \         case 'i'->1\n                    case 'O'->1\n                    case\
    \ 'o'->1\n                    case 'U'->1\n                    case 'u'->1\n \
    \                   case 'Y'->1\n                    case 'y'->1\n           \
    \         case 'a'->1\n                    case 'E'->1\n                    case\
    \ 'e'->1\n                    case 'I'->1\n                    case 'i'->1\n \
    \                   case 'O'->1\n                    case 'o'->1\n           \
    \         case 'U'->1\n                    case 'u'->1\n                    case\
    \ 'Y'->1\n                    case 'y'->1\n                    case 'a'->1\n \
    \                   case 'E'->1\n                    case 'e'->1\n           \
    \         case 'I'->1\n                    case 'i'->1\n                    case\
    \ 'O'->1\n                    case 'o'->1\n                    case 'U'->1\n \
    \                   case 'u'->1\n                    case 'Y'->1\n           \
    \         case 'y'->1\n                    case 'a'->1\n                    case\
    \ 'E'->1\n                    case 'e'->1\n                    case 'I'->1\n \
    \                   case 'i'->1\n                    case 'O'->1\n           \
    \         case 'o'->1\n                    case 'U'->1\n                    case\
    \ 'u'->\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphe2sc9it.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m->\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m\
    \                    '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmphe2sc9it.scala:18:20 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m                    \e[33mcase\e[0m \e[31m'e'\e[0m->\e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphe2sc9it.scala:20:20 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    \e[33mcase\e[0m \e[31m'i'\e[0m->\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphe2sc9it.scala:22:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'o'\e[0m->\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                    '=>' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphe2sc9it.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m \e[31m'u'\e[0m->\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m\
    \                    '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmphe2sc9it.scala:26:20 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m                    \e[33mcase\e[0m \e[31m'y'\e[0m->\e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmphe2sc9it.scala:28:20 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                    \e[33mcase\e[0m \e[31m'E'\e[0m->\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphe2sc9it.scala:30:20\
    \ ----"
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var total\
    \ = 0\n        var evenPos = -1\n        var oddPos = -1\n        val length =\
    \ s.length\n        // Scan the string and keep track of every even and odd position\n\
    \        for(i <- 0 until length) {\n            if (s.charAt(i) == 'A') {\n \
    \               if (evenPos == -1) {\n                    evenPos = i\n      \
    \          } else if (evenPos == i) {\n                    total += 2\n      \
    \          } else {\n                    total += 1\n                }\n     \
    \       }\n            if (s.charAt(i) == 'B') {\n                if (evenPos\
    \ == -1) {\n                    evenPos = i\n                } else if (evenPos\
    \ == i) {\n                    total += 2\n                } else {\n        \
    \            total += 1\n                }\n            }\n            if (s.charAt(i)\
    \ == 'C') {\n                if (evenPos == -1) {\n                    evenPos\
    \ = i\n                } else if (evenPos == i) {\n                    total +=\
    \ 2\n                } else {\n                    total += 1\n              \
    \  }\n            }\n            if (s.charAt(i) == 'D') {\n                if\
    \ (evenPos == -1) {\n                    evenPos = i\n                } else if\
    \ (evenPos == i) {\n                    total += 2\n                } else {\n\
    \                    total += 1\n                }\n            }\n          \
    \  if (s.charAt(i) == 'E') {\n                if (evenPos == -1) {\n         \
    \           evenPos = i\n                } else if (evenPos == i) {\n        \
    \            total += 2\n                } else {\n                    total +=\
    \ 1\n                }\n            }\n            if (s.charAt(i) == 'F') {\n\
    \                if (evenPos == -1) {\n                    evenPos = i\n     \
    \           } else if (evenPos == i) {\n                    total += 2\n     \
    \           } else {\n                    total += 1\n                }\n    \
    \        }\n            if (s.charAt(i) == 'G') {\n                if (evenPos\
    \ == -1) {\n                    evenPos = i\n                } else if (evenPos\
    \ == i) {\n                    total += 2\n                } else {\n        \
    \            total += 1\n                }\n            }\n        }\n       \
    \ // Count all even indices, and subtract odd indices from count\n        total\
    \ += (length - evenPos)\n        total -= (length - oddPos)\n        return total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz0pos7yl.scala:89)\n\tat Problem.main(tmpz0pos7yl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var cnt =\
    \ 0\n        for (x <- 0 to s.length-1) {\n            if (s(x).matches(\"[aeiou]\"\
    ))\n                cnt = cnt + 1\n            else\n                if (s(x)\
    \ == \"a\")\n                    cnt = cnt + 1\n        }\n        cnt\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpffwxlfwx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (s(x).matches(\e[31m\"[aeiou]\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value matches is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpffwxlfwx.scala:18:20 -----------------------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (s(x) == \e[31m\"a\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Values of types Char and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        var evenCount = 0\n        var upperCount = 0\n  \
    \      for (v <- 0 to s.length-1) {\n            if (vowels.contains(s.charAt(v)))\
    \ {\n                if ((v%2) == 0) {\n                    evenCount += 1\n \
    \               }\n                else {\n                    upperCount += 1\n\
    \                }\n            }\n        }\n        (evenCount * upperCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wdpd0je.scala:29)\n\tat Problem.main(tmp7wdpd0je.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\",\"a\",\"B\",\"b\",\"C\",\"c\",\"D\",\"d\",\"E\",\"e\",\"F\",\"f\"\
    ,\"G\",\"g\",\"H\",\"h\",\"I\",\"i\",\"J\",\"j\",\"K\",\"k\",\"L\",\"l\",\"M\"\
    ,\"m\",\"N\",\"n\",\"O\",\"o\",\"P\",\"p\",\"Q\",\"q\",\"R\",\"r\",\"S\",\"s\"\
    ,\"T\",\"t\",\"U\",\"u\",\"V\",\"v\",\"W\",\"w\",\"X\",\"x\",\"Y\",\"y\",\"Z\"\
    ,\"z\")\n        val vowelsCount = mutable.Map[String,Int]()\n        for (i <-\
    \ 0 until s.length) { \n            if(vowels(s(i)) && s(i) =! s(i+1))\n     \
    \           vowelsCount(s(i))+=1\n        }\n        vowelsCount.filter(_._2 %\
    \ 2 ==0).length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiztvbrgq.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiztvbrgq.scala:16:23\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(vowels(s(i))\
    \ && s(i) =! s(i+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Char\n\e[31m   |\e[0m    \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiztvbrgq.scala:16:36 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mif\e[0m(vowels(s(i)) && s(i) =! s(i+\e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value =! is not a member of Char - did you mean Char.==?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // If there\
    \ are less than 6 chars, return the length of the string.\n        if (s.length\
    \ < 6) return s.length\n        val upperVowels = mutable.HashSet[Char]()\n  \
    \      for (i <- 0 until s.length - 2) {\n            // If i is even, it's a\
    \ vowel.\n            if (i mod 2 == 0) upperVowels += s.charAt(i)\n        }\n\
    \        if (upperVowels.size == 0) 0L else upperVowels.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwuqccu0.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mupperVowels\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvwuqccu0.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i mod \e[31m2\e[0m == \e[31m0\e\
    [0m) upperVowels += s.charAt(i)\n\e[31m\e[31m   |\e[0m                ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mod is not a member of Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- s.indices(s take 1).filter(x => s take i indexOf x.toUpperCase\
    \ == 0)) count += 2\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpym3htrvj.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ s.indices(s take \e[31m1\e[0m).filter(\e[36mx\e[0m => s take i indexOf x.toUpperCase\
    \ == \e[31m0\e[0m)) count += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    String\n\e[31m   |\e[0m                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\"\
    , \"u\")\n        val counts = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 0 to s.length - 1) {\n            if (i % 2 == 0)\n                if (vowels.contains(s.charAt(i)))\n\
    \                    counts += 1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80ulit7o.scala:31:0 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80ulit7o.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m = mutable.Set(\e[31m\"A\"\e[0m, \e[31m\"a\"\e[0m, \e[31m\"E\"\e\
    [0m, \e[31m\"e\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"O\"\e[0m, \e\
    [31m\"o\"\e[0m, \e[31m\"U\"\e[0m, \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80ulit7o.scala:14:21\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80ulit7o.scala:30:1\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp80ulit7o.scala:20:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m20 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var evenEvenIndex\
    \ = 0\n        var evenOddIndex = 0\n        var oddEvenIndex = 0\n        var\
    \ oddOddIndex = 0\n        for (i <- 0 until s.length-1) {\n            val c\
    \ = s(i)\n            if (i%2==0)\n                if (c.toUpper == 'A')\n   \
    \                 evenEvenIndex += 1\n                else\n                 \
    \   evenOddIndex += 1\n            else\n                if (c.toUpper == 'A')\n\
    \                    oddEvenIndex += 1\n                else\n               \
    \     oddOddIndex += 1\n        }\n        return evenEvenIndex + evenOddIndex\
    \ + oddEvenIndex + oddOddIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_pxta47.scala:33)\n\tat Problem.main(tmp5_pxta47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        def isUpper(a:\
    \ Char) : Boolean = a >= 'A' && a <= 'Z'\n        def getEvenIndexes(s1: String,\
    \ s2: String): List[Int] = \n            List(0, 1, 4, 7, 10, 13, 16, 19).filter(i\
    \ => s1(i) ==  s2(i)).toList\n\n        val evenIndexes = getEvenIndexes(s, s)\n\
    \        val upperIndexes = evenIndexes.filter(isUpper)\n        (upperIndexes.length\
    \ / 2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzmb6u80b.scala:18:46\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mupperIndexes\e\
    [0m = evenIndexes.filter(isUpper)\n\e[31m\e[31m   |\e[0m                     \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                  Found:    (a : Int)\n\e[31m   |\e[0m                      \
    \                        Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val counter = mutable.Map[Char,Long]()\n\
    \        for (i <- 0 to s.length - 2 by 2)\n            for (j <- 0 to s.length\
    \ - 2 by 2) if (vowels(i) == vowels(j)) counter(vowels(i)) = counter(vowels(i))\
    \ + 1\n        counter.values.toList.map(_.toLong).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpge6usaev.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val counts =\
    \ mutable.HashMap[Int, Long]()\n      for (x <- 0 until s.length)\n        counts.put(x\
    \ % 2 != 0 ? x : s.length - x, counts.getOrElse(x, 0L) + 1)\n      counts.lastOption.map(_._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oljlduy.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val count\
    \ = mutable.LinkedHashMap()\n        s.toList.filter(l => l.toString match {\n\
    \            case null | _ => false\n            case _ =>\n                val\
    \ index = l.indexOf(\"a\")\n                if(index > 0){\n                 \
    \   count.put(l.substring(0, index),0l).update((l.substring(index).toLowerCase\
    \ +\"a\").charAt(0),1l)\n                }\n                else count.put(l,0l).update((l.charAt(0).toLowerCase\
    \ +\"A\").charAt(0),1l)\n        })\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90zfpcrj.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.LinkedHashMap()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp90zfpcrj.scala:17:30 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                \e[33mval\e[0m \e[36mindex\e[0m = l.indexOf(\e[31m\"a\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value indexOf is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\".toList.map(_.toUpperCase)\n        val evenChars = s.toList\n  \
    \          .zipWithIndex\n            .filter(c => c._2 % 2 == 0)\n          \
    \  .map { case (c, idx) => (vowels(idx % vowels.length), c) }\n            .countByValue()\n\
    \        evenChars.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3bq4ca1n.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"aeiou\"\
    \e[0m.toList.map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3bq4ca1n.scala:18:13 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenChars\e[0m = s.toList\n\e[31m15 |\e[0m\
    \            .zipWithIndex\n\e[31m16 |\e[0m            .filter(\e[36mc\e[0m =>\
    \ c._2 % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m17 |\e[0m            .map { \e[33mcase\e\
    [0m (c, idx) => (vowels(idx % vowels.length), c) }\n\e[31m18 |\e[0m          \
    \  .countByValue()\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m             value countByValue is not a member of List[(Nothing, Char)]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        if (s.isEmpty)\
    \ return 0\n        val vowels = Set(\"A\", \"A\", \"E\", \"E\", \"I\", \"I\"\
    , \"O\", \"O\", \"U\", \"U\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length; if (s.charAt(i).isLetter) {\n            if (vowels.contains(s.charAt(i)))\
    \ {\n                count += i mod 2\n            }\n        }\n        count\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfbum3h_k.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfbum3h_k.scala:17:40 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \            \e[33mif\e[0m (vowels.contains(s.charAt(i))) {\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfbum3h_k.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                count += i mod \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfbum3h_k.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                count +=\
    \ i mod \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue mod is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpfbum3h_k.scala:16:52\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m until s.length; \e[33mif\e[0m (s.charAt(i).isLetter) {\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      s.grouped(2).map(_.toUpperCase).count(e\
    \ => e == 'A' || e == 'E' || e == 'I' || e == 'O' || e == 'U') / (s.length / 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4omswwzg.scala:13:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      s.grouped(\e[31m2\e[0m).map(_.toUpperCase).count(\e\
    [36me\e[0m => e == \e[31m'A'\e[0m || e == \e[31m'E'\e[0m || e == \e[31m'I'\e[0m\
    \ || e == \e[31m'O'\e[0m || e == \e[31m'U'\e[0m) / (s.length / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4omswwzg.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      s.grouped(\e[31m2\e[0m).map(_.toUpperCase).count(\e\
    [36me\e[0m => e == \e[31m'A'\e[0m || e == \e[31m'E'\e[0m || e == \e[31m'I'\e[0m\
    \ || e == \e[31m'O'\e[0m || e == \e[31m'U'\e[0m) / (s.length / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4omswwzg.scala:13:73\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m      s.grouped(\e\
    [31m2\e[0m).map(_.toUpperCase).count(\e[36me\e[0m => e == \e[31m'A'\e[0m || e\
    \ == \e[31m'E'\e[0m || e == \e[31m'I'\e[0m || e == \e[31m'O'\e[0m || e == \e[31m'U'\e\
    [0m) / (s.length / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                                   ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp4omswwzg.scala:13:85 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      s.grouped(\e[31m2\e[0m).map(_.toUpperCase).count(\e\
    [36me\e[0m => e == \e[31m'A'\e[0m || e == \e[31m'E'\e[0m || e == \e[31m'I'\e[0m\
    \ || e == \e[31m'O'\e[0m || e == \e[31m'U'\e[0m) / (s.length / \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp4omswwzg.scala:13:97 -------------------------------"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var evenIndex\
    \ = 0\n        var count = 0\n        for (i <- 0 until s.length()) {\n      \
    \      if (i % 2 == 0) {\n                if (s(i) equalsIgnoreCase \"A\" || s(i)\
    \ equalsIgnoreCase \"E\") {\n                    count += 1\n                }\
    \ else if (s(i) equalsIgnoreCase \"D\" || s(i) equalsIgnoreCase \"B\") {\n   \
    \                 count += 1\n                }\n            }\n            evenIndex\
    \ += 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycn_cf2i.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (s(i) equalsIgnoreCase\
    \ \e[31m\"A\"\e[0m || s(i) equalsIgnoreCase \e[31m\"E\"\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                value equalsIgnoreCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpycn_cf2i.scala:17:46 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (s(i) equalsIgnoreCase\
    \ \e[31m\"A\"\e[0m || s(i) equalsIgnoreCase \e[31m\"E\"\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value || is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpycn_cf2i.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (s(i)\
    \ equalsIgnoreCase \e[31m\"D\"\e[0m || s(i) equalsIgnoreCase \e[31m\"B\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value equalsIgnoreCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycn_cf2i.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                } \e[33melse\e\
    [0m \e[33mif\e[0m (s(i) equalsIgnoreCase \e[31m\"D\"\e[0m || s(i) equalsIgnoreCase\
    \ \e[31m\"B\"\e[0m) {\n\e[31m\e[31m   |\e[0m                                 \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      value || is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        var vowels = \"AEIOUaeiouAEIOUaeiou\"\n        var index = 0\n\
    \        while(index < s.length){\n            if(s(index).equals(vowels(index)))\
    \ count = count + 1\n            index = index + 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxv2ypko.scala:23)\n\tat Problem.main(tmpfxv2ypko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val counts = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until s.length) counts += (i.toInt/2 -> vowels(s.charAt(i))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(0)) + vowels(s.charAt(i).asInstanceOf[String].charAt(1))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(2)) + vowels(s.charAt(i).asInstanceOf[String].charAt(3))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(4)) + vowels(s.charAt(i).asInstanceOf[String].charAt(5))\
    \ + vowels(s.charAt(i).asInstanceOf[String].charAt(6)) + vowels(s.charAt(i).asInstanceOf[String].charAt(7)))\n\
    \        counts.filter { case (k, v) => (v /2 % 2 == 0) }.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mi4h_tt.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var upper\
    \ = 0\n        var i = s.length - 1\n        while (i >= 0 && i > 0) {\n     \
    \       if ((s(i) - 32) < 'A') {\n                upper = upper + 1\n        \
    \    }\n            i -= 1\n        }\n        return upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9koc34e0.scala:24)\n\tat Problem.main(tmp9koc34e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val result\
    \ = mutable.HashMap.empty[Long, Int]\n        s.split(\"\").zipWithIndex.foreach\
    \ { case (ch, index) =>\n            if (index%2 == 0) result += 1\n         \
    \   else if (ch.isUpper) result += 1\n        }\n        result.toList.max\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0g0t39vc.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0g0t39vc.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (ch.isUpper)\
    \ result += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value isUpper is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        var counter = s.length\n        var lastUpper = 0\n\
    \        for ( i <- 0 until s.length ) {\n            if ( vowels(i).equals(s.charAt(i))\
    \ ) {\n                lastUpper = i\n            }\n            if ( vowels(i).equals(s.charAt(i))\
    \ && vowels(i).equals(s.charAt(lastUpper)) ) {\n                counter += 1\n\
    \                lastUpper += 1\n            }\n        }\n        return counter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplcbochpv.scala:28)\n\tat Problem.main(tmplcbochpv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        val upperCaseVowels = vowels.count(_ == 'U')\n   \
    \     val result = vowels.count(_ == 'U') + (s.length - upperCaseVowels)\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybzu8vpm.scala:19)\n\tat Problem.main(tmpybzu8vpm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val vowels =\
    \ \"aeiouAEIOU\"\n      val counts = mutable.Map[String, Long]()\n      for (c\
    \ <- s)\n        if (vowels.indexOf(c) >= 0 && vowels.indexOf(c) % 2 == 0) counts.update(c,\
    \ 1)\n      counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb7n_568.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upper\
    \ = new mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n        \
    \    if (s(i) == s(i).toUpperCase)\n                upper += s(i)\n        (upper.size*2L)\
    \ filter (x => x % 2 == 0) reduceLeft (_+_)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiyye8mzx.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiyye8mzx.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (s(i) == s(i).toUpperCase)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val even =\
    \ s.filter(_ %2 == 0).map { x => x.toUpperCase }\n        val evenCount = even.distinct.length\n\
    \        even.map { x => x.length }.sum + evenCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt10emcxt.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = s.filter(_ %\e\
    [31m2\e[0m == \e[31m0\e[0m).map { \e[36mx\e[0m => x.toUpperCase }\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var result\
    \ = 0L\n        for((pos,c) <- s.zipWithIndex) if((pos % 2) == 0) result += 1L\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptgod193d.scala:18)\n\tat Problem.main(tmptgod193d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.HashMap.empty[Int, Long]\n        for (i <- 0 until s.length) {\n\
    \            var charCount = 1\n            val charStr = s.charAt(i)\n      \
    \      val isUpper = charStr match {\n                case c if Character.isUpper(c)\
    \ => true\n                case _ => false\n            }\n            if (isUpper)\
    \ charCount = charCount + 1\n            counts.putIfAbsent(charCount, 0l) +=\
    \ i\n        }\n        counts.getOrElse(0, 0l) + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvbr9fs3.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuvbr9fs3.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m Character.isUpper(c)\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value isUpper is not a member of object\
    \ Character\n2 errors found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 1\n        for(i <- 0 until s.length){\n            if(s(i) == 'U'){\n   \
    \             count += 1\n            }\n            if(s(i) == 'A'){\n      \
    \          count += 1\n            }\n            if(s(i) == 'E'){\n         \
    \       count += 1\n            }\n            if(s(i) == 'I'){\n            \
    \    count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9pf8a4l.scala:31)\n\tat Problem.main(tmpd9pf8a4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var result\
    \ : Long = 1\n        for( i <- 0 until s.length ) {\n            if( ((i + 2)\
    \ % 2) == 0 ) { result += count( s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i)\
    \ == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U' )\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rb890ku.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m( ((i + \e[31m2\e[0m) % \e[31m2\e\
    [0m) == \e[31m0\e[0m ) { result += count( s.charAt(i) == \e[31m'A'\e[0m || s.charAt(i)\
    \ == \e[31m'E'\e[0m || s.charAt(i) == \e[31m'I'\e[0m || s.charAt(i) == \e[31m'O'\e\
    [0m || s.charAt(i) == \e[31m'U'\e[0m )\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp5rb890ku.scala:15:49 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m( ((i + \e[31m2\e[0m) % \e[31m2\e[0m) == \e[31m0\e\
    [0m ) { result += count( s.charAt(i) == \e[31m'A'\e[0m || s.charAt(i) == \e[31m'E'\e\
    [0m || s.charAt(i) == \e[31m'I'\e[0m || s.charAt(i) == \e[31m'O'\e[0m || s.charAt(i)\
    \ == \e[31m'U'\e[0m )\n\e[31m\e[31m   |\e[0m                                 \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                Not found: count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set[Char]('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.Map[Char,\
    \ Long]()\n        for (i <- 0 until s.length - 1) {\n            val vowel =\
    \ s(i)\n            if (vowels.contains(vowel)) {\n                vowelsCount(vowel)\
    \ += 1\n            }\n        }\n        vowelsCount.map { case (vowel, count)\
    \ => vowel + count.toString }.toSet.size }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp666popj3.scala:33:0 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp666popj3.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m = mutable.Set[\e[35mChar\e[0m](\e[31m'a'\e[0m, \e[31m'e'\e[0m,\
    \ \e[31m'i'\e[0m, \e[31m'o'\e[0m, \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp666popj3.scala:14:26\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp666popj3.scala:24:11 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    assert(countUpper((\e[31m\"aBCdEf\"\e[0m)) == (\e[31m1l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \      Not found: countUpper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp666popj3.scala:25:11 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m    assert(countUpper((\e[31m\"abcdefg\"\e[0m)) == (\e[31m0l\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ countUpper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp666popj3.scala:26:11\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m    assert(countUpper((\e\
    [31m\"dBBE\"\e[0m)) == (\e[31m0l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Not found: countUpper\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available whe"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for(i <- 0\
    \ until s.length){\n            val c = s(i)\n            if(vowels(c) %2 == 0)\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 97 out of bounds for length\
    \ 5\n\tat Problem$.countUpper$$anonfun$1(tmpdkwxyn9b.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.countUpper(tmpdkwxyn9b.scala:18)\n\
    \tat Problem$.main(tmpdkwxyn9b.scala:22)\n\tat Problem.main(tmpdkwxyn9b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val v = mutable.Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var num = 0L\n        s.iterator\n \
    \           .zip(s.iterator)\n            .zip(s.iterator)\n            .foreach{\
    \ x =>\n                if (x._1.toUpperCase == x._2.toUpperCase && v(x(0))) {\n\
    \                    num += 1L\n                }\n            }\n        num\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfamu0cez.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mv\e[0m = mutable.Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfamu0cez.scala:19:25 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (x._1.toUpperCase == x._2.toUpperCase && v(x(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value toUpperCase is not a member of (Char,\
    \ Char)\n2 errors found\n"
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.view.zipWithIndex.collect\
    \ {\n            case (str, index) if index % 2 == 0 => if (str.toUpperCase ==\
    \ \"A\" || str.toUpperCase == \"E\" || str.toUpperCase == \"I\" || str.toUpperCase\
    \ == \"O\" || str.toUpperCase == \"U\") 1l else 0l\n        }.sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90ca0io_.scala:14:59 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (str, index) \e[33mif\e[0m\
    \ index % \e[31m2\e[0m == \e[31m0\e[0m => \e[33mif\e[0m (str.toUpperCase == \e\
    [31m\"A\"\e[0m || str.toUpperCase == \e[31m\"E\"\e[0m || str.toUpperCase == \e\
    [31m\"I\"\e[0m || str.toUpperCase == \e[31m\"O\"\e[0m || str.toUpperCase == \e\
    [31m\"U\"\e[0m) \e[31m1l\e[0m \e[33melse\e[0m \e[31m0l\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Only use\
    \ 'toUpperCase' to get a string, not char\n        // So can easily count even\
    \ letters\n        val uppers = mutable.ListBuffer[String]();\n        for(i <-\
    \ 0 until s.length){\n            if(s(i).toUpperCase == \"A\" || s(i).toUpperCase\
    \ == \"E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase\
    \ == \"U\")\n                uppers += s(i);\n        }\n        uppers.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddqpwgp5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muppers\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]();\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpddqpwgp5.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(s(i).toUpperCase == \e[31m\"\
    A\"\e[0m || s(i).toUpperCase == \e[31m\"E\"\e[0m || s(i).toUpperCase == \e[31m\"\
    I\"\e[0m || s(i).toUpperCase == \e[31m\"O\"\e[0m || s(i).toUpperCase == \e[31m\"\
    U\"\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Use mutable\
    \ collections as much as you can.\n        val counts = new mutable.HashMap[String,\
    \ Long]\n        for((i, c) <- s.zipWithIndex if i % 2 == 0) counts.update(c,\
    \ 1, _ + _)\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq68xdg9o.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.foldLeft(0l)\
    \ { (n, s) =>\n            val r = s.toCharArray.filter(c => c > 64 && c < 91).count\n\
    \            (if (n % 2 == 0) r else -1 * r) + 1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3y_nok3.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = s.toCharArray.filter(\e\
    [36mc\e[0m => c > \e[31m64\e[0m && c < \e[31m91\e[0m).count\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ value toCharArray is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val count = mutable.Map[Char,\
    \ Long]()\n        for (x <- s) {\n            if (vowels(x) && s(x) !=x) count(x)\
    \ = count(x) + 1\n        }\n        count.filter(_._2 % 2==0).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxhu04xu.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxhu04xu.scala:16:23 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (vowels(x) && s(x) !=x) count(x)\
    \ = count(x) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (x : Char)\n\e[31m   |\e[0m  \
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val count\
    \ = new mutable.HashMap[String,Long]()\n        var i = 0\n        while (i <\
    \ s.length) {\n            val c = s(i)\n            count += (c==c.toUpperCase\
    \ && i%2==0) ? c -> 1L : c -> 0L\n            i += 1\n        }\n        count.valuesIterator.foldLeft((0L,0L))(\
    \ (a,b) => a+b)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9da6_8wh.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9da6_8wh.scala:17:64\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            count += (c==c.toUpperCase\
    \ && i%\e[31m2\e[0m==\e[31m0\e[0m) ? c -> \e[31m1L\e[0m : \e[35mc\e[0m \e[35m->\e\
    [0m \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                           ^^\e[0m\n\e[31m   |\e[0m                         \
    \                             Not found: type ->\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var lastIndex = -1L\n        var nextIndex = -1L\n        for\
    \ (c <- s) {\n            if (c.isUpper) {\n                count += 1L\n    \
    \        }\n            else {\n                if (nextIndex < lastIndex) {\n\
    \                    count += 1L\n                }\n                lastIndex\
    \ = nextIndex\n                nextIndex = lastIndex\n            }\n        }\n\
    \        if (nextIndex < lastIndex) {\n            count += 1L\n        }\n  \
    \      return count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3cw28ra.scala:34)\n\tat Problem.main(tmpb3cw28ra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.flatMap\
    \ { x =>\n            if (x.toUpperCase == x) 1\n            else 0\n        }.foldLeft[Long](0)\
    \ { case ((acc, 0), elem) =>\n            acc + (if (elem.toUpperCase == elem)\
    \ 1 else 0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbemvrc5.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (x.toUpperCase == x) \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpgbemvrc5.scala:13:10 -----------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        s.flatMap { \e[36mx\e[0m =>\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m\
    \ with types\n\e[31m   |\e[0m (f: Char => String): String\n\e[31m   |\e[0m [B](f:\
    \ Char => IterableOnce[B]): IndexedSeq[B]\n\e[31m   |\e[0mmatch arguments (Char\
    \ => Int)\n2 errors found\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Your code\
    \ here\n        val vowels = Set[Char]('a', 'e', 'i', 'o', 'u')\n        val evenIndices\
    \ = mutable.HashSet[Int]()\n        for (char <- s) {\n            vowels contains\
    \ char match {\n                case true => {\n                    if (evenIndices\
    \ contains char) 0 else\n                    evenIndices += char.toInt\n     \
    \           }\n                case _ => 0\n            }\n        }\n       \
    \ evenIndices.length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplu_ei4nf.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = new\
    \ mutable.ListBuffer[Long]\n        for (i <- s.indices) {\n            if (i\
    \ % 2 == 0) {\n                result.add(vowels.count(vowels(i)) + 1)\n     \
    \       }\n        }\n        result.toList().sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjehcg0zv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.List(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjehcg0zv.scala:14:25 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var even =\
    \ 0L\n        for (i <- 0 to s.length-1) {\n            if (s(i) == 'A' || s(i)\
    \ == 'a') even = even + 1L\n            if (s(i) == 'E' || s(i) == 'e') even =\
    \ even + 1L\n            if (s(i) == 'I' || s(i) == 'i') even = even + 1L\n  \
    \          if (s(i) == 'O' || s(i) == 'o') even = even + 1L\n            if (s(i)\
    \ == 'U' || s(i) == 'u') even = even + 1L\n        }\n        even\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9u9m6akc.scala:24)\n\tat Problem.main(tmp9u9m6akc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.HashMap[Char, Long]()\n        for(i <- 0 until s.length) \n     \
    \       counts(s(i)).toLong = counts(s(i)).toLong + 1\n        counts.filter(_._2.toLong\
    \ % 2 == 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbh7onxuf.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upper\
    \ = mutable.HashSet[Char]()\n        var count : Long = 0\n        for (i <- 0\
    \ until s.length && count < s.length) if (s(i) == 'A' || s(i) == 'E' || s(i) ==\
    \ 'I' || s(i) == 'O' || s(i) == 'U') {\n            count = count + 1\n      \
    \      if (s(i) == 'A' || s(i) == 'E') upper.add('a')\n            if (s(i) ==\
    \ 'I' || s(i) == 'O') upper.add('i')\n            if (s(i) == 'U') upper.add('u')\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsca1lhuj.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsca1lhuj.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length\
    \ && count < s.length) \e[33mif\e[0m (s(i) == \e[31m'A'\e[0m || s(i) == \e[31m'E'\e\
    [0m || s(i) == \e[31m'I'\e[0m || s(i) == \e[31m'O'\e[0m || s(i) == \e[31m'U'\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value && is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        def isVowel(c\
    \ : Char) : Boolean = {\n            c match {\n                case 'a' | 'e'\
    \ | 'i' | 'o' | 'u' =>  true\n                case _ =>  false\n            }\n\
    \        }\n        // Only the even indices are considered vowels.\n        val\
    \ vowels = s.toCharArray.take(s.length / 2).filter(isVowel).toSet\n        //\
    \ Count the vowels.\n        vowels.count(_ == 'a')\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplfgzmogs.scala:26)\n\tat Problem.main(tmplfgzmogs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.toCharArray.grouped(2)\n\
    \            .map { case Array(a, b) => if (isUpper(a)) 1L else 0L }\n       \
    \     .sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7vf966e.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            .map { \e[33mcase\e[0m Array(a, b) => \e\
    [33mif\e[0m (isUpper(a)) \e[31m1L\e[0m \e[33melse\e[0m \e[31m0L\e[0m }\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                           Not found: isUpper\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n       s.sliding(2).filterNot(_\
    \ == null).map(_(2)).count(x => x.isUpper)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.countUpper$$anonfun$2(tmpvthoh229.scala:13)\n\
    \tat scala.collection.Iterator$$anon$9.next(Iterator.scala:577)\n\tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\
    \tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\tat scala.collection.AbstractIterator.count(Iterator.scala:1293)\n\
    \tat Problem$.countUpper(tmpvthoh229.scala:13)\n\tat Problem$.main(tmpvthoh229.scala:16)\n\
    \tat Problem.main(tmpvthoh229.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var i = 0\n        while (i < s.length) {\n            if (s(i)\
    \ =:= 'A' && s(i+1) =:= 'A' && s(i+2) =:= 'A') {\n                count += 1\n\
    \            }\n            i += 3\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9jo5x99g.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (s(i) =:= \e[31m'A'\e[0m &&\
    \ s(i+\e[31m1\e[0m) =:= \e[31m'A'\e[0m && s(i+\e[31m2\e[0m) =:= \e[31m'A'\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \          value =:= is not a member of Char - did you mean Char.==?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var cnt =\
    \ 0L\n        for (i<- s.indices) {\n            if (i %% 2 == 0 && ((s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')))\
    \ cnt += 1\n        }\n        cnt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp285plas3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i %% \e[31m2\e[0m == \e[31m0\e\
    [0m && ((s.charAt(i) >= \e[31m'A'\e[0m && s.charAt(i) <= \e[31m'Z'\e[0m) || (s.charAt(i)\
    \ >= \e[31m'a'\e[0m && s.charAt(i) <= \e[31m'z'\e[0m))) cnt += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ %% is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\"\n        var count = 0\n        for ( i <- 0 to s.length - 2 ) {\n\
    \            if ( s(i) == vowels(0) )\n            if ( s(i) == vowels(1) )\n\
    \            if ( s(i) == vowels(2) )\n            if ( s(i) == vowels(3) )\n\
    \            if ( s(i) == vowels(4) )\n            if ( s(i) == vowels(5) )\n\
    \            if ( s(i) == vowels(6) )\n            if ( s(i) == vowels(7) )\n\
    \            if ( s(i) == vowels(8) )\n            if ( s(i) == vowels(9) )\n\
    \            if ( s(i) == vowels(10) )\n            count += 1\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0w7f3fa5.scala:32)\n\tat Problem.main(tmp0w7f3fa5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels:\
    \ mutable.Set[Char] = mutable.Set('a','e','i','o','u')\n        var counter :\
    \ Long = 0\n        for ( i <- 0 to s.length - 2 ) {\n            if ( vowels(s(i))\
    \ ) {\n                counter += 1\n            }\n        }\n        counter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xadl7pl.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m: mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set(\e[31m'a'\e[0m,\e[31m'e'\e[0m,\e[31m'i'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9xadl7pl.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m: mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set(\e[31m'a'\e[0m,\e[31m'e'\e[0m,\e[31m'i'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.toLowerCase().toSeq.map(_.toUpperCase).filter(_.toString.length%2==0).count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1oscwrbm.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        s.toLowerCase().toSeq.map(_.toUpperCase).filter(_.toString.length%\e\
    [31m2\e[0m==\e[31m0\e[0m).count\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \ value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var result\
    \ = 1L\n        var vowels = \"aeiouAEIOU\".toCharArray\n        s.toList.reverse.foreach\
    \ { c =>\n            vowels((s.indexOf(c.toString) + 2) % vowels.length).toList.foreach\
    \ { vowel =>\n                if (c.equals(vowel)) result += 1\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0na9drag.scala:16:64 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            vowels((s.indexOf(c.toString) + \e[31m2\e\
    [0m) % vowels.length).toList.foreach { \e[36mvowel\e[0m =>\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         value toList is not a member of Char - did you mean Char.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        var j = 0\n        for (i <- 0 until s.length()) {\n          \
    \  if (s(i) != s(i).toUpperCase) {\n                count += 1\n             \
    \   j = i\n            }\n        }\n        while (j+2 < s.length()) {\n    \
    \        if (s(j+2) == s(j+2).toUpperCase) {\n                count += 1\n   \
    \             j += 1\n            }\n            j += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0zwwr5ug.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (s(i) != s(i).toUpperCase)\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0zwwr5ug.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (s(j+\e[31m2\e[0m) == s(j+\e\
    [31m2\e[0m).toUpperCase) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val cs = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'a') cs.add('u')\n\
    \            if (s(i) == 'B') cs.add('u')\n            if (s(i) == 'C') cs.add('u')\n\
    \            if (s(i) == 'd') cs.add('u')\n            if (s(i) == 'E') cs.add('u')\n\
    \            if (s(i) == 'f') cs.add('u')\n            if (s(i) == 'g') cs.add('u')\n\
    \        cs.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lgoedb3.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcs\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var countEven\
    \ = 0\n        var countOdd = 1\n        var i = 0\n        while (i < s.length)\
    \ {\n            val c = s(i)\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           countEven += if (i%2 == 0) 1 else 0\n            } else {\n      \
    \          countOdd += if (i%2 == 0) 1 else 0\n            }\n            i +=\
    \ 1\n        }\n        countEven * countOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdwxt5g_2.scala:19:29 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                countEven += \e[33mif\e[0m (i%\e[31m2\e\
    [0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m               \
    \              expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpdwxt5g_2.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                countOdd += \e[33mif\e[0m (i%\e[31m2\e\
    [0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m                \
    \            expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwxt5g_2.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                countEven += \e[33mif\e[0m (i%\e[31m2\e\
    [0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpdwxt5g_2.scala:21:25 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                countOdd += \e[33mif\e[0m (i%\e[31m2\e[0m == \e\
    [31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val chars\
    \ = s.toCharArray\n        var count = 0L\n        var prevChar = -1\n       \
    \ for (i <- 0 until chars.length && count < s.length) \n        {\n          \
    \  val currentChar = chars(i)\n            if (currentChar >= 'a' && currentChar\
    \ <= 'z') \n            {\n                if (currentChar == prevChar) count\
    \ += 1\n                prevChar = currentChar\n            }\n        }\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg5u01o9w.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until chars.length\
    \ && count < s.length) \n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value && is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val m = mutable.Map[Char,\
    \ Int]()\n        for (i <- 0 until s.length step 2) {\n            val c = s.charAt(i)\n\
    \            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') m.get(c)\
    \ += 1\n        }\n        m.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn7mg5zmb.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpn7mg5zmb.scala:14:35 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length\
    \ step \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  \e[33mgetter\e[0m \e[35mstep\e[0m in \e\
    [33mclass\e[0m \e[35mRange\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val evenIndices\
    \ = mutable.Set(0, 2, 4, 6, 8)\n        val counter = new scala.collection.mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 0 until s.length) { \n            if (!evenIndices.contains(i))\
    \ {\n                counter.put(i.toInt, 0)\n            }\n            if (s.charAt(i)\
    \ == s.charAt(i).toUpper) {\n                counter(i.toInt) += 1\n         \
    \   }\n        }\n        counter.map { case (k, v) => k + v }.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2iltnbfq.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.Set(\e\
    [31m0\e[0m, \e[31m2\e[0m, \e[31m4\e[0m, \e[31m6\e[0m, \e[31m8\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        val evenIndices = for (i <- 0\
    \ until s.length) yield if (i%2 == 0) i+1 else 0\n        evenIndices.map { i\
    \ => vowels(s(i)) }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv1crplwo.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenIndices.map { \e\
    [36mi\e[0m => vowels(s(i)) }.sum\n\e[31m\e[31m   |\e[0m                      \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Found:    Char\n\e[31m   |\e[0m                                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpv1crplwo.scala:15:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evenIndices.map { \e[36mi\e[0m => vowels(s(i))\
    \ }.sum\n\e[31m\e[31m   |\e[0m                                               \
    \  ^\e[0m\n\e[31m   |\e[0m               No implicit Ordering defined for B\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m               where:    B is a type variable with\
    \ constraint >: Boolean\n\e[31m   |\e[0m               .\n2 errors found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for (i <- 0 until s.length if s.charAt(i) == 'A' || s.charAt(i)\
    \ == 'a') {\n            count += 1\n        }\n        \n        for (i <- 0\
    \ until s.length if s.charAt(i) == 'E' || s.charAt(i) == 'e') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s.charAt(i) == 'I' ||\
    \ s.charAt(i) == 'i') { \n            count += 1\n        }\n        for (i <-\
    \ 0 until s.length if s.charAt(i) == 'O' || s.charAt(i) == 'o') {\n          \
    \  count += 1\n        }\n        for (i <- 0 until s.length if s.charAt(i) ==\
    \ 'U' || s.charAt(i) == 'u') { \n            count += 1\n        }\n        \n\
    \        for (i <- 0 until s.length if s.charAt(i) == 'G' || s.charAt(i) == 'g')\
    \ {\n            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'D' || s.charAt(i) == 'd') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'B' ||\
    \ s.charAt(i) == 'b') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'F' || s.charAt(i) == 'f') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'G' || s.charAt(i) == 'g') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'B' ||\
    \ s.charAt(i) == 'b') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'E' || s.charAt(i) == 'e') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'A' || s.charAt(i) == 'a') {\n            count += 1\n   \
    \     }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'I' ||\
    \ s.charAt(i) == 'i') { \n            count += 1\n        }\n        \n      \
    \  for (i <- 0 until s.length if s.charAt(i) == 'O' || s.charAt(i) == 'o') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'U' || s.charAt(i) == 'u') { \n            count += 1\n  \
    \      }\n        \n        for (i <- 0 until s.length if s.charAt(i) == 'G' ||\
    \ s.charAt(i) == 'g') {\n            count += 1\n        }\n        \n       \
    \ for (i <- 0 until s.length if s.charAt(i) == 'D' || s.charAt(i) == 'd') {\n\
    \            count += 1\n        }\n        \n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'B' || s.charAt(i) == 'b') {\n            count += 1\n   \
    \     }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0cspmgkw.scala:83:8\
    \ ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until s.length \e[33mif\e[0m s.charAt(i) == \e[31m'B'\e[0m || s.charAt(i)\
    \ == \e[31m'b'\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m \
    \       Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m84 |\e[0m\
    \            count += \e[31m1\e[0m\n\e[31m85 |\e[0m        }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.toUpperCase.count(_\
    \ == 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5cukh_t.scala:17)\n\tat Problem.main(tmpa5cukh_t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Convert\
    \ s to a mutable StringBuilder\n        val sb = new StringBuilder(s)\n      \
    \  // Initialize a mutable.HashMap of vowels\n        val vowelsMap = mutable.HashMap[Char,\
    \ Long]()\n        // Initialize a mutable counter\n        var count = 0L\n \
    \       // Iterate over all characters of s\n        for (i <- 0 until s.length())\
    \ {\n            val c = s.charAt(i)\n            // If the character is a vowel,\
    \ increment the counter\n            if (vowelsMap.getOrElse(c, 0) == 0) count++\n\
    \            // Otherwise, if the character is an uppercase vowel, update the\
    \ counter\n            else vowelsMap(c) = vowelsMap(c) + 1\n        }\n     \
    \   // Return the count\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpndgqv9gx.scala:23:55 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (vowelsMap.getOrElse(c, \e\
    [31m0\e[0m) == \e[31m0\e[0m) count++\n\e[31m\e[31m   |\e[0m                  \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                      expression expected but \e[31melse\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpndgqv9gx.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.Map[Int, Long]()\n        for (i <- s.indices) if (i % 2 == 0) counts\
    \ += ((i / 2), 1) else counts += ((i / 2) + 1, 0)\n        counts.map(_._2).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo9ozijc.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var even = false\n        for( i <- 0 until s.length ) {\n   \
    \         if( i%2 == 0 ) {\n                var v = s.charAt(i)\n            \
    \    if( v.toUpperCase == 'A' || v.toUpperCase == 'E' ) {\n                  \
    \  count = count + 1\n                }\n                if( v.toUpperCase ==\
    \ 'B' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n   \
    \             }\n                if( v.toUpperCase == 'C' || v.toUpperCase ==\
    \ 'E' ) {\n                    count = count + 1\n                }\n        \
    \        if( v.toUpperCase == 'D' || v.toUpperCase == 'E' ) {\n              \
    \      count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'F' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'G' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'H' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'I' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'J' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'K' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'L' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'M' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'N' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'O' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'P' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'Q' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.toUpperCase\
    \ == 'R' || v.toUpperCase == 'E' ) {\n                    count = count + 1\n\
    \                }\n                if( v.toUpperCase == 'S' || v.toUpperCase\
    \ == 'E' ) {\n                    count = count + 1\n                }\n     \
    \           if( v.toUpperCase == 'T' || v.toUpperCase == 'E' ) {\n           \
    \         count = count + 1\n                }\n                if( v.to\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7_8f8srb.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7_8f8srb.scala:88:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m88 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7_8f8srb.scala:18:22 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                \e[33mif\e[0m( v.toUpperCase == \e[31m'A'\e[0m\
    \ || v.toUpperCase == \e[31m'E'\e[0m ) {\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_8f8srb.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e\
    [0m( v.toUpperCase == \e[31m'B'\e[0m || v.toUpperCase == \e[31m'E'\e[0m ) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7_8f8srb.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                \e[33mif\e[0m( v.toUpperCase == \e[31m'C'\e\
    [0m || v.toUpperCase == \e[31m'E'\e[0m ) {\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_8f8srb.scala:27:22\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m( v.toUpperCase == \e[31m'D'\e[0m || v.toUpperCase == \e[31m'E'\e[0m ) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7_8f8srb.scala:30:22 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                \e[33mif\e[0m( v.toUpperCase == \e[31m'F'\e\
    [0m || v.toUpperCase == \e[31m'E'\e[0m ) {\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value toUpperCase\
    \ is not a"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 1L\n        for (i<- 0 to s.length-1; i>= 0L; i -= 2L) {\n            if (s(i)\
    \ == s(i+1).toUpper && s(i) != s(i+2).toUpper)\n                count += 1;\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcup3vder.scala:14:40 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m to s.length-\e\
    [31m1\e[0m; i>= \e[31m0L\e[0m; i -= \e[31m2L\e[0m) {\n\e[31m\e[31m   |\e[0m  \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                         '<-' expected, but ';' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpcup3vder.scala:14:49 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m to s.length-\e[31m1\e\
    [0m; i>= \e[31m0L\e[0m; i -= \e[31m2L\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                               '<-' expected, but ')' found\n2 errors found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.toList.zipWithIndex.flatMap\
    \ { case (c,i) => \n          if(i % 2 == 0) c.toString.toUpper else c\n     \
    \   }.count( _.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90kxln2u.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m          \e[33mif\e[0m(i % \e[31m2\e[0m == \e[31m0\e\
    [0m) c.toString.toUpper \e[33melse\e[0m c\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ value toUpper is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp90kxln2u.scala:14:49 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m          \e[33mif\e[0m(i % \e[31m2\e[0m == \e[31m0\e[0m) c.toString.toUpper\
    \ \e[33melse\e[0m c\n\e[31m\e[31m   |\e[0m                                   \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      Found:    (c : Char)\n\e[31m   |\e[0m                                 \
    \            Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp90kxln2u.scala:15:19 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        }.count( _.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value isUpper is not\
    \ a member of Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1659978893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val map =\
    \ mutable.Map[Int, Int]()\n        for (i <- 0 until s.length)\n            if\
    \ (s(i).isUpper)\n                map.getOrElse(i, 0) + 1\n            else map.getOrElse(i,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k80b23u.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2k80b23u.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length)\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (s(i).isUpper)\n\e[31m16 |\e[0m                map.getOrElse(i, \e[31m0\e[0m)\
    \ + \e[31m1\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m map.getOrElse(i,\
    \ \e[31m0\e[0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // count vowels\
    \ in even indices\n        // [a, b, c, d, e, f] will return 1l for countUpper((\"\
    aBCdEf\"))\n        var cnt = 0\n        var oddIndices = mutable.ListBuffer.empty[Int]\n\
    \        var evenIndices = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ s.length)\n            if (i % 2 == 0)\n                evenIndices += i\n \
    \           else {\n                if(oddIndices.isEmpty)\n                 \
    \   oddIndices = scala.collection.mutable.ListBuffer(0)\n                else\n\
    \                    oddIndices += -1\n                cnt += s.charAt(i).toLower.toList.count(ch\
    \ => ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n        \
    \    }\n        cnt += (s.length - evenIndices.last)\n        cnt += (s.length\
    \ - oddIndices.last)\n        cnt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ahw5s1h.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36moddIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ahw5s1h.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mevenIndices\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ahw5s1h.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                cnt += s.charAt(i).toLower.toList.count(\e\
    [36mch\e[0m => ch == \e[31m'a'\e[0m || ch == \e[31m'e'\e[0m || ch == \e[31m'i'\e\
    [0m || ch == \e[31m'o'\e[0m || ch == \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ahw5s1h.scala:26:43\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                cnt += s.charAt(i).toLower.toList.count(\e\
    [36mch\e[0m => ch == \e[31m'a'\e[0m || ch == \e[31m'e'\e[0m || ch == \e[31m'i'\e\
    [0m || ch == \e[31m'o'\e[0m || ch == \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \  value toList is not a member of Char - did you mean Char.toInt?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var sum = 0\n        for (\
    \ i <- 0 until s.length)\n          if (vowels(s(i).toChar) == true)\n       \
    \     sum += (i+2)*(i%2 == 0L)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8ceb21z.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m          \e[33mif\e[0m (vowels(s(i).toChar)\
    \ == \e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Char\n\e[31m   |\e[0m     \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps8ceb21z.scala:17:16 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            sum += (i+\e[31m2\e[0m)*(i%\e[31m2\e[0m == \e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps8ceb21z.scala:17:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            sum += (i+\e\
    [31m2\e[0m)*(i%\e[31m2\e[0m == \e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments (Boolean)\n3 errors found\n"
  stdout: ''
  timestamp: 1659978895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val l = new\
    \ mutable.ListBuffer[Char]()\n        for(i <- 0 to s.length - 1) if(s(i) == 'a')\
    \ l.append('e')\n        else l.append(s(i))\n        if(l.length == 1) (l.head\
    \ == 'e') * (1 +: l.toList)\n        else l.toList.count(_ == 'e')\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprz4gb5ne.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Using tail\
    \ recursion, we can write this much more concisely:\n        // def countUpper(s:\
    \ String) : Long = { def count(c: Char, acc: Long): Long =\n        // if (c ==\
    \ c) acc else count(c, acc + 1) }\n        s.reverse.count(c => c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvinysjjz.scala:21)\n\tat Problem.main(tmpvinysjjz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Complete\
    \ the function body.\n        val len = s.length\n        var n = 0\n        for\
    \ ( i <- 0 until len; if (i % 2 == 0) ) n += ( if( s.charAt(i) == 'a' ) 1 else\
    \ 0 );\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph79p0ehn.scala:21)\n\tat Problem.main(tmph79p0ehn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.Map[Boolean, Int]()\n        for (i <- 0 to s.length-1) {\n      \
    \      val c = s.charAt(i).toUpper\n            if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n                counts(c) += 1\n        \
    \    }\n        }\n        counts.foldLeft(0l)(_ + _._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqrgnw68_.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mBoolean\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val m = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until s.length)\n        {\n            if(s(i) match {\n\
    \                case 'a' => \n                case 'e' =>\n                case\
    \ 'i' =>\n                case 'o' =>\n                case 'u' =>\n         \
    \       case 'A' =>\n                case 'E' =>\n                case 'I' =>\n\
    \                case 'O' =>\n                case 'U' =>\n                  \
    \  m += s(i)\n                } else\n                    m += s(i)\n        \
    \    }\n        }\n        val vowels = m.count(_ == 'a' || _ == 'e' || _ == 'i'\
    \ || _ == 'o' || _ == 'u')\n        (vowels % 2 == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy2tpsfns.scala:28:18 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                } \e[33melse\e[0m\n\e[31m\e[31m   |\e\
    [0m                  ^^^^\e[0m\n\e[31m   |\e[0m                  ')' expected,\
    \ but 'else' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy2tpsfns.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpy2tpsfns.scala:13:16 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpy2tpsfns.scala:17:25 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => \n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Unit\n\e[31m   |\e[0m                         Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2tpsfns.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m \e[31m'e'\e[0m =>\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    Unit\n\e[31m   |\e[0m      \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpy2tpsfns.scala:19:25 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m'i'\e[0m =>\n\e[31m\e\
    [31m   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Unit\n\e[31m   |\e[0m                         Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatc"
  stdout: ''
  timestamp: 1659978896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val evenIndices\
    \ = s.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        evenIndices.count(_\
    \ == 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeitce5bt.scala:17)\n\tat Problem.main(tmpeitce5bt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until s.length\
    \ - 1) {\n            if (i % 2 == 0) {\n                if (vowels(s(i).toUpperCase.charAt(0))\
    \ != vowels(s(i).toLowerCase.charAt(0))) {\n                    count += 1\n \
    \               }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwu1od5ka.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (vowels(s(i).toUpperCase.charAt(\e\
    [31m0\e[0m)) != vowels(s(i).toLowerCase.charAt(\e[31m0\e[0m))) {\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwu1od5ka.scala:17:70 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (vowels(s(i).toUpperCase.charAt(\e\
    [31m0\e[0m)) != vowels(s(i).toLowerCase.charAt(\e[31m0\e[0m))) {\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upperCaseVowels\
    \ = \"aeiouAEIOU\".toSet\n        var count = 0\n        for (str <- s) {\n  \
    \          if (str.nonEmpty && upperCaseVowels.contains(str.charAt(0))) {\n  \
    \              count += 1\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dnppbix.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (str.nonEmpty && upperCaseVowels.contains(str.charAt(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value nonEmpty is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\".toCharArray\n        var i = 0\n        var count = 0\n   \
    \     while (i < s.length && count < vowels.length) {\n            if (s(i) ==\
    \ vowels(count)) {\n                count += 1\n            }\n            i +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6uzoutj.scala:25)\n\tat Problem.main(tmps6uzoutj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val len =\
    \ s.length\n        var count = 0L\n        for(i <- 0 until len) {\n        \
    \    if (s.charAt(i) == 'A' || s.charAt(i) == 'a') {\n                if (i %\
    \ 2 == 0) count += 1L\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34n1quz2.scala:24)\n\tat Problem.main(tmp34n1quz2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ : mutable.HashMap[Char, Int] = mutable.HashMap[Char, Int]()\n        for (i\
    \ <- 0 until s.length()) {\n            counts(s(i)) = (count(s, i) & 1 === 0)\n\
    \        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7eobt3ki.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m : mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7eobt3ki.scala:13:50 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m : mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.HashMap[Char, Long]()\n        for (ch <- s) {\n            if (!counts.contains(ch))\
    \ {\n                counts.put(ch, 1L)\n            } else {\n              \
    \  counts(ch) += 1\n            }\n        }\n        for (ch <- counts.keys)\
    \ {\n            if (counts(ch) % 2 == 0) {\n                counts(ch) -= 1\n\
    \            }\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2nmgzx83.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1ncm7lc.scala:23)\n\tat Problem.main(tmpr1ncm7lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length if s.charAt(i) == 'A') {\n        \
    \    count = count + 1\n        }\n        val vowels: mutable.Set[Char] = scala.collection.mutable.Set('A',\
    \ 'E', 'I', 'O', 'U')\n        for (i <- 0 until s.length if vowels.contains(s.charAt(i)))\
    \ {\n            count = count + 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgjpqvgf.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m: mutable.Set[\e\
    [35mChar\e[0m] = scala.collection.mutable.Set(\e[31m'A'\e[0m, \e[31m'E'\e[0m,\
    \ \e[31m'I'\e[0m, \e[31m'O'\e[0m, \e[31m'U'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val l = s.length\n\
    \        val r = new Array[String](l)\n        var numUpper = 0\n        for(\
    \ i <- 0 until l ) r(i) = s(i)\n        for(i <- 0 until l) if( s(i).isUpperCase\
    \ && r(i) isUpperCase ) numUpper+=1\n        numUpper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_5wisjd8.scala:17:69 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until l) \e\
    [33mif\e[0m( s(i).isUpperCase && r(i) isUpperCase ) numUpper+=\e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_5wisjd8.scala:16:38 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until l ) r(i) = s(i)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    Found:    Char\n\e[31m   |\e[0m         \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_5wisjd8.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until l) \e\
    [33mif\e[0m( s(i).isUpperCase && r(i) isUpperCase ) numUpper+=\e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value isUpperCase is not a member of\
    \ Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\"\n        var count = 0L\n        for ( i <- 0 until s.length if\
    \ s.charAt(i) == vowels.charAt(i) ) {\n            if ( i % 2 == 0 ) count +=\
    \ 1L\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 5\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.countUpper$$anonfun$1(tmpfhsuynpt.scala:15)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\
    \tat scala.collection.Iterator$$anon$6.hasNext(Iterator.scala:472)\n\tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)\n\
    \tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)\n\tat scala.collection.AbstractIterable.foreach(Iterable.scala:926)\n\
    \tat scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:896)\n\tat\
    \ Problem$.countUpper(tmpfhsuynpt.scala:17)\n\tat Problem$.main(tmpfhsuynpt.scala:21)\n\
    \tat Problem.main(tmpfhsuynpt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGen"
  stdout: ''
  timestamp: 1659978900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val numUpper\
    \ = 0\n        for (i <- 0 until s.length)\n            if (s(i) == 65 || (s(i)\
    \ == 66 || (s(i) == 67 || s(i) == 68))\n                numUpper += 1\n\n    \
    \    s.length * numUpper\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkvn05hkb.scala:16:28 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numUpper += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m                \
    \            ')' expected, but integer literal found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpkvn05hkb.scala:16:16 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m65\e[0m || (s(i) == \e\
    [31m66\e[0m || (s(i) == \e[31m67\e[0m || s(i) == \e[31m68\e[0m))\n\e[31m16 |\e\
    [0m                numUpper += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           \
    \     ^\e[0m\n\e[31m   |\e[0m        value numUpper is not a member of Boolean.\n\
    \e[31m   |\e[0m        Note that `numUpper` is treated as an infix operator in\
    \ Scala 3.\n\e[31m   |\e[0m        If you do not want that, insert a `;` or empty\
    \ line in front\n\e[31m   |\e[0m        or drop any spaces behind the operator.\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvn05hkb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                numUpper += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^^\e[0m\n\e[31m   |\e[0m                  \
    \       Not found: +=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpkvn05hkb.scala:18:8 -----------------\e[0m\e[0m\n\e[33m16 |\e[0m   \
    \             numUpper += \e[31m1\e[0m\n\e[33m17 |\e[0m        s.length * numUpper\n\
    \e[33m\e[33m   |\e[0m                             ^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val result =\
    \ scala.collection.mutable.ListBuffer[Char]()\n      val upperVowel = Array('a','e','i','o','u').toSet\n\
    \      def upperChar(i : Int) : Int = if (i >=0 && i < s.length) s.charAt(i).toLower\
    \ else 0\n      for(i <- 0 until s.length) result ++= {\n        if (i % 2 ==\
    \ 0) result.add(upperChar(i))\n        else upperVowel(upperChar(i))\n      }\n\
    \      result.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dtagfw3.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result.add(upperChar(i))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value add is not a member of scala.collection.mutable.ListBuffer[Char]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1dtagfw3.scala:18:33 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m upperVowel(upperChar(i))\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length) {\n            val v = s(i)\n    \
    \        if ('A' <= v && v <= 'Z')\n                if ('a' <= v && v <= 'z')\
    \ count + 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpetlgblx9.scala:22)\n\tat Problem.main(tmpetlgblx9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evens = mutable.Set(2,\
    \ 3, 4)\n        var count = 0\n        s.toCharArray.zipWithIndex.foreach { case\
    \ (c, i) => if (vowels(c) && evens(i % 2)) count += 1; c }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9lpyi13.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set(\e\
    [31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"\
    U\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx9lpyi13.scala:14:20 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set(\e[31m2\e\
    [0m, \e[31m3\e[0m, \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set(\n            \"A\",\n            \"a\",\n            \"E\",\n       \
    \     \"e\",\n            \"I\",\n            \"i\",\n            \"O\",\n   \
    \         \"o\",\n            \"U\",\n            \"u\"\n        )\n        var\
    \ count = 0\n        for (i <- 0 until s.length if vowels(s(i)))\n           \
    \ count += (2 until s.length)(i) % 2 == 0\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz4bt0l1l.scala:26:46\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until s.length \e[33mif\e[0m vowels(s(i)))\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                          Found:    Char\n\e[31m   |\e[0m   \
    \                                          Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpz4bt0l1l.scala:27:18 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            count += (\e[31m2\e[0m until s.length)(i)\
    \ % \e[31m2\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var upperCaseVowelCount\
    \ = 1\n        for (i <- 0 to s.length - 1) {\n            if (s(i).isUpper) {\n\
    \                if (s(i).isEven && s(i) != s(i + 1)) {\n                    upperCaseVowelCount\
    \ += 1\n                }\n            }\n        }\n        return upperCaseVowelCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0vr64xc.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (s(i).isEven && s(i) !=\
    \ s(i + \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value isEven is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\".toSet\n        val ev = s.filter(x => x isUpper && vowels(x.toLower)).toList\n\
    \        val evens = ev.indices.filter(x => x % 2 == 0)\n        ev.count(x =>\
    \ vowels(x.toLower)).toLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__31e5ao.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mev\e[0m = s.filter(\e[36mx\e\
    [0m => x isUpper && vowels(x.toLower)).toList\n\e[31m\e[31m   |\e[0m         \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \                     Not found: &&\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp__31e5ao.scala:14:33 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mev\e[0m = s.filter(\e[36mx\e[0m => x isUpper\
    \ && vowels(x.toLower)).toList\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35misUpper\e\
    [0m in \e[33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.HashMap.empty[String, Long]\n        for(i <- 0 until s.length)\n\
    \          if(i % 2 == 0)\n            counts.put(s(i), counts.getOrElse(s(i),\
    \ 0) + 1L)\n        (counts.getOrElse(s, 0L) -> 0L)\n      }\n    def main(args:\
    \ Array[String]) {\n        assert(countUpper((\"aBCdEf\")) === (1L))\n      \
    \  assert(countUpper((\"abcdefg\")) === (0L))\n        assert(countUpper((\"dBBE\"\
    )) === (0L))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzktoi7d9.scala:19:34 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) {\n\e[31m\e[31m   |\e[0m                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                  '='\
    \ expected, but '{' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzktoi7d9.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E120] Naming Error:\
    \ /tmp/tmpzktoi7d9.scala:24:8 ----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m  \
    \  Double definition:\n\e[31m   |\e[0m    def main(args: Array[String]): Null\
    \ in \e[33mobject\e[0m \e[35mProblem\e[0m at line 19 and\n\e[31m   |\e[0m    def\
    \ main(args: Array[String]): Unit in \e[33mobject\e[0m \e[35mProblem\e[0m at line\
    \ 24\n\e[31m   |\e[0m    have matching parameter types.\n3 errors found\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var counter\
    \ = 0\n        var evenIndex = -1\n        var vowels = scala.collection.mutable.Set[Char]()\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) == vowels.contains(0))\
    \ counter++\n            if (s(i) != vowels.contains(0)) {\n                if\
    \ (evenIndex == -1) evenIndex = i\n                vowels += s(i)\n          \
    \  } else {\n                if (evenIndex == i) counter++\n            }\n  \
    \      }\n        if (evenIndex != -1) counter++\n        counter.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1gqq70h1.scala:17:53 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i) == vowels.contains(\e\
    [31m0\e[0m)) counter++\n\e[31m\e[31m   |\e[0m                                \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \        expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp1gqq70h1.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i) == vowels.contains(\e\
    [31m0\e[0m)) counter++\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Values of types Char and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1gqq70h1.scala:25:36\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (evenIndex\
    \ != -\e[31m1\e[0m) counter++\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value ++ is not\
    \ a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val res =\
    \ mutable.Map[Int, Long]()\n        for (i <- s.indices)\n          if (s(i) ==\
    \ 'a') res(i) = res(i) + s.count(_ == 'A')\n          else if (s(i) == 'A') res(i)\
    \ = res(i) + s.count(_ == 'a') || res(i)\n          else res(i) = 0\n        res.maxBy(_._2)\
    \ // 0l -> 0\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphb3pkylh.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val len =\
    \ s.length\n        var c = 0\n        // This implementation is faster than the\
    \ one below, but iterates over all even indices \n        // once and checks them\
    \ at once. Also, it is shorter.\n        s.grouped(len/2).flatMap(_(_, 2)).count({case\
    \ (c1, c2) => \n            if(c1 == 'A' || c2 == 'A') 1\n            else c1.toUpper\
    \ == c2.toUpper\n        }) == 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqerhylj_.scala:17:33 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        s.grouped(len/\e[31m2\e[0m).flatMap(_(_, \e[31m2\e\
    [0m)).count({\e[33mcase\e[0m (c1, c2) => \n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqerhylj_.scala:18:39 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mif\e[0m(c1 == \e[31m'A'\e[0m || c2 == \e[31m'A'\e[0m)\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                       Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqerhylj_.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e\
    [0m c1.toUpper == c2.toUpper\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value toUpper is not a member of Nothing\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val c = s.toList\n\
    \        c.filter(x => x % 2 == 0).map(x => x.toUpperCase).count(x => x.contains(\"\
    A\"))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu_kxcz76.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        c.filter(\e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m).map(\e[36mx\e[0m => x.toUpperCase).count(\e[36mx\e[0m => x.contains(\e\
    [31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu_kxcz76.scala:14:71 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        c.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e\
    [0m => x.toUpperCase).count(\e[36mx\e[0m => x.contains(\e[31m\"A\"\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains is not a member of\
    \ Nothing, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSet AsJavaSet\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSet\
    \ AsJavaSet\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val lowerCase\
    \ = s.toLowerCase\n        val vowels = \"aeiou\".toList\n        val evenIndices\
    \ = lowerCase.indices.filter(_%2 == 0)\n        val upperIndices = lowerCase.indices.filter(_%2\
    \ == 1)\n        val evenLowerCaseIndices = evenIndices.flatMap(_=>lowerCase(_))\n\
    \        val counts = evenLowerCaseIndices.map(lowerCase => vowels.count(lowerCase\
    \ == \"a\")).toList\n        val evenAndEvenCount = counts.sum\n        val evenAndEvenCountAsString\
    \ = evenAndEvenCount.toString\n        val evenAndEvenCountAsLong = evenAndEvenCountAsString.toLong\n\
    \        val evenAndEvenCountAsLongAsString = evenAndEvenCountAsLong.toString\n\
    \        return evenAndEvenCountAsLongAsString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06xjuq4x.scala:17:58\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevenLowerCaseIndices\e\
    [0m = evenIndices.flatMap(_=>lowerCase(_))\n\e[31m\e[31m   |\e[0m            \
    \                                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                             Found:    Int => Char\n\e[31m\
    \   |\e[0m                                             Required: IterableOnce[Any]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06xjuq4x.scala:18:72\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcounts\e\
    [0m = evenLowerCaseIndices.map(\e[36mlowerCase\e[0m => vowels.count(lowerCase\
    \ == \e[31m\"a\"\e[0m)).toList\n\e[31m\e[31m   |\e[0m                        \
    \                                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    Boolean\n\e\
    [31m   |\e[0m                                               Required: \e[1m\e\
    [32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06xjuq4x.scala:23:15\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m evenAndEvenCountAsLongAsString\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Found:    (evenAndEvenCountAsLongAsString : String)\n\
    \e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val evenIndices\
    \ = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until s.length) if (s(i).isUpper)\
    \ evenIndices += i\n        evenIndices.length / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpbj7ihq.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowelMap\
    \ : mutable.Map[String, Long] = mutable.Map()\n        var count = 0L\n      \
    \  for (i <- 0 until s.length && s.charAt(i) != 'a') vowelMap(s.charAt(i)) = vowelMap(s.charAt(i))\
    \ + 1\n        for (i <- 0 until s.length && s.charAt(i) != 'z' && vowelMap(s.charAt(i))\
    \ > 0) vowelMap(s.charAt(i)) = vowelMap(s.charAt(i)) - 1\n        for (i <- 0\
    \ until s.length && vowelMap(s.charAt(i)) > 0) count = count + vowelMap(s.charAt(i))\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf21zr03.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map()\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf21zr03.scala:13:51\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelMap\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mLong\e[0m] = mutable.Map()\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxf21zr03.scala:15:35\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until s.length && s.charAt(i) != \e[31m'a'\e[0m) vowelMap(s.charAt(i))\
    \ = vowelMap(s.charAt(i)) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ && is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf21zr03.scala:15:47\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until s.length && s.charAt(i) != \e[31m'a'\e[0m) vowelMap(s.charAt(i))\
    \ = vowelMap(s.charAt(i)) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                           Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxf21zr03.scala:16:35 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length &&\
    \ s.charAt(i) != \e[31m'z'\e[0m && vowelMap(s.charAt(i)) > \e[31m0\e[0m) vowelMap(s.charAt(i))\
    \ = vowelMap(s.charAt(i)) - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.ArrayBuffer( 'a', 'e', 'i', 'o', 'u' )\n        val count = mutable.ArrayBuffer(\
    \ 0l )\n\n        for ( i <- 0 until s.length ) {\n            val j = s.charAt(i).toLowerCase\n\
    \            if ( vowels.contains(j) ) count.update( count.getOrElse( j ) + 1\
    \ )\n        }\n\n        count.getOrElse( 0l )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehldxaqe.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.ArrayBuffer(\
    \ \e[31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e[31m'o'\e[0m, \e[31m'u'\e\
    [0m )\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpehldxaqe.scala:14:20 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ArrayBuffer(\
    \ \e[31m0l\e[0m )\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpehldxaqe.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mj\e[0m = s.charAt(i).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value toLowerCase is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var total\
    \ = 0\n        for (i <- 0 until s.length if i % 2 == 0) {\n            total\
    \ += s.charAt(i).toUpperCase == s.charAt(i) ? 1 : 0\n        }\n        total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyabxu5qc.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            total += s.charAt(i).toUpperCase == s.charAt(i)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyabxu5qc.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            total += s.charAt(i).toUpperCase == s.charAt(i)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toUpperCase is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        if (s.isEmpty)\
    \ 0\n        else s.map(x => if (x.toUpperCase == 'A') 1 else 0).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) ==\
    \ (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hm01kur.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m s.map(x => \e[33mif\e[0m (x.toUpperCase\
    \ == \e[31m'A'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m).sum\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           value toUpperCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upperCaseVowels\
    \ = scala.collection.mutable.HashSet[Char]()\n        def upd(s: String, i: Int,\
    \ c: Char): Boolean = {\n            if (i % 2 == 0)\n                upperCaseVowels\
    \ += c\n            else\n                val index = s.indexOf(c, i)\n      \
    \          if (index != -1)\n                    upd(s, index + 1, c)\n      \
    \          true\n        }\n        upd(s, 0, 0)\n        upperCaseVowels.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxe7wskv3.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                upperCaseVowels\
    \ += c\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    Found:    (upperCaseVowels : scala.collection.mutable.HashSet[Char])\n\
    \e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        var i : Int = s.length()\n        while (i >= 0) {\n   \
    \         if (s(i).toUpperCase == 'A') {\n                if (i % 2 == 0) {\n\
    \                    count += 1\n                }\n            }\n          \
    \  i -= 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvk1f937i.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (s(i).toUpperCase == \e[31m'A'\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\"\n        val oddIndices = List(1,3,5,7,9,11,13,15,17,19)\n     \
    \   val evenIndices = oddIndices filter (_ % 2 == 0)\n        val uppers = oddIndices.map\
    \ (_.toUpperCase).toSet\n\n        val totalUppers = evenIndices.foldLeft(0) {\n\
    \            (acc, _) => acc + (uppers(s(acc)).toLong)\n        }\n\n        totalUppers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps0wshnns.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36muppers\e[0m = oddIndices.map\
    \ (_.toUpperCase).toSet\n\e[31m\e[31m   |\e[0m                               \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ toUpperCase is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps0wshnns.scala:19:39 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \            (\e[36macc\e[0m, _) => acc + (uppers(s(acc)).toLong)\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                     Found:    Char\n\e[31m   |\e[0m        \
    \                              Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        val vowelsMap: Map[Char, Long] = vowels.toList.toMap\n\
    \        val vowelsIndex = s.toList.toSet\n        val evenIndexes = (0 until\
    \ s.length).filter(i => i % 2 == 0)\n        evenIndexes.foreach { i =>\n    \
    \        vowelsIndex.foreach(c => {\n                if (vowelsMap(c).equals(0L))\
    \ {\n                    vowelsMap(c) = vowelsIndex.count(c => c == c)\n     \
    \           }\n            })\n        }\n        vowelsMap.keySet map vowelsMap.getOrElse\
    \ { 0L }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xud_7y2.scala:14:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m: \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mLong\e[0m] = vowels.toList.toMap\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Char <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8xud_7y2.scala:24:51\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        vowelsMap.keySet map\
    \ vowelsMap.getOrElse { \e[31m0L\e[0m }\n\e[31m\e[31m   |\e[0m               \
    \                                    ^^\e[0m\n\e[31m   |\e[0m                \
    \                                   Found:    (\e[31m0L\e[0m : Long)\n\e[31m \
    \  |\e[0m                                                   Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        if (s.length\
    \ < 2)\n            return 0\n\n        var count = 0L\n        var lastUpper\
    \ = s.charAt(s.length-1)\n        for ((idx, char) <- s.sliding(2).toList) {\n\
    \            if (char == 'A' && lastUpper != 'a') {\n                count +=\
    \ 1\n            }\n            lastUpper = char\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgvly172e.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            lastUpper = char\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Found:    (char : Any)\n\e[31m   |\e[0m                   \
    \     Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0l\n        var index = s.length\n        while (index > 0) {\n          \
    \  if (s.charAt(index) == 'A') {\n                if (s.charAt(index + 1) == 'A')\
    \ {\n                    count += 1l\n                }\n            }\n     \
    \       index -= 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 6\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.countUpper(tmpe70ds2gl.scala:16)\n\tat Problem$.main(tmpe70ds2gl.scala:26)\n\
    \tat Problem.main(tmpe70ds2gl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val evens\
    \ = mutable.Set[Int]()\n        for (v <- 0 to s.length - 1) {\n            if\
    \ (s(v) match {\n                case 'a' -> evens += 0\n                case\
    \ 'e' -> evens += 0\n                case 'i' -> evens += 0\n                case\
    \ 'o' -> evens += 0\n                case 'u' -> evens += 0\n                case\
    \ _ -> evens += 1\n            }) even else evens += 0\n        }\n        evens.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnevrwvr1.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m -> evens\
    \ += \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e\
    [0m                '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpnevrwvr1.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m                \e[33mcase\e[0m \e[31m'o'\e[0m -> evens += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       '=>' expected, but 'case' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnevrwvr1.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m _ -> evens += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                '=>' expected, but 'case' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnevrwvr1.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnevrwvr1.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m -> evens\
    \ += \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                  ^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: +=\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnevrwvr1.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m'i'\e[0m -> evens\
    \ += \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                  ^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: +=\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnevrwvr1.scala:20:34 -------"
  stdout: ''
  timestamp: 1659978909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        def countVowels(i:\
    \ Int) : Long = s.filter(_.isUpper)(i) match {\n            case None => 0\n \
    \           case Some(c) => if (c == 'e') 1 else 0\n        }\n        s.toList\
    \ zip s.tail.toList map { case (c, i) => (i, c) } groupBy { _._1 } map { case\
    \ (i, v) => (v.map(_._2)(0), i) }\n                .map(_._2).sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n\
    \    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\"\
    )) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsjn1cj81.scala:14:17\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m None\
    \ => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e\
    [0m                 Found:    None.type\n\e[31m   |\e[0m                 Required:\
    \ Char\n\e[31m   |\e[0m                 pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpsjn1cj81.scala:17:88\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s.toList zip\
    \ s.tail.toList map { \e[33mcase\e[0m (c, i) => (i, c) } groupBy { _._1 } map\
    \ { \e[33mcase\e[0m (i, v) => (v.map(_._2)(\e[31m0\e[0m), i) }\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter x$1\
    \ of expanded function:\n\e[31m   |\e[0m   x$1 => \n\e[31m   |\e[0m     x$1\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m(i, v) => \n\e[31m   |\e[0m           (v.map(_$3 => _$3._2)(0), i)\n\e\
    [31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsjn1cj81.scala:17:104\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m        s.toList zip s.tail.toList\
    \ map { \e[33mcase\e[0m (c, i) => (i, c) } groupBy { _._1 } map { \e[33mcase\e\
    [0m (i, v) => (v.map(_._2)(\e[31m0\e[0m), i) }\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                           Not found: v\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsjn1cj81.scala:17:120 -----------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        s.toList zip s.tail.toList map { \e[33mcase\e[0m (c,\
    \ i) => (i, c) } groupBy { _._1 } map { \e[33mcase\e[0m (i, v) => (v.map(_._2)(\e\
    [31m0\e[0m), i) }\n\e[31m\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.Map[String, Int]()\n        for(i <- 0 until s.length / 2){\n    \
    \        if(s.charAt(i).toUpper == s.charAt(i + 2).toUpper){\n               \
    \ counts += (s.substring(i,i + 2) -> 1)\n            }\n        }\n        counts.toMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jsmvkyj.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n      val upperVowels\
    \ = mutable.Set[Char](\"a\", \"e\", \"i\", \"o\", \"u\")\n      val evenIndices\
    \ = mutable.HashSet[Int](0)\n\n      for (i <- 0 until s.length)\n        if (i\
    \ % 2 == 0 && upperVowels(s(i))) {\n          evenIndices += i\n        }\n\n\
    \      evenIndices.size\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyhovhsz.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mupperVowels\e[0m = mutable.Set[\e\
    [35mChar\e[0m](\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyhovhsz.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mevenIndices\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m](\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\"\n        val vowelSet = vowels.toSet\n        val res = mutable.Set.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowelSet(i) match {\n  \
    \              case _ if s(i) == 'A' => (res ++= 1)\n                case _ if\
    \ s(i) == 'E' => (res ++= 1)\n                case _ if s(i) == 'I' => (res ++=\
    \ 1)\n                case _ if s(i) == 'O' => (res ++= 1)\n                case\
    \ _ if s(i) == 'U' => (res ++= 1)\n                case _ => (res ++= 0)\n   \
    \         })\n        res.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_n77bexh.scala:25:8 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        res.length\n\e[31m\e[31m   |\e[0m        ^^^\e\
    [0m\n\e[31m   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_n77bexh.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.Set.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_n77bexh.scala:17:25 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (vowelSet(i) \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (i : Int)\n\e[31m   |\e[0m                       \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val upper = s.toUpperCase\n        s.toCharArray().zipWithIndex.filter\
    \ {\n            case (_, index) =>\n                index % 2 == 0\n        }.map\
    \ { case (letter, index) =>\n            (letter =:= upper) && vowels.contains(letter)\n\
    \        }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp40n3i2dg.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            (letter =:= upper) && vowels.contains(letter)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \  value =:= is not a member of Char - did you mean letter.==?\n\e[31m\e[31m--\
    \ Error: /tmp/tmp40n3i2dg.scala:20:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        }.sum\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\
    \e[31m   |\e[0m         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m         where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\")\n        val evenUppers\
    \ = mutable.Set(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"a\")\n        val\
    \ evenLowers = mutable.Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\n\
    \        val result = s.length - s.count(_ == 'A') + 1\n\n        result.times\
    \ { x => vowels += 'a' ; vowels += 'e' ; vowels += 'i' ; vowels += 'o' ; vowels\
    \ += 'u' ; vowels += 'y' }\n        result.times { x => evenUppers += 'A' ; evenUppers\
    \ += 'E' ; evenUppers += 'I' ; evenUppers += 'O' ; evenUppers += 'U' ; evenUppers\
    \ += 'Y' }\n        result.times { x => evenLowers += 'a' ; evenLowers += 'b'\
    \ ; evenLowers += 'c' ; evenLowers += 'd' ; evenLowers += 'e' ; evenLowers +=\
    \ 'f' ; evenLowers += 'g' }\n\n        vowels.count(x => x % 2 == 0) + 1\n   \
    \     evenUppers.count(x => x % 2 == 0) + 1\n        evenLowers.count(x => x %\
    \ 2 == 0) + 1\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_oh_09iz.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set(\e\
    [31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"Y\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_oh_09iz.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenUppers\e[0m = mutable.Set(\e\
    [31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"Y\"\e[0m, \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_oh_09iz.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mevenLowers\e[0m = mutable.Set(\e[31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"\
    c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_oh_09iz.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result.times { \e[36mx\e[0m => vowels += \e[31m'a'\e\
    [0m ; vowels += \e[31m'e'\e[0m ; vowels += \e[31m'i'\e[0m ; vowels += \e[31m'o'\e\
    [0m ; vowels += \e[31m'u'\e[0m ; vowels += \e[31m'y'\e[0m }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value times is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_oh_09iz.scala:20:15\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result.times { \e\
    [36mx\e[0m => evenUppers += \e[31m'A'\e[0m ; evenUppers += \e[31m'E'\e[0m ; evenUppers\
    \ += \e[31m'I'\e[0m ; evenUppers += \e[31m'O'\e[0m ; evenUppers += \e["
  stdout: ''
  timestamp: 1659978915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upperVowels\
    \ = mutable.Set(\"AEIOU\")\n        var count = 0L\n        for (i <- 0 to s.length-1)\
    \ {\n            if ((i / 2) % 2 == 0 && (s.charAt(i) match {\n              \
    \  case \"a\" => \"A\"\n                case \"e\" => \"E\"\n                case\
    \ \"i\" => \"I\"\n                case \"o\" => \"O\"\n                case \"\
    u\" => \"U\"\n                case _ => \"\")).toCharArray contains s.charAt(i))\
    \ {\n                count += 1L\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvd_cknda.scala:22:28 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m _ => \e[31m\"\"\e[0m)).toCharArray\
    \ contains s.charAt(i)) {\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            '}' expected, but ')' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpvd_cknda.scala:22:63 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m _ => \e[31m\"\"\e[0m)).toCharArray\
    \ contains s.charAt(i)) {\n\e[31m\e[31m   |\e[0m                             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       'then' expected, but ')' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvd_cknda.scala:13:26 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mupperVowels\e[0m = mutable.Set(\e\
    [31m\"AEIOU\"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpvd_cknda.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m\"a\"\e[0m => \e\
    [31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvd_cknda.scala:17:28 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m\"a\"\e[0m => \e\
    [31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (\e[32m\"A\"\e[0m : String)\n\
    \e[31m   |\e[0m                            Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpvd_cknda.scala:18:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\"e\"\e[0m => \e\
    [31m\"E\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659978916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val lower = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray\n        var cnt = 0\n        for (i <- 0 until s.length)\n     \
    \       if (s(i).isUpper && vowels(i) <=> lower(i) && vowels(i) <=> lower(i +\
    \ 1))\n                cnt += 1\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2got2i91.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i).isUpper && vowels(i)\
    \ <=> lower(i) && vowels(i) <=> lower(i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value <=> is not a member of Char - did you mean Char.<=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2got2i91.scala:17:68 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i).isUpper && vowels(i)\
    \ <=> lower(i) && vowels(i) <=> lower(i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m               value <=> is not a member of Char - did you mean\
    \ Char.<=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upperCaseVowels\
    \ = mutable.Set.empty[Char]\n        var evenIndexes = mutable.Set.empty[Int]\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             if (s(i).isUpper) {\n                    upperCaseVowels += s(i)\n\
    \                }\n                if (s(i) %2 == 0) evenIndexes += i\n     \
    \       }\n        }\n        val upperCaseVowelCount = upperCaseVowels.size\n\
    \        val evenIndexCount = evenIndexes.size\n        if (upperCaseVowelCount\
    \ == evenIndexCount) {\n            return 0\n        }\n        val upperCaseCount\
    \ = evenIndexCount - upperCaseVowelCount\n        val oddCount = upperCaseCount\
    \ / 2\n        val evenCount = upperCaseCount - oddCount\n        val odd = oddIndexes\
    \ +: evenIndexes\n        if (odd.size == 0) {\n            return 1L\n      \
    \  }\n        var total = 0L\n        val evenIndexesSet = evenIndexes.toSet\n\
    \        odd.foreach((i) => total += (evenIndexesSet.contains(i) ? evenCount :\
    \ evenIndexCount))\n        total + oddCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xeaeit1.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mupperCaseVowels\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xeaeit1.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mevenIndexes\e[0m = mutable.Set.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val upperCaseVowels\
    \ : List[Char] = ('A' to 'Z').toList\n        val counts : mutable.ListBuffer[Long]\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 0 until s.length){\n        \
    \    val c = s.charAt(i)\n            if(c isUpperCase && c != ' '){\n       \
    \         counts(i / 2) + 1 match {\n                    case 1 => upperCaseVowels.indexOf(c)\
    \ match {\n                        case -1 => counts += 0\n                  \
    \      case index => counts += 1\n                    }\n                    case\
    \ _ => counts += 0\n                }\n            }\n        }\n        counts.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4kcuga71.scala:17:37 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(c isUpperCase && c != \e[31m'\
    \ '\e[0m){\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\
    \e[31m   |\e[0m                               ')' expected, but character literal\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kcuga71.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m : mutable.ListBuffer[\e\
    [35mLong\e[0m] = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kcuga71.scala:14:48\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m : mutable.ListBuffer[\e[35mLong\e[0m] = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4kcuga71.scala:17:17 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mif\e[0m(c isUpperCase && c != \e[31m' '\e[0m){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value isUpperCase is not a member of Char\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4kcuga71.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mif\e[0m(c isUpperCase && c != \e[31m' '\e[0m){\n\e[31m\e\
    [31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m           \
    \                  Not found: &&\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (x <- s.indices)\n\
    \            if (x % 2 == 0) count += vowels.count(s.charAt(x))\n        count\
    \ * vowels.size \n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmple3xxd_8.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e\
    [0m) count += vowels.count(s.charAt(x))\n\e[31m\e[31m   |\e[0m               \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmple3xxd_8.scala:16:58 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e[0m) count +=\
    \ vowels.count(s.charAt(x))\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                           Found:    Char\n\e[31m   |\e[0m                  \
    \                             Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var counter\
    \ = 0\n        for( i <- 0 until s.length) counter += if(s.charAt(i) == 'A' ||\
    \ s.charAt(i) == 'a') 1 else 0\n        counter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2d32ias5.scala:14:47 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until s.length)\
    \ counter += \e[33mif\e[0m(s.charAt(i) == \e[31m'A'\e[0m || s.charAt(i) == \e\
    [31m'a'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                               ^^\e[0m\n\e[31m   |\e[0m     \
    \                                   expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2d32ias5.scala:14:44\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( i\
    \ <- \e[31m0\e[0m until s.length) counter += \e[33mif\e[0m(s.charAt(i) == \e[31m'A'\e\
    [0m || s.charAt(i) == \e[31m'a'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Convert\
    \ each char to an int\n        val count = s.map(_.toInt).toList\n        // Count\
    \ the vowels in odd positions\n        count.zipWithIndex.count(_._1 % 2 == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqsh30pac.scala:19)\n\tat Problem.main(tmpqsh30pac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOU\"\n        val result = mutable.ArrayBuffer.empty[Long]\n        for((char1,\
    \ i) <- s.zip(0 until s.length)) {\n            val char2 = if (i % 2 == 0) s.charAt(i)\
    \ else \"?\"\n            val isVowel = vowels.contains(char1)\n            val\
    \ isUpperChar = char2.toUpperCase.equals(char1)\n            if (isVowel && isUpperChar)\
    \ result.append(1L)\n        }\n        result.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjkdjbhl.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbjkdjbhl.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36misUpperChar\e[0m = char2.toUpperCase.equals(char1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value toUpperCase is not a member of Matchable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val even =\
    \ s.filter(n => n % 2 == 0)\n        even.map(n => if (n.toString.toUpperCase\
    \ == \"A\") 1 else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkrispje.scala:17)\n\tat Problem.main(tmplkrispje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        for (i <- 0 until s.length)\n            if (s.charAt(i).toUpper\
    \ == 'A' || s.charAt(i).toUpper == 'a') count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'B' || s.charAt(i).toUpper == 'b')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'C' || s.charAt(i).toUpper == 'c')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'D' || s.charAt(i).toUpper\
    \ == 'd')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'E' || s.charAt(i).toUpper == 'e')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'F' || s.charAt(i).toUpper == 'f')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'G' || s.charAt(i).toUpper\
    \ == 'g')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'H' || s.charAt(i).toUpper == 'h')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'I' || s.charAt(i).toUpper == 'i')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'J' || s.charAt(i).toUpper\
    \ == 'j')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'K' || s.charAt(i).toUpper == 'k')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'L' || s.charAt(i).toUpper == 'l')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'M' || s.charAt(i).toUpper\
    \ == 'm')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'N' || s.charAt(i).toUpper == 'n')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'O' || s.charAt(i).toUpper == 'o')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'P' || s.charAt(i).toUpper\
    \ == 'p')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'Q' || s.charAt(i).toUpper == 'q')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'R' || s.charAt(i).toUpper == 'r')\n    \
    \            count += 1\n            else if (s.charAt(i).toUpper == 'S' || s.charAt(i).toUpper\
    \ == 's')\n                count += 1\n            else if (s.charAt(i).toUpper\
    \ == 'T' || s.charAt(i).toUpper == 't')\n                count += 1\n        \
    \    else if (s.charAt(i).toUpper == 'U' || s.charAt(i).toUpper == 'u')\n    \
    \            count += 1\n            else if (s.charAt(i\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwro4txjh.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwro4txjh.scala:56:29 --------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \            \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    Char\n\e[31m   |\e[0m                     Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val m = mutable.Map[Int,\
    \ String]()\n        for( i <- 0 to s.length - 1 ) {\n            val x = s.charAt(i)\n\
    \            if ( ('A' <= x && x <= 'Z') && ((i % 2) == 0)) {\n              \
    \  m(i) = x\n            }\n        }\n        s.length match {\n            case\
    \ 1 => m.getOrElse(0, \"?\").length.toLong\n            case _ => m.size\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3clinnb8.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        def isVowel(i:\
    \ Int) : Boolean = i >= 0 && i <= 25 && \"aeiou\".toList.contains(s(i))\n    \
    \    val even = for (i <- 0 until s.length) yield if (i % 2 == 0) isVowel(i) else\
    \ false\n        even.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6th9ch65.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        even.foldLeft(\e[31m0L\e[0m)(_ + _)\n\e[31m\e\
    [31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ ((_$2 : Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var i = 1L\n        while (i <= s.length)\n        {\n       \
    \     if (s(i) == s('A'))\n            {\n                count += 1L\n      \
    \      }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqi680zbw.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i)\
    \ == s(\e[31m'A'\e[0m))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    (i : Long)\n\e[31m   |\e[0m            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.HashMap[Char,Long]()\n        s.foreach { x => if (x.toUpper != 'A'\
    \ && !x.toUpper == 'a') counts(x) += 1L }\n        counts.filter(_._2 % 2 == 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbn0eavb8.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn0eavb8.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        s.foreach { \e[36mx\e[0m => \e[33mif\e[0m (x.toUpper\
    \ != \e[31m'A'\e[0m && !x.toUpper == \e[31m'a'\e[0m) counts(x) += \e[31m1L\e[0m\
    \ }\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value unary_! is not a member of Char - did you mean\
    \ Char.unary_+?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for (i <- 0 until s.length)\n            if (s(i) >= 'a'\
    \ && s(i) <= 'z') count += 1\n        if (count % 2 == 0)\n            count +\
    \ 1\n        else\n            count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnliqgg89.scala:22)\n\tat Problem.main(tmpnliqgg89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var vowelCount\
    \ = 0\n        for (v <- s.toCharArray){\n            if (v == 'a' || v == 'e'\
    \ || v == 'i' || v == 'o' || v == 'u') vowelCount++\n        }\n        vowelCount\
    \ match {\n            case 0 => 0\n            case 1 => 1\n            case\
    \ _ => vowelCount\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfwnrkova.scala:15:86 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (v == \e[31m'a'\e[0m || v ==\
    \ \e[31m'e'\e[0m || v == \e[31m'i'\e[0m || v == \e[31m'o'\e[0m || v == \e[31m'u'\e\
    [0m) vowelCount++\n\e[31m\e[31m   |\e[0m                                     \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 0L\n        var i = 0L\n        while (i < s.length){\n            count +=\
    \ 1L\n            if (s(i) != s(i).toUpperCase){\n                count += 1L\n\
    \            }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jwfjgat.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i)\
    \ != s(i).toUpperCase){\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    (i : Long)\n\e[31m   |\e[0m            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jwfjgat.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (s(i)\
    \ != s(i).toUpperCase){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (i : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = ('A' to 'Z')\n        val vowelIndexes = mutable.ListBuffer[Int]()\n     \
    \   for (vowel <- vowels) {\n            val index = s.indexOf(vowel)\n      \
    \      if (index > -1) {\n                vowelIndexes += index\n            \
    \    if (index % 2 == 0 && vowelIndexes.nonEmpty && vowelIndexes.last % 2 == 0)\
    \ {\n                    return vowelIndexes.last\n                }\n       \
    \     }\n        }\n        return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5s0ol6s.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowelIndexes\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        s.count(i\
    \ => ('A' <= i && i <= 'Z') || ('a' <= i && i <= 'z'))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvt8moo7y.scala:16)\n\tat Problem.main(tmpvt8moo7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counts\
    \ = mutable.Map.empty[String, Int]\n        for (i <- 0 until s.length)\n    \
    \        if ((i & 1) == 0)\n                counts.put(s(i), counts.getOrElse(s(i),\
    \ 0) + 1L)\n        counts.toMap.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81zkk8n6.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Count every\
    \ even index starting at index 0\n        s.sliding(2).foreach{\n            t\
    \ => {\n                if (t._1 % 2 == 0) {\n                    t._2()\n   \
    \             }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0y70oju0.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (t._1 % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value _1 is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0y70oju0.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    t._2()\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                    value _2 is not\
    \ a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\"\n        val evens = (0 until s.length) filter { x => (x % 2 ==\
    \ 0) }\n        evens map { x => vowels.count(x => s.charAt(x) == s.charAt(x).toUpper)\
    \ }\n            .sum\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzqc50gnx.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evens map { \e[36mx\e[0m => vowels.count(\e[36mx\e\
    [0m => s.charAt(x) == s.charAt(x).toUpper) }\n\e[31m\e[31m   |\e[0m          \
    \          ^\e[0m\n\e[31m   |\e[0m                    Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                    I could not infer the type\
    \ of the parameter x.\n1 error found\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val res =\
    \ mutable.ListBuffer.empty[Long]\n        for (v <- 0 to s.length - 1) {\n   \
    \         if (s(v).isUpper) res += 1\n            if (s(v).isUpper && s(v + 1).isUpper)\
    \ res += 2\n        }\n        if (res.nonEmpty) return res.length\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3zev9of.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        def count(cs\
    \ : CharSequence): Long = if (cs.length < 2) 0 else 1 +\n            cs.toList\
    \ match {\n                case Nil         => 0\n                case c::cs =>\
    \ if (c.toUpper() == 'A') count(cs) else 0\n            }\n        s.toList match\
    \ {\n            case Nil         => 0\n            case c::cs => count(cs) *\
    \ count(cs.tail)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpof6cu466.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            cs.toList \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList\
    \ is not a member of CharSequence\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpof6cu466.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m c::cs => \e[33mif\e[0m (c.toUpper() == \e[31m'A'\e[0m) count(cs) \e[33melse\e\
    [0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: c\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpof6cu466.scala:20:32 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m c::cs => count(cs) * count(cs.tail)\n\
    \e[31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    (cs : List[Char])\n\e[31m   |\e[0m\
    \                                Required: CharSequence\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpof6cu466.scala:20:47 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m c::cs => count(cs) * count(cs.tail)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    List[Char @uncheckedVariance]\n\
    \e[31m   |\e[0m                                 Required: CharSequence\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        if (s.length\
    \ < 2) 1\n        else {\n            var count = 0\n            for (i <- 1 to\
    \ s.length)\n                if (s(i) =! Character.isUpperCase(s(i)))\n      \
    \              count -= 1\n            count\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1xktzgo.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (s(i) =! Character.isUpperCase(s(i)))\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         value =! is not a member of Char - did you mean Char.==?\n1 error found\n"
  stdout: ''
  timestamp: 1659978926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        // Write your\
    \ code here\n        var count = 0L\n        for(i<- s.indices) {\n          \
    \  if(s(i).equals(\"A\") || s(i).equals(\"E\") || s(i).equals(\"I\") || s(i).equals(\"\
    O\") || s(i).equals(\"U\"))\n                count += 1L\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjx5ma9de.scala:22)\n\tat Problem.main(tmpjx5ma9de.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"AEIOUaeiou\"\n        var evenCount = 0\n        var currentVowel = 0\n\
    \        var count = 0\n        for (c <- s) {\n            if (vowels.indexOf(c)\
    \ < 0) continue\n            if (evenCount % 2 == 0) {\n                currentVowel\
    \ = vowels.indexOf(c)\n            } else {\n                val indexToAdd =\
    \ currentVowel - vowels.indexOf(c)\n                if (indexToAdd < 0) currentVowel\
    \ = 0\n                else {\n                    evenCount += 1\n          \
    \          currentVowel += indexToAdd\n                }\n            }\n    \
    \    }\n        count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbekfp5oh.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (vowels.indexOf(c) < \e[31m0\e\
    [0m) continue\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = mutable.Set[String]()\n        for(i <- 0 until s.length)\n            if(s(i)\
    \ isUpper)\n                vowels += s(i)\n        vowels.count(_ == 'A')\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgea8pynw.scala:15:27 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(s(i) isUpper)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                 \
    \          expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgea8pynw.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = Set.of(\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \n                             \"E\", \"I\", \"O\", \"U\", \"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val evenIndexes = (0.to(s.length/2)).filter(_\
    \ % 2 == 0)\n        val evenIndexes = evenIndexes.toList\n        val evenIndexes\
    \ = evenIndexes.map(i => s.charAt(i))\n        val counts = evenIndexes.count(s\
    \ => vowels.contains(s))\n        counts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpush43dv4.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenIndexes\e[0m = evenIndexes.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenIndexes is already defined as \e[33mvalue\e[0m \e[35mevenIndexes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpush43dv4.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevenIndexes\e[0m = evenIndexes.map(\e\
    [36mi\e[0m => s.charAt(i))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenIndexes is already defined as \e[33mvalue\e[0m \e[35mevenIndexes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpush43dv4.scala:13:25 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = Set.of(\e[31m\"A\"\e\
    [0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m, \e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"A\"\e[0m, \n\e[31m\e[31m   |\e[0m                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m         value of is not a member of object scala.collection.mutable.Set\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vv = s.toUpperCase\n\
    \        val evens = (0 until s.length).filter { v => (v mod 2) == 0 }\n     \
    \   val count = evens.foldLeft(0L)((acc, _) => acc + 1)\n        count + (if (count\
    \ % 2 == 0) vv.count(_ == 'A') else 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp814lk9qs.scala:14:56 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = (\e[31m0\e\
    [0m until s.length).filter { \e[36mv\e[0m => (v mod \e[31m2\e[0m) == \e[31m0\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                                 \
    \     ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Int, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import\
    \ math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val counter = mutable.HashMap[Int, Long]()\n\
    \        for (charSeq <- s.toCharArray) {\n            if (vowels(charSeq) % 2\
    \ == 0) counter.update(charSeq, counter(charSeq) + 1)\n        }\n        counter.values.toList.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
    )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1o0jzgwo.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1o0jzgwo.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (vowels(charSeq) % \e[31m2\e\
    [0m == \e[31m0\e[0m) counter.update(charSeq, counter(charSeq) + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of Boolean, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n       var even =\
    \ 0\n       var n = 0\n       for (x <- s.toCharArray)\n         {\n         if\
    \ (x != x.toUpper)\n           {\n           even = even + 1\n           if (even\
    \ % 2 == 0)\n             {\n             n = n + 1\n             even = 0\n \
    \            }\n           }\n         }\n       n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwq31dt0x.scala:31)\n\tat Problem.main(tmpwq31dt0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = \"aeiou\".toSet\n        val even = (0 until s.length).toSet.filter(_ % 2\
    \ == 0)\n        val evenCount = s.count(_.toUpperCase in vowels)\n        (even\
    \ filter { s =>\n            val i = s.indexOf(_.toUpperCase)\n            even.contains(i\
    \ + 1)\n        }.length + evenCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0trmlghw.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = s.count(_.toUpperCase\
    \ in vowels)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0trmlghw.scala:16:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (even filter\
    \ { \e[36ms\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                       I could not infer the type of the parameter s.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val counter\
    \ = mutable.Map.empty[Int, Long]\n        for (i <- 0 until s.length) counter\
    \ += (i to s.charAt(i).toUpperCase match {\n        case 'A' => 1\n        case\
    \ 'E' => 1\n        case 'I' => 1\n        case 'O' => 1\n        case 'U' =>\
    \ 1\n        case 'a' => 1\n        case 'e' => 1\n        case 'i' => 1\n   \
    \     case 'o' => 1\n        case 'u' => 1\n        case _ => 0\n        })\n\
    \        counter.map(_._2).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjghhrb0k.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowelSet\
    \ = scala.collection.mutable.Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n        var i\
    \ = 0\n        var count = 0\n        var lastIndex = s.length - 1\n\n       \
    \ while (i < lastIndex) {\n            if (vowelSet(s(i)) && s(i) != \"u\") {\n\
    \                count += 1\n            }\n            i += 1\n        }\n\n\
    \        if (count % 2 == 1) {\n            return 0\n        } else {\n     \
    \       return 1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\"\
    )) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppwhx9cbb.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (vowelSet(s(i))\
    \ && s(i) != \e[31m\"u\"\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                         Found:    Char\n\e[31m\
    \   |\e[0m                         Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmppwhx9cbb.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (vowelSet(s(i)) && s(i) !=\
    \ \e[31m\"u\"\e[0m) {\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var vowels\
    \ =  mutable.Set.empty[Char]\n        val l = s.length\n        for (i<- 0 to\
    \ l - 1) {\n            vowels += s(i)\n            if (s(i) == s(i).toUpper)\
    \ vowels += s(i)\n        }\n        vowels.count(_ == 'A')\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wr5tj0v.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mvowels\e[0m =  mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels\
    \ = new mutable.HashSet[Char]('a', 'e', 'i', 'o', 'u')\n        s.toList map {\n\
    \            case c if vowels(c) => (c) :: Nil\n            case c => c\n    \
    \    }.foldLeft(0L)(_ + _) filter (_ % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_trh5_r.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m](\e[31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e\
    [0m, \e[31m'o'\e[0m, \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpo_trh5_r.scala:15:12 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m vowels(c)\
    \ => (c) :: Nil\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter x$1 of expanded function:\n\e[31m   |\e[0m   x$1 => \n\e[31m\
    \   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m\
    \         \e[33mcase \e[0mc\e[33m if \e[0mvowels(c) => \n\e[31m   |\e[0m     \
    \      (c) :: Nil\n\e[31m   |\e[0m         \e[33mcase \e[0mc => \n\e[31m   |\e\
    [0m           c\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo_trh5_r.scala:17:40 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        }.foldLeft(\e[31m0L\e[0m)(_ + _) filter (_ % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                      ^^^\e[0m\n\e\
    [31m   |\e[0mvalue % is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ = 1\n        for (i <- 0 until s.length; i+= 2) {\n            if (s(i) == 'A'\
    \ && s(i+1) == 'O') count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw_la906g.scala:14:41 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length;\
    \ i+= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                 \
    \        ^\e[0m\n\e[31m   |\e[0m                                         '<-'\
    \ expected, but ')' found\n1 error found\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var vowels\
    \ : mutable.Set[Char] = mutable.Set[Char]()\n        for (i <- 0 to s.length -\
    \ 1)\n            vowels += (s.charAt(i) as Char)\n\n        var count = mutable.Set[Char]()\n\
    \        for (i <- 0 to s.length - 1) {\n            if (vowels(i) == 'A')\n \
    \               count += 1\n            else if (vowels(i) == 'E')\n         \
    \       count += 1\n            else if (vowels(i) == 'I')\n                count\
    \ += 1\n            else if (vowels(i) == 'O')\n                count += 1\n \
    \           else if (vowels(i) == 'U')\n                count += 1\n        }\n\
    \        count.length\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3d8ulzr.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3d8ulzr.scala:13:41\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set[\e[35mChar\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3d8ulzr.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val m = s.toCharArray.zipWithIndex.toMap\n\
    \        val vowels : mutable.Set[Char] = mutable.Set.empty\n        for (i <-\
    \ 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n         \
    \       vowels -= s.charAt(i)\n            else\n                vowels += s.charAt(i)\n\
    \        m.filter(_._2 % 2 == 0).map(_._1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpper((\"aBCdEf\")) == (1l));\n    assert(countUpper((\"\
    abcdefg\")) == (0l));\n    assert(countUpper((\"dBBE\")) == (0l));\n    assert(countUpper((\"\
    B\")) == (0l));\n    assert(countUpper((\"U\")) == (1l));\n    assert(countUpper((\"\
    \")) == (0l));\n    assert(countUpper((\"EEEE\")) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3044bt0_.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3044bt0_.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                    \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3044bt0_.scala:20:42 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        m.filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue length is not a member of scala.collection.immutable.Iterable[Char]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s, count the number of uppercase vowels in even indices.\n\
    \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    //\
    \ >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"\
    ))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count\
    \ : Long = 0\n        for (i <- 0 until s.length if s.charAt(i) == 'A')\n    \
    \        count = count + 1\n        for (i <- 0 until s.length if s.charAt(i)\
    \ == 'E')\n            count = count + 1\n        for (i <- 0 until s.length if\
    \ s.charAt(i) == 'I')\n            count = count + 1\n        for (i <- 0 until\
    \ s.length if s.charAt(i) == 'O')\n            count = count + 1\n        for\
    \ (i <- 0 until s.length if s.charAt(i) == 'U')\n            count = count + 1\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"\
    aBCdEf\")) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
    dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
    U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
    EEEE\")) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihp76n19.scala:29)\n\tat Problem.main(tmpihp76n19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978929
