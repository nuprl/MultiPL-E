name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of non-negative integers, return a coscala of the given list\
  \ after sorting,\n    // you will sort the given list in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given list.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n\
  \    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n\
  \    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val newList = mutable.ListBuffer[Long]()\n        for ( i <-\
    \ 0 until array.size ) {\n            newList += array(i)\n        }\n       \
    \ if (newList.sum % 2 != 0) {\n            newList.sortBy(-_)\n        } else\
    \ {\n            newList.sortBy(_)\n        }\n        return newList.toList",
  "        val res = new mutable.LinkedList[Long]()\n        val len = array.size\n\
    \        var i = 0\n        val res = []\n        while(i < len){\n          \
    \  val min = i\n            val max = (i + len) - 1\n            var sum = 0\n\
    \            while(min < max){\n                sum = sum + array(min)\n     \
    \           min = min + 1\n            }\n            if(sum % 2 == 0){\n    \
    \            res.clear()\n                res.add(array(min))\n              \
    \  res.add(array(max))\n                return res\n            }\n          \
    \  else{\n                res.clear()\n                res.add(array(max))\n \
    \               res.add(array(min))\n                return res\n            }\n\
    \            i = min + 1\n        }", "        if (array.isEmpty)\n          \
    \  array\n        else {\n            val firstValue = array.head\n          \
    \  val lastValue = array.last\n            val sumFirst = firstValue + lastValue\n\
    \            if (sumFirst % 2L)\n                sortArray(array.dropRight(1)).++(array.dropLeft).++(sortArray(array.drop(1)))\n\
    \            else\n                sortArray(array.dropRight(1)).++(sortArray(array.drop(1)))\n\
    \        }", "        val n = array.length\n        if(n < 2) array\n        else\
    \ if(n % 2 == 0) array.sort[Long]( _.toLong - _.toLong)\n        else array.sort[Long](\
    \ _.toLong - _.toLong).reverse", "        // Your code here\n        if (array.isEmpty)\
    \ array\n        val list = new mutable.ListBuffer[Long]()\n        var sum =\
    \ 0L\n        var i = 0\n        while (i < array.size) {\n            sum +=\
    \ array(i)\n            i += 1\n        }\n        var j = 0\n        while (j\
    \ < array.size) {\n            if (j == array.size) list += 0\n            if\
    \ (sum % 2 != 0 && (j + 1) != array.size) list += array.get(j + 1)\n         \
    \   j += 1\n        }\n        list.toList", "        var i = 0\n        var j\
    \ = 1\n        var n = array.length\n        var sum = 0\n        var reverse\
    \ = array.head % 2 == 0\n        var l = array.size\n\n        var result = new\
    \ mutable.ArrayBuffer[Long]()\n        var temp = 0\n        array.foreach {\n\
    \            i =>\n                sum = array(i)\n                while (j <\
    \ n) {\n                    sum = sum + array(j)\n                    j++\n  \
    \              }\n                if (sum % 2 == 0) {\n                    temp\
    \ = sum\n                    sum = 0\n                } else if (sum % 2 == 1)\
    \ {\n                    temp = sum\n                    sum = temp\n        \
    \        }\n                result.add((reverse ? temp : -temp).toLong)\n    \
    \            i = i + 1\n        }\n        return result.toList", "        var\
    \ i = 0\n        val len = array.length\n\n        if(len == 1)\n            array\n\
    \        else\n            while(i < len) {\n                if(array[i] + array[i+1]\
    \ < array[i]) {\n                    val temp = array(i + 1)\n               \
    \     array(i + 1) = array(i)\n                    array(i) = temp\n         \
    \       }\n                i += 1\n            }\n        array", "        val\
    \ arrayList = mutable.ListBuffer.empty[Long]\n        array.foreach( x => arrayList\
    \ += x )\n\n        val odd = arrayList.toSet\n        val even = arrayList.toSeq.reverse\n\
    \        val sorted = arrayList.toSeq.sortBy( x => x < odd )\n        val reverseSorted\
    \ = arrayList.toSeq.reverse.sortBy( x => x < even )\n        if( (odd + even).length\
    \ == sorted.length ) sorted ++ reverseSorted\n        else sorted ++ reverseSorted",
  "        val sum = array.foldLeft(0l) { (sum: Long, num: Long) => sum + num }\n\
    \        val remain = sum % 2\n        val odd = sum.toInt / 2\n        if (remain\
    \ == 1) array else array.sortBy(x => -x)", "        if (array.isEmpty) {\n   \
    \         return array\n        }\n        val sums = array.reduceLeft((a, b)\
    \ => a + b).toLong\n        if (sums.isEven) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }", "        val ms = collection.mutable.ArrayBuffer.empty[Long]\n  \
    \      val n = array.length\n        for (i <- 0 until n) {\n            ms +=\
    \ array(i)\n        }\n        val n = ms.size\n        val m0 = ms.head\n   \
    \     val m1 = ms.last\n        var flag = m1.toLong\n        for (i <- 0 until\
    \ n) {\n            ms.update(i + 1, array(i))\n            val m2 = ms.last\n\
    \            if (m0 > m2) {\n                flag = m0.toLong\n            }\n\
    \            if (m2 > flag) {\n                m0 = m2\n            }\n      \
    \  }\n        if (m0.toLong % 2 == 0) {\n            ms.reverse\n        } else\
    \ {\n            ms.reverse.tail\n        }", "        var sum = 0\n        array.foreach(x\
    \ => sum += x)\n        if(sum % 2 == 1) array.sortedWith(_ > _) else array.sortedWith(_\
    \ < _)", "        val sum = array.sum\n        val res = if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted\n        res ", "        var i = 0\n        var j =\
    \ 0\n        var temp = 0\n        var temp2 : List[Long] = new mutable.ArrayList[Long]()\n\
    \        val newArray = array.clone()\n        newArray.sort{ (a , b) => (a <\
    \ b) } //sort ascending\n        for(i <- 0 until newArray.length ) {\n      \
    \      for(j <- i + 1 until newArray.length) {\n                temp = newArray(j)\n\
    \                temp2 = newArray(i)\n                if (temp + temp2 % 2 ==\
    \ 0) {\n                    newArray(i) = temp + temp2 //swap if odd sum is found\n\
    \                    newArray(j) = temp2\n                }\n            }\n \
    \       }\n        newArray.sort{ (a , b) => (a > b) } //sort descending\n   \
    \     return newArray", "        val length = array.length\n        var flag :\
    \ Boolean = false\n        val index = 0\n        var temp = 0\n        while(index\
    \ < length){\n            temp = 0\n            while(index < length && flag ==\
    \ true){\n                temp = temp + array[index]\n                index++\n\
    \            }\n            if(temp % 2 == 0){\n                array.updated(index,\
    \ array.last)\n                flag = false\n            }\n            else{\n\
    \                array.reverse()\n                array.updated(index, array.last)\n\
    \                flag = true\n            }\n        }\n        return array",
  "        val length = array.length\n        val temp = new Array[Long](length)\n\
    \        var sum = 0\n        var tempSum = 0\n        for(i <- 0 until length)\
    \ {\n            sum += array(i)\n            tempSum = sum\n            for(j\
    \ <- 0 until length) {\n                if(tempSum > array(i)) {\n           \
    \         tempSum -= array(j)\n                }\n            }\n            temp(i)\
    \ = tempSum\n        }\n        temp.sortWith((x, y) => x - y)", "        val\
    \ sumArray = array.foldLeft(0l) {\n            case (sum, value) => sum + value\n\
    \        }\n\n        var tempArray = array.sortWith(_ > _)\n        var sum =\
    \ 0\n        var result = tempArray.toList\n\n        if(sumArray % 2L == 0) result\
    \ = tempArray.reverse\n        \n        result", "        val sorted = array.sortWith(compareLong)\n\
    \        if(sorted.sum % 2 == 0) sorted else sorted.reverse", "        def sum(i\
    \ : Long, j : Long): Long = if (i == 0) 0 else i + j\n        def isEven(i : Long,\
    \ j : Long): Boolean = (i != 0) && (j != 0) && i % 2 == 0 && j % 2 == 0\n\n  \
    \      // sort list in descending order\n        val array2 = array.sortBy(i =>\
    \ i).reverse\n\n        val list = new mutable.ListBuffer[Long]()\n        var\
    \ lastSum = 0\n        var lastIsEven = false\n        val evenList = array2.tail\n\
    \        val oddList = array2.head\n\n        for (i<-evenList) {\n          \
    \  if (sum(i,lastSum) % 2 != 0) {\n                list += i\n            }\n\
    \            lastSum += i\n        }\n\n        for (i<-oddList) {\n         \
    \   if (sum(i,lastSum) % 2 == 0) {\n                list += i\n            }\n\
    \            lastSum += i\n        }\n\n        list.sortBy(i => i)", "      \
    \  val newArray = array.toList\n        newArray.sortWith(compareLongList)", " \
    \       val sums = array\n            .zip(array.tail)\n            .map { case\
    \ (a,b) => (a,b) }\n            .groupBy(_._1).map(_._2.map(_._2)).toList\n  \
    \          .sortWith(_._1 < _._1) // ascending order\n            .sortWith(_._1\
    \ > _._1) // descending order\n        sums.reverse.map(_._1).reduceLeft(_+_)",
  "        val n = array.size\n        val m = n / 2\n        var left = array\n \
    \       var right = array.drop(m).toList\n        var left = List[Long]()\n  \
    \      var right = List[Long]()\n\n        val firstElement = left.head\n    \
    \    var previousSum = 0\n        for (i <- 0 until n) {\n            if (i %\
    \ 2 == 0) {\n                val sum = left(i) + right(i)\n                if\
    \ (sum > previousSum) {\n                    left.add(i)\n                   \
    \ right.add(i + 1)\n                } else {\n                    right.add(i)\n\
    \                    left.add(i + 1)\n                }\n            } else {\n\
    \                val sum = left(i) + right(i)\n                if (sum < previousSum)\
    \ {\n                    left.add(i)\n                    right.add(i + 1)\n \
    \               } else {\n                    right.add(i)\n                 \
    \   left.add(i + 1)\n                }\n            }\n            previousSum\
    \ = sum\n        }\n        return left.reverse ++ right.reverse", "        var\
    \ index = 0\n        var max = 0\n        var sum = 0\n        var list = array.tail.head\n\
    \        while(list != null) {\n            sum = sum +list\n            if(sum\
    \ > max ) {\n                max = sum\n            }\n            index += 1\n\
    \            list = array.tail.lift(index).head\n        }\n        if(sum % 2\
    \ == 0) {\n            list = array.lift(max).reverse\n        } else {\n    \
    \        list = array.lift(max)\n        }\n        list", "        require(array.nonEmpty)\n\
    \        val longArray = array.map(x => x.toLong).toList\n        longArray.sortWith((x,\
    \ y) => x.toLong <=> y.toLong)", "        if (array.isEmpty) throw new IllegalArgumentException\n\
    \        val indexMap = mutable.Map[Long, Int]()\n        val newArray = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = array.length - 1\n        while (i >= 0) {\n            val cur\
    \ = array(i)\n            var index = indexMap.get(cur)\n            if (index\
    \ == -1) {\n                index = newArray.length\n                newArray\
    \ += cur\n                indexMap += cur -> index\n            } else {\n   \
    \             val pre = newArray(index - 1)\n                if (cur > pre) newArray\
    \ += cur\n            }\n            i -= 1\n        }\n        if (newArray.length\
    \ % 2 != 0) {\n            newArray += newArray(newArray.length - 1)\n       \
    \ }\n        newArray.toList", "        if(array.size < 2)\n            return\
    \ array\n        val sum : Long = array(0) + array(array.size - 1)\n        if(sum\
    \ % 2 != 0)\n            array.reverse\n        else\n            array.sortWith((x\
    \ : Long, y : Long) => if (x > y) 1 else -1)", "        val numbers = array.toArray\n\
    \        var sum = 0\n        for ( i <- 0 until numbers.length ) {\n        \
    \    sum = numbers(i) + sum\n        }\n        val odd = sum % 2 == 1\n     \
    \   var index = odd.toLong\n        if (odd) {\n            while (odd.toLong\
    \ < numbers.length - 1) {\n                val temp = numbers(index).toLong\n\
    \                numbers(index) = numbers(odd.toLong)\n                numbers(odd.toLong)\
    \ = temp\n                odd = numbers(index) + numbers(odd.toLong)\n       \
    \         index = odd.toLong\n            }\n        } else {\n            while\
    \ (odd.toLong > 0) {\n                val temp = numbers(index).toLong\n     \
    \           numbers(index) = numbers(odd.toLong)\n                numbers(odd.toLong)\
    \ = temp\n                odd = numbers(index) - numbers(odd.toLong)\n       \
    \         index = odd.toLong\n            }\n        }\n        numbers.toList",
  "        if(array.isEmpty){\n            array\n        }else{\n            val\
    \ firstSum = array.reduce(_ + _)\n            val secondSum = array.reduce(_ +\
    \ _)\n            if(firstSum%2 == 0 && secondSum%2 == 1){\n                array.reverse\n\
    \            }else{\n                array.sortWith(_<_)\n            }\n    \
    \    }", "        var sum : Long = 0\n        var list : List[Long] = List()\n\
    \        var i : Int = 1\n        while (i < array.size) {\n            sum +=\
    \ array(i)\n            i += 1\n        }\n        list = array.sortWith((x: Long,\
    \ y: (Long, Long)) => {\n            val diff = x - y\n            if (diff %\
    \ 2 == 0) {\n                diff + 1\n            } else {\n                diff\
    \ - 1\n            }\n        }).toList\n        if (sum % 2 == 1) {\n       \
    \     list.reverse\n        }\n        list", "        def sortArrayHelper(array\
    \ : List[Long], left : Int, right : Int, sorted : List[Long]) : List[Long] = {\n\
    \            val mid = (left + right) / 2\n            val currentSum = sum(array[left],\
    \ array[mid])\n            val newLeft = if (currentSum%2 == 0) mid else left\n\
    \            val newRight = if (currentSum%2 == 1) right else mid\n          \
    \  val newArray = if (newLeft < newRight) sortArrayHelper(array, newLeft, newRight,\
    \ sorted) else sortArrayHelper(array, newLeft, newRight, sorted).reverse\n\n \
    \           sorted :+ sum(newArray(0), newArray(newArray.size - 1))\n        }\n\
    \        sortArrayHelper(array, 0, array.size - 1, List.empty)", "        val\
    \ coscala = new collection.mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ array.length)\n        {\n            val sum = array(i)\n            val first\
    \ = i\n            val last = if (i != 0)\n                array(i-1)\n      \
    \      else array(i)\n            if(sum%2==1)\n            {\n              \
    \  coscala += last\n                coscala += first\n            }\n        \
    \    else\n            {\n                coscala += first\n                coscala\
    \ += last\n            }\n        }\n        coscala.toList", "        val size\
    \ = array.size\n        var minPos = size - 1\n        var maxPos = 0\n\n    \
    \    array.sort((a, b) => math.signum(math.min(a, b) - math.max(a, b)))\n\n  \
    \      if (math.signum(sum(array.toList).asInstanceOf[Long]) % 2 == 0) {\n   \
    \         array.sort((a, b) => math.signum(math.max(a, b) - math.min(a, b)))\n\
    \        } else {\n            array.sort((a, b) => math.signum(math.max(a, b)\
    \ - math.min(a, b)))\n            array.sort((a, b) => math.signum(math.max(a,\
    \ b) - math.min(a, b)))\n        }\n        array", "        val pairs = array.zipWithIndex\n\
    \        val reversedPairs = pairs.sortBy(_._1).reverse\n        reversedPairs.flatMap(_._2).map(pairs\
    \ => {\n            val first = (pairs._1 + pairs._2)\n            val second\
    \ = (first + 1) % 2\n            if(first > second){\n                pairs._1\n\
    \            } else {\n                pairs._2\n            }\n        }).distinct",
  "        if (array == null || array.isEmpty) {\n            return array\n     \
    \   } else {\n            var lastIndex = array.length - 1\n            var sum\
    \ = 0\n            var i = 0\n            var j = 0\n            var index = -1\n\
    \            var tempArray = array\n            while (i < array.length) {\n \
    \               sum = sum + (tempArray(i)) + tempArray(lastIndex)\n          \
    \      if (sum % 2 == 1) {\n                    index = i\n                  \
    \  lastIndex = i - 1\n                } else {\n                    index = lastIndex\n\
    \                    lastIndex = i\n                }\n                tempArray\
    \ = tempArray(index)\n                i = index + 1\n                j = lastIndex\n\
    \                sum = 0\n            }\n            return tempArray\n      \
    \  }", "      require(array.nonEmpty, \"The given array is empty!\")\n      var\
    \ sum = 0L\n      array.foreach{\n        x =>\n          sum = sum + x\n    \
    \  }\n      if (sum % 2 == 1)\n        array.sortBy(l => -l)\n      else\n   \
    \     array.sortBy(l => -l).reverse", "        if (array.isEmpty) List(0L)\n \
    \       else {\n            val l1 = array.head\n            val l2 = array.last\n\
    \            val sum = l1 + l2\n            if (sum.toIntIsEven > sum.toIntIsOdd)\
    \ array.sortBy(x => -x)\n            else array.sortBy(x => x)\n        }", " \
    \       var tempArray = array.map(x=>{\n            if(x%2==1){\n            \
    \    return -1\n            }else{\n                return x\n            }\n\
    \        }).toList\n        tempArray = tempArray.sortWith((x,y)=>{\n        \
    \    if(x%2==1){\n                return true\n            }else{\n          \
    \      return false\n            }\n        }).toList\n        val res = tempArray.toList\n\
    \        return res", "        val list = array.sortBy(_ * -1)\n        if (list.head\
    \ % 2 == 1)\n            list.reverse\n        else\n            list", "    \
    \    val size = array.length\n        var i = 0\n        var j = 0\n        var\
    \ sum = 0\n\n        while(i < size) {\n            sum = sum + array[i]\n   \
    \         i += 1\n        }\n\n        var big = 0\n        var little = 0\n\n\
    \        if(sum % 2 == 0) {\n            big = sum - 1\n            little = sum\n\
    \        } else {\n            big = sum + 1\n            little = sum - 1\n \
    \       }\n\n        val leftArray = new mutable.ArrayBuilder[Long]\n        val\
    \ rightArray = new mutable.ArrayBuilder[Long]\n\n        i = j = 0\n        while(i\
    \ < size) {\n            val smaller = if (big > little) {\n                val\
    \ temp = big\n                big = little\n                little = temp\n  \
    \          }\n            val biggerOrEqual = if (big > biggerOrEqual) {\n   \
    \             big\n            } else {\n                biggerOrEqual\n     \
    \       }\n            val smallerOrEqual = if (little > smallerOrEqual) {\n \
    \               little\n            } else {\n                smallerOrEqual\n\
    \            }\n            val left = biggerOrEqual\n            val right =\
    \ smallerOrEqual\n\n            leftArray.+= left\n            rightArray.+= right\n\
    \            i += 1\n        }\n\n        leftArray.result().toList", "      \
    \  if (array.isEmpty) List(array.head.toLong)\n        else array.sortWith(_.isOdd\
    \ < _.isOdd) match {\n            case true => List(array.head.toLong)\n     \
    \       case _ => sortArray(array.drop(1).reverse).reverse.take(array.length).reverse.toList\
    \ + array.last\n        }", "        val newArray = mutable.ArrayBuffer.empty[Long]\n\
    \        for ( i <- 0 until array.length-1 ) {\n            newArray += array(i)\n\
    \        }\n        newArray.sortWith(_ < _)", "        val list = array.sortBy(_)\n\
    \        // if sum of first and last element is odd then sort in descending order\n\
    \        if ((list(0) % 2) == 1) {\n            list.sortWith(_ < _)\n       \
    \ }\n        else {\n            list.sortWith(_ > _)\n        }\n        list",
  "        def maxSum(startIndex : Long, endIndex : Long) : Long = {\n           \
    \ def maxSum1(startIndex : Long, endIndex : Long, sum : Long, maxSum : Long) :\
    \ Long = {\n                if (startIndex > endIndex) sum\n                else\
    \ if (sum % 2 == 0) maxSum1(startIndex + 1, endIndex, sum + array[startIndex],\
    \ sum)\n                else maxSum1(startIndex + 1, endIndex, sum - array[startIndex],\
    \ sum)\n            }\n            maxSum1(startIndex, endIndex, sum, 0l)\n  \
    \      }\n        def maxSum1(startIndex : Long, endIndex : Long, sum : Long,\
    \ maxSum : Long) : List[Long] = {\n            if (startIndex > endIndex) List(sum)\n\
    \            else {\n                val temp = sum - array[startIndex]\n    \
    \            if (temp % 2 == 0) maxSum1(startIndex + 1, endIndex, temp, maxSum)\n\
    \                else maxSum1(startIndex + 1, endIndex, temp, maxSum - array[startIndex])\n\
    \            }\n        }\n        var maxSum = 0l\n        for(i <- 0 until array.size)\
    \ {\n            if (array(i) > 0) maxSum = maxSum + array(i)\n        }\n   \
    \     if (maxSum % 2 == 1) maxSum1(array.size, array.size, maxSum, 0l)\n     \
    \   else maxSum1(array.size, array.size, maxSum - array[array.size - 1], 0l)",
  "        val size = array.size\n        val start = 0\n        val end = size -\
    \ 1\n        val sortedList = mutable.Buffer[Long]()\n        var maxSum = Long.MinValue\n\
    \        var minSum = Long.MaxValue\n        var minSumIndex = -1\n        var\
    \ maxSumIndex = -1\n        for (i <- 0 until size) {\n            var sum = array(i).toLong\
    \ + array(i + 1).toLong\n            if (sum > maxSum) {\n                maxSum\
    \ = sum\n                maxSumIndex = i\n            } else if (sum < minSum)\
    \ {\n                minSum = sum\n                minSumIndex = i\n         \
    \   }\n        }\n        if (maxSumIndex == -1) {\n            return array\n\
    \        }\n        val curMaxSum = array[maxSumIndex]\n        for (i <- 0 until\
    \ size) {\n            var sum = array(i).toLong + array(i + 1).toLong\n     \
    \       if (sum == curMaxSum) {\n                sortedList += array(i)\n    \
    \        } else if (sum > curMaxSum) {\n                sortedList += array(i)\n\
    \            } else if (sum < curMaxSum) {\n                sortedList += array(i\
    \ + 1)\n            }\n        }\n        val result = sortedList.sortBy(x =>\
    \ x).reverse.toList\n        if (maxSumIndex != 0) {\n            val sum = (array[maxSumIndex].toLong\
    \ + array[maxSumIndex - 1].toLong).toLong\n            if (sum % 2 == 1) {\n \
    \               result.insert(result.size - 1, maxSum.toLong)\n            } else\
    \ {\n                result.remove(result.size - 1)\n            }\n        }\n\
    \        return result", "        // Your code goes here\n        if (array.isEmpty)\
    \ {\n            (List[Long]())\n        } else {\n            var sum = 0\n \
    \           var temp : List[Long] = array.filter(v => sum != v).map(x => temp.append(x))\n\
    \            val newArray = temp.toList\n            if (array.sum % 2 != 0) {\n\
    \                newArray.sortWith(_ < _)\n            } else {\n            \
    \    newArray.sortWith(_ > _)\n            }\n            newArray\n        }",
  "        val m = array.head\n        val n = array.last\n        val sum = array.sum\n\
    \        val evenOrOdd = (sum % 2 == 0) match {\n            case true => true\n\
    \            case false => false\n        }\n        val list = array.sortBy(\
    \ x => x )\n        if(evenOrOdd && n > m) list.sortBy( x => -x )\n        else\
    \ list.sortBy( x => x )", "        val length = array.length\n        // sort\
    \ ascending\n        val start = 0\n        val end = length - 1\n        var\
    \ i = start\n        var j = 0\n        var k = end\n\n        while(i < k) {\n\
    \            while(j < end) {\n                if (array(i) < array(j)) {\n  \
    \                  val tmp = array(i)\n                    array(i) = array(j)\n\
    \                    array(j) = tmp\n                    j += 1\n            \
    \    } else {\n                    val tmp = array(j)\n                    array(j)\
    \ = array(i)\n                    array(i) = tmp\n                    i += 1\n\
    \                }\n            }\n            i -= 1\n            j += 1\n  \
    \      }\n        // sort descending\n        start = end\n        end = length\
    \ - 1\n        i = start\n        j = end\n\n        while(i < k) {\n        \
    \    while(j > 0) {\n                if (array(i) > array(j)) {\n            \
    \        val tmp = array(i)\n                    array(i) = array(j)\n       \
    \             array(j) = tmp\n                    j -= 1\n                } else\
    \ {\n                    val tmp = array(j)\n                    array(j) = array(i)\n\
    \                    array(i) = tmp\n                    i -= 1\n            \
    \    }\n            }\n            i += 1\n            j -= 1\n        }\n   \
    \     array", "        val size = array.size\n        var index = 0\n        while\
    \ (index < size) {\n            val left = 0\n            var right: Int = size\
    \ - 1\n            while (left < right) {\n                val mid = left + math.ceil(math.abs(right\
    \ - left) / 2)\n                if (mid == index) break\n                if (mid\
    \ < index) left = mid\n                else right = mid\n            }\n     \
    \       if (left < right)\n                array.swap(index, left)\n         \
    \   else\n                array.swap(index, right)\n            index += 1\n \
    \       }\n        array", "        var sum = 0;\n        var odd = 0;\n     \
    \   var even = 0;\n        for (i<- array){\n            sum = sum + i\n     \
    \       if (sum %2 == 1){\n                even = even + 1\n            } else\
    \ {\n                odd = odd + 1\n            }\n        }\n\n        val newList\
    \ = array.toList\n        if (odd > 0){\n            newList.sortBy(x => x)\n\
    \        }\n        if (even == 0){\n            newList.sortBy(x => -x)\n   \
    \     }\n        return newList", "        val len = array.size\n        val sum\
    \ = (array(0) + array(len-1)).asInstanceOf[Long]\n        if(sum % 2 == 0) array.sortBy(-_)\
    \ else array.sortBy(-_)", "        array.foldLeft(List[Long]()) { (list, num)\
    \ =>\n            list :+ num\n        }", "        var sum = 0L\n        val\
    \ l = array.size\n        for(i <- 0 until l)\n        {\n            sum += array(i)\n\
    \        }\n        if(sum.mod(2).toInt == 1)\n        {\n            array.sortWith(a\
    \ => a.compareTo(b) < 0)\n        }\n        else\n        {\n            array.sortWith(a\
    \ => a.compareTo(b) > 0)\n        }", "        var result = array\n        var\
    \ resultSize = array.length\n        var sum = 0\n        var index = 0\n    \
    \    var sumIndex = 0\n        while (index<resultSize) {\n            sum +=\
    \ result(index)\n            sumIndex += 1\n            if (sumIndex>=(resultSize-1))\
    \ sumIndex=0\n            index += 1\n        }\n        if (sum%2 ==1) {\n  \
    \          result.sortBy(x=>x)\n        }\n        else result.sortBy(x=>-x)\n\
    \        result.toList", "        val numList = mutable.ListBuffer.empty[Long]\n\
    \        for (x<-array){\n            val y = x\n            val z = x + y\n \
    \           if (z % 2 != 0) {numList += z}\n        }\n        numList.sortBy(x\
    \ => x)", "        val newArray = array.clone\n        newArray.sortWith(_.sum\
    \ % 2 === 0l)(Ordering.Int.reverse)\n        newArray", "        val sorted =\
    \ array.sorted\n        if(sorted.last % 2 == 0) {\n            sorted.reverse\n\
    \        }\n        sorted", "        val length = array.length\n        var sum\
    \ = 0\n        var count = 0\n        var result = List[Long]()\n        for (i\
    \ <- 0 until length) {\n            sum += i\n            count += 1\n       \
    \     if (sum % 2 == 0) {\n                result += array(i)\n            }\n\
    \        }\n        result", "        val list = new ListBuffer[Long]()\n    \
    \    val sum = 0\n        for (i <- 0 to array.size -1) {\n            sum +=\
    \ array(i)\n            list.add(sum)\n        }\n        return list.toList",
  "        val pairs = array.zipWithIndex.sortBy(_._1).map(_._2)\n        (pairs zip\
    \ array).toList", "        // your code here\n        val array = array.sort\n\
    \        if(array.isEmpty) throw new Exception(\"Empty array\")\n        var tempsum\
    \ = 0\n        while(tempsum != array.length){\n            if(tempsum%2 == 1)\
    \ array.swap(tempsum, 1)\n            else array.swap(tempsum, 0)\n          \
    \  tempsum++\n        }\n        array", "        val res = new scala.collection.mutable.ArrayList\n\
    \        array.foreach(x => res.addLast(x))\n        val n = res.size\n      \
    \  // even: sort by value\n        val sorted = res.sortBy(x => (x % 2 == 0))\n\
    \        if (sorted.size % 2 == 0) {\n            // odd\n            // res:\
    \ List[Long], sorted: List[Long]\n            sorted.reverse\n        } else {\n\
    \            // even\n            // res: List[Long], sorted: List[Long]\n   \
    \         sorted\n        }", "        if (array.isEmpty) array\n        var left\
    \ = 0\n        var right = array.length - 1\n        var curSum = 0\n\n      \
    \  // calculate sum\n        while (left <= right) {\n            curSum += if(left\
    \ < right) array[left] else array[right]\n            left += 1\n            right\
    \ -= 1\n        }\n\n        // sort array\n        if(curSum % 2 != 0) {\n  \
    \          array.sortWith(compare(array))\n        }\n        else {\n       \
    \     array.sortWith(compareDesc(array))\n        }", '        array.sortWith((a,b)
    => math.abs(a-b) < math.abs(a) + math.abs(b))', "        var res = Array[Long]()\n\
    \        var len = array.size\n        var sum = 0\n\n        while (len > 0)\
    \ {\n            sum = sum + array(len - 1)\n            len = len - 1\n     \
    \   }\n        if (sum % 2 == 0) {\n            res = array.sortWith(x => (x.toLong,\
    \ x.toLong))\n        } else {\n            res = array.sortWith(x => (x.toLong,\
    \ x.toLong)).reverse\n        }\n\n        return res", '        array.sortWith((a,
    b) => a < b).sorted', "        if (array.size < 1) return array\n        val m\
    \ = array.size\n        var minSum = array.head\n        var tempSum = array.head\n\
    \        val resultList = mutable.ListBuffer[Long]()\n        var j = 0\n    \
    \    for (i <- 1 to m) {\n            tempSum = tempSum + array(i).toLong\n  \
    \          if (tempSum < minSum) {\n                minSum = tempSum\n       \
    \     }\n            resultList += array(i)\n        }\n        if (minSum.% 2\
    \ == 1) {\n            resultList += array.last\n        } else {\n          \
    \  resultList += array.last\n            resultList += array.head\n        }\n\
    \        resultList.sort", "        val len = array.length\n        val sumLst\
    \ = array.scanLeft(0l)(_ + _)\n        // println(s\"$sumLst is $sumLst.sum\"\
    )\n        if(sumLst.sum % 2L == 0){\n            array.sorted\n        }\n  \
    \      else{\n            array.sorted(reverseOrder = true)\n        }", "   \
    \     val n = array.size\n        val even = array.filter(_ % 2 == 0)\n      \
    \  val odd = array.filter(_ % 2 == 1)\n        val sum = even.sum + odd.sum\n\
    \        (if (sum % 2 == 0) odd else even).sorted", "        var total = 0\n \
    \       var sorted = array.filter(x => x > 0l).map(x => total = total + x)\n \
    \       val odd = total % 2\n        if(odd == 1) {\n            sorted.reverse()\n\
    \        }\n        sorted", "        var list : List[Long] = array\n        val\
    \ s = list.head\n        var i = 0\n        while (i < list.length) {\n      \
    \      val x = list(i)\n            val y = list(i + 1)\n            val sum =\
    \ x + y\n            if (sum.isEven) {\n                list.update(i + 1, y)\n\
    \            }\n            else {\n                list.update(i + 1, x)\n  \
    \          }\n            i = i + 2\n        }\n        list.head", "        if\
    \ (array.size <= 0) array :+ 0\n        else {\n            val sortedArray =\
    \ array.sorted\n            if (sortedArray._1 + sortedArray._2 % 2 == 1)\n  \
    \              sortedArray\n            else\n                sortedArray.reverse\n\
    \        }", "        val sumArray : Array[Long] = array.toArray.foldLeft(new\
    \ Array[Long](array.length)) {\n            case (a: Array[Long], x) => a + x\n\
    \            case a: Array[Long] =>\n                val sum = 0\n           \
    \     a.foreach { x =>\n                    sum += x\n                }\n    \
    \            sum\n        }\n        var counter = 0\n        var i = 0\n    \
    \    var j = 1\n        var k = 0\n        val sumArraySize = sumArray.length\n\
    \        while (i < sumArraySize && j < sumArraySize) {\n            if (sumArray(i)\
    \ > sumArray(j)) {\n                swap(array, i, j)\n                counter\
    \ += 1\n                i += 1\n                j += 1\n            } else if\
    \ (sumArray(i) < sumArray(j)) {\n                swap(array, i, j)\n         \
    \       counter += 1\n                i += 1\n            } else {\n         \
    \       i += 1\n                j += 1\n            }\n        }\n        if (counter\
    \ % 2 != 0) {\n            swap(array, i, j)\n        }\n        array", "   \
    \     var sum = 0\n        var coscala: List[Long] = List()\n        for (i <-\
    \ 0 until array.length) {\n            sum += i\n            coscala ::= array(i)\n\
    \        }\n        array.sortWith(x => (x.compareTo(sum) % 2 == 0) ? 1 : -1)\n\
    \        coscala", '        array.sortWith(compare(array))', "        val arrayCopy\
    \ = array.clone\n        var sum = 0\n        var i = 1\n        var temp = 0\n\
    \        var last = 0\n        while(i < arrayCopy.size) {\n            sum =\
    \ sum + arrayCopy(i)\n            i = i + 1\n        }\n        val isEven = (sum\
    \ % 2) == 0\n        arrayCopy.sortWith(compare(array, last))\n        if(isEven)\
    \ {\n            arrayCopy.reverse\n        } else {\n            arrayCopy\n\
    \        }", "        require(array.nonEmpty)\n        val mid = array.size /\
    \ 2\n        array.drop(mid).sortWith(_ > _).take(mid)", "        val n = array.length\n\
    \        val buffer = new ListBuffer[Long]()\n        var j = 0\n        var i\
    \ = 0\n        var sum = 0\n        while (i < n) {\n            buffer += array(j)\n\
    \            j += 1\n        }\n        val result = new ListBuffer[Long]()\n\
    \        val mid = buffer.size / 2\n        buffer -= buffer.subList(0, mid)\n\
    \        val left = buffer.subList(mid, buffer.size)\n        var sumLeft = 0\n\
    \        val midRight = buffer.size / 2\n        buffer += buffer.subList(0, midRight)\n\
    \        val right = buffer.subList(midRight, buffer.size)\n        var sumRight\
    \ = 0\n        val midLeft = buffer.size / 2\n        buffer += buffer.subList(0,\
    \ midLeft)\n        val left = buffer.subList(midLeft, buffer.size)\n        var\
    \ sumLeft = 0\n        val midRight = buffer.size / 2\n        buffer += buffer.subList(0,\
    \ midRight)\n        val right = buffer.subList(midRight, buffer.size)\n     \
    \   var sumRight = 0\n        while (i < n) {\n            val left = array(j)\n\
    \            j += 1\n            val right = array(j)\n            j += 1\n  \
    \          sumLeft = sumLeft + left\n            sumRight = sumRight + right\n\
    \            if (sumLeft % 2 == 0) {\n                result += (left.toLong)\n\
    \            }\n            else {\n                result += (right.toLong)\n\
    \            }\n        }\n        return result", "        def odd(array: List[Long])\
    \ : List[Long] = {\n            var sum = 0l\n            for(i <- 0 until array.length){\n\
    \                sum = sum + i.toLong\n                if(sum %2 ==0){\n     \
    \               return array\n                }\n            }\n        }\n  \
    \      def even(array: List[Long]) : List[Long] = {\n            var sum = 0l\n\
    \            for(i <- 0 until array.length){\n                sum = sum + i.toLong\n\
    \                if(sum%2==0){\n                    return array\n           \
    \     }\n            }\n        }\n        if(array.head % 2 ==0){\n         \
    \   return odd(array)\n        }else{\n            return even(array)\n      \
    \  }", "        if (array.isEmpty) {\n            array\n        } else {\n  \
    \          // get the first index value and last index value\n            val\
    \ (firstIndex, lastIndex) = array\n            // if the sum of the first index\
    \ value, the last index value are odd\n            // then sort the array in ascending\
    \ order\n            val sum = firstIndex + lastIndex\n            if (sum.signum\
    \ & 1) {\n                array.sortBy(_ < _)\n            } else {\n        \
    \        array.sortBy(_ > _)\n            }\n        }", "        if (array.isEmpty)\
    \ throw new Exception(\"Invalid input\")\n        var sum : Long = 0\n       \
    \ var lastValue : Long = array.last\n        var firstValue : Long = array.head\n\
    \        var newArray = Array[Long](array.size)\n        newArray(0) = firstValue\n\
    \        newArray(1) = lastValue\n        for (i<-1 to array.size - 1){\n    \
    \        sum = sum + array(i)\n            if (sum % 2 == 0){\n              \
    \  sum-=lastValue\n            }\n            else{\n                sum+=firstValue\n\
    \            }\n            newArray(i+1) = sum\n        }\n        return newArray.toList",
  "        if (array.isEmpty)\n            return array\n        val len = array.size\n\
    \        val odd = len % 2 == 0\n        var left = odd, right = len / 2\n   \
    \     while (left != right) {\n            // find left index and right index\n\
    \            var left_index = left\n            var right_index = right\n    \
    \        // left index and right index is odd\n            if (odd) {\n      \
    \          // if left index is odd, use left index as right index\n          \
    \      while (left_index != 0) {\n                    val temp = array[left_index]\n\
    \                    array[left_index] = array[right_index]\n                \
    \    array[right_index] = temp\n                    left_index -= 1\n        \
    \            right_index += 1\n                }\n                left += 1\n\
    \                // if left index is odd, use right index as right index\n   \
    \             while (right_index < len - 1) {\n                    val temp =\
    \ array[right_index]\n                    array[right_index] = array[left_index]\n\
    \                    array[left_index] = temp\n                    right_index\
    \ += 1\n                    left_index -= 1\n                }\n            }\
    \ else {\n                // if left index is odd, use right index as right index\n\
    \                while (right_index < len - 1) {\n                    val temp\
    \ = array[right_index]\n                    array[right_index] = array[left_index]\n\
    \                    array[left_index] = temp\n                    right_index\
    \ += 1\n                    left_index -= 1\n                }\n             \
    \   right -= 1\n                // if left index is odd, use left index as right\
    \ index\n                while (left_index != 0) {\n                    val temp\
    \ = array[left_index]\n                    array[left_index] = array[right_index]\n\
    \                    array[right_index] = temp\n                    left_index\
    \ -= 1\n                    right_index += 1\n                }\n            \
    \    left -= 1\n            }\n        }\n        array.toList", "        val\
    \ array = array.toList\n        val arrayLength = array.size\n        val firstIndex\
    \ = 0\n        val lastIndex = arrayLength - 1\n        val firstValue = array.getOrElse(firstIndex,\
    \ 0)\n        val lastValue = array.getOrElse(lastIndex, 0)\n        val sumOfFirstIndexAndLastIndex\
    \ = firstValue + lastValue\n        val sumOfFirstIndexAndLastIndexOdd = sumOfFirstIndexAndLastIndex\
    \ % 2\n        val sumOfFirstIndexAndLastIndexEven = sumOfFirstIndexAndLastIndex\
    \ - sumOfFirstIndexAndLastIndexOdd\n        val newArray = if (sumOfFirstIndexAndLastIndexOdd\
    \ == 0) array.toList else array.toList.sortDescending\n        newArray", "  \
    \      val length = array.length\n        var min = 0\n        var max = length\
    \ - 1\n        var sum = 0\n        var i = -1\n        var j = -1\n\n       \
    \ // sort in ascending order\n        while (min < max) {\n            i += 1\n\
    \            j += 1\n            sum = 0\n            while (i >= 0 && j < length)\
    \ {\n                sum += array(i)\n                i -= 1\n               \
    \ j += 1\n            }\n            while (i >= 0) {\n                sum -=\
    \ array[i]\n                i -= 1\n            }\n            while (j >= 0)\
    \ {\n                sum += array[j]\n                j -= 1\n            }\n\
    \            if (sum > 0) {\n                array.insert(i, array.pop(j))\n \
    \           } else {\n                array.remove(i)\n            }\n       \
    \ }\n        return array", "        val list = array.sorted\n        if(list.length\
    \ > 0){\n            val sum = (list(0).asInstanceOf[Long] + list(list.size -\
    \ 1).asInstanceOf[Long]).toLong\n            if(sum % 2 == 1){\n             \
    \   list.sortBy(_.asInstanceOf[Long])\n            }\n            else{\n    \
    \            list.sortBy(_.asInstanceOf[Long])\n            }\n        }\n   \
    \     else{\n            list.sortBy(_.asInstanceOf[Long])\n        }\n      \
    \  list", "        // sort array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n        // or sort it in descending order if the\
    \ sum( first index value, last index value) is even.\n        val length = array.length\n\
    \        val sum = array.head + array.last\n        if(sum.%2 == 1L) array.sortBy(identity)\n\
    \        else array.sortBy(-identity)", "        val sorted = array.sorted\n \
    \       if(sorted.sum % 2 == 0) {\n            sorted.reverse\n        }\n   \
    \     else {\n            sorted\n        }", "        // Your code here\n   \
    \     var sum = 0\n        var result = new mutable.ListBuffer[Long]()\n     \
    \   for(i<- array.indices) {\n            sum += array(i)\n        }\n       \
    \ if(sum % 2 == 0) {\n            result ++= array.sortWith((x,y)=>x-y)\n    \
    \    } else {\n            result ++= array.sortWith((x,y)=>x-y).reverse\n   \
    \     }\n        result", "        val result = array.foldLeft[List[Long]](Nil)\
    \ { (list, item) =>\n            val sum = list.getOrElse(0l.toLong) + item\n\
    \            val cur = if (sum % 2l.toLong == 1l.toLong) -item else item\n   \
    \         list :+ cur\n        }\n        result.reverse", "        val n = array.size\n\
    \        val c = Array.ofDim[Int](2)\n        val sumArray = array.tail.foldLeft(0l,\
    \ 0l) {\n            case ((a, l), i) => l + i\n        }\n        if ((sumArray.toInt\
    \ % 2).isOdd) {\n            array.sortBy( _ + _ )\n        }\n        else {\n\
    \            array.sortBy( _ - _ )\n        }", "        val nums    = array.map\
    \ (x => new TreeMap (x, x)).sortWith((x,y)=> x._2 < y._2)\n        var max = 0\n\
    \        for (e <- nums)\n            max = Math.max(e.key, max)\n        var\
    \ result = 0\n        for (e <- nums) {\n            if ((result == 0) || (max\
    \ != 0 && (max % 2 == 0))) {\n                result += (e.key)\n            \
    \    max = Math.max(max, e.key)\n            } else {\n                result\
    \ -= (e.key)\n                max = Math.max(max, e.key)\n            }\n    \
    \    }\n        result.map (x => x.toLong)", "        val arrayTemp = array.toList.sortWith(\n\
    \            (o1: Long, o2: Long) => o1 < o2 || (o1 == o2 && o1 < o2)\n      \
    \  )\n        val firstIndex = arrayTemp(0)\n        val lastIndex  = arrayTemp(array.length\
    \ - 1)\n        val newArray  = Array.ofDim[Long](array.length)\n        var i\
    \ = 0\n        var j = 1\n        while (i < array.length && j < arrayTemp.length)\
    \ {\n            val sum1 = (array(i) + arrayTemp(i)).toLong\n            val\
    \ sum2 = (arrayTemp(j) + arrayTemp(j + 1)).toLong\n            val sum  = sum1\
    \ + sum2\n            if (sum % 2 != 0) {\n                newArray(j) = arrayTemp(j)\n\
    \                j += 1\n            } else {\n                newArray(i) = array(i)\n\
    \                i += 1\n            }\n        }\n        val newList: mutable.Buffer[Long]\
    \ = mutable.Buffer()\n        newList ++= arrayTemp.slice(i.toInt, j.toInt)\n\
    \        newList ++= arrayTemp.slice(i.toInt, arrayTemp.length)\n        newList\
    \ ++= arrayTemp.slice(0, i.toInt)\n        newList ++= arrayTemp.slice(arrayTemp.length\
    \ - 1, arrayTemp.length)\n        newList.toList", "        if(array.length <=\
    \ 1) {\n            array\n        } else {\n            // find first index that\
    \ sum even\n            val evenSumIndex = array.foldLeft(0)(_ + _)\n        \
    \    val evenSum = array(evenSumIndex)\n            val oddSumIndex = array.foldRight(array.length)(_\
    \ + _)\n            val oddSum = array(oddSumIndex)\n            if(evenSum.isOdd\
    \ && oddSum.isEven) {\n                sortArray(array.take(evenSumIndex)).sortWith(compareOddEven)\n\
    \            } else if(evenSum.isOdd && oddSum.isOdd) {\n                sortArray(array.take(evenSumIndex)).sortWith(compareOddEvenDescending)\n\
    \            } else if(evenSum.isEven && oddSum.isEven) {\n                sortArray(array.drop(evenSumIndex)).sortWith(compareOddEvenDescending)\n\
    \            } else if(evenSum.isEven && oddSum.isOdd) {\n                sortArray(array.drop(evenSumIndex)).sortWith(compareOddEven)\n\
    \            } else {\n                array\n            }\n        }", "   \
    \     var coscalaArray = array.clone()\n        val coscalaArraySize = coscalaArray.size\n\
    \        coscalaArraySize -= 1\n        // if the sum of list first index value\
    \ is odd, the coscala will be sorted ascending, otherwise descending\n       \
    \ if(coscalaArraySize % 2 != 0) {\n            coscalaArray.reverse()\n      \
    \  }\n        coscalaArray.sortWith(x => x.sum)\n        coscalaArray", "    \
    \    val n = array.size\n        val sumArray = array.map(x => x + x.toLong).sum\n\
    \        if (sumArray.toDouble % 2 == 1) {\n            array.sortBy(x => x)\n\
    \        } else {\n            array.sortBy(x => -x)\n        }", "        var\
    \ newArray = array\n        newArray.sortWith(compareDesc)\n        newArray",
  "        val array = array.sortWith(compare)\n        array", "        val newList\
    \ = array.sortWith( _.compare(_.sum) < 0 )\n        if (newList.length % 2 ==\
    \ 0) newList.sortWith( _.compare(_.sum) <= 0) else newList.sortWith( _.compare(_.sum)\
    \ >= 0 )", "        val listSize = array.size\n        val listSum = array\n \
    \           .foldLeft(0l) { (result, current) => result += current}\n        \
    \    .asInstanceOf[Long]\n        val listSumOdd = listSum.toString.toInt\n  \
    \      val listSumEven = listSum.asInstanceOf[Long] % 2\n        if(listSumOdd\
    \ > 0) list.sortBy(_._1).reverse else list.sortBy(_._1).sortBy(_._1).reverse",
  "        val newList = ListBuffer[Long]()\n        val arraySum = array.reduceLeft(_+_)\n\
    \        newList += array(0)\n        var j = 1\n        var i = array.size-1\n\
    \        while (j<=i){\n            val mid = math.floor((i+j)/2)\n          \
    \  newList += array(i+mid)\n            newList += array(j+mid)\n            i\
    \ = mid\n            j = mid+1\n        }\n        val evenSum = array.reduceLeft(_+_)\n\
    \        newList += arraySum\n        if (evenSum%2 == 1) {\n            newList.sortInPlace()\n\
    \        } else {\n            newList.sortWith(_ < _)\n        }\n        newList.toList",
  "        if(array.isEmpty) array\n        else {\n            val sum = (array(0).asInstanceOf[Long]+array.last).asInstanceOf[Long]\n\
    \            val evenOrOdd = if(sum.mod(2) == 0) \"even\" else \"odd\"\n     \
    \       if(evenOrOdd == \"odd\") sortArray(array.drop(1))(array.take(array.length\
    \ - 1).sortBy(_))\n            else sortArray(array.drop(1))(array.take(array.length\
    \ - 1).sortBy(_.reverse))\n        }", "        val n = array.size\n        val\
    \ arr = mutable.ArrayBuffer.empty[Long](n).asInstanceOf[Array[Long]]\n       \
    \ for (i <- 0 until n) {\n            arr(i) = (math.max(array(i), array(n - 1\
    \ - i)))\n        }\n        arr.toList", "        val result = array.foldLeft((List[Long](),\
    \ List[Long]()))((x, y) => x._1 ::: y._1 ::: (x._2 ++ y._2))\n        if (result._2.sum\
    \ % 2 == 1) {\n            result._2.sort\n        } else {\n            result._2.reverse\n\
    \        }", "        if(array.isEmpty) throw new Exception(\"empty list can not\
    \ be sorted\")\n        var sum = 0\n        var sumOdd : Long = 0\n        var\
    \ sumEven: Long = 0\n        for(i <- 0 until array.size) {\n            sum =\
    \ sum + array(i)\n            if(sum.equals(0l)) {\n                sumEven =\
    \ sumEven\n                sumOdd = sumOdd\n            }\n            else if(sum.mod(2l.toLong).equals(0l))\
    \ {\n                sumEven = sumEven + array(i)\n            }\n           \
    \ else {\n                sumOdd = sumOdd + array(i)\n            }\n        }\n\
    \        val sortedArray = List(sumEven.toLong, sumOdd.toLong)\n        sortedArray.sortBy(identity)",
  "        val sum = array.sum\n        if(sum % 2 == 0) array.sortBy(_.toLong)\n\
    \        else if(sum % 2 == 1) array.sortBy(-_.toLong)\n        else array.sortBy(-_.toLong).reverse",
  "        val list = new mutable.ListBuffer[Long]\n        for (i <- 0 until array.size)\
    \ {\n            val num = array(i)\n            if (num < 0) return\n       \
    \     val first = i\n            val last = array.size - 1\n            val sum\
    \ = first + last\n            val odd = (sum.toDouble % 1) == 0\n            if\
    \ (odd) {\n                list += num\n                list += array.drop(i +\
    \ 1)\n            }\n            else {\n                list += array.drop(i\
    \ + 1)\n                list += num\n            }\n        }\n        list.sortBy(_.toLong).reverse",
  "        val array = array.asInstanceOf[List[Long]]\n        val array2 = array.toBuffer.sorted\n\
    \        var sum = 0\n        array2.foreach{ n => sum = sum + n }\n        if\
    \ (sum % 2 == 0) {\n            array2\n        } else {\n            array2.reverse\n\
    \        }", "        var i = array.size\n        val sum = Math.abs(array.head)\
    \ + Math.abs(array.last)\n        var max = 1\n        var temp = 0l\n       \
    \ var temp2: Long = 0l\n        while (i > 0) {\n            val tmp = array.head\n\
    \            if (tmp > temp)\n                temp = tmp\n            val temp2\
    \ = array.last\n            if (temp2 > temp) {\n                temp = temp2\n\
    \                max = Math.max(max, temp)\n            }\n            i -= 1\n\
    \        }\n        if (max % 2 != 0) {\n            array.sortBy(x => x.toLong)\n\
    \            array.reverse\n        } else {\n            array.sortBy(x => x.toLong).reverse\n\
    \        }\n        return array", "        def subSortArray(array : List[Long])\
    \ : List[Long] = {\n            val length = array.length\n            var sum\
    \ = 0L\n            val arr2 = new mutable.MutableList[Long]()\n            for\
    \ (i <- 0 until length) sum += array(i)\n            if (sum % 2 == 0) arr2.addAll(0,\
    \ array.take(length-1).sorted)\n            else arr2.addAll(array.take(length-1).reverse.sorted)\n\
    \            arr2.toList\n        }\n        if (array.length == 1) array(0)\n\
    \        else subSortArray(array)", "        var sum = 0\n        var max = 0\n\
    \        array.foreach(x => max = math.max(max, x))\n        array.foreach(x =>\
    \ sum += x)\n        if(sum.isOdd && sum < max) array.sort\n        else if(!sum.isOdd\
    \ && sum > max) array.sortDescending\n        else array", "        val a = array.map(x\
    \ => x.toLong)\n        val b = a.zipWithIndex.sortBy(x => (x._1, x._2))\n   \
    \     val c = b.map(x => x._1._2 + x._1._1)\n        val d = c.filter(x => x %\
    \ 2 != 0)\n        val e = d.map(x => x % 2 == 0)\n        e.map(_.getOrElse(false)\
    \ match {\n            case true => a.sortWith(_ < _)\n            case false\
    \ => a.sortWith(_ > _)\n        })", "        val result = new mutable.ArrayList[Long]()\n\
    \        var firstIndex = 0\n        var lastIndex = 0\n        var sum = 0\n\
    \        while (firstIndex < array.length) {\n            if (sum % 2 == 1) {\n\
    \                lastIndex = firstIndex + 1\n            } else {\n          \
    \      lastIndex = array.length - 1\n            }\n            sum = array[firstIndex]\
    \ + array[lastIndex]\n            result.add(sum)\n            firstIndex += 1\n\
    \            lastIndex -= 1\n        }\n        return result.toList", "     \
    \   val sumArray = array.foldLeft(0l)( (a,b) => a + b )\n        sumArray % 2\
    \ match {\n            case 0 => array.sorted\n            case 1 => array.sorted\
    \ reverse\n            case _ => array.sorted reverse reverse\n        }", '      array.sorted',
  "        val list = new mutable.ListBuffer[Long]()\n        array.foreach { i =>\n\
    \            list.+=(i)\n        }\n        list.sortBy(a => a)(Ordering.Int.reverse)",
  "        if (array.isEmpty) \n            array\n        else\n            if (array.length\
    \ == 1) \n                array\n            else\n                if (sumFirstLastElement(array.length)\
    \ == 1)\n                    sortDescendingArray(array)\n                else\n\
    \                    sortAscendingArray(array)", "        val sortedArray = array.sortBy(a\
    \ => (a - array(0)))\n        if (sortedArray.sum % 2 == 0)\n            sortedArray.reverse\n\
    \        else\n            sortedArray", "        var result = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        var currentSum = 0l\n        for(i <- 0 until array.size) {\n       \
    \     currentSum += array(i)\n            if((i > 0) && (currentSum % 2 == 1))\
    \ {\n                result ::= array(i)\n            } else {\n             \
    \   result ::= array(i)\n            }\n        }\n        result.toList", '        array.sortWith((x,
    y) => math.abs(x - y) < math.abs(x + y))', "        // Write your code in here.\n\
    \        val result = array.sort((x, y) => if(x + y == 0) 0 else (x+y));\n   \
    \     if(array.length % 2 == 0) result.sort((x, y) => if(x + y == 0) -1 else (x+y))\n\
    \        else result.sort((x, y) => if(x + y == 0) 1 else (x+y))", "        if\
    \ (array.nonEmpty) {\n            val sum = array.sum\n            val index =\
    \ (sum + 1) / 2\n            val left = array.drop(index)\n            val right\
    \ = array(index)\n            val middle = array\n            val result = left\
    \ ++ middle ++ right\n            result.sort\n        }\n        else {\n   \
    \         array\n        }", '        array.sortWith(_ < _)', "        val n =\
    \ array.length\n        var sum = 0\n        var min = 0\n        var max = n\
    \ - 1\n        array.foreach{\n            x =>\n                sum += x\n  \
    \          if(sum % 2 == 0)\n                min += x\n            else\n    \
    \            max -= x\n        }\n        if(min < max)\n            array.sortWith(_\
    \ < _)\n        else\n            array.sortWith(_ > _)", "        var index =\
    \ 0\n        val sortedArray = array.sortBy(x => x)\n        while (index < sortedArray.size)\
    \ {\n            val lastItem = sortedArray(index)\n            var leftSum =\
    \ 0\n            while (index < sortedArray.size && sortedArray(index) < lastItem)\
    \ {\n                leftSum += sortedArray(index) + 1\n                index\
    \ += 1\n            }\n            var rightSum = 0\n            while (index\
    \ < sortedArray.size && sortedArray(index) > lastItem) {\n                rightSum\
    \ += sortedArray(index) - 1\n                index += 1\n            }\n     \
    \       if (leftSum % 2 != rightSum % 2) {\n                sortedArray.swap(index,\
    \ sortedArray.size - 1)\n            }\n        }\n        sortedArray.reverse()",
  "        var retVal: List[Long] = List()\n        var sum : Long = 0\n        var\
    \ maxArray = array\n        var index = 0\n        var temp : List[Long] = List()\n\
    \        for(i <- 0 until maxArray.length){\n            if(sum % 2 == 0){\n \
    \               sum = (sum + maxArray(i)).toLong\n                temp = temp\
    \ + maxArray(i)\n                if(index >= temp.size){\n                   \
    \ retVal = retVal + temp\n                    index = index + 1\n            \
    \        temp.remove(0)\n                }\n            }\n            else{\n\
    \                sum = (sum - maxArray(i)).toLong\n                temp = temp\
    \ + maxArray(i)\n                if(index >= temp.size){\n                   \
    \ retVal = retVal + temp\n                    index = index + 1\n            \
    \        temp.remove(0)\n                }\n            }\n        }\n       \
    \ return retVal", "        val sumArray = array.sum\n        var evenSum = sumArray\
    \ % 2\n        var evenIndex = 0\n        var oddSum = 0\n        array.foreach(\
    \ x =>\n            if ( evenSum % 2 == 0 ) {\n                evenSum /= 2\n\
    \                evenIndex += 1\n                if ( sumArray - evenSum + x ==\
    \ 0 ) {\n                    evenIndex -= 1\n                }\n            }\
    \ else {\n                oddSum += 1\n                if ( sumArray - oddSum\
    \ + x == 0 ) {\n                    oddSum -= 1\n                }\n         \
    \   }\n        )\n        oddSum += 1\n        evenIndex -= 1\n        oddSum\
    \ += 1\n        evenIndex -= 1\n        oddSum = evenSum + evenIndex\n       \
    \ evenIndex = evenIndex - evenSum\n        evenSum = evenSum + evenIndex\n   \
    \     oddSum = oddSum + oddIndex\n        oddSum = oddSum + evenIndex\n      \
    \  if ( evenSum % 2 == 1 ) {\n            return sortArray(array.map(x => x ::\
    \ 0))\n        }\n        if ( oddSum % 2 == 0 ) {\n            return sortArray(array.map(x\
    \ => 0 :: x))\n        }\n        return array", "        var sum = 0\n      \
    \  var max = 0\n        var min = 0\n        var length = 0\n        for(i <-\
    \ 0 until array.length)\n        {\n            if(array(i) > array.length)\n\
    \            {\n                sum = sum + array(i)\n                max = max(sum,\
    \ max)\n                min = min(sum, min)\n                length = length +\
    \ 1\n                array(i) = array.length - array(i)\n                array.remove(array(i))\n\
    \            }\n        }\n        if(length%2 == 1)\n        {\n            val\
    \ firstIndex = length - 1\n            val secondIndex = length - 2\n        \
    \    val newList = array.sortBy(x => x % 2 == 1).map(x => x + firstIndex).map(x\
    \ => x + secondIndex)\n            return newList\n        }\n        else\n \
    \       {\n            val firstIndex = length - 1\n            val secondIndex\
    \ = length - 2\n            val newList = array.sortBy(x => x % 2 == 0).map(x\
    \ => x + firstIndex).map(x => x + secondIndex)\n            return newList\n \
    \       }", '        array.groupBy(_.toInt/2).mapValues(v => v.sum).map(_._1).sorted',
  "        if (array.isEmpty) {\n            return array\n        } else {\n    \
    \        var sum = 0\n            var lastIndex = array.length - 1\n         \
    \   var isEven = false\n            var isOdd = true\n            var sumIndex\
    \ = 0\n            while (sumIndex < lastIndex) {\n                var sum = 0\n\
    \                sumIndex += 1\n                sum = sum + array.get(sumIndex)\n\
    \                if (isEven) {\n                    if (sum % 2 != 0) {\n    \
    \                    sum = sum - 1\n                        isEven = false\n \
    \                       isOdd = true\n                    }\n                }\
    \ else if (sum % 2 == 0) {\n                    sum = sum + 1\n              \
    \      isEven = true\n                    isOdd = false\n                }\n \
    \               array.insert(sumIndex + 1, sum)\n            }\n            if\
    \ (isEven) {\n                array.sort((a, b) => { b - a })\n            } else\
    \ {\n                array.sort((a, b) => { a - b })\n            }\n        }",
  "        var index : Int = array.length - 1\n        var odd : Boolean = array.length\
    \ % 2 == 1\n        while(index >= 0){\n            val first = array.get(index)\n\
    \            val last = array.get(index - 1)\n            var newSum : Long =\
    \ 0\n            if(odd){\n                newSum = first + last\n           \
    \ } else {\n                newSum = last + first\n            }\n           \
    \ if(newSum == 0){\n                array.remove(index)\n            } else {\n\
    \                if(newSum < 0){\n                    array.remove(index - 1)\n\
    \                    array.remove(index)\n                } else if(newSum > 0){\n\
    \                    array.remove(index)\n                    array.remove(index\
    \ + 1)\n                }\n            }\n            index--\n        }\n   \
    \     array", "        require(array.length > 0, \"array length can't be zero\"\
    )\n        var result : List[Long] = List()\n        var i = -1\n        var j\
    \ = array.length - 1\n\n        while (i < j) {\n            while (i < j && array(i)\
    \ > array(i + 1)) {\n                result += array(i)\n                i +=\
    \ 1\n            }\n            while (i < j && array(i) < array(i + 1)) {\n \
    \               result -= array(i)\n                j -= 1\n            }\n  \
    \          if (i < j) {\n                result += array(i)\n                i\
    \ += 1\n                j -= 1\n            }\n        }\n        result", " \
    \       var sum : Long = array.sum\n        if(sum % 2 == 0) {\n            val\
    \ odd = array.sortWith(_ < _).reverse\n            odd.toList\n        } else\
    \ {\n            val even = array.sortWith(_ < _)\n            even.toList\n \
    \       }", "        var array = array\n        if (array.length == 0) {\n   \
    \         return array\n        }\n        var i = 0\n        var sum = 0\n  \
    \      var sumEven = 0\n        while (i < array.length) {\n            sum =\
    \ sum + array(i).toLong\n            sumEven = sumEven + array(i).toLong % 2\n\
    \            i = i + 1\n        }\n        if (sumEven > sum) {\n            var\
    \ newArray = array.sortWith((a, b) => b.toLong < a.toLong)\n            if (sumEven\
    \ > sum) {\n                var newArray = array.sortWith((a, b) => b.toLong >\
    \ a.toLong)\n            }\n            return newArray\n        } else {\n  \
    \          return array.sortWith((a, b) => b.toLong < a.toLong)\n        }", " \
    \       var tempArray = array;\n        val sumFirst = array.head + array.last\n\
    \        val sumLast = array.head + array.last\n        val oddOrEven = sumFirst\
    \ % 2 != 0\n        if(oddOrEven){\n            val sumFirst = array.head + array.last\n\
    \            val sumLast = array.head + array.last\n            val evenOrOdd\
    \ = sumLast % 2 == 0\n            if(evenOrOdd){\n                tempArray =\
    \ tempArray.sortBy(x => x.toLong)\n            }\n            tempArray = tempArray.sortBy(x\
    \ => -x.toLong)\n        }\n        return tempArray", "        if (array.isEmpty)\
    \ \n            (List[Long]())\n        else {\n            var sum = 0\n    \
    \        var newArray = array.clone\n            val size = newArray.size\n  \
    \          for (i <- 0 until size) {\n                sum += newArray(i)\n   \
    \         }\n            if (sum % 2 == 0)\n                newArray.sortBy(x\
    \ => x)\n            else newArray.sortBy(x => -x)\n        }", "        if(array.size\
    \ <= 1) array\n        else {\n            val newArray = mutable.ArrayBuffer[Long]()\n\
    \            for(i <- 0 until array.size-1) {\n                if(array(i) ==\
    \ array(i+1)) newArray += array(i)\n                else if(array(i) < array(i+1))\
    \ newArray += array(i)\n                else if(array(i) > array(i+1)) newArray\
    \ += array(i+1)\n            }\n            newArray.sortWith(Ordering[Long].reverse)\n\
    \        }", "        val n = array.length\n        if(n <= 1) array\n       \
    \ else {\n            // first sort and find the sum of the first element and\
    \ the last element\n            var sum = 0l\n            for(i <- 0 until n)\
    \ {\n                sum += array(i)\n            }\n            val sum = sum.toInt\n\
    \n            // if sum is odd, reverse it\n            if(sum & 1 == 1) {\n \
    \               val r = sum.toLong >> 1\n                var a = array\n     \
    \           for(i <- 0 until n) {\n                    array(i) := (a(i) - r).toLong\n\
    \                }\n                array\n            } else {\n            \
    \    // if sum is even, sort it in ascending order\n                var a = array\n\
    \                for(i <- 0 until n) {\n                    array(i) := (a(i)\
    \ + sum - a(i)).toLong\n                }\n                array\n           \
    \ }\n        }", "        val sumOfFirstAndLastValue = array.sum\n\n        if(sumOfFirstAndLastValue\
    \ % 2 == 0) array.sort else array.sortDescending", "        val size = array.size\n\
    \        val resultArray = if (size <= 1) array else array.zip(array.dropRight(1)).toList\
    \ ::: array\n        resultArray.sortBy(x => math.signum(x))", "        var sum\
    \ = 0\n        var list = array //don't change this\n\n        if (sum < 2) return\
    \ list\n        \n        val listSize = list.size\n        val mid = (listSize\
    \ / 2).toInt\n\n        val oddSum = list[mid].toLong\n        var evenSum = (list[mid]).toLong\n\
    \n        if (oddSum % 2 == 0) \n            list = list.sortBy(x => x.toLong)\n\
    \        else list = list.sortBy(x => x.toLong).reverse\n        list = list.take(mid\
    \ + 1)\n        if (list[mid].toLong < list[mid + 1].toLong)\n            list\
    \ = list.sortBy(x => x.toLong)\n        else list = list.sortBy(x => x.toLong).reverse\n\
    \        list = list.take(mid)\n        \n        return list", "        var temp\
    \ = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n        var\
    \ tempList = new ListBuffer[Long]()\n        for (i<-1 to array.length) {\n  \
    \          sum = array[i] + temp\n            if (sum % 2 != 0) {\n          \
    \      tempList = tempList :+ sum\n                temp = sum\n              \
    \  j++\n            }\n        }\n        if (array.length > 0) {\n          \
    \  while (j < array.length) {\n                sum = temp + array[j]\n       \
    \         tempList = tempList :+ sum\n                temp = sum\n           \
    \     k++\n            }\n        }\n        while (temp < array.length) {\n \
    \           sum = temp + array[k]\n            tempList = tempList :+ sum\n  \
    \          temp = sum\n            k++\n        }\n        val list = tempList.toList\n\
    \        list", "        // write your code in here\n        val sum  = array.last\n\
    \        val even = array.filter(_%2==0)\n        val odd = array.filter(_%2!=0)\n\
    \        var evenSorted = even.sortWith(_.compare(sum))\n        var oddSorted\
    \ = odd.sortWith(_.compare(sum))\n        evenSorted.reverse.::oddSorted.reverse",
  "        if (array.isEmpty) return array\n        val l = new mutable.ListBuffer[Long]()\n\
    \        val index = new mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ array.size) {\n            if (array(i) < 0) l.append(array(i))\n          \
    \  else {\n                l.append(array(i))\n                index.append(i)\n\
    \            }\n        }\n        var sum = 0\n        var i = 0\n        var\
    \ j = 0\n        var index = index.iterator\n        var l = l.iterator\n    \
    \    while (index.hasNext && l.hasNext) {\n            sum = sum + l.next() +\
    \ index.next()\n            if (sum % 2 == 0) index = index.drop(1)\n        \
    \    else {\n                l.next()\n                index -= 1\n          \
    \  }\n        }\n        val re = if (sum % 2 == 0) l.toList else l.toReverse.list\n\
    \        re.sortWith(_ > _)", "        if(array == null || array.size < 2) return\
    \ array\n        var firstIndex : Long = 0\n        var lastIndex : Long = array.size\
    \ - 1\n        var index : Int = 0\n        var sum : Long = 0\n        var evenSum\
    \ = 0\n        var oddSum = 0\n        while(firstIndex < lastIndex) {\n     \
    \       sum = array[firstIndex] + array[lastIndex]\n            evenSum = evenSum\
    \ + sum / 2\n            oddSum = oddSum + sum\n            if(sum % 2 == 1) {\n\
    \                if(evenSum < oddSum) {\n                    swap(array, firstIndex,\
    \ lastIndex)\n                } else {\n                    swap(array, firstIndex,\
    \ lastIndex - 1)\n                }\n            } else {\n                if(evenSum\
    \ > oddSum) {\n                    swap(array, firstIndex, lastIndex)\n      \
    \          } else {\n                    swap(array, firstIndex, lastIndex - 1)\n\
    \                }\n            }\n            firstIndex = firstIndex + 1\n \
    \           lastIndex = lastIndex - 1\n            index += 1\n        }\n   \
    \     if(array.isEmpty) return array\n        sortArray(array.slice(1, array.length))",
  "        val sumArray = array.foldLeft(0.toLong)( (sum, currentLong) => sum + currentLong\
    \ )\n        val sortSum = sumArray.toDouble % 2d.toInt\n        val finalArray\
    \ = if (sortSum == 0) array else array.sortBy(-_).reverse\n        val result\
    \ = if (sortSum == 0) finalArray else finalArray.sortBy(-_)\n        result",
  "        val size = array.length\n        var cur = 0\n        var next = 1\n  \
    \      var max = Integer.MIN_VALUE\n        var i = -1\n        for (i <- 0 until\
    \ size) {\n            if (max < array[i]) {\n                max = array[i]\n\
    \                cur = next\n            }\n            next += 1\n        }\n\
    \        val result = array.slice(1, size)\n        result.sortWith(_ < _)\n \
    \       if (result.sum % 2 == 0) {\n            result.sortWith(_ > _)\n     \
    \   } else {\n            result.sortWith(_ < _)\n        }\n        result",
  "        var result = array\n        val length = array.length\n        val odd\
    \ = length % 2\n        if (odd) {\n            for (i <- 0 until length-1) result\
    \ += i\n        }\n        val even = length / 2\n        for (i <- 0 until even-1)\
    \ result += i + (length-1-i)\n        result", "        val newList = mutable.ListBuffer[Long]()\n\
    \        var flag = 0\n        for(i <- 0 until array.size) {\n            val\
    \ sum = Math.abs((array(i) - array(i-1)))\n            val sum1 = Math.abs((array(i)\
    \ - array(i+1)))\n            if(sum % 2 == 0) {\n                if(sum1 > 0)\
    \ flag = 1\n                flag = 0\n                newList += array(i)\n  \
    \          } else {\n                if(sum1 < 0) flag = -1\n                flag\
    \ = 1\n                newList += array(i)\n            }\n        }\n       \
    \ if(flag == 1) newList.sortBy(x => x)\n        else newList.sortBy(x => -x).reverse",
  "        val sum = array.sum\n        val odd = sum.mod(2l).toLong != 0l\n     \
    \   val even = sum.mod(2l) == 0l\n        if (odd) array.sortBy(-_)\n        else\
    \ array.sortBy(-_.max)(-_.min)", "        var sum = 0L\n        var i = 0\n  \
    \      var j = 0\n        var newArray = array\n        var temp = 0L\n      \
    \  while (i < newArray.length) {\n            sum = sum + newArray(i)\n      \
    \      i = i + 1\n        }\n\n        if (sum % 2L != 0L) {\n            temp\
    \ = newArray(newArray.length - 1L)\n            newArray = newArray.tail\n   \
    \         val start = newArray(0)\n            val end = newArray.length - 1\n\
    \            while (j < (newArray.length - end)) {\n                newArray(j)\
    \ = newArray(j + 1L)\n                j = (j + 1L)\n            }\n          \
    \  newArray(j) = temp\n            newArray.sorted.reverse\n        } else {\n\
    \            newArray.sorted\n        }", "        val newArray = array.foldRight(List[Long]())(\
    \ (l,r) => if (l.sum % 2 == 0) (l :+ r) else (l :+ r.reverse))\n        newArray.toList.sortBy(l\
    \ => l)", "        def sortHelper(a: List[Long], b: Long, sum : Long) : Boolean\
    \ = {\n            if(sum%2 == 1) a else b\n        }\n        val sum = 0\n \
    \       val array = array.sorted\n        val resultList = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        while(i < array.size) {\n            sum = sum + array(i).toLong\n  \
    \          i = i + 1\n        }\n        while(j < array.size) {\n           \
    \ sum = sum + array(i).toLong\n            i = i + 1\n            sum = sum -\
    \ array(i).toLong\n            j = j + 1\n        }\n        if(sum%2 == 1) array.reverse.foreach((x)\
    \ => resultList.append(x))\n        else array.foreach((x) => resultList.append(x))\n\
    \        resultList.sorted", "        if(array.isEmpty){\n          array\n  \
    \      }\n        var sum = 0\n        var odd = 0\n        var even = 0\n   \
    \     var result = List[Long]()\n        var temp = 0\n        var temp2 = 0\n\
    \        array.foreach(x => {\n          sum = sum + x\n        })\n        odd\
    \ = sum%2 != 0\n        even = sum%2 == 0\n        array.sort((x: Long, y: Long)\
    \ => {\n          if((odd == true && x<y) || (even == true && x>y)) -1\n     \
    \     else if(x<y) 1\n          else x>y\n        })\n        array.foreach(x\
    \ => {\n          temp = temp + x\n        })\n        if(odd == true){\n    \
    \      result = array :+ temp\n        }\n        if(even == true){\n        \
    \  result = result :+ temp2\n        }\n        result", "        var result:\
    \ List[Long] = Nil\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while(i < array.length) {\n            val firstValue = array[i]\n  \
    \          val secondValue = array[i+1]\n            val thirdValue = array[i+2]\n\
    \            if(thirdValue == 0l) {\n                i += 1\n                continue\n\
    \            }\n            if(thirdValue > 0l) {\n                result :+=\
    \ firstValue\n                i += 1\n                continue\n            }\n\
    \            if(secondValue == 0l) {\n                i += 2\n               \
    \ continue\n            }\n            if(secondValue > 0l) {\n              \
    \  result :+= secondValue\n                i += 2\n                continue\n\
    \            }\n            if(firstValue == 0l) {\n                result +=\
    \ thirdValue\n                i += 3\n                continue\n            }\n\
    \            if(firstValue > 0l) {\n                result += firstValue\n   \
    \             i += 1\n                continue\n            }\n            if(thirdValue\
    \ == 0l) {\n                i += 3\n                continue\n            }\n\
    \            if(thirdValue > 0l) {\n                result += thirdValue\n   \
    \             i += 3\n                continue\n            }\n            result\
    \ += secondValue\n            i += 1\n        }\n        result", "        val\
    \ sumList = array.map(i => new Array[Long](array.size).fill(0)){\n           \
    \ _ ++ Array[Long](i, 0)\n        }.foldLeft(0)((i, j) => i + j) // sum of first\
    \ index and last index\n        val isOdd = sumList % 2 == 1\n        if (isOdd)\
    \ array.sorted else array.sorted(reverse = true)", "        // write your code\
    \ in here\n        array.zipWithIndex.sort{ (x,y) =>\n            if((y._1+x._2)%2==0)\n\
    \                x._1 < y._1\n            else\n                x._1 > y._1\n\
    \        }.map{ (x,y) =>\n            if((y._1+x._2)%2==0)\n                x._2\n\
    \            else\n                y._2\n        }.toList", "        var sum =\
    \ 0\n        var min = 0\n        var max = 0\n\n        for ((index, value) <-\
    \ array.zipWithIndex) {\n            sum += value\n            if(max < value)\
    \ max = value\n            if(min > value) min = value\n        }\n\n        if(sum\
    \ % 2 == 1) max = max + 1\n        else max = max - 1\n\n        if(min < 0) min\
    \ = max + 1\n        else min = min - 1\n\n        array = array.sortWith( (a,\
    \ b) => b > a )\n        array = array.drop(min)\n        array = array.take(max)\n\
    \        array.toList", "        var sum = 0\n        var coscala : List[Long]\
    \ = Nil\n\n        // Iterate through the given array.\n        for (i <- 0 until\
    \ array.size-1) {\n            // Calculate the sum.\n            sum += array(i)\n\
    \n            // If the sum is odd.\n            if (sum % 2 != 0) {\n       \
    \         // Sort it in descending order.\n                coscala :+= array(i).toLong\n\
    \            } else {\n                // Sort it in ascending order.\n      \
    \          coscala :+= array(i).toLong.reverse\n            }\n        }\n   \
    \     return coscala", "        val sums = array.foldLeft((List.empty[Long], 0)){\
    \ (accum, elem) =>\n            val l = accum._1 + elem\n            val r = accum._2\
    \ + elem\n            if (l.toLong > r.toLong) accum.updated(1, l)\n         \
    \   else accum.updated(1, r)\n        }._1.sorted\n        if (sums.lastOption.exists(_\
    \ % 2 == 1)) sums.reverse\n        else sums.sorted", "        if (array.size\
    \ < 2) \n            return\n\n        var result : List[Long] = Nil\n\n     \
    \   var sum = 0L\n        var sumOfFirstIndex = 0L\n        var sumOfLastIndex\
    \ = 0L\n        var arraySize = array.size\n\n        for(i <- 0 until arraySize)\
    \ {\n            sum += array(i)\n            sumOfFirstIndex += array(i).toLong\n\
    \            sumOfLastIndex += array(arraySize - i-1).toLong\n        }\n\n  \
    \      if(sumOfLastIndex % 2 != 0 && sumOfFirstIndex % 2 == 0) \n            result\
    \ = array sortBy {x => -x}\n        else {\n            if(sumOfLastIndex % 2\
    \ == 0 && sumOfFirstIndex % 2 == 1) \n                result = array sortBy {x\
    \ => -x }\n            else {\n                if(sumOfFirstIndex % 2 == 1 &&\
    \ sumOfLastIndex % 2 == 0) \n                    result = array sortBy {x => x}\n\
    \                else {\n                    if(sumOfLastIndex % 2 == 0 && sumOfFirstIndex\
    \ % 2 == 1)\n                        result = array sortBy {x => -x }\n      \
    \              else {\n                        result = array sortBy {x => -x\
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    result", "        var sum = 0\n        array.foreach( n => sum+=n)\n    \
    \    val sortedArray = array.sortWith( (a, b) => a < b || (a == b && sum%2 ==\
    \ 1))\n        sortedArray", "        val a = new mutable.ArrayBuffer[Long](array.toList)\n\
    \        val n = a.length\n        val temp = a(0)\n        for (i <- 0 until\
    \ n) {\n            if (temp + a(i) < temp + a(n-1)) temp = a(n-1) else temp =\
    \ a(i)\n            a.insert(i, temp)\n        }\n        a", "        val resultList\
    \ = mutable.ArrayBuffer.empty[Long]\n        if (array.nonEmpty) {\n         \
    \   resultList += array.head\n            val tail = array.tail\n            if\
    \ (tail.nonEmpty) {\n                val firstTail = tail.head\n             \
    \   if (firstTail%2 == 0) {\n                    resultList += firstTail\n   \
    \                 val lastTail = tail.last\n                    if (lastTail%2\
    \ == 0) {\n                        resultList += lastTail\n                  \
    \  }\n                }\n            }\n        }\n        resultList.sorted",
  "        require( array.nonEmpty )\n        var result = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        var sum : Long = 0\n        for ( x <- array ) {\n            sum +=\
    \ x\n        }\n        sum += 1\n\n        if ( sum % 2 == 0 ) {\n          \
    \  result.addAll( array.sortBy( x => ( -x ) ) )\n        } else {\n          \
    \  result.addAll( array.sortBy( x => ( -x ) ).reverse  )\n        }\n        result.toList",
  "        var sum = 0\n        for (i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        val isSumEven = sum % 2 == 0\n        val sortedArray\
    \ = if (isSumEven) {\n            array.sortBy{x => (x._2 - x._1).abs}\n     \
    \   } else {\n            array.sortBy{x => (x._2 - x._1).abs}.reverse\n     \
    \   }\n        return sortedArray", "        if(array.isEmpty) throw new Exception(\"\
    The array is empty!\")\n        val arr: mutable.Buffer[Long] = new mutable.Buffer[Long](array.head)\n\
    \        val result: mutable.Buffer[Long] = new mutable.Buffer[Long]()\n     \
    \   array.foreach{elem => \n            arr += elem\n            if((arr.head\
    \ + arr.last) % 2 == 0) result += arr.head + arr.last\n        }\n        if(arr.head\
    \ + arr.last < arr.head + arr.last) result ++= arr.tail\n        arr.removeAll(result).toList",
  "        // write your code\n        var sum = 0\n        for(i <- 0 until array.size){\n\
    \            sum = sum + array(i)\n        }\n        sum.toInt match {\n    \
    \        case 0 => return array\n            case i =>\n                var left\
    \ = array\n                var right = array\n                while(sum > 0){\n\
    \                    var leftMax = left.max\n                    var rightMax\
    \ = right.max\n                    if(sum % 2 == 0){\n                       \
    \ sum = sum - leftMax + rightMax\n                    }else{\n               \
    \         sum = sum - leftMax - rightMax\n                    }\n            \
    \        left = left.filter(_ != leftMax)\n                    right = right.filter(_\
    \ != rightMax)\n                }\n                (left + right).sort\n     \
    \   }", "        // write your code here\n        val map=new mutable.HashMap[Long,Long]()\n\
    \        for(i <- 0 until array.length){\n            map.put(array(i),i)\n  \
    \      }\n        val list=array.sorted\n        val list2=list.tail.takeWhile(elem=>!map.contains(elem))\n\
    \        val list3=list.drop(list.last)\n        if(list2.length%2==0){\n    \
    \        list.sortBy(_-_.head+list2.head)\n        }\n        else{\n        \
    \    list.sortBy(_-_.head+list2.last)\n        }\n        list3", "        val\
    \ sorted = array.sortBy(i => i)\n        if (sorted.sum % 2 == 1) {\n        \
    \    sorted.reverse\n        }\n        else sorted", "        array.sortWith(_<_)\
    \ match {\n            case Nil => Nil\n            case x::xs => x :: sortArray(xs)\n\
    \        }", "        val arrList = array.toList.sortWith((x, y) => (x < y) ?\
    \ -1 : (x > y) ? +1 : 0)\n        (arrList.tail, arrList.head) match {\n     \
    \       case (Some(_), Some(_)) => arrList\n            case _ => (if (arrList.head\
    \ % 2 == 0) arrList.reverse else arrList)\n        }", "        val l = array.size\n\
    \        if (l <= 1) array\n        else {\n            var maxSum = -array(0)\n\
    \            var maxIndex = -1\n            for (index <- 1 to l) {\n        \
    \        val sum = array(index)\n                if (sum > maxSum) {\n       \
    \             maxIndex = index\n                    maxSum = sum\n           \
    \     }\n            }\n            if (maxSum.isEven) {\n                // sort\
    \ descending\n                val l1 = array.drop(maxIndex)\n                val\
    \ l2 = array.take(maxIndex+1)\n                l2.reverse ::: l1\n           \
    \ } else {\n                // sort ascending\n                val l1 = array.drop(maxIndex+1)\n\
    \                val l2 = array.take(maxIndex)\n                l1 ::: l2\n  \
    \          }\n        }", "      val sum = 0\n      array.foreach(e => sum +=\
    \ e)\n      if (sum % 2 == 0) {\n        array.sortBy(-_.head)\n      }\n    \
    \  else {\n        array.sortBy(_.head)\n      }", "        // Write your code\
    \ here\n        array.sortWith(x => if (x.sum % 2 == 0) x.reverse else x)", " \
    \       // write your code in Scala\n        var sum : Long = 0\n        var result\
    \ = array.mkString(\",\").split(\",\").toList.sortWith((x, y) => sum - y.toLong\
    \ <= x.toLong - sum)\n        if (sum % 2 == 0) {\n            val newList = new\
    \ ArrayBuffer[Long]()\n            for((i, n) <- array.zipWithIndex) {\n     \
    \           if(i != n) {\n                    newList += n\n                }\n\
    \            }\n            result = newList.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        }\n        result", "        val numArray = array.size\n        if (numArray\
    \ <= 1)\n            return array\n        val odd = array.take(numArray / 2)\n\
    \        val even = array.drop(numArray / 2)\n        if (odd.sum % 2 == 0)\n\
    \            odd.sortWith(_ < _)\n        else\n            even.sortWith(_ >\
    \ _)", '      array.sortWith((x, y) => x < y ? -1 : x > y ? 1 : 0)', "       \
    \ var newArray = array\n        val sumOfArray = newArray.sum\n        var evenSum\
    \ = 0\n        var oddSum = 0\n        val evenArray = array.filter(x => x % 2\
    \ == 0).sorted\n        val oddArray = array.filter(x => x % 2 == 1).sorted\n\
    \        if (sumOfArray % 2 != 0) {\n            newArray = oddArray.sortWith(_\
    \ > _)\n            evenSum = evenArray.reduce((x,y) => x+y)\n            oddSum\
    \ = oddArray.reduce((x,y) => x+y)\n            if (sumOfArray % 2 == 0) {\n  \
    \              oddArray = evenArray.sortWith(_ < _)\n            }\n        }\n\
    \        else{\n            newArray = evenArray.sortWith(_ < _)\n           \
    \ evenSum = evenArray.reduce((x,y) => x+y)\n            oddSum = oddArray.reduce((x,y)\
    \ => x+y)\n            if (sumOfArray % 2 == 1) {\n                evenArray =\
    \ oddArray.sortWith(_ > _)\n            }\n        }\n        newArray", "   \
    \     // Write your code here\n        array.sortWith(x => x._1 - x._2)", "  \
    \      val ls = array.sorted\n        (ls(0) + ls(ls.size-1)).toLong", "     \
    \   val n = array.size\n        if (n % 2 == 0){\n            if (sumArrayEven(array)\
    \ == 0){\n                array.sorted\n            }else {\n                array.sorted\
    \ reverse \n            }\n        }else {\n            if (sumArrayOdd(array)\
    \ == 0){\n                array.sorted\n            }else {\n                array.sorted\
    \ reverse \n            }\n        }", "        val pairs = array.zipWithIndex.sortWith((x,\
    \ y) => x._2 < y._2) // O(nlogn) -> O(n) when sorted in ascending order\n    \
    \    if (pairs.exists(_.last._1 % 2 == 1)) { // O(n) -> O(logn) when sorted in\
    \ descending order\n            pairs.reverse.map(_._1)\n        } else {\n  \
    \          pairs\n        }", "        if(array.isEmpty) array\n        else {\n\
    \            val sumOfFirstElement = array.head\n            val sumOfLastElement\
    \ = array.last\n            val isEven = sumOfFirstElement % 2 == 0 && sumOfLastElement\
    \ % 2 == 0\n            val isOdd = sumOfFirstElement % 2 != 0 && sumOfLastElement\
    \ % 2 != 0\n            if (isEven) array.sortBy(_ > sumOfLastElement)\n     \
    \       else array.sortBy(_ < sumOfFirstElement)\n        }", "        var sum\
    \ = 0\n        val length = array.size\n        val result = new scala.collection.mutable.ArrayList[Long]()\n\
    \        // if array is empty or contains only one element, return array directly\n\
    \        if(array.size == 0 || array.size == 1){\n            return array\n \
    \       }\n        // traverse the array\n        for(i <- 0 until length){\n\
    \            sum += array[i]\n            if(sum == 1){\n                result\
    \ += i\n            }\n            else if(sum == 0){\n                if(i !=\
    \ 0){\n                    result.remove(i)\n                }\n            }\n\
    \        }\n        return sortArray(result.sorted)", "        val sum : Long\
    \ = array.sum\n        val evenSum : Long = sum % 2\n\n        var evenCount :\
    \ Long = 0\n        var oddCount : Long = 0\n\n        var i = 0\n\n        var\
    \ currentArray = 0\n        while(i < array.size) {\n            val sumCurrent\
    \ : Long = array[i]\n            val lastIndex = i + 1\n\n            val oddSumCurrent\
    \ : Long = array.get(lastIndex).asInstanceOf[Long]\n\n            val evenSumCurrent\
    \ : Long = array.get(i).asInstanceOf[Long]\n\n            val temp : Long = if\
    \ (evenSumCurrent < evenSum) evenSumCurrent else evenSum\n\n            if (temp\
    \ % 2 == 0 && oddSumCurrent >= oddSum) currentArray += 1\n            if (temp\
    \ % 2 == 0 && oddSumCurrent < oddSum) currentArray -= 1\n\n            i += 2\n\
    \        }\n        if (evenCount != 0) {\n            currentArray = -currentArray\n\
    \        }\n        if (currentArray != 0) {\n            array.reverse\n    \
    \    } else {\n            array\n        }", "        if (array.isEmpty) return\
    \ array\n        val sum = array.reduceLeftOption(_ + _)\n        val odd = sum.getOrElse(0)\
    \ % 2 != 0\n        val newArray = array.sortWith(_ > _)\n        if (odd)\n \
    \           newArray.reverse\n        newArray", '        array.sortWith(_ < _)',
  "        val sumArray = array.foldLeft(0l.toLong)((sum, elem) => {\n           \
    \ if(sum % 2 != 0) sum + elem else sum - elem\n        })\n        if(sumArray\
    \ % 2 == 1) array.sortWith(_ > _) else array.sortWith(_ < _)", "        var sum\
    \ = 0\n        var result = array\n        for(i <- 0 until array.size){\n   \
    \         sum += i\n        }\n        if(sum.modulo(2)==1){\n            result\
    \ <- (array.sortBy(_.toLong).reverse)\n        }\n        else{\n            result\
    \ <- (array.sortBy(_.toLong))\n        }\n        result", "        // Write your\
    \ code here\n        if(array.head == 0l){\n            return array\n       \
    \ }\n        val first = array\n        val last  = array.tail\n        val reuslt\
    \ = first.head +last.head\n        val finalResult = if(reusld.toInt%2==1){\n\
    \            last.head + first\n        }else{\n            first.head + last.head\n\
    \        }\n        ", "        val a = new mutable.ArrayBuffer(array)\n     \
    \   val a2 = new Array[Long](a.length)\n        var sum = 0\n        var i = 0\n\
    \        var flag = 0\n        var n = 0\n        var j = 0\n        for (i <-\
    \ a.iterator; j <- a.iterator) {\n            sum = sum + (a(j))\n           \
    \ n += 1\n            if (sum % 2 == 0) {\n                flag = 0\n        \
    \    } else {\n                flag = 1\n            }\n            flag = (a(j)\
    \ > a(j + n)) | (a(j) < a(j + n))\n            if (flag == 1) {\n            \
    \    a2(j) = a(j)\n            }\n        }\n        val b = new ListBuffer[Long]()\n\
    \        for (i<-0 until n){\n            b.add(a2(i))\n        }\n        return\
    \ b.toList", "        var sum = 0l\n        var i = array.size\n        while\
    \ (i-- > 0) {\n            sum += array[i]\n        }\n        var result: List[Long]\
    \ = List()\n        if (sum % 2l.toLong != 0l.toLong) {\n            result =\
    \ array.sortWith(_ < _)\n        } else {\n            result = array.sortWith(_\
    \ > _)\n        }\n        return result", "        val sum =\n        array.foldLeft(0L){\n\
    \            (a: Long, b: Long) => a + b\n        }\n        if (sum % 2 ==0)\
    \ {\n            array.sorted\n        } else {\n            array.sorted(Ordering[Long].desc)\n\
    \        }", "        var sum = 0L\n        for(i <- array){\n            sum\
    \ += i\n        }\n        val oddEven = sum.toInt % 2\n        val reverseOrder\
    \ = sum.toInt / 2\n        val maxArray = array.max\n        if(oddEven == 1){\n\
    \            val sortedArray = array.sortWith((a: Long, b: Long)=>a>b)\n     \
    \       return sortedArray.reverse\n        }else{\n            val sortedArray\
    \ = array.sortWith((a: Long, b: Long)=>a>b).reverse\n            return sortedArray\n\
    \        }", "        val coscala = array.groupBy(x => x).mapValues(x => x.toList)\n\
    \        val sortedArray = coscala.mapValues(xs => {\n            val sorted =\
    \ xs.sorted\n            val first = sorted.head\n            val last = sorted.last\n\
    \            if (first.sum % 2 == 0 &&\n                last.sum % 2 == 0 &&\n\
    \                first.length > last.length) {\n                last.zip(last.drop(last.length\
    \ - 1))\n            } else {\n                sorted.reverse.zip(sorted.reverse.drop(sorted.length\
    \ - 1))\n            }\n        }).map(_._2).map(x => x.sorted)\n\n        //return\
    \ sortedArray", "        var sum = array.sum\n        val sorted = array.sorted\n\
    \        if(sum % 2 == 0) {\n            sorted.reverse\n        } else {\n  \
    \          sorted\n        }", "        val a = array.sortBy(-_)\n        var\
    \ sum = 0\n        var i = 0\n        var j = 0\n        var index = a.length\
    \ - 1\n        while (sum % 2 != 0) {\n            sum += a(i)\n            i\
    \ += 1\n        }\n        var left = sum\n        var right = sum\n        var\
    \ last = a(index)\n        while (j < index) {\n            while (left <= right\
    \ && a(j) < last) {\n                left += a(j)\n                j += 1 // skip\
    \ the already sorted element\n            }\n            while (left <= right\
    \ && a(j) >= last) {\n                right -= a(j)\n                j += 1 //\
    \ skip the already sorted element\n            }\n            val temp = left\n\
    \            left = right\n            right = temp\n        }\n        return\
    \ a.take(index) + a.drop(index)", "        var result : List[Long] = array\n \
    \       var sum : Long = 0\n        for (i <- 0 until result.length){\n      \
    \      sum += result(i)\n        }\n        if (sum % 2l.toLong > 0l.toLong){\n\
    \            result = result.sortBy(x => -x).reverse\n        }\n        result",
  "        var sum = 0\n        var max = array(0)\n        var index = array.size\n\
    \        while(index>0){\n            sum = sum + array.get(index-1)\n       \
    \     if(sum%2==1){\n                max = array.get(index-1)\n              \
    \  index = index-1\n            }else{\n                index = index-1\n    \
    \        }\n        }\n        //reverse sort if odd sum\n        if(sum%2==1){\n\
    \            array.sortBy(x=> -x)\n        }\n        array", "        val sum\
    \ : List[Long] = array.toList\n        val length = sum.size\n        val odd\
    \ = 1l.toLong / 2l.toLong\n        val even = 0l.toLong / 2l.toLong\n        if(sum.head\
    \ % 2l.toLong > odd) sum.reverse\n        else sum.sort", "        if (array.isEmpty)\
    \ array\n        else {\n            val sumOfFirstIndexValue = array.reduce(_\
    \ + _)\n            if (sumOfFirstIndexValue % 2 == 0) {\n                array.sorted\n\
    \            }\n            else {\n                array.sortedDescending\n \
    \           }\n        }"]
stop_tokens:
- "\n    }\n"
