language: scala
name: HumanEval_163_generate_integers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a<b)\
    \ List(a).reverse ::: generateIntegers(b-1,a)\n        else List()\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3m9sujdh.scala:18)\n\tat Problem.main(tmp3m9sujdh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var list\
    \ : List[Long] = Nil\n        if (a < b) { \n            list = a :: list \n \
    \       }\n        while (b > 0) {\n            list = (b / 2l).toLong :: list\
    \ \n            b = b % 2l\n        }\n        list.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpe_6wmna6.scala:20:14 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            b = b % \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) a :: Nil\n        else b :: generateIntegers(a / 10, a % 10).filter(x =>\
    \ x % 2 == 0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\
    \tat Problem$.generateIntegers(tmpki3i8b24.scala:15)\n\tat Problem$.gen"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenDigits\
    \ = scala.util.Random.shuffle((0 until a).toList)\n        val evenDigitsBetweenA\
    \ = evenDigits.takeWhile(_ < b)\n        val evenDigitsBetweenB = evenDigits.dropWhile(_\
    \ < b)\n        evenDigitsBetweenA.toList.sortBy(_.toString.charAt(0).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpou8wlxcu.scala:14:60\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e\
    [0m = scala.util.Random.shuffle((\e[31m0\e[0m until a).toList)\n\e[31m\e[31m \
    \  |\e[0m                                                            ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (a\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpou8wlxcu.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        evenDigitsBetweenA.toList.sortBy(_.toString.charAt(\e\
    [31m0\e[0m).toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val aDigitsToGo\
    \ = math.min(math.ceil(a.toDouble / 2.toDouble), b.toDouble)\n        var bDigitsToGo\
    \ = math.min(math.ceil(b - a.toDouble), a.toDouble)\n        var listOfInts =\
    \ List[Long]()\n        var current = 0\n        var currentNumber = 0\n     \
    \   while(current <= aDigitsToGo) {\n            currentNumber = math.floor(current)\n\
    \            current += 2\n            listOfInts += currentNumber.toLong\n  \
    \      }\n        current = 1\n        currentNumber = 1\n        while(current\
    \ <= bDigitsToGo) {\n            currentNumber = math.floor(current)\n       \
    \     current += 2\n            listOfInts += currentNumber.toLong\n        }\n\
    \        return listOfInts\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzwonz7fc.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            currentNumber = math.floor(current)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    Double\n\e[31m   |\e[0m   \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzwonz7fc.scala:22:23 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            listOfInts += currentNumber.toLong\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a\
    \ member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpzwonz7fc.scala:27:38 --------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m            currentNumber = math.floor(current)\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    Double\n\e[31m   |\e[0m               \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpzwonz7fc.scala:29:23 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            listOfInts += currentNumber.toLong\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b filter { x => x % 2 == 0 }\n        if (evens.length == 0) List()\n\
    \        else evens.sort\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4gkuqt5p.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m evens.sort\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of\
    \ IndexedSeq[Long] - did you mean evens.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        val a1 = a % 10\n\
    \        val a2 = a / 10\n        var a3 = a1 % 2\n        a1 = a1 // 2\n    \
    \    a2 = a2 // 2\n        while (b > 0) {\n            val b1 = b % 10\n    \
    \        val b2 = b / 10\n            var b3 = b1 % 2\n            b1 = b1 //\
    \ 2\n            b2 = b2 // 2\n            var c = 0\n            while ((b3 !=\
    \ a3) && (c < b2)) {\n                list.append((a1 * b1 + a2 * b2 + a3 * b3))\n\
    \                a3 = a3 * (2l - 1) + b3 // mod 2\n                b3 = b3 //\
    \ 2\n                c += 1\n            }\n            list.append((a1 * b1 +\
    \ a2 * b2 + a3 * b3))\n            a += 1\n        }\n        list.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoj39qcb2.scala:18:11 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        a1 = a1 \e[34m// 2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val a1\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpoj39qcb2.scala:19:11 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        a2 = a2 \e[34m// 2\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val a2\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpoj39qcb2.scala:24:15 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            b1 = b1 \e[34m// 2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val b1\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoj39qcb2.scala:25:15 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            b2 = b2 \e[34m// 2\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val b2\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoj39qcb2.scala:34:14\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            a += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean a.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def isEven(x:\
    \ Long) : Boolean = (x % 2) == 0\n        def digit(x: Long) : Int = {\n     \
    \       if (x < 10) {\n                0\n            } else if (x < 100) {\n\
    \                1\n            } else if (x < 1000) {\n                2\n  \
    \          } else if (x < 10000) {\n                3\n            } else if (x\
    \ < 100000) {\n                4\n            } else if (x < 1000000) {\n    \
    \            5\n            } else if (x < 10000000) {\n                6\n  \
    \          } else if (x < 100000000) {\n                7\n            } else\
    \ if (x < 1000000000) {\n                8\n            } else if (x < 10000000000)\
    \ {\n                9\n            } else {\n                10\n           \
    \ }\n        }\n\n        def getEven(x: Long) : List[Long] = {\n            val\
    \ res : List[Long] = List(x)\n            var x = x\n            while (x > 0)\
    \ {\n                if (isEven(x)) {\n                    res :+ x\n        \
    \        }\n                x = x / 10\n            }\n            return res\n\
    \        }\n\n        def getOdd(x: Long) : List[Long] = {\n            val res\
    \ : List[Long] = List(x)\n            var x = x\n            while (x > 0) {\n\
    \                if (!isEven(x)) {\n                    res :+ x\n           \
    \     }\n                x = x / 10\n            }\n            return res\n \
    \       }\n\n        // For each number in a, get the numbers in b that are less\
    \ than it.\n        // For each of those numbers, find if there is a number in\
    \ b that is less\n        // than or equal to it.\n        // For each of those\
    \ numbers, find the lowest number in b to which it\n        // is less than or\
    \ equal to it.\n        // If there is not one, add it to the results list.\n\
    \        val results : List[Long] = getEven(a) flatMap {\n            x => getOdd(x)\
    \ flatMap {\n                y => getEven(y) flatMap {\n                    z\
    \ => {\n                        if (z >= x) z\n                        else List()\n\
    \                    }\n                }\n            }\n        } flatMap {\n\
    \            y => getOdd(y) flatMap {\n                z => {\n              \
    \      if (z >= y) z\n                    else List()\n                }\n   \
    \         }\n        } flatMap {\n            z => {\n                if (z >=\
    \ 10) z\n                else List()\n            }\n        } flatMap {\n   \
    \         z => {\n                if (z >= 100) z\n                else List()\n\
    \            }\n        } flatMap {\n            z => {\n                if (z\
    \ >= 1000) z\n                else List()\n            }\n        } flatMap {\n\
    \            z => {\n                if (z >= 10000) z\n                else List()\n\
    \            }\n        } flatMap {\n            z => {\n                if (z\
    \ >= 100000) z\n                else List()\n            }\n        } flatMap\
    \ {\n            z => {\n                if (z >= 1000000) z\n               \
    \ else List()\n\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_5moxed.scala:126:0 ---------------------------\e\
    [0m\e[0m\n\e[31m126 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp9_5moxed.scala:34:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (x < \e[31m10000000000\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                       number too large\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9_5moxed.scala:43:20 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m            \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m   |\e[0m   \
    \                 ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvariable\e\
    [0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9_5moxed.scala:55:20 ---------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m            \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m   |\e[0m   \
    \                 ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvariable\e\
    [0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9_5moxed.scala:75:36 --------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m                        \e[33mif\e[0m (z >= x) z\n\e[31m\e[31m   |\e[0m\
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                   Found:    (z : Long)\n\e[31m   |\e[0m                    \
    \                Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E051] Reference Error: /tmp/tmp9_5moxed.scala:83:26 ------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m                    \e[33mif\e[0m (z >= y) z\n\e[31m\e\
    [31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload.\
    \ The overloaded alternatives of \e[33mmethod\e[0m \e[35m>=\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31"
  stdout: ''
  timestamp: 1660009473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val digits\
    \ = mutable.ArrayBuffer(a, b).map(_.toLong).toList\n        if (digits.size <\
    \ 2) {\n            return List()\n        }\n        val a = digits.head\n  \
    \      val b = digits.tail.head\n        val digitPairs = generateDigitPairs(a,\
    \ b, digits.size)\n        digits.toList ::: digitPairs.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp45eb9xyd.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer(a,\
    \ b).map(_.toLong).toList\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp45eb9xyd.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigitPairs\e[0m = generateDigitPairs(a,\
    \ b, digits.size)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: generateDigitPairs\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m\
    \ = (a <= b)\n        if (m) a.toList.sorted else b.toList.sorted\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpewlapu08.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (m) a.toList.sorted \e[33melse\e\
    [0m b.toList.sorted\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value toList is not a member of Long - did you mean a.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpewlapu08.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (m) a.toList.sorted \e[33melse\e\
    [0m b.toList.sorted\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList is not a member of Long\
    \ - did you mean b.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      if (a <\
    \ b)\n        List().toList ::: generateIntegers(a+1, b)\n      else {\n     \
    \   val m = a / b\n        generateIntegers(m, b) ::: List(m).toList\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.immutable.List.prependedAll(List.scala:148)\n\
    \tat scala.collection.immutable.List$.from(List.scala:684)\n\tat scala.collection.immutable.List$.from(List.scala:681)\n\
    \tat scala.collection.IterableFactory.apply(Factory.scala:103)\n\tat scala.collection.IterableFactory.apply$(Factory.scala:103)\n\
    \tat scala.collection.immutable.List$.apply(List.scala:681)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:18)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:18)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.generateIntegers(tmpue6bmrrv.scala:18)\n\tat Problem$.generateIntegers(tmpue6bmrrv.scala:15)\n\
    \tat Problem$.ge"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ = List();\n        var remainder = (b - a).abs % 10;\n        var i = 0;\n \
    \       for(; i + 1 < remainder; i = i + 1) {\n            if(a <= ((b - a).abs\
    \ / 10 * i) ) result = result :+ i;\n        }\n        for(; i + 1 < remainder\
    \ - i; i = i + 1) {\n            if((a <= ((b - a).abs / 10 * i) ) ) result =\
    \ result :+ i;\n        }\n        if(remainder > i ) result = result :+ remainder\
    \ - i;\n        return result;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxulp8phb.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(; i + \e[31m1\e[0m < remainder;\
    \ i = i + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpxulp8phb.scala:17:31 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m(; i + \e[31m1\e[0m < remainder; i = i + \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but ';' found\n\e[31m\e[31m--\
    \ [E020] Syntax Error: /tmp/tmpxulp8phb.scala:17:42 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(; i + \e[31m1\e[0m < remainder;\
    \ i = i + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \  \e[33myield\e[0m or \e[33mdo\e[0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E032] Syntax Error: /tmp/tmpxulp8phb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(; i + \e[31m1\e[0m < remainder\
    \ - i; i = i + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m\
    \   |\e[0m            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpxulp8phb.scala:20:35 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(; i + \e[31m1\e[0m < remainder - i;\
    \ i = i + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \      ^\e[0m\n\e[31m   |\e[0m                                   '<-' expected,\
    \ but ';' found\n\e[31m\e[31m-- [E020] Syntax Error: /tmp/tmpxulp8phb.scala:20:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(;\
    \ i + \e[31m1\e[0m < remainder - i; i = i + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) return List()\n        val c = a % b\n        var d: Long = a / b\n   \
    \     var r: List[Long] = List(b) //List(b)\n        while (c == 0) d = 2 * d\n\
    \        c = c - b\n        c > 0 match {\n            case true =>\n        \
    \        val newC = c - b\n                val newd = d / newC\n             \
    \   r += newC.toLong\n                d = newd\n            case false =>\n  \
    \      }\n        if (d > 0) r += d.toLong\n        return r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdh478wwd.scala:19:10 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        c = c - b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val c\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdh478wwd.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                r += newC.toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdh478wwd.scala:28:21\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m (d\
    \ > \e[31m0\e[0m) r += d.toLong\n\e[31m\e[31m   |\e[0m                   ^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val min\
    \ = math.min(a, b)\n        val max = math.max(a, b)\n        val nums = mutable.ListBuffer.empty[Long]\n\
    \        var carry = true\n        for (i = min.toInt ; i >= 0; i = i - 2) {\n\
    \            if (i % 2 == 0) {\n                carry = true\n            }\n\
    \            else {\n                carry = false\n            }\n          \
    \  nums += i.toLong\n            if (carry && i < max) {\n                nums\
    \ += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyxrlu6lz.scala:18:15 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i = min.toInt ; i >= \e[31m0\e\
    [0m; i = i - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m\
    \   |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpyxrlu6lz.scala:18:35 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mfor\e[0m (i = min.toInt ; i >= \e[31m0\e[0m; i = i\
    \ - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   '<-' expected, but ';'\
    \ found\n\e[31m\e[31m-- [E020] Syntax Error: /tmp/tmpyxrlu6lz.scala:18:46 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i = min.toInt ; i >= \e[31m0\e\
    [0m; i = i - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \             \e[33myield\e[0m or \e[33mdo\e[0m expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxrlu6lz.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyxrlu6lz.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i = min.toInt ; i >= \e[31m0\e\
    [0m; i = i - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenList\
    \ : scala.collection.mutable.ListBuffer[Long] = ListBuffer()\n        val rem\
    \ = a % b\n        var start = 0\n        var last = 0\n        while(start <=\
    \ rem){\n            val number = (rem * 100 + start).toLong\n            if(number\
    \ > a){\n                break\n            }\n            if(evenList.contains(number)){\n\
    \                continue\n            }\n            evenList += number\n   \
    \         last += number\n            start = last\n        }\n        if(evenList.size\
    \ > 0){\n            evenList.toList\n        }\n        else{\n            List()\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e7a1ju8.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9e7a1ju8.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9e7a1ju8.scala:27:17\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            last += number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        for (i = a to b - 1){\n            if\
    \ (i % 2 == 0)\n                list += i.toLong\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqbwasch5.scala:15:15 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i = a to b - \e[31m1\e[0m){\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqbwasch5.scala:15:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m\
    \ (i = a to b - \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                        \
    \    ^\e[0m\n\e[31m   |\e[0m                            '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqbwasch5.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbwasch5.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqbwasch5.scala:18:9\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.con"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenIntegers\
    \ : List[Long] = a to b by 2 filter (_ % 2 == 0)\n        val evenIntegerList\
    \ : List[Long] = evenIntegers.toList\n        evenIntegerList.sortWith (_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgojkzbzo.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenIntegers\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = a to b by \e[31m2\e[0m filter (_ % \e\
    [31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             Found:    IndexedSeq[Long]\n\e[31m   |\e[0m    \
    \                                    Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      val ints\
    \ = scala.collection.mutable.ListBuffer[Long]()\n      var i = a\n      var j\
    \ = b\n      while (i <= j) {\n        if (i.toString.length == 2) ints += i.toLong\n\
    \        i += 1\n        j += 1\n      }\n      if (ints.isEmpty) ints += a.toLong\n\
    \      ints.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ == 0 || b == 0) return Nil\n        def isEven(i: Long) : Boolean = i % 2 ==\
    \ 0\n        def isLessThan(n: Long) : Boolean = n < a\n        def isGreaterThan(n:\
    \ Long) : Boolean = n > b\n        def rec(i : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (isEven(i) && isLessThan(b)) acc :+ i\n            if (isEven(i)\
    \ && isGreaterThan(b)) rec(i, acc)\n            else if (isLessThan(i) && isGreaterThan(a))\
    \ rec(i, acc :+ i)\n            else Nil\n        }\n        rec(0, List(a))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1hmkpry.scala:27)\n\tat Problem.main(tmpf1hmkpry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val s\
    \ = math.max(b.toInt, a.toInt)\n        var res = []\n        for (x <- 0 to s)\
    \ {\n            val rem = math.min(b.toInt, a.toInt) - x\n            res ::=\
    \ rem :: 0 until rem\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy0dbl9cs.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy0dbl9cs.scala:16:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m\
    \ (x <- \e[31m0\e[0m to s) {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>'\
    \ expected, but 'end of statement' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy0dbl9cs.scala:18:16 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            res ::= rem :: \e[31m0\e[0m until rem\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m            value ::= is not a member\
    \ of Null\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy0dbl9cs.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            res ::= rem ::\
    \ \e[31m0\e[0m until rem\n\e[31m\e[31m   |\e[0m                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                        value :: is not a member of Int\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val ans\
    \ = collection.mutable.ListBuffer.empty[Long]\n        for (d <- a.toInt until\
    \ b.toInt) {\n            if (d.toLong rem 2 == 0) {\n                ans += d\n\
    \            }\n        }\n        ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpssmi1ckp.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (d.toLong rem \e[31m2\e[0m\
    \ == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value rem is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var temp : Long = a - 1\n\n        while(temp <=\
    \ b) {\n            if (temp % 2 == 0) {\n                result = result :::\
    \ List(temp.toLong)\n            }\n            temp += 1\n        }\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps_9qw27s.scala:26)\n\tat Problem.main(tmps_9qw27s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val s\
    \ = scala.util.Random.nextInt(100) + 1 //random\n        val m = a / s\n     \
    \   val n = b / s\n        val k = m / n\n        if (k > 0) {\n            if\
    \ (k % 2 == 0) {\n                List[Long](m / n) ::: generateIntegers(m, n)\n\
    \            } else {\n                List[Long]() ::: generateIntegers(m, n)\n\
    \            }\n        } else {\n            if (n % 2 == 0) {\n            \
    \    List[Long]() ::: generateIntegers(a, b)\n            } else {\n         \
    \       List[Long]() ::: generateIntegers(a, b)\n            }\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.generateIntegers(tmp6e0kxux1.scala:17)\n\
    \tat Problem$.generateIntegers(tmp6e0kxux1.scala:26)\n\tat Problem$.main(tmp6e0kxux1.scala:33)\n\
    \tat Problem.main(tmp6e0kxux1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ < 0 || b < 0) return List()\n        if (a == 0 || b == 0) return List()\n \
    \       val max = (math.max(a, b)).toLong\n        val min = (math.min(a, b)).toLong\n\
    \        if (min == max) return List()\n        val l = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        val r = scala.util.Random.nextInt(max-min+1)\n        var i = min - 1\n\
    \        while (i <= max) {\n            l.append(i)\n            i += 1\n   \
    \     }\n        val evens = l.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ odd = l.filter(_ % 2 == 1).sortWith(_ < _)\n        var even = evens.head\n\
    \        var odd = odd.head\n        while (even != odd) {\n            l.append(even)\n\
    \            even = evens.dropRight(1)\n            odd = odd.dropRight(1)\n \
    \       }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafcn7g_o.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36modd\e[0m = odd.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already\
    \ defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafcn7g_o.scala:20:42 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = scala.util.Random.nextInt(max-min+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    Long\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpafcn7g_o.scala:30:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mwhile\e[0m (even != odd) {\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Long\
    \ and scala.collection.mutable.ListBuffer[Long] cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafcn7g_o.scala:32:34\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            even = evens.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpafcn7g_o.scala:33:16 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            odd = odd.dropRight(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    Reassignment to val odd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val x\
    \ = a % b\n        val evenList = a until x filter (_ % 2 == 0)\n        val oddList\
    \ = x until b filter (_ % 2 == 1)\n        oddList.filterNot(evenList.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1aqw_9ns.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        oddList.filterNot(evenList.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- a until b){\n          \
    \  list += i.toLong\n        }\n        list.sortWith((a, b) => a < b)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmput2t6c9u.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n\
    \ = b - a\n        val evens = Seq[Long]()\n        for( x <- 0 until n ) {\n\
    \          val evenDigit = x % 2\n          if(evenDigit == 0) evens += x\n  \
    \      }\n        evens\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp255vy3m9.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( x <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp255vy3m9.scala:18:35 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m          \e[33mif\e[0m(evenDigit == \e[31m0\e[0m) evens +=\
    \ x\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue += is not a member of scala.collection.mutable.Seq[Long] - did\
    \ you mean evens.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp255vy3m9.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        evens\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (evens : scala.collection.mutable.Seq[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i1 = -1\n        var i2 = -1\n   \
    \     var cur = a\n        while (cur <= b) {\n            i1 = cur.toInt\n  \
    \          i2 = cur\n            if (i1 == 0) {\n                cur += 1\n  \
    \              i1 = cur.toInt\n                list.append((i1).toLong)\n    \
    \        }\n            if (i1 == 1) {\n                cur += 1\n           \
    \     i2 = cur.toInt\n                if (i2 == 0) {\n                    cur\
    \ += 1\n                    i2 = cur.toInt\n                    list.append((i1).toLong)\n\
    \                } else {\n                    list.append((i1).toLong)\n    \
    \                cur += 1\n                }\n            }\n        }\n     \
    \   list.sortWith((x, y) => x <= y)\n        list.map(_.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5cpxtaew.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5cpxtaew.scala:20:17 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            i2 = cur\n\e[31m\e[31m   |\e[0m         \
    \        ^^^\e[0m\n\e[31m   |\e[0m                 Found:    (cur : Long)\n\e\
    [31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val min\
    \ = a\n        val max = b\n        if (min > max) List()\n        else {\n  \
    \          val l = (max - min)/2\n            val evens = generateIntegers(min,\
    \ l)\n            val odd = generateIntegers(l+1, max)\n            evens ++ odd\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:19)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\
    \tat Problem$.generateIntegers(tmphxtcoybf.scala:20)\n\tat Problem$.gen"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      var even\
    \ = a.toString.toList\n      for (i <- 1 to b) {\n        even = even :+ a.toString.toList.filter(_.isDigit).map(_.toLong)\n\
    \      }\n      even.sortWith((a, b) => a < b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvoknpvyn.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m1\e[0m to b) {\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m \
    \  |\e[0m                     Found:    (b : Long)\n\e[31m   |\e[0m          \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvoknpvyn.scala:16:62 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        even = even :+ a.toString.toList.filter(_.isDigit).map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    List[Long]\n\e[31m   |\e\
    [0m                       Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvoknpvyn.scala:18:19 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m      even.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a < b)\n\
    \e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m      Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var remainder = b - a\n        while(a > 0 && remainder\
    \ > 0) {\n            remainder /= 10\n            result = result :+ a.toLong\n\
    \            a = remainder\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbfb3th_l.scala:19:14 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            a = remainder\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val a\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result:\
    \ List[Long] = new mutable.ListBuffer[Long]()\n        val min = a\n        val\
    \ max = b\n        while(min <= max) {\n            if(min % 2 == 0 && max % 2\
    \ == 0) {\n                result.append(min.toLong)\n                min++\n\
    \                max++\n            } else if(min % 2 == 0) {\n              \
    \  min++\n            } else {\n                max++\n            }\n       \
    \ }\n        result ++ generateIntegers(min.toLong, max.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo1dbq9uk.scala:21:21 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                max++\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpo1dbq9uk.scala:23:21 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                min++\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo1dbq9uk.scala:25:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max++\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo1dbq9uk.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo1dbq9uk.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result.append(min.toLong)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not\
    \ a member of List[Long] - did you mean result.appended?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo1dbq9uk.scala:20:19 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                min++\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                value ++ is not a member of Long\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var a\
    \ = a\n        var b = b\n        var list = List[Long]()\n        while (a <\
    \ b) {\n            list += a\n            a = a.toInt\n            b = b.toInt\n\
    \        }\n        list += b\n        return list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3uae0mmw.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = a\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp3uae0mmw.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = b\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3uae0mmw.scala:18:17 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            list += a\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uae0mmw.scala:22:13 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        list += b\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var x\
    \ = a\n        var y = b\n        val result: List[Long] = new mutable.LinkedList\n\
    \        while (x <= y) {\n            result.add(x)\n            val temp = a\n\
    \            a = b\n            b = temp\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr5ut7i3.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcr5ut7i3.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            result.add(x)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value add is not a member\
    \ of List[Long]\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcr5ut7i3.scala:20:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            a = b\n\e\
    [31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcr5ut7i3.scala:21:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            b = temp\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val a\
    \ = a.toInt\n        val b = b.toInt\n        val even = List.range(0, a).filter(x\
    \ => x % 2 == 0)\n        val odd = List.range(a, b).filter(x => x % 2 == 1)\n\
    \        odd.sortWith(_ > _)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpebxgx7py.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpebxgx7py.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpebxgx7py.scala:17:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = List.range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                           ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mShortIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Integral[A] of parameter evidence$3 of \e[33mmethod\e[0m \e[35mrange\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableFactory\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val rangeIterator\
    \ = a until b\n        val evenNumbers = rangeIterator.filter(x => x % 2 == 0).toList\n\
    \        val evenNumbersSort = evenNumbers.sort\n        val evenNumbersLength\
    \ = evenNumbersSort.length\n        if (evenNumbersLength > 0){\n            val\
    \ result = new mutable.ListBuffer[Long]()\n            val curr = evenNumbersSort(0)\n\
    \            result.add[Long](curr)\n            var i = 0\n            while\
    \ (i < evenNumbersLength){\n                val nextNum = evenNumbersSort(i +\
    \ 1)\n                if (curr > nextNum){\n                    result.add[Long](curr)\n\
    \                    curr = nextNum\n                }\n                else{\n\
    \                    i += 1\n                }\n            }\n            result\n\
    \        }\n        else List()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqdd25d76.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenNumbersSort\e[0m = evenNumbers.sort\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sort is not a member of List[Long] - did you mean evenNumbers.sortBy?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdd25d76.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqdd25d76.scala:27:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ curr = nextNum\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Reassignment to val curr\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val nums\
    \ : List[Long] = a #:: b\n        val evenList : List[Long] = nums.filter(num\
    \ => num % 2 == 0).sortBy(num => num.toInt)\n        if (evenList.size == 0){\n\
    \            nums\n        } else {\n            generateIntegers(evenList(1),\
    \ evenList(0))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyywmh69v.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = a #:: b\n\e[31m\e[31m   |\e[0m                        \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ #:: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var aStr\
    \ : List[String] = List()\n        var bStr : List[String] = List()\n        aStr\
    \ = (a.toString / 10).toString.reverse.dropWhile(_.isDigit).reverse\n        bStr\
    \ = (b.toString / 10).toString.reverse.dropWhile(_.isDigit).reverse\n        var\
    \ a : Int = aStr.head.toInt\n        var b : Int = bStr.head.toInt\n        if\
    \ (a > b) {\n            var temp : Int = a\n            a = b\n            b\
    \ = temp\n        }\n        var i : Int = 1\n        var x : Int = 1\n      \
    \  var res : List[Long] = List()\n        if (b > a) {\n            while (i <\
    \ b - a + 1) {\n                while (i < a && aStr.indexOf(i.toString + x.toString)\
    \ == -1) {\n                    i += 1\n                    x += 1\n         \
    \       }\n                while (i < b && bStr.indexOf(i.toString + x.toString)\
    \ == -1) {\n                    i += 1\n                    x += 1\n         \
    \       }\n                res = res :+ (x.toLong * 10 + i.toLong)\n         \
    \       i += 1\n                x += 1\n            }\n        } else {\n    \
    \        while (i < a - b + 1) {\n                while (i < b && bStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                while (i < a && aStr.indexOf(i.toString\
    \ + x.toString) == -1) {\n                    i += 1\n                    x +=\
    \ 1\n                }\n                res = res :+ (x.toLong * 10 + i.toLong)\n\
    \                i += 1\n                x += 1\n            }\n        }\n  \
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavcua0cy.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        aStr = (a.toString / \e[31m10\e[0m).toString.reverse.dropWhile(_.isDigit).reverse\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavcua0cy.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        bStr = (b.toString / \e[31m10\e[0m).toString.reverse.dropWhile(_.isDigit).reverse\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        if (a < b) result = a.toLong :: generateIntegers((a\
    \ + 2).toLong, b)\n        else           result = b.toLong :: generateIntegers(a,\
    \ b - (b - a))\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\
    \tat Problem$.generateIntegers(tmp5wwplmww.scala:16)\n\tat Problem$.gen"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ < 0) List(a)\n        else if (b == a) List()\n        else {\n            val\
    \ r = generateIntegers((a / b).toInt, (b % b).toInt)\n            r ++ List((a\
    \ / b).toInt.toLong, b % b).toInt\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_vr7dylu.scala:18:51 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            r ++ List((a / b).toInt.toLong, b % b).toInt\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val ls\
    \ = Vector(a.toLong to b.toLong).map(_.toLong).toList\n        val lv = List(0\
    \ until ls.size)\n        var i = 1\n        while(i <= ls.size) {\n         \
    \   if(ls(i) % 2 == 0) {\n                lv.insert(i, ls(i).toLong)\n       \
    \         i += 1\n            }\n            i += 1\n        }\n        lv.sortWith(_\
    \ < _)\n        lv.foldLeft(Vector.empty[Long])((v, n) => {\n            if(n.toLong\
    \ < a.toLong) {\n                v.drop(1)\n            } else {\n           \
    \     v.prepend(n.toLong)\n            }\n            v\n        })\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphpoowx9f.scala:14:52 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mls\e[0m = Vector(a.toLong\
    \ to b.toLong).map(_.toLong).toList\n\e[31m\e[31m   |\e[0m                   \
    \                               ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is\
    \ not a member of scala.collection.immutable.NumericRange.Inclusive[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphpoowx9f.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(ls(i) % \e[31m2\e[0m == \e\
    [31m0\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value % is not a member of Nothing\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphpoowx9f.scala:19:19 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                lv.insert(i, ls(i).toLong)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value insert is not a member\
    \ of List[Range] - did you mean lv.init?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphpoowx9f.scala:19:35 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                lv.insert(i, ls(i).toLong)\n\e[31m\e[31m   |\e[0m         \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \       value toLong is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphpoowx9f.scala:24:22 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        lv.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m                    ^^^\e\
    [0m\n\e[31m   |\e[0mvalue < is not a member of Range, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import"
  stdout: ''
  timestamp: 1660009483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ == 0) Nil\n        else generateIntegers(a /10 , b) + a.toLong * 10\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3sdhgdt7.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m generateIntegers(a /\e[31m10\e\
    [0m , b) + a.toLong * \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def digits(x\
    \ : Long) : List[Long] = {\n            var res : List[Long] = Nil\n         \
    \   while(x >= 10) {\n                res = x % 10l  :: res\n                x\
    \ /= 10\n            }\n            res ::: List(x.toLong)\n        }\n      \
    \  val digitA = digits(a)\n        val digitB = digits(b)\n        val even =\
    \ digitA.filter(_ % 2 == 0).sortBy(x => x).zipWithIndex.toList\n        val odd\
    \ = digitB.filter(_ % 2 == 1).sortBy(x => x).zipWithIndex.toList\n        if (even.size\
    \ == 0) List()\n        else if(odd.size == 0) odd.head\n        else even.head\
    \ :: odd.head\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hfojtuq.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean x.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4hfojtuq.scala:27:35 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m(odd.size == \e[31m0\e[0m) odd.head\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    (Long, Int)\n\e[31m   |\e[0m     \
    \                          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4hfojtuq.scala:28:23 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m even.head :: odd.head\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value ::\
    \ is not a member of (Long, Int) - did you mean (Long, Int).*:?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a>b)\
    \ {\n            return Nil\n        }\n        var result : List[Long] = Nil\n\
    \        var firstDigit = a%b\n        var b = b-firstDigit\n        var remain\
    \ = b\n        while(remain > 0) {\n            val nextDigit = a%b\n        \
    \    result::=List(firstDigit.toLong+nextDigit.toLong)\n            a = b\n  \
    \          b = b-nextDigit\n            remain = b\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpafyu525g.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = b-firstDigit\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpafyu525g.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            result::=List(firstDigit.toLong+nextDigit.toLong)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is\
    \ not a member of List[Long] - did you mean List[Long].::?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpafyu525g.scala:24:14 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            a = b\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // If\
    \ b is not an integer, return.\n        if (b > a) List()\n        // If b is\
    \ equal to a, return.\n        else if (a == b) List(b.toLong)\n        else {\
    \ \n            // If a%b is 0, then a is in odd digits, add b.\n            if\
    \ (a%b == 0) a :: generateIntegers(a, b.toLong)\n            else a :: generateIntegers(b.toLong,\
    \ a)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6jqhdqh6.scala:25)\n\tat Problem.main(tmp6jqhdqh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009486
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result:\
    \ List[Long] = Nil\n        var min = a\n        var max = b\n        var minIndex\
    \ = 0\n        while(max > min) {\n            var mid = min + (max-min) / 2\n\
    \            if(mid % 2 == 0) {\n                result = result :+ mid.toLong\n\
    \                min = mid\n            }\n            else {\n              \
    \  max = mid\n            }\n        }\n        var resultList = result.sortBy(_.toInt).reverse\n\
    \        return resultList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val r\
    \ : Int = Math.min(a, b).toInt\n        val s = List(l.toLong for l in (a to b).reverse).take(r)\n\
    \        if (b.toInt >= a.toInt) {\n            s ::: List(b.toLong).reverse.take(r)\n\
    \        } else {\n            List().reverse\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmhueuy6n.scala:15:30 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = List(l.toLong \e\
    [33mfor\e[0m l in (a to b).reverse).take(r)\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                              ')'\
    \ expected, but 'for' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhueuy6n.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36ms\e[0m = List(l.toLong \e[33mfor\e[0m l in (a to b).reverse).take(r)\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate(a:\
    \ Long, b: Long, list : List[Long]) ={\n            if (a > b) {\n           \
    \     list\n            } else if (b == 0) {\n                list\n         \
    \   } else if (a > 0 && b > 0) {\n                list :+ b.toLong :+ a.toLong\n\
    \                generate(a - b, b - 1, list)\n            } else {\n        \
    \        list\n            }\n        }\n        generate(b, a, List.empty[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpflzlqtcm.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                generate(a - b, b - \e[31m1\e[0m, list)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m               Overloaded\
    \ or recursive \e[33mmethod\e[0m \e[35mgenerate\e[0m needs return type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ < 0)\n            throw new IllegalArgumentException(\"b < 0\")\n        val\
    \ max = (b max a).toInt\n        val list = List.fill(max)(0)\n        while (a\
    \ < b) {\n            val remain = b - a\n            a += 2\n            val\
    \ l = remain.toLong\n            if (l % 2 == 0) list.+= l\n        }\n      \
    \  if (list.length == 0)\n            List()\n        else\n            list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5wuytcsu.scala:22:37 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (l % \e[31m2\e[0m == \e[31m0\e\
    [0m) list.+= l\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wuytcsu.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            a += \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp5wuytcsu.scala:22:33 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m (l % \e[31m2\e[0m == \e[31m0\e[0m) list.+= l\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value += is not a member of List[Int] - did you mean list.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wuytcsu.scala:27:12 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            list\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (list : List[Int])\n\e[31m   |\e[0m\
    \            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var current\
    \ = a\n        val result = new mutable.ListBuffer[Long]()\n        while (current\
    \ <= b) {\n            if (current % 2 == 0) {\n                result += current\n\
    \            }\n            current += 1\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppa28ifsj.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n1\
    \ = a.toInt % b\n        val n2 = a.toInt / b\n        if (n2 != 0) {\n      \
    \      val n3 = a * (b / n2)\n            val n4 = b * n2\n            if (n3\
    \ <= n4) {\n                val res : List[Long] = List()\n                val\
    \ i1 : Int = 1\n                while (i1 <= n3) {\n                    val i2\
    \ = n4\n                    val i3 = i2 * i1\n                    val i4 = i2\
    \ * i3\n                    if (i4 < n3) {\n                        i2 += 1\n\
    \                    }\n                    res += b * i3\n                  \
    \  i1 += 1\n                }\n                res\n            } else {\n   \
    \             val i1 = 1\n                val i2 = n4\n                while (i1\
    \ <= n3) {\n                    val i3 = n4\n                    val i4 = i2 *\
    \ i3\n                    if (i4 < n3) {\n                        i2 += 1\n  \
    \                  }\n                    val i5 = i2 * i1\n                 \
    \   res += b * i3\n                    res += b * i5\n                    i1 +=\
    \ 1\n                }\n                res\n            }\n        } else {\n\
    \            List()\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1789wgv.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        i2 += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \     value += is not a member of Long - did you mean i2.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi1789wgv.scala:29:24 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                    res += b * i3\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member\
    \ of List[Long] - did you mean res.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi1789wgv.scala:30:23 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m                    i1 += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                   value += is not a member\
    \ of Int - did you mean i1.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1789wgv.scala:40:27\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                        i2\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Long - did you mean\
    \ i2.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1789wgv.scala:43:20\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                    res +=\
    \ b * i3\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: res\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi1789wgv.scala:44:20 ------------------------\e[0m\e[0m\n\e[31m44 |\e\
    [0m                    res += b * i5\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^\e[0m\n\e[31m   |\e[0m                    Not found: res\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1789wgv.scala:45:23 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    i1 += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ += is not a"
  stdout: ''
  timestamp: 1660009491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a.toInt % 2 != 0\n        val reminder = (a / 2).toInt % 2 == 0\n        val\
    \ x = a.toInt / 2\n        var y = (b - a) / 2\n        var z = 0\n\n        while\
    \ (x * 2 < y) {\n            val rem = z.abs\n            if (rem > 0) z += rem\n\
    \            else z = 0\n            y += 2\n        }\n\n        if (even) {\n\
    \            val rem = z.abs\n            if (rem > 0) z += rem\n            else\
    \ z = 0\n        }\n        var rem = z.abs\n        if (rem > 0) z += rem\n \
    \       else z = 0\n\n        val digits = List(a)\n        while (z.abs > 0)\
    \ {\n            if (z.abs % 2 == 1) digits += z.toLong\n            else digits\
    \ += z.abs / 2\n            z += 1\n        }\n\n        if (even) {\n       \
    \     val even = digits(0).abs\n            if (even != 0) digits(0) += even\n\
    \            else digits(0) = 0\n        }\n        digits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgr0qh_j_.scala:38:39 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mif\e[0m (z.abs % \e[31m2\e[0m == \e\
    [31m1\e[0m) digits += z.toLong\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of List[Long]\
    \ - did you mean digits.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgr0qh_j_.scala:39:24\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33melse\e\
    [0m digits += z.abs / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of List[Long] - did you mean\
    \ digits.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgr0qh_j_.scala:45:37\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mif\e[0m\
    \ (even != \e[31m0\e[0m) digits(\e[31m0\e[0m) += even\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpgr0qh_j_.scala:46:17 ------------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m            \e[33melse\e[0m digits(\e[31m0\e[0m) = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Long] - did you mean digits.updated?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Only\
    \ odd numbers matter\n        val isOdd = a % 2 == 1\n        // Find the even\
    \ digit\n        val isEven = a % 2 == 0\n        // Find even numbers in the\
    \ range\n        val even = if(isEven) a :: b\n        else a :: b\n        val\
    \ odd = if(isOdd) a.drop(1) + b\n        else a\n        // Find the even numbers\
    \ smaller than the given range\n        val smaller = odd.filter(_ < a)\n    \
    \    // Find the odd numbers smaller than the given range\n        val greater\
    \ = even.filter(_ >= a)\n        // Find the common digits\n        val common\
    \ = if(smaller.isEmpty) greater.toList\n        else smaller.intersect(greater).toList\n\
    \        // Find the common digits\n        val evens = if(common.isEmpty) odd.toList\n\
    \        else common.intersect(odd).toList\n        if(evens.isEmpty) odd.toList\n\
    \        else evens.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi234v9tb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = \e[33mif\e[0m(isEven)\
    \ a :: b\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value :: is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpi234v9tb.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m a :: b\n\e[31m\e[31m   |\e[0m\
    \               ^^^^\e[0m\n\e[31m   |\e[0m               value :: is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi234v9tb.scala:21:30\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = \e[33mif\e[0m(isOdd) a.drop(\e[31m1\e[0m) + b\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \          value drop is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var n\
    \ = 0\n        while (b >= 1) {\n            val n = b.toString.toLong\n     \
    \       val digits = n.toString().takeWhile(_ != '0').toList\n            a %\
    \ b == 0 match {\n                case true =>\n                    println(digits)\n\
    \                    digits ++ generateIntegers(a / b, (b - 1).toLong)\n     \
    \           case false =>\n                    println(digits)\n             \
    \       generateIntegers(a / b, (b - 1).toLong)\n            }\n            b\
    \ = b - 1\n        }\n        println()\n        List[Long]()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpruc4vclz.scala:26:14 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            b = b - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      var acc\
    \ = 0\n      val ls = List(a,b).filter(_ > 0).zipWithIndex.filter { case(x,i)\
    \ => i % 2 == 0 }\n      while (ls.nonEmpty) {\n        val l = ls.head._2\n \
    \       ls = ls.tail\n        acc += l.toLong\n        acc %= 10\n        if (acc\
    \ >= 10) {\n          acc -= 10\n          ls = ls.reverse // remove this line\
    \ to see the difference\n        }\n      }\n      acc\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmprc7amchl.scala:18:11 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        ls = ls.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val ls\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprc7amchl.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        acc += l.toLong\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmprc7amchl.scala:23:13\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m          ls = ls.reverse\
    \ \e[34m// remove this line to see the difference\e[0m\n\e[31m\e[31m   |\e[0m\
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Reassignment to val\
    \ ls\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprc7amchl.scala:26:6\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m      acc\n\e[31m\e[31m   |\e\
    [0m      ^^^\e[0m\n\e[31m   |\e[0m      Found:    (acc : Int)\n\e[31m   |\e[0m\
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var res\
    \ : List[Long] = Nil\n        var l = a\n        while (l <= b) {\n          \
    \  val r = math.min(math.ceil(l / 10), b - l)\n            res ::= r.toLong\n\
    \            l += r\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_jg4joe.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            l += r\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long - did\
    \ you mean Long.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenNumbers\
    \ = mutable.Set[Long]()\n        val evenNumbersSet = mutable.Set[Long]()\n  \
    \      var currentNum = a\n        var currentNumSet = evenNumbersSet\n      \
    \  while (currentNum < b) {\n            evenNumbersSet.add(currentNum)\n    \
    \        evenNumbers.add(currentNum)\n            currentNum += 2\n        }\n\
    \        while (b > currentNum) {\n            evenNumbersSet.remove(currentNum)\n\
    \            evenNumbers.remove(currentNum)\n            currentNum -= 2\n   \
    \     }\n        evenNumbersSet.retain(evenNumbers)\n        evenNumbersSet.toList.sortBy(_.toString.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xzipjgl.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xzipjgl.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenNumbersSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val odd_range\
    \ = (0 until b).filter(x => x%2l==0l).toList\n        val even_range = odd_range.filter(_\
    \ < a)\n        if(even_range.isEmpty) Nil\n        else even_range.sortWith((x,\
    \ y) => x > y)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppgfy4z1i.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd_range\e\
    [0m = (\e[31m0\e[0m until b).filter(\e[36mx\e[0m => x%\e[31m2l\e[0m==\e[31m0l\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    (b : Long)\n\e[31m   |\e\
    [0m                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppgfy4z1i.scala:17:32 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m even_range.sortWith((x, y) =>\
    \ x > y)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m \
    \  |\e[0m             Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) List() else if (a < b) List(a) else generateIntegers(b, a)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpval9b13b.scala:17)\n\tat Problem.main(tmpval9b13b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var num\
    \ : int = 1\n        var nums : List[Long] = Nil\n        while(a <= b){\n   \
    \         num += 1\n            var remainder = num % a\n            if(remainder\
    \ == 0){\n                nums = nums :+ num.toLong\n                num += 1\n\
    \            }\n        }\n        nums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeh9df4b6.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mnum\e[0m : \e[35mint\e[0m\
    \ = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenDigitList\
    \ = List.empty[Long]\n        val total = b - a\n        while (total > 0 && (evenDigitList.isEmpty\
    \ || evenDigitList.last() > b)) {\n            evenDigitList :+= a % 10\n    \
    \        a /= 10\n        }\n        return evenDigitList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpt99zkkrz.scala:16:68 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m (total > \e[31m0\e[0m && (evenDigitList.isEmpty\
    \ || evenDigitList.last() > b)) {\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   \e[33mmethod\e[0m \e[35mlast\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt99zkkrz.scala:17:26 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            evenDigitList :+= a % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not a member of List[Long]\
    \ - did you mean evenDigitList.:+?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt99zkkrz.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            a /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean a.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val a\
    \ = if (a < 2L) 2L else a\n        val b = if (b < 2L) 2L else b\n        var\
    \ evens = List[Long]()\n        val n1 = a.toInt\n        val n2 = b.toInt\n \
    \       for (i <- n2 until n1) {\n            val d = i.toInt\n            val\
    \ k = n1 - i\n            val k1 = k - 1\n            if (d.even) {\n        \
    \        if (k1 > 0) evens += d\n                k1 = k1-1\n            }\n  \
    \          if (k1 > 0) evens += d * ((k1).toInt)\n        }\n        if (evens.isEmpty)\
    \ List[Long]()\n        else evens\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9xoo7spi.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mif\e[0m (a\
    \ < \e[31m2L\e[0m) \e[31m2L\e[0m \e[33melse\e[0m a\n\e[31m\e[31m   |\e[0m    \
    \                ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9xoo7spi.scala:14:36 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mif\e[0m (a < \e[31m2L\e[0m)\
    \ \e[31m2L\e[0m \e[33melse\e[0m a\n\e[31m\e[31m   |\e[0m                     \
    \               ^\e[0m\n\e[31m   |\e[0m                                    Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp9xoo7spi.scala:15:20 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = \e[33mif\e[0m (b < \e\
    [31m2L\e[0m) \e[31m2L\e[0m \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m          \
    \          ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9xoo7spi.scala:15:36 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = \e[33mif\e[0m (b < \e[31m2L\e[0m)\
    \ \e[31m2L\e[0m \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m                     \
    \               ^\e[0m\n\e[31m   |\e[0m                                    Recursive\
    \ \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9xoo7spi.scala:23:18 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (d.even) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value even is not\
    \ a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xoo7spi.scala:24:34"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n            val ans = a to b\n         \
    \   val evenDigits = ans.filter { _ % 2 == 0}.toList\n            if (evenDigits.length\
    \ == 0) {\n                List[Long]()\n            } else {\n              \
    \  val middleDigits = evenDigits.toList\n                val remainders = middleDigits.filter\
    \ { _ % 2 == 0}.toList\n                remainders.reverse.head to remainders.last\n\
    \            }\n        }\n        generateIntegers(a, b)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mm59m63.scala:22:16\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                remainders.reverse.head\
    \ to remainders.last\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Found:    scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m       Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Base\
    \ case\n        if(a.toLong > b.toLong)\n            return (List[Long]())\n \
    \       else if(b.toLong == a.toLong)\n            return (List(b.toLong))\n \
    \       else // Search subproblem\n            generateIntegers(a.toLong, b.toLong/2)\
    \ + generateIntegers(a.toLong%b.toLong, b.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltalsa19.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            generateIntegers(a.toLong, b.toLong/\e[31m2\e\
    [0m) + generateIntegers(a.toLong%b.toLong, b.toLong)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val listOfNumbers\
    \ = List(a, b).map(_.toLong).toList\n        listOfNumbers.sortBy(_.toString.dropWhile(_\
    \ < 0).length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsjfwnt31.scala:18)\n\tat Problem.main(tmpsjfwnt31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list:\
    \ List[Long] = new mutable.ListBuffer[Long]()\n        val intList: List[Long]\
    \ = new mutable.ListBuffer[Long]()\n        var index = 0\n        while (index\
    \ < a) {\n            if (index % 2 == 0) {\n                intList += index.toLong\n\
    \            }\n            index += 1\n        }\n        if (index > b) {\n\
    \            return list\n        }\n        while (index < b) {\n           \
    \ if (index % 2 == 1) {\n                intList += index.toLong\n           \
    \ }\n            index += 1\n        }\n        intList foreach {\n          \
    \  index =>\n            list += index\n        }\n        list.sortWith((x:Long,\
    \ y:Long) => x > y)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0uh7kkrk.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0uh7kkrk.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mintList\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0uh7kkrk.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                intList += index.toLong\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not\
    \ a member of List[Long] - did you mean intList.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0uh7kkrk.scala:28:24 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m                intList += index.toLong\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member\
    \ of List[Long] - did you mean intList.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0uh7kkrk.scala:34:17 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m            list += index\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m          value += is not a member of List[Long] - did you mean list.!=?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val start\
    \ = 0\n        val stop = b mod a\n        val list = mutable.ArrayBuffer.empty[Long]\n\
    \        while(start < stop) {\n            list += start.toLong\n           \
    \ start = start + 1\n        }\n        list += stop.toLong\n        list\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmu2ytif0.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstop\e[0m = b mod a\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is\
    \ not a member of Long, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmu2ytif0.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpmu2ytif0.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            start = start + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Initialize\
    \ result\n        val evens : List[Long] = List()\n        var x = a.toInt\n \
    \       var y = b.toInt\n        // While x has more digits than y\n        while\
    \ (x < y) {\n            // Add new digit\n            evens ::= x.toLong\n  \
    \          // Add new digit\n            evens ::= y.toLong\n            // Add\
    \ new digit\n            evens ::= x.toLong\n            // Add new digit\n  \
    \          evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.toLong\n            // Add new digit\n\
    \            evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.toLong\n            // Add new digit\n\
    \            evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.toLong\n            // Add new digit\n            evens\
    \ ::= x.toLong\n            // Add new digit\n            evens ::= y.toLong\n\
    \            // Add new digit\n            evens ::= x.toLong\n            //\
    \ Add new digit\n            evens ::= y.toLong\n            // Add new digit\n\
    \            evens ::= x.toLong\n            // Add new digit\n            evens\
    \ ::= y.toLong\n            // Add new digit\n            evens ::= x.toLong\n\
    \            // Add new digit\n            evens ::= y.toLong\n            //\
    \ Add new digit\n            evens ::= x.toLong\n            // Add new digit\n\
    \            evens ::= y.to\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1dzowouo.scala:97:0 ----------------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dzowouo.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            evens ::= x.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ::= is not a member of List[Long] - did you mean evens.::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1dzowouo.scala:23:18 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            evens ::= y.toLong\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member of List[Long]\
    \ - did you mean evens.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dzowouo.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            evens ::= x.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ::= is not a member of List[Long] - did you mean evens.::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1dzowouo.scala:27:18 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            evens ::= y.toLong\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member of List[Long]\
    \ - did you mean evens.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dzowouo.scala:29:18\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            evens ::= x.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ::= is not a member of List[Long] - did you mean evens.::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1dzowouo.scala:31:18 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            evens ::= y.toLong\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member of List[Long]\
    \ - did you mean evens.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1dzowouo.scala:33:18\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            evens ::= x.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ::= is not a membe"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.MutableList[Long]()\n        val current = a\n        val limit\
    \ = b\n        var found = false\n        var remaining = b\n        while (current\
    \ < limit && !found) {\n            val remainder = current % 10\n           \
    \ if (remainder == 0){\n                result += current.toLong\n           \
    \     found = true\n            } else {\n                result += current.toLong\n\
    \                current += 10\n            }\n            val nextRemaining =\
    \ remaining % 10\n            if (nextRemaining != 0) {\n                remaining\
    \ -= nextRemaining\n            }\n        }\n        result.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfikqzbhq.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfikqzbhq.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                current +=\
    \ \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             value += is not a member of Long - did you mean current.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n\
    \ = math.abs(b - a) + 2\n        var ans = List[Long]()\n        for (i = a to\
    \ b by 2) {\n            if (i / 2 != i % 2) {\n                ans = ans :+ (i\
    \ / 2)\n            }\n        }\n        ans ::: List(a.abs)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr92syyz6.scala:16:15 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i = a to b by \e[31m2\e[0m) {\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr92syyz6.scala:16:30\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m\
    \ (i = a to b by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \        ^\e[0m\n\e[31m   |\e[0m                              '<-' expected, but\
    \ '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr92syyz6.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr92syyz6.scala:20:9\
    \ -------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val r\
    \ : mutable.LinkedHashSet[Long] = mutable.LinkedHashSet()\n        var m = 0\n\
    \        while(m < b) {\n            val c = a + m\n            if(c % 2 == 0)\
    \ r.add(c)\n            m += 1\n        }\n        List(a.longValue.toLong + r.toSeq.sortWith(_\
    \ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6eynir0.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m : mutable.LinkedHashSet[\e\
    [35mLong\e[0m] = mutable.LinkedHashSet()\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6eynir0.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m : mutable.LinkedHashSet[\e\
    [35mLong\e[0m] = mutable.LinkedHashSet()\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ < a) List.empty[Long]\n        else {\n            var list: List[Long] = Nil\n\
    \            val tempA = a / 2\n            val tempB = b / 2\n            val\
    \ temp = tempA - tempB\n            val tempC = tempA - tempB\n            if\
    \ (temp <= 0) list.append (tempA.toLong)\n            else if (temp > 0) list.append\
    \ (tempB.toLong)\n            if (tempC <= 0) list\n            else {\n     \
    \           var tempD = tempA.toLong * tempC\n                list.append (tempD)\n\
    \                if (temp < tempB) list\n                else {\n            \
    \        var tempE = tempB.toLong * tempD\n                    list.append (tempE)\n\
    \                    if (temp < tempA) list\n                    else {\n    \
    \                    var tempF = tempA.toLong * tempE\n                      \
    \  list.append (tempF)\n                        list\n                    }\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyivg33nb.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (temp <= \e[31m0\e[0m) list.append\
    \ (tempA.toLong)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[Long] - did you mean\
    \ List[Long].appended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyivg33nb.scala:22:36\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (temp > \e[31m0\e[0m) list.append (tempB.toLong)\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ append is not a member of List[Long] - did you mean List[Long].appended?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyivg33nb.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                list.append (tempD)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[Long] - did you mean List[Long].appended?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyivg33nb.scala:30:25 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m                    list.append (tempE)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member\
    \ of List[Long] - did you mean List[Long].appended?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpyivg33nb.scala:34:29 ------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m                        list.append (tempF)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not\
    \ a member of List[Long] - did you mean List[Long].appended?\n5 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      val startNum\
    \ = a\n      val endNum = b\n      val startNumStr = startNum.toString\n     \
    \ val endNumStr = endNum.toString\n      val allNumbersBetweenStartAndEnd = (startNumStr\
    \ to endNumStr).toList\n      var evenDigitsAscendingOrder = Nil\n      var currentNumStr\
    \ = startNumStr\n      while(currentNumStr <= endNumStr){\n        if(allNumbersBetweenStartAndEnd.contains(currentNumStr.toLong)){\n\
    \          evenDigitsAscendingOrder ::= currentNumStr.toLong\n        }\n    \
    \    currentNumStr = currentNumStr + 1\n      }\n      evenDigitsAscendingOrder.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuoqhf6q8.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mallNumbersBetweenStartAndEnd\e\
    [0m = (startNumStr to endNumStr).toList\n\e[31m\e[31m   |\e[0m               \
    \                                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (endNumStr : String)\n\e[31m   |\e[0m     \
    \                      Required: scala.collection.Factory[Char, Any]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuoqhf6q8.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m          evenDigitsAscendingOrder ::= currentNumStr.toLong\n\
    \e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue ::= is not a member of object scala.collection.immutable.Nil - did you\
    \ mean Nil.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result:\
    \ List[Long] = Nil\n        for (i = a to b by 2)\n        result = result :+\
    \ i\n        result :+ b\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpouaa8rw9.scala:15:15 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i = a to b by \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpouaa8rw9.scala:16:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        result = result\
    \ :+ i\n\e[31m\e[31m   |\e[0m^^^^^^\e[0m\n\e[31m   |\e[0m'<-' expected, but 'end\
    \ of statement' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpouaa8rw9.scala:18:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result\n\e[31m\e\
    [31m   |\e[0m^^^^^^\e[0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpouaa8rw9.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val num\
    \ = 0\n        val even = mutable.ListBuffer.empty[Long]\n        var digit =\
    \ 0\n        while(num < a || num < b) {\n            val result = num / 10\n\
    \            if(result % 2 == 0) {\n                digit += 1\n             \
    \   even += result.toLong\n            }\n            num += 1\n        }\n  \
    \      even += num.toLong\n        if(digit == 0) {\n            even.clear\n\
    \        }\n        even.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfh2w6036.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfh2w6036.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            num += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean num.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val digits\
    \ = (a to b).toList\n        val ranges = (0 to (digits.length-1)).map(x => digits(x))\n\
    \        val result = (0 to (digits.length-1)).map(x => digits(x)).toList.map(x\
    \ => if(x%2 == 0) x else x+1)\n\n        ranges filter { x => (a to b).exists(y\
    \ => y <= x) } map { x => (a to b).find(y => y <= x) } \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyqqlmsq4.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        ranges filter { \e[36mx\e\
    [0m => (a to b).exists(\e[36my\e[0m => y <= x) } map { \e[36mx\e[0m => (a to b).find(\e\
    [36my\e[0m => y <= x) } \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Option[Long]]\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate(a:\
    \ Long, b : Long, index: Long) : List[Long] = {\n            val c: List[Long]\
    \ = Nil\n            var i = index\n            while(a > 0 && i <= b) {\n   \
    \             if (a % 10 == 0 && b % 10 == 0) {\n                    c :+= a.toLong\n\
    \                }\n                a /= 10\n                b /= 10\n       \
    \         i += 1\n            }\n            if (a > 0 && b % 10 == 0) {\n   \
    \             c :+= a.toLong\n            }\n            c\n        }\n      \
    \  generate(a, b, 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3bm6uee.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    c :+= a.toLong\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^\e[0m\n\e[31m   |\e[0m            value :+= is not\
    \ a member of List[Long] - did you mean c.:+?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpp3bm6uee.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                a /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Long\
    \ - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3bm6uee.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                b /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value /= is not a member of Long - did you mean b.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp3bm6uee.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                c :+= a.toLong\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^\e[0m\n\e[31m   |\e[0m            value :+= is not a member\
    \ of List[Long] - did you mean c.:+?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      val c =\
    \ a.toString.length\n      val d = b.toString.length\n      val result = List[Long]()\n\
    \      var first = a\n      var second = b\n      while (first < second) {\n \
    \       if (first % 2 == 0)\n          result = result :+ first.toLong\n     \
    \   first = first + c\n      }\n      while(second < a){\n        if (second %\
    \ 2 == 0)\n          result = result :+ second.toLong\n        second = second\
    \ + c\n      }\n      result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptc15yecw.scala:21:17 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          result = result :+ first.toLong\n\e[31m\e[31m\
    \   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \      Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmptc15yecw.scala:26:17 -----------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m          result = result :+ second.toLong\n\e[31m\e[31m   |\e[0m    \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m\
    \ = Math.max(a, b)\n        val l = m.toInt\n        val even = l / 2\n      \
    \  val odd = l - even\n        val result = (0 to even).map(i => m + i * 2).toList\n\
    \        if (odd > 0)\n            result += generateIntegers(odd, a)\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk84913ld.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += generateIntegers(odd, a)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not\
    \ a member of List[Long] - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ < 0 || b < 0) throw new IllegalArgumentException(\"Argument out of range\")\n\
    \        // find odd num\n        val odd = math.ceil(math.log(b)/math.log(2))\n\
    \        // check odd number limit\n        require(odd <= IntMaxValue.toLong)\n\
    \        val odd_num = IntMaxValue.toLong / odd\n        val odd_nums = odd_num\
    \ to (odd_num * 2).toInt\n        var even_list = List[Long]()\n        // find\
    \ even num\n        val even = math.ceil(math.log(a)/math.log(2))\n        //\
    \ check even number limit\n        require(even <= IntMaxValue.toLong)\n     \
    \   val even_num = IntMaxValue.toLong / even\n        val even_nums = even_num\
    \ to (even_num * 2).toInt\n        // Find every odd nums in [a,b]\n        odd_nums.foreach\
    \ { odd_num =>\n            val result = odd_num\n            val temp_list =\
    \ odd_nums.takeWhile(_ < odd_num + 1).map(_+2).toList\n            if (even_nums.contains(temp_list.last))\
    \ {\n                temp_list.foreach { even_num =>\n                    if (even_list.contains(even_num))\
    \ {\n                        even_list.insert(even_num, even_num)\n          \
    \          }\n                }\n            }\n        }\n        even_list.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuar3h6__.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        require(odd <= IntMaxValue.toLong)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               Not found: IntMaxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuar3h6__.scala:19:22 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_num\e[0m = IntMaxValue.toLong\
    \ / odd\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: IntMaxValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpuar3h6__.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        require(even <= IntMaxValue.toLong)\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 Not found: IntMaxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuar3h6__.scala:26:23 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36meven_num\e[0m = IntMaxValue.toLong\
    \ / even\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: IntMaxValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.LinkedList[Long]()\n        var i : Long = 0\n        while (i\
    \ < a.toInt && i < b.toInt) {\n            list.add(new Long(math.min(a.floor.toInt,\
    \ b.floor.toInt)).div(10l).toLong)\n            i = i + 1\n        }\n       \
    \ if (i < a.toInt)\n            list.add(new Long(a.floor.toInt))\n        if\
    \ (i < b.toInt)\n            list.add(new Long(b.floor.toInt))\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zhs764l.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) {\n            a :: generateIntegers(b, a)\n        } else if (a < b) {\n\
    \            generateIntegers(a, b)\n        } else {\n            List(a.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Convert\
    \ all integers to a List\n        var integers : List[Long] = List(1l, b)\n  \
    \      \n        // While we haven't found any result\n        while(integers.length\
    \ > 0) {\n            \n            // Find the first even digit\n           \
    \ var i : Long = 0\n            while (i < integers.length) {\n              \
    \  if (integers(i) % 2 == 0) {\n                    i = i + 1\n              \
    \  } else {\n                    integers = integers.drop(i)\n               \
    \     break\n                }\n            }\n            \n            // Add\
    \ the current even digit to the result\n            integers = integers :+ integers(i)\n\
    \        }\n        \n        // Return a List\n        return integers\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98zpvpaa.scala:23:29\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m\
    \ (integers(i) % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                       ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (i : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98zpvpaa.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    integers\
    \ = integers.drop(i)\n\e[31m\e[31m   |\e[0m                                  \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \   Found:    (i : Long)\n\e[31m   |\e[0m                                    \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98zpvpaa.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp98zpvpaa.scala:32:44 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m            integers = integers :+ integers(i)\n\e[31m\e[31m   |\e[0m\
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                   Found:    (i : Long)\n\e[31m   |\e[0m    \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result:\
    \ List[Long] = Nil\n        while (b != 0) {\n            if (a >= b) {\n    \
    \            a -= b\n                result = (a until b).map(x => x.toLong).sorted\
    \ :: result\n            }\n            b -= 1\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbymcy8k.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                a -= b\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member of\
    \ Long - did you mean a.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbymcy8k.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                result = (a until\
    \ b).map(\e[36mx\e[0m => x.toLong).sorted :: result\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsbymcy8k.scala:20:14 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            b -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean b.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.Buffer[Long]()\n        for (x <- a.toLong to b.toLong by 2)\n\
    \            if (x % 2 == 0) {\n                result += x\n            }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp444kvo_1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val range\
    \ = Range(a, b);\n        var l1 = range.min;\n        var l2 = range.max;\n \
    \       var l = l1\n        var temp : Long = 0;\n        while(l2 > l1){\n  \
    \          if (l % 2 == 0){\n                temp = l\n                l2 = l2\n\
    \                l1 = temp\n            }\n            l = l + 2\n        }\n\
    \        if (l2 > l1){\n            l :: (generateIntegers(l1..l2, l2))\n    \
    \    }\n        else{\n            List()\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq1rie4wo.scala:28:38 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            l :: (generateIntegers(l1..l2, l2))\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                                an identifier expected, but '.' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpq1rie4wo.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b);\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (a : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1rie4wo.scala:14:29\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = Range(a, b);\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m                             Found:    (b : Long)\n\e[31m   |\e\
    [0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq1rie4wo.scala:23:21 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                l1 = temp\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                     Found:    (temp\
    \ : Long)\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result:\
    \ List[Long] = List().asInstanceOf[List[Long]]\n        val range = (a to b) reverse\n\
    \        for (i <- 0 until range.length) result ::= i.toLong % 2l\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz13ltyd7.scala:15:36 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = (a to b) reverse\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    expression expected but \e[31mfor\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if(a<b)\
    \ List(a,b) else {\n            // Sort the two numbers:\n            var even\
    \ = a.toInt/b.toInt\n            val remainder = (a.toInt-b)*even\n          \
    \  val newEven = even.toLong\n            val newRemainder = remainder.toLong\n\
    \            even = newEven\n            remainder = newRemainder\n\n        \
    \    // Get the first two numbers from the sorted list:\n            val list\
    \ = if (even.equals(0)) List()\n                    else {\n                 \
    \       List(even, remainder)\n                    }\n            list ::: generateIntegers(a+even,\
    \ b+even)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1uvoor99.scala:20:19\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            even = newEven\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         Found:    (newEven : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1uvoor99.scala:21:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            remainder\
    \ = newRemainder\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val remainder\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1uvoor99.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            list ::: generateIntegers(a+even, b+even)\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    (list : List[AnyVal])\n\e[31m   |\e[0m            Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ArrayBuffer[Long]()\n        val start = 1L\n        var i = start\n\
    \        while (i < a) result.+=(i + (b - a) / 2)\n        i = start\n       \
    \ while (i < b) result.+=(i + (b - a) / 2)\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphjyri8zs.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val numbers\
    \ = scala.util.Random.shuffle((a to b).filter(_ % 2 == 0)).takeWhile(_ <= b).toList\n\
    \        (0 to a).filter(_ <= b).map(numbers(_)).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp011ln799.scala:15:14\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (\e[31m0\e[0m to a).filter(_\
    \ <= b).map(numbers(_)).toList\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e\
    [31m   |\e[0m              Found:    (a : Long)\n\e[31m   |\e[0m             \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def divideByTen\
    \ (n : Long) : List[Long] = {\n            if (n % 10 == 0) {\n              \
    \  List(n.toLong)\n            } else {\n                val div = n % 10\n  \
    \              val num = n / 10\n                if (num == 0)\n             \
    \       divideByTen(div)\n                else if (num < 10)\n               \
    \     divideByTen(div).reverse.head :: divideByTen(num).reverse\n            \
    \    else\n                    divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideByTen(num).reverse\
    \ ::\n                        divideByTen(div).reverse.head :: divideBy\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjxhd98aq.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjxhd98aq.scala:47:57\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m                        divideByTen(div).reverse.head\
    \ :: divideBy\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                       Not found: divideBy\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjxhd98aq.scala:56:1 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpjxhd98aq.scala:49:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val r\
    \ = scala.util.Random\n        val evens = new mutable.HashSet[Long]\n       \
    \ val odds = new mutable.HashSet[Long]\n        var low = a % 2\n        while(low\
    \ <= b) {\n            val rand = r()\n            if(rand < 0.5) {\n        \
    \        val l = rand.toLong\n                odds += l\n                low *=\
    \ 2\n            } else {\n                val l = rand.toLong\n             \
    \   evens += l\n                low *= 2\n            }\n        }\n        if(odds.isEmpty)\
    \ {\n            odds += a\n        }\n        if(evens.isEmpty) {\n         \
    \   evens += b\n        }\n        if(odds.size > evens.size) {\n            odds\
    \ ---> odds.take(evens.size)\n        } else {\n            evens ---> evens.take(odds.size)\n\
    \        }\n        val res = new mutable.ArrayBuffer[Long]()\n        while(odds.nonEmpty\
    \ || evens.nonEmpty) {\n            val l = evens.take(odds.size).getOrElse(odds.take(evens.size).get)\n\
    \            res += l\n        }\n        if(a < b) {\n            while (a <\
    \ b) {\n                val l = r.nextInt(b - a + 1) + a\n                res\
    \ ++: generateIntegers(l, b.toLong)\n            }\n        }\n        res\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjpif_4zp.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjpif_4zp.scala:16:23\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjpif_4zp.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mif\e[0m(rand < \e[31m0.5\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of scala.util.Random,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjpif_4zp.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = rand.toLong\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of scala.util.Random, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/"
  stdout: ''
  timestamp: 1660009509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var start = 0\n        var finish = b - a\n    \
    \    while (start < finish) {\n            val mid = start + (finish - start)\
    \ / 2\n            val number = mid * mid\n            if (number < a) {\n   \
    \             start = mid + 1\n            } else {\n                finish =\
    \ mid - 1\n            }\n        }\n        result ++= List(a.toLong, start.toLong,\
    \ finish.toLong)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1a_3nfph.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                start = mid +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m         \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val arr\
    \ = new Array[Long](b.toInt / 2)\n        val low = a.toInt % 2\n        var idx\
    \ = low\n        val evens = arr.filter { i =>\n            val b = low + i.toInt\n\
    \            val isEven = b.toInt % 2 == 0\n            idx == low && isEven\n\
    \        }\n        val l = evens.toList\n        val r = idx + b.toInt - 1\n\
    \        if (idx < b.toInt) l ++ generateIntegers(l, r) else l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4w_s4_8b.scala:24:49\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (idx <\
    \ b.toInt) l ++ generateIntegers(l, r) \e[33melse\e[0m l\n\e[31m\e[31m   |\e[0m\
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                          Found:    (l : List[Long])\n\e[31m\
    \   |\e[0m                                              Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def helper(a:Long,\
    \ maxA:Long, digits: List[Long], maxB:Long, maxDigits: List[Long]) : List[Long]\
    \ = {\n            if (a <= maxA) {\n                if (b <= maxB) {\n      \
    \              digits ::= a.toLong\n                    maxDigits ::= a.toLong\n\
    \                    maxB += 1\n                    a += 1\n                 \
    \   helper(a, b, digits, maxB, maxDigits)\n                }\n               \
    \ else {\n                    digits(a)\n                    maxDigits(a)\n  \
    \              }\n            }\n            else {\n                digits(a)\n\
    \                maxDigits(a)\n            }\n        }\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val maxA = a\n        val maxB = b\n\
    \        helper(a, maxA, new mutable.ListBuffer[Long](), maxB, new mutable.ListBuffer[Long]())\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpttfb7s4b.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    digits ::= a.toLong\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value ::=\
    \ is not a member of List[Long] - did you mean digits.::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpttfb7s4b.scala:18:30 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                    maxDigits ::= a.toLong\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value ::=\
    \ is not a member of List[Long] - did you mean maxDigits.::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpttfb7s4b.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                    maxB += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Long - did you mean maxB.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpttfb7s4b.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    a += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                   value += is not a member\
    \ of Long - did you mean a.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttfb7s4b.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    digits(a)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (a : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttfb7s4b.scala:25:30\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    maxDigits(a)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Found:    (a : Long)\n\e[31m   |\e[0m            \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpttfb7s4b.scala:29:23 ------------------"
  stdout: ''
  timestamp: 1660009512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) (a,b) match {\n            case (_,0 ) => List(a)\n            case (_,1\
    \ ) => List(b - b + 1)\n            case (_,2 ) => List()\n            case (a,b)\
    \ =>\n                val nums = generateIntegers(a, b % a).toList :+ a\n    \
    \            nums ::: nums.filter(_ % a != 0) ::: nums.filter(_ % a != a) :::\
    \ nums.filter(_ % a != b) ::: nums.filter(_ % a != b + a)\n        }\n       \
    \ else {\n            (a,b) match {\n                case (_,0) => List(a)\n \
    \               case (_,1) => List(a)\n                case (_,2) => List()\n\
    \                case (a,b) => generateIntegers(a,b + 1).filter(_ % a != 0) :::\
    \ generateIntegers(a,b).filter(_ % a != a) ::: generateIntegers(a,b).filter(_\
    \ % a != b) ::: generateIntegers(a,b + a).filter(_ % a != b)\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:23)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\
    \tat Problem$.generateIntegers(tmpurip4u2f.scala:27)\n\tat P"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var dividend : Long = b - a\n        var remainder\
    \ : Long = dividend\n        var current : Long = a\n        while (dividend >=\
    \ 10) {\n            current += 10\n            dividend /= 10\n        }\n  \
    \      if (dividend >= 1l) result ::= current\n        if (remainder < 10) {\n\
    \            result ::= current\n            result += remainder\n        }\n\
    \        return result.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0183ipd.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            result += remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      val li =\
    \ new mutable.LinkedList[Long]()\n      val li2 = new mutable.LinkedList[Long]()\n\
    \      val li3 = new mutable.LinkedList[Long]()\n      val li4 = new mutable.LinkedList[Long]()\n\
    \      val li5 = new mutable.LinkedList[Long]()\n      li.add(a.toLong)\n    \
    \  li2.add(b.toLong)\n      li3.remove(0)\n      li4.add(0)\n      li5.add(0)\n\
    \      while (li2.nonEmpty) {\n        li3 += li2.head\n        li2.remove(0)\n\
    \      }\n      while (li3.nonEmpty) {\n        li4 += li3.head\n        li3.remove(0)\n\
    \      }\n      while (li4.nonEmpty) {\n        li5 += li4.head\n        li4.remove(0)\n\
    \      }\n      li5\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpcb8qsj.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mli\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbpcb8qsj.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mli2\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpcb8qsj.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mli3\e\
    [0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpcb8qsj.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mli4\e\
    [0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpcb8qsj.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mli5\e\
    [0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def getEvens(l\
    \ : Long) : List[Long] = {\n            var result = List[Long]()\n          \
    \  while (l > 0) {\n                if ((l % 2) == 0) {\n                    result\
    \ ::= l.toLong\n                }\n                l /= 2\n            }\n   \
    \         result\n        }\n        val list1 = getEvens(a)\n        val list2\
    \ = getEvens(b)\n        if (list1.size < list2.size) {\n            for (i <-\
    \ list1.size..list2.size) {\n                list2.remove(list1.last)\n      \
    \      }\n        } else {\n            for (i <- list1.size..list2.size) {\n\
    \                list1.remove(list2.last)\n            }\n        }\n        list1.reverse.concat(list2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9th5pwyx.scala:27:33 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m (i <- list1.size..list2.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 an identifier expected, but '.' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp9th5pwyx.scala:31:33 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mfor\e[0m (i <- list1.size..list2.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 an identifier expected, but '.' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9th5pwyx.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                l /= \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean l.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val range = (b - a).toInt\n        for\
    \ (i <- 0 until range) {\n            list+=a.toLong+i\n        }\n        return\
    \ list.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpraesazy1.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Write\
    \ your code here\n        val evens = for (i <- a.toInt; j :: b <- a.toInt) yield\
    \ j\n        evens.sortBy(_.toInt)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2wtq1_c9.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mfor\e\
    [0m (i <- a.toInt; j :: b <- a.toInt) \e[33myield\e[0m j\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             value flatMap is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result:\
    \ List[Long] = new mutable.MutableList[Long]()\n        var max1 = a - b\n   \
    \     var min1 = a + b\n        while (max1 > 0) {\n            max1 = max1 -\
    \ b\n            if (max1 > 0) {\n                result.add(max1.toLong)\n  \
    \          }\n        }\n        while (min1 < b) {\n            min1 = min1 +\
    \ b\n            if (min1 < b) {\n                result.add(min1.toLong)\n  \
    \          }\n        }\n        result.reverse()\n        result.filter(_ % 2\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcql5cowi.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcql5cowi.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.add(max1.toLong)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ add is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcql5cowi.scala:26:23\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                result.add(min1.toLong)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpcql5cowi.scala:29:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ result.reverse()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m: (n: Int): Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val (m,\
    \ n) = if (a > b) (a, b) else {b, a}\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        for (x <- m until n){\n            list += x\n        }\n        list.sortBy(math.abs).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw7gn_y1p.scala:14:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m (m, n) = \e[33mif\e[0m (a > b)\
    \ (a, b) \e[33melse\e[0m {b, a}\n\e[31m\e[31m   |\e[0m                       \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \   end of statement expected but ',' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpw7gn_y1p.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Create\
    \ a list of all even numbers within the range [a, b]\n        val evenNumbers\
    \ = a until (b / 2) filter ((_ % 2) == 0)\n        // Sort list\n        val evenSortedNumbers\
    \ = evenNumbers.sortWith(_ > _)\n        // Return sorted list\n        evenSortedNumbers.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplfj2nv7z.scala:15:51 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = a until\
    \ (b / \e[31m2\e[0m) filter ((_ % \e[31m2\e[0m) == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                   ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => _$1 % 2.\n1 error found\n"
  stdout: ''
  timestamp: 1660009511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var evens\
    \ : List[Long] = List()\n        var current : Long = 1\n        while(current\
    \ <= b)\n        {\n            if(current % 2 == 0)\n            {\n        \
    \        evens = evens :+ current.toLong\n            }\n            current =\
    \ current + 1\n        }\n        return evens\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbuo2iko9.scala:27)\n\tat Problem.main(tmpbuo2iko9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer(a.toLong)\n        for (i <- b to 1 by -1)\n          \
    \  if (evens(i).equals(0))\n                evens.append(i.toLong)\n         \
    \   else\n                break\n        evens\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdtgo4dh.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer(a.toLong)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcdtgo4dh.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val ans\
    \ = List.empty[Long]\n        // We take only odd integers between a and b\n \
    \       // so that we can add them without caring about the sign of \n       \
    \ // their sum\n        val range = a+1L to b+1L\n        for (x <- range.toList)\
    \ {\n            // The value of x is evenly divisible by 2,\n            // but\
    \ not necessarily divisible by 3\n            val even = x % 2l\n            //\
    \ If the value of x is evenly divisible by 2 but not 3\n            if (even %\
    \ 3L != 0l) {\n                // Add the value of x to the list \"ans\"\n   \
    \             ans ::= x\n            }\n        }\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7paovbow.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                ans ::= x\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m          value ::= is not a member\
    \ of List[Long] - did you mean ans.::?\n1 error found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val s\
    \ = scala.math.BigInt(a).abs + scala.math.BigInt(b).abs\n        val q = scala.math.BigInt(s)\
    \ / (scala.math.BigInt(2)+1)\n        val l = scala.math.BigInt(s).quot(scala.math.BigInt(2)+1)\n\
    \        val r = scala.math.BigInt(a).abs + scala.math.BigInt(b).abs\n       \
    \ val lq = scala.math.BigInt(l).quot(scala.math.BigInt(2)+1)\n        val rl =\
    \ scala.math.BigInt(r).quot(scala.math.BigInt(2)+1)\n        val digits = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        var lastL = -1\n        var lastR = -1\n        for (i <- 0 to scala.math.BigInt(s).toInt-1)\
    \ {\n            val d = scala.math.BigInt(i)\n            if (d == 0) {\n   \
    \             continue\n            }\n            var lastD = -1\n          \
    \  if (l == lastL) {\n                lastD = scala.math.BigInt(d)\n         \
    \   }\n            var lastD = scala.math.BigInt(lq)\n            if (r == lastR)\
    \ {\n                lastD = scala.math.BigInt(rl)\n            }\n          \
    \  var currentD = scala.math.BigInt(d)\n            while (currentD >= scala.math.BigInt(2))\
    \ {\n                digits.append(currentD)\n                lastD = scala.math.BigInt(currentD)\n\
    \                currentD = scala.math.BigInt(currentD.quot(scala.math.BigInt(2)+1))\n\
    \            }\n            lastL = l\n            lastR = scala.math.BigInt(r)\n\
    \        }\n        digits.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmph4cge1b4.scala:15:16 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mq\e[0m = scala.math.BigInt(s)\
    \ / (scala.math.BigInt(\e[31m2\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mBigInt\e[0m\
    \ with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\e[31m   |\e\
    [0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String): BigInt\n\e[31m\
    \   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (bitlength:\
    \ Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (signum:\
    \ Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x: Array[Byte]): BigInt\n\
    \e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i: Int): BigInt\n\e[31m  \
    \ |\e[0mmatch arguments ((s : BigInt))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmph4cge1b4.scala:16:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36ml\e[0m = scala.math.BigInt(s).quot(scala.math.BigInt(\e[31m2\e[0m)+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mobject\e[0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger):\
    \ BigInt\n\e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x:\
    \ String): BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\
    \e[31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m\
    \ (x: Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m\
    \ (i: Int): BigInt\n\e[31m   |\e[0mmatch arguments ((s : BigInt))\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmph4cge1b4.scala:19:17 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mrl\e[0m = scala.math.BigInt(r).quot(scala.math.BigInt(\e\
    [31m2\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloa"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      val result\
    \ : List[Long] = Nil\n      var tmp = b\n      var remain = tmp\n      while (a\
    \ > remain) {\n        tmp /= 10\n        remain = tmp\n        result ::= a.toLong\n\
    \        a /= 10\n      }\n      result ::= a.toLong\n      result ::= tmp\n \
    \     result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp54tyx6g3.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        result ::= a.toLong\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value ::= is not a member of List[Long]\
    \ - did you mean result.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp54tyx6g3.scala:21:10\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        a /= \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not\
    \ a member of Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp54tyx6g3.scala:23:13 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m      result ::= a.toLong\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      value ::= is not a member of List[Long] - did you mean result.::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp54tyx6g3.scala:24:13 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      result ::= tmp\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value ::= is not a member of List[Long] - did you mean\
    \ result.::?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val results\
    \ = new mutable.ArrayList[Long]()\n        val l = scala.util.Random\n       \
    \ val aInt = scala.math.round(a).toInt\n        val bInt = scala.math.round(b).toInt\n\
    \        var last = a\n        var next = b\n        while (next > a) {\n    \
    \        results += last\n            last += l.getInt(next - last)\n        \
    \    next -= 1\n        }\n        if (next == 0) {\n            results += last\n\
    \        }\n        results.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnv6fansw.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnv6fansw.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            last += l.getInt(next\
    \ - last)\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpnv6fansw.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            last += l.getInt(next - last)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue getInt is not\
    \ a member of object scala.util.Random - did you mean l.nextInt?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var evens\
    \ : List[Long] = Nil\n        for (a <- a until b){\n            if (a % 2 ==\
    \ 0){\n                evens = List(a % 2)\n                a /= 2\n         \
    \   }\n        }\n        evens.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7aedh7e4.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                a /= \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean a.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ < 0) return Nil\n        var result : List[Long] = Nil\n        var start :\
    \ Long = 0\n        var end : Long = b\n        while(start <= end){\n       \
    \     result = result ::: List(start.toLong)\n            start = start.next\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqr0geub.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            start = start.next\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ next is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val c\
    \ = new scala.collection.mutable.ListBuffer[Long]()\n        val d = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        var i1 = a\n        var i2 = b\n        while\
    \ (i1 != i2) {\n            if (i1 % 2 == 0) {\n                c += i1.toLong\n\
    \                count += 1\n            }\n            i1 /= 2\n        }\n \
    \       for (i <- 0 until count) {\n            if (c.length > 0) {\n        \
    \        d += c.last\n                c.remove(c.size - 1)\n            } else\
    \ {\n                d += 0\n            }\n        }\n        val ans = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        ans += d.last\n        d.remove(d.size - 1)\n        ans += d.last\n\
    \        return ans.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val nums\
    \ = new collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until a){\n\
    \            nums.append(i)\n        }\n        for (i <- 0 until b){\n      \
    \      nums.append(b)\n        }\n        nums.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduocl8wy.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until a){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (a : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpduocl8wy.scala:18:26 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until b){\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (b : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a.signum\
    \ == 0) return Nil\n        if (b.signum == 0) return Nil\n        val ret = new\
    \ mutable.ListBuffer[Long]()\n        var current = a\n        while (current\
    \ < b) {\n            val rem = current % 10\n            current += rem\n   \
    \         if (rem == 0) ret.append(current)\n        }\n        val l = ret.toList\n\
    \        val m = b - a\n        if (m < 0) Nil\n        else if (m <= 3) { l ::\
    \ generateIntegers(a,(b+1)) }\n        else { l :: generateIntegers((a+1),b) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldryvza5.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n\
    \ = math.max(math.abs(a), math.abs(b)) // the absolute value of both a and b\n\
    \        val range = a...b                // a Range from -n to n\n        var\
    \ res = []\n        while (range.hasNext) {\n            if (n % range.next ==\
    \ 0) {\n                res.append(range.next)\n            }\n        }\n   \
    \     res\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfyhrmzlm.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = a...b     \
    \           \e[34m// a Range from -n to n\e[0m\n\e[31m\e[31m   |\e[0m        \
    \              ^\e[0m\n\e[31m   |\e[0m                      an identifier expected,\
    \ but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfyhrmzlm.scala:16:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mres\e[0m = []\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   an identifier expected, but ']' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpfyhrmzlm.scala:17:0 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (range.hasNext) {\n\e[31m\e\
    [31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyhrmzlm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                res.append(range.next)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ append is not a member of Null\n4 errors found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenNumbers\
    \ = List(Long(a), Long(b))\n        if (evenNumbers.head % 2 == 0) evenNumbers\n\
    \        else generateIntegers(a / 2, b / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp816arptz.scala:14:31 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = List(Long(a),\
    \ Long(b))\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                   \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mpackage\e\
    [0m \e[35mscala\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp816arptz.scala:14:40 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenNumbers\e[0m = List(Long(a),\
    \ Long(b))\n\e[31m\e[31m   |\e[0m                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                   \e[33mobject\e[0m \e[35mLong\e[0m in \e\
    [33mpackage\e[0m \e[35mscala\e[0m does not take parameters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp816arptz.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (evenNumbers.head % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) evenNumbers\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value % is not a member of Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def getDigit(x\
    \ : Long) : Int = if (x % 10 == 0) x % 10 else 0\n        def getDigits(x : Long)\
    \ : List[Long] = 0 until x by 2 filter getDigit toList\n        def getFirstDigits(x\
    \ : Long) : List[Long] = getDigits(x).toList.init filter getDigit toList\n   \
    \     val max = (a / 10).toInt * (b / 10).toInt + 1\n        var result : List[Long]\
    \ = List.empty\n        for (x <- 0 until max) {\n            val firstDigits\
    \ = getFirstDigits(x)\n            val digits = getDigits(x)\n            val\
    \ currentDigit = firstDigits.head\n            if (currentDigit > 0) result =\
    \ result :+ currentDigit\n            val newDigits = digits filterNot (_ == currentDigit)\n\
    \            if (newDigits.nonEmpty) result = result :+ newDigits.last\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr2uzvlbr.scala:15:84 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mgetDigits\e[0m(\e[36mx\e\
    [0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[31m0\e[0m until\
    \ x by \e[31m2\e[0m filter getDigit toList\n\e[31m\e[31m   |\e[0m            \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                          expression expected but \e[31mend of\
    \ statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr2uzvlbr.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m\
    \ \e[36mgetFirstDigits\e[0m(\e[36mx\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = getDigits(x).toList.init filter getDigit toList\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \     expression expected but \e[31mend of statement\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr2uzvlbr.scala:14:56 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36mgetDigit\e[0m(\e[36mx\e\
    [0m : \e[35mLong\e[0m) : \e[35mInt\e[0m = \e[33mif\e[0m (x % \e[31m10\e[0m ==\
    \ \e[31m0\e[0m) x % \e[31m10\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                                        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr2uzvlbr.scala:15:55\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mgetDigits\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[31m0\e\
    [0m until x by \e[31m2\e[0m filter getDigit toList\n\e[31m\e[31m   |\e[0m    \
    \    "
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generateIntegers(a\
    \ : Long, b : Long) : List[Long] = {\n            // If they are the same, return\
    \ empty list\n            if (a == b) return List()\n\n            // Recurse\
    \ to smaller numbers first\n            val smallerA = a\n            val smallerB\
    \ = b\n            if (smallerB < smallerA) smallerA < smallerB\n            else\
    \ smallerB < smallerA\n\n            // Get a list of all digits between a and\
    \ b\n            val digits = List(a.toLong, b.toLong).map(_.toInt)\n\n      \
    \      // Find all evens\n            val evens = digits\n                .zipWithIndex\n\
    \                .filter(_._2 % 2 == 0)\n                .map(_._1)\n\n      \
    \      // Return even integers sorted by ascending value\n            evens.sortWith(_\
    \ < _)\n        }\n        val a = a.toLong\n        val b = b.toLong\n      \
    \  generateIntegers(a, b)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmysk3qf8.scala:34:26\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            evens.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m     \
    \       Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmysk3qf8.scala:36:16 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpmysk3qf8.scala:37:16 ---------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toLong\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var remainder = b\n        while (a >\
    \ 0) {\n            remainder *= 10\n            a -= (remainder / a)\n      \
    \      list += (remainder % a)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvx0fwzin.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvx0fwzin.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            a -= (remainder / a)\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean a.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var l1\
    \ = scala.math.BigInt(a).toInt;\n        var l2 = scala.math.BigInt(b).toInt;\n\
    \        while(true){\n            val m = scala.math.BigInt(l1)%scala.math.BigInt(10);\n\
    \            l1 = l1*10 + m;\n            val n = scala.math.BigInt(l2)%scala.math.BigInt(10);\n\
    \            l2 = l2*10 + n;\n            if (l1 == l2) break;\n        }\n  \
    \      l1 +: l2\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzo05j2ng.scala:18:17\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            l1 = l1*\e[31m10\e\
    [0m + m;\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    BigInt\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzo05j2ng.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            l2 = l2*\e[31m10\e\
    [0m + n;\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    BigInt\n\e[31m   |\e[0m                 Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzo05j2ng.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m\
    \ (l1 == l2) break;\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzo05j2ng.scala:23:11 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        l1 +: l2\n\e[31m\e[31m   |\e[0m           ^^^^^\e\
    [0m\n\e[31m   |\e[0m           value +: is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val l1\
    \ = List(a,b)\n        l1.sortWith(_<=>_)\n        l1.takeWhile(_<=>_)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx2zzcg4x.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        l1.sortWith(_<=>_)\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                value <=> is not a\
    \ member of Long - did you mean _$1.<=?\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpx2zzcg4x.scala:16:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        l1.takeWhile(_<=>_)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n\
    \ = (b-a).toInt\n        val result: List[Long] = ListBuffer.empty[Long]\n   \
    \     for(i <- 0 to n-1) result += (a.+(2*i).toLong).toLong\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwfn4g2fe.scala:15:49\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = ListBuffer.empty[\e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwfn4g2fe.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to n-\e[31m1\e\
    [0m) result += (a.+(\e[31m2\e[0m*i).toLong).toLong\n\e[31m\e[31m   |\e[0m    \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not\
    \ a member of List[Long] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val digits\
    \ = mutable.ListBuffer.empty[Long]\n        while (a.compareTo(b) < 0) {\n   \
    \         digits.append(a)\n            a += 1\n        }\n        digits.appendAll(reverse(b))\n\
    \        digits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd922pro4.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd922pro4.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean a.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val min\
    \ = a\n        val max = b\n        val range = (max-min)/2\n        val evens\
    \ : List[Long] = new ListBuffer[Long]()\n        val ods : List[Long] = new ListBuffer[Long]()\n\
    \        var current = min\n        var next = Math.floor(range)\n        while\
    \ (current < max) {\n            if (current % 2 == 0) {\n                evens\
    \ += current\n            } else {\n                ods += current\n         \
    \   }\n            next += 1\n            current = next\n            next = Math.floor(range)\n\
    \        }\n        evens.toList ++ ods.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb354rwyy.scala:17:33\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevens\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb354rwyy.scala:18:31 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mods\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb354rwyy.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                evens += current\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member\
    \ of List[Long] - did you mean evens.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb354rwyy.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                ods += current\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value += is not a member of List[Long] - did you\
    \ mean ods.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb354rwyy.scala:28:22\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            current = next\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    (next : Double)\n\e[31m   |\e[0m                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = ListBuffer[Long]()\n        var c : Long = 1\n        while ((c <= b) && (a\
    \ <= b)) {\n            list += c\n            c += 2\n        }\n        list\
    \ += a\n        list.sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44bbsc1s.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        list.sorted\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ = ListBuffer[Long]()\n        while (a <= b){\n            result += a.toString.toLong\
    \ :: a\n            a += 1\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp89uvsx4i.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result += a.toString.toLong :: a\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        value :: is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp89uvsx4i.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean a.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89uvsx4i.scala:19:15\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val l\
    \ = a.toLong + b.toLong;\n        val r = a.toLong - b.toLong;\n        val m\
    \ = a.toLong % b.toLong;\n        val c = new mutable.ListBuffer[Long]()\n   \
    \     for(i <- 0.until(Math.max(l,r))) yield {\n            val m = i*b + m;\n\
    \            val k = m.toInt\n            c += k\n        }\n        c.sortWith(_>_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7jowd7oj.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jowd7oj.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m.until(Math.max(l,r))) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \            Found:    (l : Long)\n\e[31m   |\e[0m                           \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jowd7oj.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m.until(Math.max(l,r))) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m   \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                Found:    (r : Long)\n\e[31m   |\e[0m                       \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a to b\n        val odd = a to b by -1\n        val diff = even diff odd\n\
    \        diff.map { x => x % 10 }.sorted.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpehyn72lu.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        diff.map { \e[36mx\e\
    [0m => x % \e[31m10\e[0m }.sorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if(a <\
    \ 0 || b < 0) {\n            throw new IllegalArgumentException(\"One or more\
    \ of the arguments is negative.\");\n        }\n        var numbers = mutable.ListBuffer(a).reverse\n\
    \        for(i <- b until (b - a)) {\n            numbers = numbers.filter { x\
    \ => (x % 2) == 0 }\n        }\n        numbers = numbers.reverse\n        numbers.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprt1ffxks.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mnumbers\e[0m = mutable.ListBuffer(a).reverse\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ = List.empty[Long]\n        var curr = a\n        while (curr < b) {\n     \
    \       result += curr\n            curr = curr + 2l\n        }\n        result.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptpuyjl9x.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += curr\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result:\
    \ List[Long] = Nil\n        var a = a - 1\n        var b = b - 1\n\n        while\
    \ (b != 0) {\n            if (b % 2 == 0) {\n                a += 1\n        \
    \        b /= 2\n            } else {\n                a += 1\n              \
    \  b /= 2\n            }\n\n            result :+= a\n        }\n\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvy3s7uks.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = a - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvy3s7uks.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = b - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val minA\
    \ = a\n        val maxA = b\n        val minB = b\n        val maxB = a\n    \
    \    val evenDigits = minA.until(maxB).filter(_ % 2 == 0).sorted\n        val\
    \ digits = minB.until(maxA).filter(_ % 2 == 0).sorted\n        val evenNumbers\
    \ = evenDigits.intersect(digits)\n        return evenNumbers.map(_.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuutm8qgj.scala:24)\n\tat Problem.main(tmpuutm8qgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate(i:\
    \ Long, k: Long) : List[Long] = {\n            if (i > k) {\n                return\
    \ Nil\n            } else if (i < k) {\n                return List(k.toLong)\n\
    \            }\n            val x = i.toLong / k.toLong.toInt\n            val\
    \ y = i % k.toLong\n            if (x == 0) {\n                return generate(i.toInt,\
    \ k.toInt)\n            } else if (y == 0) {\n                return generate(x\
    \ * k, k.toInt)\n            } else {\n                return generate ((x * k).toInt,\
    \ y.toInt)\n            }\n        }\n        generate(a.toInt, b.toInt)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpne85bw8x.scala:33)\n\tat Problem.main(tmpne85bw8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m\
    \ = (b.toLong - a.toLong + 1l) / 2l\n        val a =  a.toLong\n        val b\
    \ =  b.toLong\n        val result: List[Long] = new mutable.ArrayList[Long]()\n\
    \        val digits = 0 until m\n        for (digit <- digits)\n        {\n  \
    \          if (digit == 0 ) {\n                result.add(0)\n            }\n\
    \            else if (digit <= m / 2 ) {\n                result.add(a % 10)\n\
    \                a /= 10\n            }\n            else {\n                result.add(b\
    \ % 10)\n                b /= 10\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyemgir1z.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m =  b.toLong\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpyemgir1z.scala:15:17 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m =  a.toLong\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyemgir1z.scala:17:37 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyemgir1z.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result.add(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ add is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyemgir1z.scala:25:23\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                result.add(a\
    \ % \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue add is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert"
  stdout: ''
  timestamp: 1660009532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = List(a, b)\n        val evensLongList = evens.map(_.toLong).toList\n     \
    \   val evensIntList = evens.map(_.toInt).toList\n        val evensLongSet = evensLongList.map(_.toSet).toList\n\
    \        val evensIntSet = evensIntList.map(_.toSet).toList\n        val evensSetList\
    \ = evensIntSet.flatMap(x => x).distinct\n\n        val minEvensSet = evensSetList.min\n\
    \        val minEvens = minEvensSet.head\n        val maxEvensSet = evensSetList.max\n\
    \        val maxEvens = maxEvensSet.head\n        val evensSetSet = evensSetList.filter(x\
    \ => x < maxEvens)\n        val evensSetList = evensSetSet.toList\n\n        val\
    \ evensLongSetSorted = evensLongSet.sorted\n        val evensIntSetSorted = evensIntSet.sorted\n\
    \        val evensSetSetSorted = evensSetList.sorted\n        val evensSetSortedSet\
    \ = evensSetSet.toSet\n        val evensSetSortedSetSet = evensSetSortedSet.toSet\n\
    \n        val minEvensLongSet = evensLongSetSorted.min\n        val maxEvensLongSet\
    \ = evensLongSetSorted.max\n\n        val minEvensIntSet = evensIntSetSorted.min\n\
    \        val maxEvensIntSet = evensIntSetSorted.max\n\n        val minEvensSetSet\
    \ = evensSetSetSorted.min\n        val maxEvensSetSet = evensSetSetSorted.max\n\
    \n        val evensLongSetMin = evensLongSetSorted.filter(x => x <= minEvensLongSet).min\n\
    \        val evensLongSetMax = evensLongSetSorted.filter(x => x >= maxEvensLongSet).max\n\
    \        val evensIntSetMin = evensIntSetSorted.filter(x => x <= minEvensIntSet).min\n\
    \        val evensIntSetMax = evensIntSetSorted.filter(x => x >= maxEvensIntSet).max\n\
    \        val evensSetSetMin = evensSetSortedSet.toSet.filter(x => x <= minEvensSetSet).min\n\
    \        val evensSetSetMax = evensSetSortedSet.toSet.filter(x => x >= maxEvensSetSet).max\n\
    \        val evensSetListMin = evensSetSortedSet.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd78dy4s.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevensSetList\e[0m = evensSetSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSetList is already defined as \e[33mvalue\e[0m \e[35mevensSetList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnd78dy4s.scala:17:47 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevensLongSet\e[0m = evensLongList.map(_.toSet).toList\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           value toSet is not a member of Long - did you mean _$3.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnd78dy4s.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensIntSet\e[0m = evensIntList.map(_.toSet).toList\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value toSet is not a member of Int - did you mean _$4.toInt?\n\
    \e[31m\e[31m-- Error: /tmp/tmpnd78dy4s.scala:21:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminEvensSet\e[0m = evensSetList.min\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpnd78dy4s.scala:23:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxEvensSet\e[0m = evensSetList.max\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobje"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var sum\
    \ : Long = 0L\n        var list : List[Long] = Nil\n        var aCount : Int =\
    \ 1\n        var bCount : Int = 1\n        while (aCount < a.toInt) {\n      \
    \      sum += a.toLong * aCount\n            aCount *= 10\n        }\n       \
    \ while (bCount < b.toInt) {\n            sum += b.toLong * bCount\n         \
    \   bCount *= 10\n        }\n        if (sum < a.toLong || sum < b.toLong) {\n\
    \            return Nil\n        }\n        if (sum % 2 == 0) {\n            sum\
    \ = Math.floor(sum / 2)\n            list :+ sum.toLong\n        }\n        while\
    \ (bCount < b.toInt) {\n            sum += b.toLong * bCount\n            bCount\
    \ *= 10\n        }\n        list :+ sum.toLong\n        return list.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1xzak2b.scala:30:28\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            sum = Math.floor(sum\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    Double\n\e[31m   |\e[0m      \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val l\
    \ = List(a, b)\n        var i = 0\n        var res : List[Long] = List()\n   \
    \     while (i < l.length) {\n            val q = math.min(l(i), l(i + 1))\n \
    \           if (q % 2 == 0) {\n                res = res + q.toLong\n        \
    \        i += 2\n            } else {\n                i += 1\n            }\n\
    \        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdt8w6sah.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                res = res + q.toLong\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val nums\
    \ = a.toInt until b.toInt\n        val evens = nums.filter(x => x.toInt % 2 ==\
    \ 0).sortBy(x => x.toInt).toList\n        evens.takeWhile(x => a <= x).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyxgt3zed.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.takeWhile(\e[36mx\e\
    [0m => a <= x).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer.empty[Long]\n        while(b >= a) {\n            result\
    \ += b.toLong\n            b = b - b.toLong.toInt\n        }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmmu4o_o3.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpmmu4o_o3.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            b = b - b.toLong.toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val max\
    \ = (math.max(a, b)).toLong\n        val min = (math.min(a, b)).toLong\n     \
    \   val middle = (min + max) / 2\n        val numbers = List(1l.toLong, middle,\
    \ max)\n        var newList = List[Long]()\n        for (number <- numbers) {\n\
    \            if (number % 2l.toLong < middle) {\n                newList :+= number\n\
    \            }\n        }\n        newList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xlwecve.scala:27)\n\tat Problem.main(tmp8xlwecve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val start\
    \ = a.toLong\n        val end = b.toLong\n        var list : List[Long] = Nil\n\
    \        for (x <- start.toInt(until: (start: Int, end: Int)) to end.toInt(until:\
    \ (start: Int, end: Int))) {\n            list += x.toLong\n        }\n      \
    \  list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptensguy0.scala:17:59 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (x <- start.toInt(until: (\e[36mstart\e\
    [0m: \e[35mInt\e[0m, \e[36mend\e[0m: \e[35mInt\e[0m)) to end.toInt(until: (\e\
    [36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e[0m: \e[35mInt\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                                                           ^\e[0m\n\
    \e[31m   |\e[0m                                            '=>' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptensguy0.scala:17:103\
    \ --------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m\
    \ (x <- start.toInt(until: (\e[36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e[0m:\
    \ \e[35mInt\e[0m)) to end.toInt(until: (\e[36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e\
    [0m: \e[35mInt\e[0m))) {\n\e[31m\e[31m   |\e[0m                              \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                            '=>' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptensguy0.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (x\
    \ <- start.toInt(until: (\e[36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e[0m: \e\
    [35mInt\e[0m)) to end.toInt(until: (\e[36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e\
    [0m: \e[35mInt\e[0m))) {\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: until\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmptensguy0.scala:17:24 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (x <- start.toInt(until: (\e[36mstart\e\
    [0m: \e[35mInt\e[0m, \e[36mend\e[0m: \e[35mInt\e[0m)) to end.toInt(until: (\e\
    [36mstart\e[0m: \e[35mInt\e[0m, \e[36mend\e[0m: \e[35mInt\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \     \e[33mmethod\e[0m \e[35mtoInt\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explai"
  stdout: ''
  timestamp: 1660009532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m1\
    \ = b % a\n        val r = a / m1 \n        if (a == m1) {\n            List()\n\
    \        } else {\n            generateIntegers(a, m1) + List(m1.toLong) + generateIntegers(r,\
    \ b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeg_4_4do.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            generateIntegers(a, m1) + List(m1.toLong)\
    \ + generateIntegers(r, b)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def toInts(a\
    \ : Long, b : Long) : List[Long] = {\n            val s = scala.math.pow(2, a)\
    \ + scala.math.pow(2, b).mod(scala.math.pow(2, b))\n            var l : List[Long]\
    \ = List()\n            var i : Long = 1\n            while (i <= s) {\n     \
    \           l += i.toLong\n                i = i + 2\n            }\n        \
    \    l\n        }\n        return toInts(a, b).filter(_ % 2 == 0)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjv3yhhuq.scala:15:64 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = scala.math.pow(\e\
    [31m2\e[0m, a) + scala.math.pow(\e[31m2\e[0m, b).mod(scala.math.pow(\e[31m2\e\
    [0m, b))\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value mod is not a member\
    \ of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjv3yhhuq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                l += i.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m    value += is\
    \ not a member of List[Long] - did you mean List[Long].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val start\
    \ = math.min(a, b)\n        val end = math.max(a, b)\n        var current = start\n\
    \        val current = math.min(end, current)\n        val list = List[Long](current.toLong)\n\
    \        while(current < end) {\n            current = math.min(end, current)\n\
    \            current = math.max(end, current)\n            val next = math.min(end,\
    \ current)\n            val next = math.max(end, current)\n            list =\
    \ list :+ next.toLong\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8cnt0mei.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcurrent\e[0m = math.min(end,\
    \ current)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrent is already defined as \e[33mvariable\e[0m \e[35mcurrent\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8cnt0mei.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mnext\e[0m = math.max(end, current)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnext is already defined as \e[33mvalue\e[0m \e[35mnext\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8cnt0mei.scala:24:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            list = list\
    \ :+ next.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val list\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      if (a >\
    \ b) {\n         List(a).iterator.toList.sortWith(_ < _)\n      } else if (a <\
    \ b) {\n         List(b).iterator.toList.sortWith(_ < _)\n      } else if (a >\
    \ 0 && b > 0) {\n         List(a).iterator.toList.takeWhile(_ > 0).takeWhile(_\
    \ < b).toList.sortWith(_ < _)\n      } else if (a > 0 && b == 0) {\n         List(a).iterator.toList.takeWhile(_\
    \ > 0).takeWhile(_ == 0).toList.sortWith(_ < _)\n      } else if (a == 0 && b\
    \ > 0) {\n         List(b).iterator.toList.takeWhile(_ > 0).takeWhile(_ == 0).toList.sortWith(_\
    \ < _)\n      } else if (a == 0 && b == 0) {\n         List().iterator.toList.sortWith(_\
    \ < _)\n      } else {\n         List().iterator.toList.sortWith(_ < _)\n    \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk0q9pi9r.scala:25:43 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m         List().iterator.toList.sortWith(_ < _)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk0q9pi9r.scala:27:43 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m         List().iterator.toList.sortWith(_ < _)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        // Store\
    \ the digits in a list\n        var d = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        // Divide by 10 and store remainders\n        while (b > 0) {\n     \
    \       d += b % 10\n            b /= 10\n        }\n        // Return list of\
    \ digits\n        if (d.size < 2)\n            d += 0L\n        else\n       \
    \     d.sortWith(_ > _)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6hflvzgf.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            b /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean b.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6hflvzgf.scala:23:12\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            d += \e[31m0L\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e[0m            Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6hflvzgf.scala:25:22\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            d.sortWith(_ > _)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       Found:    scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e[0m \
    \           Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var res\
    \ = List[Long]()\n        var low = a\n        var high = b\n        var temp\
    \ = low\n        while (!temp.isZero && temp.isEven) {\n            temp = temp\
    \ / 10\n            res.append(temp)\n            temp = temp % 10\n        }\n\
    \        if (temp.isZero) res.append[Long](temp.toLong)\n        while (!temp.isZero\
    \ && temp.isOdd && temp > b) {\n            temp = temp / 10\n            res.append(temp)\n\
    \            temp = temp % 10\n        }\n        if (temp.isZero) res.append[Long](temp.toLong)\n\
    \        res.sort\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (!temp.isZero && temp.isEven)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              value isZero is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmps2fk6dza.scala:20:16 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            res.append(temp)\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not a member of List[Long] -\
    \ did you mean List[Long].appended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (temp.isZero)\
    \ res.append[\e[35mLong\e[0m](temp.toLong)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value isZero is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (temp.isZero) res.append[\e[35mLong\e\
    [0m](temp.toLong)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[Long] - did you mean\
    \ List[Long].appended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:24:21\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mwhile\e[0m\
    \ (!temp.isZero && temp.isOdd && temp > b) {\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isZero is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            res.append(temp)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append\
    \ is not a member of List[Long] - did you mean List[Long].appended?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps2fk6dza.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (temp.isZero) res.append[\e[35mLong\e\
    [0m](temp.toLong)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value isZero is not a member of"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val a\
    \ = a / b\n        val digits = scala.math.pow(b, a).digits\n        var evens\
    \ = List[Long]()\n        var i = 0\n        while(i < digits.length) {\n    \
    \        if(digits(i) % 2 == 0) {\n                evens = evens :+ (a / b * digits(i))\n\
    \                i += 1\n            } else {\n                i += 1\n      \
    \      }\n        }\n        evens\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4xjd06du.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a / b\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4xjd06du.scala:15:42 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = scala.math.pow(b,\
    \ a).digits\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value digits is not a member of Double\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = List()\n        // use while loop and recursion\n        while\
    \ (a <= b) {\n            result += a\n            a += 1l\n        }\n      \
    \  if (result.isEmpty) result :+ a\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqsz8fc_q.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += a\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqsz8fc_q.scala:18:14\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            a += \e[31m1l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean a.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val n\
    \ = b-a\n        if (n.lt(0)) n else List()\n        val evens = generateIntegers(a+1,\
    \ b)\n        for (e <- 0 to n-2) evens = evens ++ List(a + (e*2))\n        evens\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpat6tefgk.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (n.lt(\e[31m0\e[0m)) n \e[33melse\e\
    [0m List()\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value lt is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpat6tefgk.scala:17:23 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        \e[33mfor\e[0m (e <- \e[31m0\e[0m to n-\e[31m2\e[0m) evens = evens ++\
    \ List(a + (e*\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m   \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpat6tefgk.scala:17:34 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m (e <- \e[31m0\e[0m to n-\e[31m2\e[0m) evens = evens\
    \ ++ List(a + (e*\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Reassignment to val evens\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m\
    \ = List(a, b).sorted //sort ascending\n        val l = List(a,b).sorted //sort\
    \ ascending\n        val s = m.zip(l).map{ case (m, l) => l.map{ case b => b.toLong\
    \ % m }.toList }.toList\n        s match {\n            case a :: b :: Nil =>\
    \ a.head :: b.head :: Nil\n            case _ => Nil\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ny_jvna.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = m.zip(l).map{ \e\
    [33mcase\e[0m (m, l) => l.map{ \e[33mcase\e[0m b => b.toLong % m }.toList }.toList\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value map is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ny_jvna.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e\
    [0m a :: b :: Nil => a.head :: b.head :: Nil\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue head is not\
    \ a member of Nothing, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ny_jvna.scala:18:36\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e\
    [0m a :: b :: Nil => a.head :: b.head :: Nil\n\e[31m\e[31m   |\e[0m          \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0mvalue head is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  i"
  stdout: ''
  timestamp: 1660009542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        while (b != 0) {\n            if (a\
    \ >= b) {\n                list.push(a.longValue)\n                a = a.longValue\
    \ / 2\n            } else {\n                a /= 2\n                b /= 2\n\
    \            }\n        }\n        list.filterNot(x => x == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7jae2s44.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7jae2s44.scala:18:18 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                a = a.longValue / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7jae2s44.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                a /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value /= is not a member of Long - did you\
    \ mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jae2s44.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                b /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value /= is not a member of Long - did you mean b.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val digits\
    \ = Seq[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong).reverse\n        val\
    \ x = a / Math.pow(10, digits.size.toLong)\n        val y = a % Math.pow(10, digits.size.toLong)\n\
    \        val result = digits ++ generateIntegers(x + Math.pow(10, digits.size.toLong)*(b\
    \ - y), b)\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwzqwuyhf.scala:17:48\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = digits ++ generateIntegers(x + Math.pow(\e[31m10\e[0m, digits.size.toLong)*(b\
    \ - y), b)\n\e[31m\e[31m   |\e[0m                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                          Found:    Double\n\e[31m   |\e[0m \
    \                                               Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwzqwuyhf.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.mutable.Seq[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def isEven(a:\
    \ Long) : Boolean = {\n            if (a%2 != 0) false else true\n        }\n\n\
    \        def isGreater(a : Long, b : Long) : Boolean = {\n            if (a >\
    \ b) true else false\n        }\n\n        def getEvenAndHigher(a : Long, b :\
    \ Long) : Long = {\n            var c : Long = a.toInt\n            var d : Long\
    \ = b.toInt\n            while (c < b) {\n                d = c\n            \
    \    c = d + b\n            }\n            return d\n        }\n\n        def\
    \ getEvenAndLower(a : Long, b : Long) : Long = {\n            var c : Long = a.toInt\n\
    \            var d : Long = b.toInt\n            while (c > b) {\n           \
    \     d = c\n                c = d - b\n            }\n            return d\n\
    \        }\n\n        def generate(a: Long, b: Long) : List[Long] = {\n      \
    \      var c : List[Long] = Nil\n            while (a < b) {\n               \
    \ if (isEven(a)) c ::= a.toLong\n                else if (isGreater(a, b)) c ::=\
    \ getEvenAndHigher(a.toLong, b).toLong\n                else c ::= getEvenAndLower(a.toLong,\
    \ b).toLong\n                a += 1\n            }\n            c\n        }\n\
    \n        generate(a, b)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvh5s3jk4.scala:48:18 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                a += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean a.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenDigitsFromAtoB\
    \ = a #:: generateIntegers((a.toInt + b.toInt) / 2, b.toInt)\n        if (b.toInt\
    \ % 2 == 0) evenDigitsFromAtoB\n        else evenDigitsFromAtoB.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1x6_au4b.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenDigitsFromAtoB\e[0m\
    \ = a #:: generateIntegers((a.toInt + b.toInt) / \e[31m2\e[0m, b.toInt)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value #:: is not a member of List[Long] - did you mean\
    \ List[Long].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def loop(a\
    \ : Long, b : Long, s : List[Long]) : List[Long] = {\n            if (a > b) s\n\
    \            else loop(a+1, b, s.takeWhile(_ < a) ::: List(a.toLong)) \n     \
    \   }\n        loop(a, b, nil)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx6howpkx.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        loop(a, b, nil)\n\e[31m\e[31m   |\e[0m      \
    \             ^^^\e[0m\n\e[31m   |\e[0m                   Not found: nil\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even:\
    \ Set[Long] = new scala.collection.mutable.HashSet\n        even.add(a.toLong)\n\
    \        val odd: Set[Long] = new scala.collection.mutable.HashSet\n        odd.add(b.toLong)\n\
    \        while (even.nonEmpty || odd.nonEmpty) {\n            val x = even.min.orElse(odd.min).getOrElse(0)\n\
    \            even.remove(x)\n            odd.remove(x)\n            if (even.nonEmpty\
    \ || odd.nonEmpty)\n                yield x\n        }\n        odd.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3mq1ya_p.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33myield\e[0m x\n\e[31m\e[31m   |\e\
    [0m                ^^^^^\e[0m\n\e[31m   |\e[0m                'then' expected,\
    \ but 'yield' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3mq1ya_p.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mx\e[0m = even.min.orElse(odd.min).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          value orElse is not a member of Long\n\e[33m\e[33m-- [E129] Potential\
    \ Issue Warning: /tmp/tmp3mq1ya_p.scala:24:8 -----------------\e[0m\e[0m\n\e[33m23\
    \ |\e[0m                \e[33myield\e[0m x\n\e[33m24 |\e[0m        }\n\e[33m\e\
    [33m   |\e[0m                       ^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if(a >\
    \ b) {\n            List();\n        }\n        else {\n            var list :\
    \ mutable.MutableList[Long] = mutable.MutableList[Long]()\n            for(a <-\
    \ a;\n                b <- b;\n                a <= b) {\n                   \
    \ list = list :+ a\n                }\n            list.toList\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplsg50wgz.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                a <= b) {\n\e[31m\e[31m   |\e[0m    \
    \                  ^\e[0m\n\e[31m   |\e[0m                      '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplsg50wgz.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mlist\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplsg50wgz.scala:18:51 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36mlist\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplsg50wgz.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m(a <- a;\n\e[31m\e[31m   |\e\
    [0m                     ^\e[0m\n\e[31m   |\e[0m                     value foreach\
    \ is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        while(a <= b) {\n            list\
    \ += a\n            a = math.min(a,b)\n        }\n        list.sortBy(_.toString.toLong)\n\
    \        list.filter(i => i.toString.toLong % 2 == 0).map(_.toString.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplfmdf_m.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpplfmdf_m.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a = math.min(a,b)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var start = a\n        var end = b\n        while\
    \ start <= end {\n            val result = start.toString\n            start =\
    \ start + 2\n            result += end.toString\n            end = end - 2\n \
    \       }\n        result.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjrp_54od.scala:23:14 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        result.reverse\n\e[31m\e[31m   |\e[0m       \
    \       ^\e[0m\n\e[31m   |\e[0m              expression expected but \e[31m'.'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpjrp_54od.scala:17:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e\
    [0m start <= end {\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m\
    \   |\e[0m                       \e[33mvariable\e[0m \e[35mend\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrp_54od.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result += end.toString\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpjrp_54od.scala:24:4 -----------------\e[0m\e\
    [0m\n\e[33m23 |\e[0m        result.reverse\n\e[33m24 |\e[0m    }\n\e[33m\e[33m\
    \   |\e[0m                      ^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val range\
    \ = new Range(a, b+1)\n        val even = range.filter(i => i % 2 == 0)\n    \
    \    val odd = range.filter(i => i % 2 == 1)\n        val even_sorted = even.toList.sortWith(_\
    \ > _)\n        val odd_sorted = odd.toList.sortWith(_ > _)\n        if (even_sorted.isEmpty()\
    \ && odd_sorted.isEmpty())\n            List()\n        else\n            List(even_sorted.head,\
    \ odd_sorted.head)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpchcoklhu.scala:14:30\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = \e[33mnew\e[0m \e[35mRange\e[0m(a, b+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       Found:    (a : Long)\n\e[31m   |\e[0m                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpchcoklhu.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mrange\e\
    [0m = \e[33mnew\e[0m \e[35mRange\e[0m(a, b+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val listA\
    \ = new ArrayList[Long]()\n        val listB = new ArrayList[Long]()\n       \
    \ var i : Long = 0\n        var j : Long = 0\n        while (i < a || j < b) {\n\
    \            if (i < a) {\n                listA.add(i)\n                i = i\
    \ + 1\n            }\n            if (j < b) {\n                listB.add(j)\n\
    \                j = j + 1\n            }\n        }\n        val evenList = listA.toList.filterNot(_\
    \ % 2 == 0)\n        val oddList = listB.toList.filterNot(_ % 2 == 0)\n      \
    \  (evenList ++ oddList).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpem8vmj0t.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlistA\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpem8vmj0t.scala:15:24\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mlistB\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \               Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for(i <- a to b) list\
    \ += i.toLong\n        list.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoxqlr3fq.scala:19)\n\tat Problem.main(tmpoxqlr3fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var ans\
    \ = List.empty[Long]\n        var digits = List.empty[Long]\n        for (i <-\
    \ 0 until b - a) {\n            var newDigit = i / a\n            digits += newDigit\n\
    \            if (newDigit > 0) {\n                ans = ans :+ newDigit.toLong\n\
    \            }\n        }\n        ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqh5wa6c1.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until b - a) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqh5wa6c1.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            digits += newDigit\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val res\
    \ : List[Long] = Nil\n        while (a < b) {\n            val x = a.toInt\n \
    \           val y = b.toInt\n            if (x % 2 == 0 && y % 2 == 0) {\n   \
    \             val rem = x % y\n                if (rem == 0) {\n             \
    \       res :+= x\n                } else {\n                    res :+= y\n \
    \               }\n            } else if (x % 2 != 0 && y % 2 == 0) {\n      \
    \          res :+= y\n            } else {\n                res :+= x\n      \
    \      }\n            a = x + 1\n            b = y + 1\n        }\n        if\
    \ (res.isEmpty) res\n        else generateIntegers(a+1, b).reverse.head +: res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gywhbtn.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    res :+= x\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m          value :+= is not a\
    \ member of List[Long] - did you mean res.:+?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3gywhbtn.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                    res :+= y\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m          value :+= is not a member of List[Long]\
    \ - did you mean res.:+?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3gywhbtn.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                res :+= y\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ :+= is not a member of List[Long] - did you mean res.:+?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3gywhbtn.scala:28:20 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                res :+= x\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m          value :+= is not a member of List[Long]\
    \ - did you mean res.:+?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3gywhbtn.scala:30:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            a = x +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp3gywhbtn.scala:31:14 -----------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            b = y + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val b\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ < 0) throw new IllegalArgumentException();\n        if (a == 0) return List();\n\
    \        val max  = scala.math.min(a.toInt+b, b.toInt)\n        val min = scala.math.max(a.toInt+b,\
    \ b.toInt)\n        val aToInt = a.toInt;\n        val bToInt = b.toInt;\n   \
    \     val aList = new scala.collection.mutable.ListBuffer[Long]()\n        for\
    \ ( i <- 1 to max) {\n            val aDigit = scala.math.pow(10, i.toInt - aToInt)\n\
    \            val bDigit = scala.math.pow(10, i.toInt - bToInt)\n            val\
    \ a = aDigit / scala.math.pow(10, i.toInt - aToInt)\n            val b = bDigit\
    \ / scala.math.pow(10, i.toInt - bToInt)\n            val l = a*b\n          \
    \  if (l % 2 == 0) aList += l\n        }\n        if (aList.size < 1) return List()\n\
    \        val even = List(aList)\n        val odd = aList.filterNot(_ % 2 == 0)\n\
    \        even.sortBy(_ % 10)\n        even.foldLeft(List(even, odd)) { case (acc,x)\
    \ => \n            val xList = x.toList.sortBy(_ % 10)\n            val a = acc.head\n\
    \            val b = xList.head\n            val c = a*b\n            val d =\
    \ xList.last\n            acc\n                .append(c).\n                append(d).\n\
    \                map(_ % 10)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7v6ig_45.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m ( i <-\
    \ \e[31m1\e[0m to max) {\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\
    \e[31m   |\e[0m                        Found:    (max : Long)\n\e[31m   |\e[0m\
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7v6ig_45.scala:27:37 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (l % \e[31m2\e[0m == \e[31m0\e[0m)\
    \ aList += l\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\
    \e[31m   |\e[0m                                     Found:    (l : Double)\n\e\
    [31m   |\e[0m                                     Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7v6ig_45.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        even.sortBy(_ % \e[31m10\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of scala.collection.mutable.ListBuffer[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp7v6ig_45.scala:32:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        even.sortBy(_ % \e[31m10\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7v6ig_45.scala:37:21 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m            \e[33mval\e[0m \e[36mc\e[0m = a*b\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer.empty[Long]\n        var current = a\n        while(current\
    \ < b) {\n            val remainder = current.toInt % 10\n            if(remainder\
    \ != 0) {\n                result += current.toLong\n                current +=\
    \ 10\n            }\n            else {\n                result += current.toLong\n\
    \                current += 10\n            }\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dco_w6e.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n      if (a ==\
    \ 0) Nil else if (b == 0) Nil else {\n        var l = b\n        var k = a\n \
    \       val res = (0 to a).map(i => l % k).filter(l => l % 2 == 0).sorted\n  \
    \      res.map(x => { l += 1; k *= 2; x })\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5n4llo1u.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = (\e[31m0\e[0m to a).map(\e[36mi\e[0m => l % k).filter(\e[36ml\e[0m => l\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m              \
    \          ^\e[0m\n\e[31m   |\e[0m                        Found:    (a : Long)\n\
    \e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5n4llo1u.scala:18:15 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        res.map(\e[36mx\e[0m => { l += \e[31m1\e[0m;\
    \ k *= \e[31m2\e[0m; x })\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (a\
    \ > b) {\n            List(a, b)\n        }\n        else {\n            val evenNumbers\
    \ = a.toLong.filter(_ % 2 == 0)\n            val evenNumbersSortedAsc = evenNumbers.sortWith(_\
    \ < _)\n            val remainder = b.toLong.filter(_ % 2 == 0)\n            val\
    \ evenNumbersSortedDesc = evenNumbers.sortWith(_ < _).reverse\n            val\
    \ remainderSortedDesc = remainder.sortWith(_ < _).reverse\n            val nums\
    \ = evenNumbersSortedAsc.takeWhile(_ <= b).toList ++ evenNumbersSortedDesc.takeWhile(_\
    \ >= a).toList\n            nums ++ remainderSortedDesc.takeWhile(_ <= b).reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_xg8f7p.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenNumbers\e[0m = a.toLong.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ filter is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_xg8f7p.scala:20:37\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mremainder\e[0m = b.toLong.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value filter is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result\
    \ : List[Long] = List()\n        var mid = a\n        while (mid<b) {\n      \
    \      if (mid%2==0)\n                result ::= mid.toLong\n            mid =\
    \ mid+1\n        }\n        result ::= mid.toLong\n        result.reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpen85sy46.scala:25)\n\tat Problem.main(tmpen85sy46.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val range\
    \ = (a to b).toSet\n        val nums = range.map( n=> n.toInt).toList\n      \
    \  val result: List[Long] = nums.sortWith((a, b) => a < b)\n        range.map(i\
    \ => result(i))\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkorb0ifb.scala:16:46\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = nums.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a < b)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m                                 Required: List[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkorb0ifb.scala:17:30\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        range.map(\e[36mi\e[0m\
    \ => result(i))\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e\
    [31m   |\e[0m                              Found:    (i : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if (b\
    \ - a*2 > 0)\n            throw new Exception(\"Invalid input\")\n        val\
    \ n = a.pow(2).ceil.toLong\n        val s = a.floor.toLong\n        val m = 1\n\
    \        var l = 0\n        val even = []\n        for (i <- 0 until n) {\n  \
    \          if (i % 2 == 0) {\n                even += i.toLong\n             \
    \   l++\n            }\n            else {\n                if (s > m)\n     \
    \               m = s\n                s = (i + m).floor.toLong\n            \
    \    l++\n            }\n        }\n        return even.take(b.toLong - a + l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3dfb8ei.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    an\
    \ identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3dfb8ei.scala:21:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>'\
    \ expected, but 'end of statement' found\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmps3dfb8ei.scala:24:19 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                l++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps3dfb8ei.scala:30:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                l++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps3dfb8ei.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.pow(\e[31m2\e\
    [0m).ceil.toLong\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue pow is not a member of Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps3dfb8ei.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = a.floor.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ floor is not a member of Long.\n\e[31m   |\e[0m      An extension method was\
    \ tried, but could not be full"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val nums\
    \ = for (a <- a; b <- b) yield { val l = a % b; a / b }\n        val evens = for\
    \ (a <- nums; a % 2 == 0) yield a\n        evens ++ nums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpob78vmj3.scala:15:46 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = \e[33mfor\e\
    [0m (a <- nums; a % \e[31m2\e[0m == \e[31m0\e[0m) \e[33myield\e[0m a\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                            '<-' expected, but ')' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpob78vmj3.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mfor\e\
    [0m (a <- a; b <- b) \e[33myield\e[0m { \e[33mval\e[0m \e[36ml\e[0m = a % b; a\
    \ / b }\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             value flatMap is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val res\
    \ = ListBuffer[Long]()\n        while(a < b) {\n            res += a\n       \
    \     a = a >> 1\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpri4i0qgn.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a = a >> \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpri4i0qgn.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        res\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (res : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var res\
    \ = []\n        var rem = b - a\n        var even = rem\n        var i = 0\n \
    \       while ( even > 0 ){\n            rem = (rem / 10).toLong\n           \
    \ rem %= 10\n            res +=    rem.toLong\n            even = even / 2\n \
    \           i += 1\n        }\n        val evens = res.filter(_%2 == 0)\n    \
    \    val odd = res.filter(_%2 == 1)\n        var i = 1\n        while ( i < evens.length\
    \ ){\n            evens(i) += evens(i - 1) * 10\n            i += 1\n        }\n\
    \        val rem = evens.length - evens.length\n        odd(rem) += odd(rem -\
    \ 1) * 10\n        if ( evens.length == 0 ){\n            List[Long]()\n     \
    \   } else {\n            List[Long](evens.toList,odd.toList)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpew2bcqlz.scala:14:19 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpew2bcqlz.scala:15:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mrem\e[0m = b - a\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected,\
    \ but 'end of statement' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpew2bcqlz.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mi\e[0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mi is already defined as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpew2bcqlz.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mrem\e[0m = evens.length - evens.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mrem is already defined as \e[33mvariable\e[0m \e[35mrem\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpew2bcqlz.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            res +=    rem.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Null - did you mean\
    \ Null.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpew2bcqlz.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = res.filter(_%\e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue filter is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val a\
    \ = a.toInt\n        val b = b.toInt\n        var i = 0\n        var ans = List[Long]()\n\
    \        while (i <= b) {\n            if (a%2==0l) {\n                ans = ans\
    \ :+ a.toLong\n                a = a.toLong\n                i = i + 1\n     \
    \       }\n            else {\n                a = a.toLong\n            }\n \
    \       }\n        return ans\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsd9mvx4o.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpsd9mvx4o.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpsd9mvx4o.scala:21:18 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                a = a.toLong\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsd9mvx4o.scala:25:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                a =\
    \ a.toLong\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generateNumbers(x\
    \ : Long, i : Long) : List[Long] = {\n            val c = x.toString / i.toString.toDouble\n\
    \            if (c.toDouble < 1) {\n                List()\n            } else\
    \ {\n                val y = x.toString.remainder(i.toString.toDouble).toLong\n\
    \                if (y == 0)\n                    generateNumbers(x, i + 1)\n\
    \                else\n                    generateNumbers(y, i)\n           \
    \ }\n        }\n        val n = generateNumbers(a, b).filter(_ != 0).size\n  \
    \      val s = generateNumbers(a, b).filter(_ % 2 == 0).toList.sorted\n      \
    \  val a = s.head\n        val d = List(s.last).sortWith(_ > _)\n        generateNumbers(a,\
    \ n).map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdcnmeb66.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = x.toString\
    \ / i.toString.toDouble\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdcnmeb66.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36my\e[0m = x.toString.remainder(i.toString.toDouble).toLong\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value remainder is not a member of String\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdcnmeb66.scala:27:32 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = generateNumbers(a,\
    \ b).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).toList.sorted\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var list\
    \ : List[Long] = Nil\n        val start = (1l / a).toInt\n        val end = (1l\
    \ / b).toInt\n        for (i <- start.until(end)) {\n            if (a % i ==\
    \ 0 && b % i == 0) {\n                list += i\n            }\n        }\n  \
    \      list\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl56ffoir.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                list += i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val odd\
    \ = scala.math.floor((b-a)/2l)\n        val even = b-a\n        odd.toLong ::\
    \ even.toLong :: odd.toLong :: Nil\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwk716frv.scala:19)\n\tat Problem.main(tmpwk716frv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var list\
    \ = List[Long]()\n        while(a <= b) {\n            list = list :+ a.toLong\n\
    \            a = (a * b).toLong\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpalyvvab3.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a = (a * b).toLong\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenNumbers\
    \ = BigInt(a)\n        val oddNumbers = BigInt(b)\n        val numEvens = evenNumbers\
    \ / BigInt(2)\n        val numOdds = oddNumbers / BigInt(2)\n\n        val result\
    \ = ListBuffer(numEvens.toLong)\n        if (numOdds.toLong >= BigInt(1)) {\n\
    \            for (num in 0 until numOdds.toInt) {\n                result.prepend(BigInt(num\
    \ + 1).toLong)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ttqkwes.scala:21:47 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (num in \e[31m0\e[0m until\
    \ numOdds.toInt) {\n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \  '<-' expected, but '{' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ttqkwes.scala:23:13\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m\
    \   |\e[0m             ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9ttqkwes.scala:25:8 ---------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (result : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val m\
    \ = b - a\n        if (m <= 0) List.empty\n        else m / 2L.toLong :: generateIntegers(a,\
    \ b - (m*2L.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1uw1qdi.scala:19)\n\tat Problem.main(tmpp1uw1qdi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate(a:\
    \ Long, b: Long, result: List[Long]) : List[Long] = {\n            if (b - a <=\
    \ 0) result\n            else generate(a * b, b, a :: result)\n        }\n   \
    \     generate(a, b, List[Long]())\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67sv7ol6.scala:21)\n\tat Problem.main(tmp67sv7ol6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var l\
    \ = (b - a).toInt\n        var i = b\n        var evenNumbers = List[Long]()\n\
    \        while ( i < a ) {\n            evenNumbers += i\n            i += 2l\n\
    \        }\n        evenNumbers.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxs8aw4zo.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            evenNumbers += i\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of\
    \ List[Long] - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generateN(a\
    \ : Long, b : Long, n: List[Long]) =\n            if (a <= 0 || b <= 0) n\n  \
    \          else if (b < a) generateN(a, (b - a), n :+ a).reverse\n           \
    \ else generateN(a - b, b - a, n :+ a :+ b)\n        val list = generateN(a.toInt,\
    \ b.toInt, Nil)\n        list.sort (Long.compare(x => (x.toInt, x), y => (y.toInt,\
    \ y)))\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpkit_gibl.scala:16:28 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (b < a) generateN(a,\
    \ (b - a), n :+ a).reverse\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m              Overloaded or recursive \e[33mmethod\e[0m \e\
    [35mgenerateN\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E044]\
    \ Cyclic Error: /tmp/tmpkit_gibl.scala:17:17 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33melse\e[0m generateN(a - b, b - a, n :+ a\
    \ :+ b)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m       \
    \       Overloaded or recursive \e[33mmethod\e[0m \e[35mgenerateN\e[0m needs return\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkit_gibl.scala:19:13\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        list.sort (Long.compare(\e\
    [36mx\e[0m => (x.toInt, x), \e[36my\e[0m => (y.toInt, y)))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value sort is not a member of List[Long]\
    \ - did you mean list.sortBy?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkit_gibl.scala:19:24\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        list.sort (Long.compare(\e\
    [36mx\e[0m => (x.toInt, x), \e[36my\e[0m => (y.toInt, y)))\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue compare is not a\
    \ member of object Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list:\
    \ List[Long] = new scala.collection.mutable.MutableList[Long]()\n        var num:\
    \ Long = 0\n        while(num < a || num > b){\n            if(num % 2 == 0){\n\
    \                list += num.toLong\n            }\n            num += 1\n   \
    \     }\n        list.sortWith((x, y) => x > y)\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2whtfrr.scala:14:60 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m scala.collection.mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            type MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2whtfrr.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                list += num.toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member\
    \ of List[Long] - did you mean list.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val l\
    \ = math.min(a, b);\n        val r = math.max(a, b);\n\n        var cur = math.max(a,\
    \ b);\n        var result = List[Long]();\n        while(cur <= l) {\n       \
    \     result ::= cur.toLong;\n            cur += r;\n        }\n        result.reverse;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpop2zsl60.scala:26)\n\tat Problem.main(tmpop2zsl60.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ =  a.toString.takeWhile(_ % 2 == 0).sorted\n        val odds =  b.toString.takeWhile(_\
    \ % 2 == 1).sorted\n        evens.zipWithIndex.flatMap(x => List(x._2, x._2 +\
    \ 1)).filter(x => x < b.toString.length).filter(x => x >= a.toString.length).toList\
    \ ::: odds\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2zm6wqef.scala:16:140 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        evens.zipWithIndex.flatMap(\e[36mx\e[0m => List(x._2,\
    \ x._2 + \e[31m1\e[0m)).filter(\e[36mx\e[0m => x < b.toString.length).filter(\e\
    [36mx\e[0m => x >= a.toString.length).toList ::: odds\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                               ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value ::: is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var x\
    \ = a.toInt\n        var y = b.toInt\n        var answer = new Array[Long](x-y+1)\n\
    \        var x = a\n        var y = b\n        var even = x.toInt/evenDigit\n\
    \        var lastEven = y\n        var start = 0\n        var end = evenDigit\n\
    \        var i = 1\n        while (i < evenDigit) {\n            answer[start]\
    \ = even\n            start = end\n            end = start + 1\n            i\
    \ = i + 1\n        }\n        while (i < evenDigit) {\n            answer[start]\
    \ = lastEven\n            start = end\n            end = start + evenDigit\n \
    \           i = i + 1\n        }\n        return answer\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpehl_hf6u.scala:25:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            answer[\e[35mstart\e[0m] = even\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           end of statement expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmpehl_hf6u.scala:31:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m31 |\e[0m       \
    \     answer[\e[35mstart\e[0m] = lastEven\n\e[31m\e[31m   |\e[0m             \
    \             ^\e[0m\n\e[31m   |\e[0m                          end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehl_hf6u.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mx\e[0m = a\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mx is already defined as \e[33mvariable\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehl_hf6u.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36my\e[0m = b\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0my is already defined as \e[33mvariable\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehl_hf6u.scala:19:27\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36meven\e[0m = x.toInt/evenDigit\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: evenDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehl_hf6u.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e\
    [36mend\e[0m = evenDigit\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Not found: evenDigit\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val l1\
    \ =  a.toString.reverse.map(_.toInt)\n        val l2 =  b.toString.reverse.map(_.toInt)\n\
    \        val n1 = l1.takeWhile(x => x >= 0)\n        val n2 = l2.takeWhile(x =>\
    \ x >= 0)\n        val l3 = n2.zip(l1).map {\n            case (l,r) => r + l\n\
    \        }.toList\n        if (l3.isEmpty) {\n            l3\n        }\n    \
    \    else {\n            var temp = l1\n            while (!l3.contains(temp))\
    \ {\n                temp = temp + n2.head\n            }\n            l3.sorted\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyn9vhlx.scala:22:12\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            l3\n\e[31m\e[31m\
    \   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m            Found:    (l3 : List[Int])\n\
    \e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvyn9vhlx.scala:27:28 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                temp = temp + n2.head\n\e[31m\e[31m \
    \  |\e[0m                       ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of IndexedSeq[Int], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvyn9vhlx.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            l3.sorted\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m            Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var li\
    \ = a.toString.toInt;\n        var lb = b.toString.toInt;\n        var list :\
    \ List[Long] = Nil;\n        var temp : List[Long] = Nil;\n        var count :\
    \ Int = 0;\n\n        while(li > 0) {\n            count = count + 1;\n      \
    \      temp = List(li % 10);\n            li = li/10;\n\n            while(count\
    \ > 0 && temp.length > 0) {\n                if(lb % 2 == 0) {\n             \
    \       temp = temp + List(temp(temp.length-1));\n                    count =\
    \ count - 1;\n                }\n                lb = lb / 2;\n            }\n\
    \            list = list + temp;\n        }\n        return list;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmulmx0m9.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    temp = temp + List(temp(temp.length-\e\
    [31m1\e[0m));\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmulmx0m9.scala:32:24 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            list = list + temp;\n\e[31m\e[31m   |\e[0m   \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        if(a >\
    \ b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbynty8t8.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(a > b)\
    \ a \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m \
    \  |\e[0m                  Found:    (a : Long)\n\e[31m   |\e[0m             \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbynty8t8.scala:14:25 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mif\e[0m(a > b) a \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m\
    \                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (b : Long)\n\e[31m   |\e[0m                         Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evenDigits\
    \ = a.toString.takeWhile(digit => digit != '0').iterator\n        val oddDigits\
    \ = b.toString.dropWhile(digit => digit != '0').iterator\n        val result =\
    \ oddDigits.toList.filter(_ => evenDigits.hasNext)\n        if (result.isEmpty)\
    \ Nil\n        else result :: generateIntegers(result.head, result.tail)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjga0qz4j.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m result\
    \ :: generateIntegers(result.head, result.tail)\n\e[31m\e[31m   |\e[0m       \
    \                                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    List[Char @uncheckedVariance]\n\e\
    [31m   |\e[0m                                 Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjga0qz4j.scala:18:13 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m result :: generateIntegers(result.head,\
    \ result.tail)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    (result : List[Char])\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var list:\
    \ List[Long] = Nil\n        var num = a\n        var pow = 10\n        while (pow\
    \ != 0) {\n            list = list :+ num.toInt\n            num *= pow\n    \
    \        pow /= 2\n        }\n        if (b > num) {\n            list = list\
    \ :+ (b - num).toInt\n        }\n        return list.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8enubgha.scala:28)\n\tat Problem.main(tmp8enubgha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate():\
    \ List[Long] = {\n            def isEven(i: Long, even: List[Long]) : List[Long]\
    \ = {\n                if (i % 2 == 0) {\n                    i.toLong :: even\n\
    \                } else {\n                    even\n                }\n     \
    \       }\n            val even = if (a > b) Nil else a.toLong :: generate()\n\
    \            val odd = if (b > a) Nil else b.toLong :: generate()\n          \
    \  isEven(a, even) ++ isEven(b, odd)\n        }\n        generate()\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\tat Problem$.generate$1(tmpmjztbyil.scala:22)\n\
    \tat Problem$.g"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val x\
    \ = a%b\n        val y = a%b\n        val z = a%b\n        val z2 = a%b\n    \
    \    val z3 = a%b\n        val z4 = a%b\n        val z5 = a%b\n        val z6\
    \ = a%b\n        val z7 = a%b\n        val z8 = a%b\n        val z9 = a%b\n  \
    \      val z10 = a%b\n        val z11 = a%b\n        val z12 = a%b\n        val\
    \ z13 = a%b\n        val z14 = a%b\n        val z15 = a%b\n        val z16 = a%b\n\
    \        val z17 = a%b\n        val z18 = a%b\n        val z19 = a%b\n       \
    \ val z20 = a%b\n        val z21 = a%b\n        val z22 = a%b\n        val z23\
    \ = a%b\n        val z24 = a%b\n        val z25 = a%b\n        val z26 = a%b\n\
    \        val z27 = a%b\n        val z28 = a%b\n        val z29 = a%b\n       \
    \ val z30 = a%b\n        val z31 = a%b\n        val z32 = a%b\n        val z33\
    \ = a%b\n        val z34 = a%b\n        val z35 = a%b\n        val z36 = a%b\n\
    \        val z37 = a%b\n        val z38 = a%b\n        val z39 = a%b\n       \
    \ val z40 = a%b\n        val z41 = a%b\n        val z42 = a%b\n        val z43\
    \ = a%b\n        val z44 = a%b\n        val z45 = a%b\n        val z46 = a%b\n\
    \        val z47 = a%b\n        val z48 = a%b\n        val z49 = a%b\n       \
    \ val z50 = a%b\n        val z51 = a%b\n        val z52 = a%b\n        val z53\
    \ = a%b\n        val z54 = a%b\n        val z55 = a%b\n        val z56 = a%b\n\
    \        val z57 = a%b\n        val z58 = a%b\n        val z59 = a%b\n       \
    \ val z60 = a%b\n        val z61 = a%b\n        val z62 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf55i1jok.scala:77:17 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \e[36mz62\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf55i1jok.scala:78:5 ---------------------\e[0m\e[0m\n\e[31m78\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var result:\
    \ List[Long] = Nil\n        var carry = 0\n        for(i <- a to b){\n       \
    \     result ::= i + (carry % 10)\n            carry /= 10\n        }\n      \
    \  if(result != Nil)\n            result ::= carry\n        result ::= Nil\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hv24ysz.scala:22:15 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result ::= Nil\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is not a member of List[Long] -\
    \ did you mean List[Long].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        def generate(a\
    \ : Long, b : Long) : List[Long] = {\n            val start = a\n            val\
    \ end = b\n            val digits = mutable.LinkedList.empty[Long]\n         \
    \   while (start < end) {\n                digits += start\n                start\
    \ += 1\n            }\n            digits.sortWith((a,b) => a < b)\n        }\n\
    \        generate(a,b).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fx7_nig.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mdigits\e[0m = mutable.LinkedList.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3fx7_nig.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                start += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Long - did you mean start.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        var l\
    \ : List[Long] = Nil\n        var c = a\n        while(c <= b) {\n           \
    \ if (c % 2==0) {\n                c = c + 1;\n                l = c :: l\n  \
    \          } else {\n                c = c + 1;\n            }\n        }\n  \
    \      l\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaftr0gty.scala:27)\n\tat Problem.main(tmpaftr0gty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009563
