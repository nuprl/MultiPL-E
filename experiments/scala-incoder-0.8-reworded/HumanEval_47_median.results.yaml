language: scala
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        import scala.math._\n   \
    \     val numElements = l.length\n        if(numElements == 0) 0 else l.sorted[Float](math.abs(math.log10(numElements))).mid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphas84bw7.scala:12:60\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m(numElements\
    \ == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m l.sorted[\e[35mFloat\e[0m](math.abs(math.log10(numElements))).mid\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Double\n\
    \e[31m   |\e[0m                                               Required: Ordering[Float]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var med = 0.0f\n        var\
    \ m = l.length.toFloat\n        for (i <- 0 until l) {\n            if (i < l\
    \ / 2.0) med = med + l(i)\n            else med = (med + l(i)) / (m - 1)\n   \
    \     }\n        med.toFloat\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3uubpcw.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until l) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (l : List[Long])\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps3uubpcw.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i < l / \e[31m2.0\e[0m) med\
    \ = med + l(i)\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e\
    [0mvalue / is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sort\n\
    \        if (sortedList.length % 2 == 1) {\n            val middle = (sortedList.length\
    \ / 2).floor.toInt\n            if (sortedList(middle) < sortedList(middle - 1))\
    \ {\n                sortedList(middle - 1)\n            } else {\n          \
    \      sortedList(middle)\n            }\n        } else {\n            sortedList(sortedList.length\
    \ / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_qjlkxr.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = l.sort\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \    value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // If list is empty, return\
    \ 0.\n        if (l.isEmpty)\n            return 0\n\n        // Sort list in\
    \ descending order.\n        val r = l.sorted\n        val mid = (r.length / 2).toInt\n\
    \        (r(mid), r(mid-1))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9n25k54.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        (r(mid), r(mid-\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    (Long, Long)\n\e[31m   |\e[0m        Required: Float\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        if\
    \ (n < 2) 0f\n        else (l.last + l.dropRight(1).last)/2f\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp75pgqdp6.scala:15)\n\tat Problem.main(tmp75pgqdp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        def partition(l: List[Long],\
    \ r: Long) : List[Long] =\n            if (r <= l.head) l :: Nil else Nil :: partition(l.tail,\
    \ r)\n        val sorted = l.toList.sort\n        val (left, right) = partition(sorted,\
    \ sorted.last)\n        val m = (left.head + right).div(2)\n        if (m == 0.0)\
    \ 0f else m\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97unyibc.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (r\
    \ <= l.head) l :: Nil \e[33melse\e[0m Nil :: partition(l.tail, r)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              Found:    (l : List[Long])\n\e[31m   |\e[0m                   \
    \          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp97unyibc.scala:11:43 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mif\e[0m (r <= l.head) l :: Nil \e[33melse\e[0m Nil ::\
    \ partition(l.tail, r)\n\e[31m\e[31m   |\e[0m                                \
    \           ^^^\e[0m\n\e[31m   |\e[0m                                 Found: \
    \   collection.immutable.Nil.type\n\e[31m   |\e[0m                           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97unyibc.scala:12:30\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36msorted\e[0m = l.toList.sort\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp97unyibc.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = (left.head + right).div(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value head is not\
    \ a member of Any\n4 errors found\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.sorted\n      \
    \  val n = (l + l).length\n        val mid = n / 2\n        (mid.toDouble * 0.5)\
    \ + l.slice(mid).sum.toDouble\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_icvm7xy.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sorted\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if(l.length < 2) l.head\n        else {\n            val half = sorted.length\
    \ >>> 1\n            val low = sorted.head\n            val high = sorted.last\n\
    \            sorted.init:{ \n                val l = (low + high) >>> 1\n    \
    \            if(l == high) high + 1.toLong\n                else if(l == low)\
    \ low + 1\n                else {\n                    val x = ((low + high) >>>\
    \ 1) + 1\n                    if(x <= half) low\n                    else high\n\
    \                }\n            }.takeWhile(l => (l < low) || (l > high)).last\
    \ + 1.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj4hi6490.scala:17:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = (low +\
    \ high) >>> \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                refinement cannot have a right-hand side\n\
    \e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpj4hi6490.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(l == high) high + \e[31m1\e\
    [0m.toLong\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0m    \
    \            Illegal start of declaration\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpj4hi6490.scala:25:13 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            }.takeWhile(l => (l < low) || (l > high)).last\
    \ + \e[31m1\e[0m.toLong\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e\
    [0m             end of statement expected but '.' found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val N = l.length\n      \
    \  if (N==0) 0f\n        else if (N==1) l.head\n        else\n            math.abs(l.sum/N)\
    \ + l.last/N\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdxvg10xj.scala:17)\n\tat Problem.main(tmpdxvg10xj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l match  {\n    \
    \        case Nil => 0.0f\n            case x :: Nil => x.toFloat\n          \
    \  case x :: xs => if (xs.isEmpty) xs.toFloat\n                          else\
    \ if (x < xs.head) xs.head.toFloat\n                          else median(xs.tail)\n\
    \        }\n        l.toFloat + (l.toFloat - l.toFloat / 2).toFloat\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnzqoxdof.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l \e[33mmatch\e\
    [0m  {\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m         \
    \       Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzqoxdof.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m x :: Nil => x.toFloat\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnzqoxdof.scala:13:32 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m (xs.isEmpty)\
    \ xs.toFloat\n\e[31m\e[31m   |\e[0m                                ^^\e[0m\n\e\
    [31m   |\e[0m                                Not found: xs\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzqoxdof.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (xs.isEmpty) xs.toFloat\n\e[31m\e[31m   |\e[0m                             \
    \               ^^\e[0m\n\e[31m   |\e[0m                                     \
    \       Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzqoxdof.scala:14:35\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                        \
    \  \e[33melse\e[0m \e[33mif\e[0m (x < xs.head) xs.head.toFloat\n\e[31m\e[31m \
    \  |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m          \
    \                         Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnzqoxdof.scala:14:48 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m      "
  stdout: ''
  timestamp: 1659978719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val mid = (l.length / 2).toDouble\n\
    \        if(l.length % 2 != 0) (l.last + l.first) / 2\n        else {\n      \
    \      var low = l.head\n            var high = l.last\n            low match\
    \ {\n                case x if x < mid => (l.head + l.last) / 2\n            \
    \    case x if x > mid => (low + high) / 2\n                case _ => (low + high)\
    \ / 2\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkkpf6no.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(l.length % \e[31m2\e[0m != \e[31m0\e\
    [0m) (l.last + l.first) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m        value first is not\
    \ a member of List[Long] - did you mean l.find?\n1 error found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l1 = l.sortWith(_ < _)\n\
    \        if(l1.length == 1) l1.head\n        else (l1.head+l1.last)/2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7ubltuv.scala:16)\n\tat Problem.main(tmpi7ubltuv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Sort by length before\
    \ using binary search.\n        val sorted = l.sorted\n        val l = sorted.length\n\
    \        val m = sorted.last\n        val l2 = l.last - m\n        if (l2 == 0)\
    \ m\n        else if (l2 == 1) (m+sorted[(l-1)/2]).floatValue\n        else (sorted[(l-1)/2].floatValue\
    \ + sorted[l/2]).floatValue\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4lqkqlkq.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = sorted.length\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35msorted\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4lqkqlkq.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m (sorted[(l-\e[31m1\e[0m)/\e[31m2\e\
    [0m].floatValue + sorted[l/\e[31m2\e[0m]).floatValue\n\e[31m\e[31m   |\e[0m  \
    \                        ^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: type /\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if(l.length==0) throw new\
    \ IllegalArgumentException(\"List was empty\")\n        val list = l.toSeq.toList\n\
    \        val sortedList = list.sortWith((x, y) => x._1 < y._1)\n        val halfLen\
    \ = (sortedList.size - 1) / 2\n        val middle = sortedList(halfLen)\n    \
    \    val low = sortedList(halfLen - 1)\n        val high = sortedList(halfLen\
    \ + 1) // O(n^2) but only ~50x the comparisons\n        if(list.isEmpty) throw\
    \ new IllegalArgumentException(\"List was empty\")\n        if(list.size == 1)\
    \ return list(0)\n        val midIndex = (low(0) +high(list.length-1)) / 2\n \
    \       if(low(0) > middle(0)) return low(0)\n        if(high(list.length-1) >\
    \ middle(list.length-1)) return high(list.length-1)\n        if(low(0) == middle(0))\
    \ return low(0)\n        if(high(list.length-1) == middle(list.length-1)) return\
    \ high(list.length-1)\n        if(low(0) > high(0)) return low(0)\n        else\
    \ if(low(0) == high(0)) return low(0)\n        else if(high(list.length-1) < low(0))\
    \ return high(0)\n        else return low(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2igt8uvu.scala:12:51 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = list.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x._1 < y._1)\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          value _1 is not a member of Long\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmp2igt8uvu.scala:19:24 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmidIndex\e[0m = (low(\e[31m0\e\
    [0m) +high(list.length-\e[31m1\e[0m)) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                        \e[33mvalue\e\
    [0m \e[35mlow\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp2igt8uvu.scala:20:11 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(low(\e[31m0\e[0m) > middle(\e[31m0\e\
    [0m)) \e[33mreturn\e[0m low(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           ^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mvalue\e[0m \e[35mlow\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2igt8uvu.scala:20:38 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(low(\e[31m0\e[0m) > middle(\e[31m0\e\
    [0m)) \e[33mreturn\e[0m low(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \            \e[33mvalue\e[0m \e[35mlow\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp2igt8uvu.scala:21:11 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(high(list.length-\e[31m1\e[0m)\
    \ > middle(list.length-\e[31m1\e[0m)) \e[33mreturn\e[0m high(list.length-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0m           \e\
    [33mvalue\e[0m \e[35mhigh\e[0m does not take parameters\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659978723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        def medianOfTwo(n1: Long,\
    \ n2: Long) =\n            (n1 + n2) / 2\n\n        if (l.length == 0)\n     \
    \       throw new RuntimeException(\"List can't be empty\")\n\n        if (l.length\
    \ == 1)\n            return l.head\n\n        val sorted = l.toArray\n       \
    \ val even = sorted.filter(_ % 2 == 0)\n        val odd = sorted.filter(_ % 2\
    \ == 1)\n\n        if (even.length < odd.length) {\n            val l1 = medianOfTwo(even(0),\
    \ even(even.length))\n            val l2 = medianOfTwo(odd(0), odd(odd.length))\n\
    \            medianOfTwo(l1, l2)\n        } else {\n            val l1 = medianOfTwo(even(0),\
    \ odd(0))\n            val l2 = medianOfTwo(even(0), odd(odd.length))\n      \
    \      medianOfTwo(l1, l2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length\
    \ 2\n\tat Problem$.median(tmpc_5y5qrx.scala:24)\n\tat Problem$.main(tmpc_5y5qrx.scala:34)\n\
    \tat Problem.main(tmpc_5y5qrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val h1 = (l.size / 2).toInt\n\
    \        val h2 = l.size - h1\n        if (h1 < 0) h1 = 0\n        if (h2 < 0)\
    \ h2 = 0\n        if (h1 == h2) l.last + 0.5f\n        else (l.first+l.last)/2.0f\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6uu97vow.scala:12:23 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (h1 < \e[31m0\e[0m) h1 = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Reassignment to val h1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp6uu97vow.scala:13:23 -----------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (h2 < \e[31m0\e[0m) h2 = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            Reassignment to val h2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6uu97vow.scala:15:16 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33melse\e[0m (l.first+l.last)/\e[31m2.0f\e[0m\n\e[31m\e[31m   |\e\
    [0m              ^^^^^^^\e[0m\n\e[31m   |\e[0m        value first is not a member\
    \ of List[Long] - did you mean l.find?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val mid = l.length / 2\n\
    \        if (l.isEmpty) 0f\n        else (l(mid - 1) + l(mid + 1)).toFloat / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp50oc4aqa.scala:15)\n\tat Problem.main(tmp50oc4aqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val lLen = sorted.length\n        if (lLen < 2) {\n            throw new\
    \ IllegalArgumentException(\"List length must be greater than 1\")\n        }\n\
    \        // Find median\n        val halfLength = (lLen / 2).toInt\n        val\
    \ mid = (lLen - 1) / 2\n        val median = if (half > lLen - 1) {\n        \
    \    val midValue = sorted[mid]\n            val leftValue = sorted((mid + halfLength).toInt)\n\
    \            val rightValue = sorted((mid - halfLength).toInt)\n            val\
    \ medianValue = (leftValue + rightValue) / 2\n            medianValue\n      \
    \  } else {\n            sorted[mid]\n        }\n        val size = l.size\n \
    \       if (size < 2) {\n            throw new IllegalArgumentException(\"List\
    \ length must be greater than 1\")\n        }\n        val m = (size - 1) / halfLength\n\
    \        val halfElements = l.slice(m, m+halfLength)\n        val medianElements\
    \ = l.slice(m, m+halfLength)\n        val halfMedianElements = halfElements.zip(medianElements)\n\
    \        val halfMedian = halfMedianElements.map(_._1).sum / halfMedianElements.length\n\
    \        val median = halfMedianElements.map(_._2).sum / halfMedianElements.length\n\
    \        if (size == halfLength) {\n            halfMedian\n        } else {\n\
    \            median\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_vn2gyz2.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = halfMedianElements.map(_._2).sum\
    \ / halfMedianElements.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedian is already defined as \e[33mvalue\e[0m \e[35mmedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp_vn2gyz2.scala:18:25 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e[0m (half\
    \ > lLen - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: half\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vn2gyz2.scala:19:34 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmidValue\e[0m = sorted[\e\
    [35mmid\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: type mid\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vn2gyz2.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            sorted[\e[35mmid\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^\e[0m\n\e[31m   |\e[0m                   Not found: type\
    \ mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.toList\n\
    \        sortedList.sortWith((a, b) => a < b)\n        val middle = sortedList.length\
    \ / 2\n        if (sortedList.length % 2 == 0) {\n            sortedList(middle)\n\
    \        } else {\n            (sortedList(middle - 1) + sortedList(middle)) /\
    \ 2f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkxgaa91g.scala:20)\n\tat Problem.main(tmpkxgaa91g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val s = l.sorted\n      val\
    \ m = s(l.size / 2)\n      if (l.length % 2 == 1) {\n        m.toFloat\n     \
    \ } else {\n        (m - s(l.size / 2)).toFloat\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp27tj8j36.scala:20)\n\tat Problem.main(tmp27tj8j36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sortBy(_._1)\n        (sorted.length % 2) == 0 ? (sorted.last\
    \ + sorted.head + sorted.last / 2.0 / n).toFloat : sorted.last / 2.0 / n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3llz1ayr.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = l.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of Long\n\e[31m\e[31m--\
    \ Error: /tmp/tmp3llz1ayr.scala:11:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = l.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3llz1ayr.scala:12:115 -----------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        (sorted.length % \e[31m2\e[0m) == \e[31m0\e[0m ? (sorted.last\
    \ + sorted.head + sorted.last / \e[31m2.0\e[0m / n).toFloat : sorted.last \e[35m/\e\
    [0m \e[31m2.0\e[0m \e[35m/\e[0m \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                               Not found: type /\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0f\n     \
    \   else {\n            val l = l.sortBy(_.toDouble).take(l.length / 2)\n    \
    \        l.last + l.drop(1).last * 0.5\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk3dv8qyx.scala:12:20 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(_.toDouble).take(l.length\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  var m = -1l\n        var d = 0.0f\n        var x = 0\n        var i = 0\n \
    \       var j = 0\n        for (i<-n;i+=1)\n        {\n            d = ((i+1)\
    \ * ((i+1)/2)) + ((i) * i)\n            if (m == -1)\n                m = d\n\
    \            else if (m != -1 && d > m)\n                m = d\n        }\n  \
    \      if (m == -1)\n            m = -1\n        else\n            for (j<-n;j+=1)\n\
    \            {\n                if (j != i && j != n-i)\n                {\n \
    \                   d = ((j+1) * ((j+1)/2)) + ((j) * j)\n                    if\
    \ (m != -1 && d > m)\n                        m = d\n                }\n     \
    \       }\n        val z = m - 1.0l\n        var q = (z * z) / 2.0\n        var\
    \ c = 0.0f\n        for (i<-n;i+=1)\n        {\n            c = ((i+1) * c) +\
    \ ((i - 1) * z) + l(i).toFloat\n            if (c >= q)\n                q = c\n\
    \        }\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsy77l6d.scala:16:22 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i<-n;i+=\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   '<-' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsy77l6d.scala:27:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e\
    [0m (j<-n;j+=\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          '<-' expected, but ')' found\n\e\
    [31m\e[31m-- Error: /tmp/tmprsy77l6d.scala:36:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = m - 1.0l\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Invalid\
    \ literal number\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsy77l6d.scala:39:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mfor\e[0m\
    \ (i<-n;i+=\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e\
    [31m   |\e[0m                      '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprsy77l6d.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i<-n;i+=\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value foreach\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsy77l6d.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m\
    \ (j<-n;j+=\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e\
    [31m   |\e[0m                    value foreach is not a member of Int\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmprsy77l6d.scala:36:18 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = m - 1.0l\n\e[31m\e\
    [31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659978723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.reduce(l => (l.sorted with\
    \ Ordering.Long.reverse).init.length / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyfedjbq.scala:10:32 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.reduce(\e[36ml\e[0m => (l.sorted \e[33mwith\e\
    [0m Ordering.Long.reverse).init.length / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              ')' expected, but 'with' found\n1 error found\n"
  stdout: ''
  timestamp: 1659978727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var res = 0.0f\n        val\
    \ minSize = l.length\n        l.sortWith(_ < _)\n        for (i <- 0 until minSize)\
    \ {\n            if (i == 0) res = l(i) // first element\n            else if\
    \ (l(i) > res) res = l(i) // greater element\n        }\n        res.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm08ce0qh.scala:20)\n\tat Problem.main(tmpm08ce0qh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Use quicksort to find\
    \ median of sub-lists with length 2\n        val array = l.toArray\n        val\
    \ pivot = array.length / 2\n        val left = array filter (x => x < pivot)\n\
    \        val right = array filter (x => x > pivot)\n        val l = left.length\n\
    \        val r = right.length\n        if (l == 0 || r == 0) {\n            throw\
    \ new IllegalArgumentException(\"Cannot have one or less elements of list\")\n\
    \        }\n        if (l < r) {\n            val median = left[l.toInt]\n   \
    \         if (l == r) {\n                return median\n            }\n      \
    \      else {\n                return median + (median + right[r.toInt] - left[l.toInt])\
    \ / 2\n            }\n        }\n        else {\n            val median = right[r.toInt]\n\
    \            if (l == r) {\n                return median\n            }\n   \
    \         else {\n                return median + (median + left[l.toInt] - right[r.toInt])\
    \ / 2\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8wb32omc.scala:13:19 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = array filter\
    \ (\e[36mx\e[0m => x < pivot)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\
    \e[31m   |\e[0m                   Recursive \e[33mvalue\e[0m \e[35marray\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val mid = l splitAt l.length\
    \ / 2\n        val smaller = m take l.length / 2\n        val larger = m drop\
    \ l.length / 2\n        val median = (smaller + larger) / 2\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3b9ubjib.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msmaller\e[0m = m take l.length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m  \
    \ |\e[0m                      Not found: m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3b9ubjib.scala:12:21 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlarger\e[0m = m drop l.length\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e\
    [0m                     Not found: m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        def merge(dat : Array[Float],\
    \ x : Float) : Array[Float] = {\n            var i = 0\n            var j = 0\n\
    \            var n = 0\n            while (i < dat.length && j < dat.length) {\n\
    \                if (dat(i) < dat(j)) {\n                    n = new Array[Float](j\
    \ + 1, dat(j + 1))\n                    for (k <- 0 until j + 1) {\n         \
    \               n(k) = dat(k)\n                    }\n                    j++\
    \ // j is index of element to be replaced\n                }\n               \
    \ else {\n                    n = new Array[Float](i, dat(i))\n              \
    \      for (k <- 0 until i + 1) {\n                        n(k) = dat(k)\n   \
    \                 }\n                    i++ // i is index of element to be replaced\n\
    \                }\n            }\n            if (i == dat.length) {\n      \
    \          n = new Array[Float](j, dat(j))\n                for (k <- 0 until\
    \ j + 1) {\n                    n(k) = dat(k)\n                }\n           \
    \ }\n            else if (j == dat.length) {\n                n = new Array[Float](i,\
    \ dat(i))\n                for (k <- 0 until i + 1) {\n                    n(k)\
    \ = dat(k)\n                }\n            }\n            else {\n           \
    \     n = new Array[Float](dat.length)\n                for (i<- 0 until dat.length)\
    \ {\n                    n(i) = dat(i)\n                }\n            }\n   \
    \         return n\n        }\n\n        val m = l.length\n        if (m % 2 ==\
    \ 1) {\n            var x = l.head\n            var y = l.tail.head\n        \
    \    var l = new Array[Float](m)\n            var r = new Array[Float](m)\n  \
    \          var r2 = new Array[Float](m)\n            for (i <- 0 until m) {\n\
    \                if (i < m-1) {\n                    r(i) = x\n              \
    \      x = y\n                    y = r.head\n                }\n            \
    \    l(i) = (x + y)/2\n                r(i+1) = (x - y)/2\n                r2(i)\
    \ = r(i)\n                x = r(i)\n                y = r2(i+1)\n            }\n\
    \            return l.last\n        }\n        val even = l.takeRight(m/2)\n \
    \       val odd = l.drop(m/2)\n        val rt = merge(od.toArray, even.last)\n\
    \        return rt(0)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgmaie4as.scala:20:23 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    j++ \e[34m// j is index of element\
    \ to be replaced\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgmaie4as.scala:27:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    i++\
    \ \e[34m// i is index of element to be replaced\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                     ^\e[0m\n\e[31m   |\e[0m                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgmaie4as.scala:16:41 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                    n = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mFloat\e\
    [0m](j + \e[31m1\e[0m, dat(j + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                    Found:    (Int, Float)\n\e[31m   |\e[0m \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgmaie4as.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        n(k) = dat(k)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   value update is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgmaie4as.scala:23:41 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \                    n = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mFloat\e[0m](i,\
    \ dat(i))\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (Int, Float)\n\
    \e[31m   |\e[0m                                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.sortWith(_ < _).length\
    \ / 2.0\n        val median = (l min l).sortWith(_ < _).length / 2.0\n       \
    \ if (median == 0) 0.0f\n        else l.sortWith(_ < _).length match {\n     \
    \       case x if x < m => l.sortWith(_ < _).head\n            case x if x > m\
    \ => l.sortWith(_ < _).last\n            case _ => l.sortWith(_ < _).last\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy1wtu0z_.scala:11:28\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmedian\e\
    [0m = (l min l).sortWith(_ < _).length / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   Found:    (l : List[Long])\n\e[31m   |\e[0m                            Required:\
    \ Ordering[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 2\n        else (l.sum / n).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90ffo9_x.scala:16)\n\tat Problem.main(tmp90ffo9_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val (lo, hi) =  l.splitAt(l.size/2)\n\
    \      (hi - lo)/2l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwz0mpzbu.scala:11:10 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      (hi - lo)/\e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \       ^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l(0)\n        val right = l(n)\n      \
    \  val middle = (left + right) / 2\n        if (n == 1 || n == 0)\n          \
    \  return middle\n        val median1 = if (middle <= left) left else middle\n\
    \        val median2 = if (middle >= right) right else middle\n        (median1\
    \ + median2) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.median(tmpnj4kyro9.scala:13)\n\tat Problem$.main(tmpnj4kyro9.scala:22)\n\
    \tat Problem.main(tmpnj4kyro9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // use unsorted data structure\
    \ to solve the problem\n        val m = l.getOrElse(0)\n        val length = l.length\n\
    \        val even = length / 2\n        val median = (m + l.getOrElse(even)) +\
    \ (l.getOrElse(even) - 1)\n        val negative = length / 2 - 1\n        val\
    \ negativeMedian = (m - l.getOrElse(negative)) + (l.getOrElse(negative) - 1)\n\
    \        val evenMedian = (m / 2.0) + (l.getOrElse(even - 1.0))\n        val negativeEvenMedian\
    \ = (m / 2.0) - (l.getOrElse(negative - 1.0))\n        if (median == 0.0f) {\n\
    \            if (length < 2) 1.0f\n            else -1.0f\n        } else if (median\
    \ < 0.0f) {\n            if (length < 2) 1.0f\n            else -1.0f\n      \
    \  } else if (median == 1.0f) {\n            if (length < 2) 0.0f\n          \
    \  else 1.0f\n        } else if (median > 1.0f) {\n            if (length < 2)\
    \ 0.0f\n            else 1.0f\n        } else {\n            if (length < 2) median\n\
    \            else negativeMedian\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmx9wawi7.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value getOrElse is not a member of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m1 = l.take(l.length\
    \ / 2).toList\n        val m2 = l.drop(l.length / 2).toList\n        val p1 =\
    \ m1.sorted map {_ / 2}.get\n        val p2 = m2.sorted map {_ / 2}.get\n    \
    \    (p1 + p2) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8haau105.scala:12:32 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mp1\e[0m = m1.sorted map\
    \ {_ / \e[31m2\e[0m}.get\n\e[31m\e[31m   |\e[0m                              \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => _$1 / 2.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp8haau105.scala:13:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mp2\e[0m = m2.sorted map {_ / \e[31m2\e[0m}.get\n\e[31m\e[31m   |\e[0m\
    \                                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2 / 2.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8haau105.scala:14:12 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (p1 + p2) / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m         ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Nothing],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.sortBy(math.abs)\n    \
    \    val length = l.length\n        if (length == 0) 0.0f\n        else (length\
    \ + 1) / 2.0f * (l(0) + l(length - 1)).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxxkdtkz.scala:16)\n\tat Problem.main(tmpaxxkdtkz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.length == 0) throw\
    \ new IllegalArgumentException(\"l cannot be empty\")\n        val m = l.head\n\
    \        val n = l.tail.sortBy(-_.toFloat)\n        var hd = n(0)\n        var\
    \ hn = n(1)\n        var d = (m + hn) / 2\n        while (hd < hn) {\n       \
    \     d = ((hd + hn) / 2)\n            hd = n( d.toInt )\n            hn = n(\
    \ (d.toInt + 1).toInt )\n        }\n        (d).toFloat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60yhrr30.scala:25)\n\tat Problem.main(tmp60yhrr30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0)\n            return 0.0f\n        else if (n % 2 == 0)\n      \
    \      l.toArray.sorted(math.Ordering.Int.reverse).last._2 / 2\n        else\n\
    \            l.toArray.sorted(math.Ordering.Int.reverse).last._2 / 2 + l.toArray.sorted(math.Ordering.Int.reverse).last._2\
    \ / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg_tjenr.scala:14:47\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            l.toArray.sorted(math.Ordering.Int.reverse).last._2\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Ordering[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m                             Required: Ordering[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg_tjenr.scala:16:47\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            l.toArray.sorted(math.Ordering.Int.reverse).last._2\
    \ / \e[31m2\e[0m + l.toArray.sorted(math.Ordering.Int.reverse).last._2 / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Ordering[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m                             Required: Ordering[\e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var sum = 0\n        var\
    \ count = (l.length / 2.0).toInt\n        for(i <- 0 until count) {\n        \
    \    sum = sum + l(i).toFloat\n        }\n        val average = sum / count\n\
    \        val min: Float = l.min\n        val max: Float = l.max\n        (average\
    \ + (max - average) / 2).toFloat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7x48uau7.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            sum = sum + l(i).toFloat\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    Float\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.size match {\n        \
    \    case n if n % 2 != 0 =>\n                val (low, high) = l.splitAt(n /\
    \ 2)\n                low match {\n                    case head :: tail =>\n\
    \                        val median = head + median(tail)\n                  \
    \      if (median == low) low else median\n                    case Nil => 0l\n\
    \                }\n            case n if n % 2 == 0 =>\n                l.head\
    \ + median(l.tail)\n            case _ => 0f\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz4k0h_rv.scala:15:44 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                        \e[33mval\e[0m \e[36mmedian\e\
    [0m = head + median(tail)\n\e[31m\e[31m   |\e[0m                             \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz4k0h_rv.scala:16:43 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                        \e[33mif\e[0m (median == low)\
    \ low \e[33melse\e[0m median\n\e[31m\e[31m   |\e[0m                          \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \         Found:    (low : List[Long])\n\e[31m   |\e[0m                      \
    \                     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        if(sorted.isEmpty) {\n            0.0f\n        } else {\n   \
    \         (sorted.head + sorted.last / 2).asInstanceOf[Float]\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5by8nhd0.scala:19)\n\tat Problem.main(tmp5by8nhd0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val medians = l.sortBy(-_).take(l.length/2)\
    \ : Array[Float]\n        if(medians.length == 0) 0f else medians.last / l.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwejq5nn.scala:10:39\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmedians\e\
    [0m = l.sortBy(-_).take(l.length/\e[31m2\e[0m) : \e[35mArray\e[0m[\e[35mFloat\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    List[Long]\n\e[31m   |\e[0m\
    \                      Required: Array[Float]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  var mid : Long = (n.toFloat / 2).toLong\n        while(n >= 2) {\n        \
    \    mid -= 1.0;\n            if(l(mid) > l(mid + 1.0))\n                mid +=\
    \ 1\n        }\n        mid.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbizmvsfd.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            mid -= \e[31m1.0\e[0m;\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbizmvsfd.scala:14:17 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \            \e[33mif\e[0m(l(mid) > l(mid + \e[31m1.0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                 ^^^\e[0m\n\e[31m   |\e[0m                 Found:    (mid :\
    \ Long)\n\e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbizmvsfd.scala:14:26 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(l(mid) > l(mid + \e[31m1.0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          Found:    Double\n\e[31m   |\e[0m         \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty)\n        \
    \    l.head\n        else if ((l.length == 1))\n            l.head\n        else\n\
    \            (l.take(l.length/2).sum/2).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj208udx.scala:18)\n\tat Problem.main(tmptj208udx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val set = l.toSet\n     \
    \   if (set.isEmpty) 0.0\n        else set.toSeq.sortBy(_.toFloat).length / 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptbs48674.scala:15)\n\tat Problem.main(tmptbs48674.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val (mid, size) = l.span(_\
    \ <= l.length)\n      if(size % 2 != 0) {\n        if(size < 2) {\n          l.toFloat\n\
    \        } else {\n          l.splitAt(mid).toList.toList.sortBy(_._2).last._1\n\
    \        }\n      } else {\n        val median = (size.toFloat / 2).toFloat\n\
    \        l.splitAt(mid).toList.sortBy(_._2).last._1\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5v5xw0r8.scala:11:14 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mif\e[0m(size % \e[31m2\e[0m != \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m         ^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5v5xw0r8.scala:12:16\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m(size\
    \ < \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5v5xw0r8.scala:13:12\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m          l.toFloat\n\e[31m\e\
    [31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5v5xw0r8.scala:15:20 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m          l.splitAt(mid).toList.toList.sortBy(_._2).last._1\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (mid : List[Long])\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ wit"
  stdout: ''
  timestamp: 1659978738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedL: List[Long] =\
    \ l.sorted\n        val midIndex: Int = sortedL.size / 2\n        val sortedMid:\
    \ Long = sortedL(midIndex)\n        if(sortedL.size % 2 == 1) {\n            sortedMid.toFloat\n\
    \        } else {\n            val lowerMedian: Float = sortedL(midIndex-1)\n\
    \            val upperMedian: Float = sortedL(midIndex+1)\n            math.abs(upperMedian-lowerMedian).toFloat\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgq84h9r4.scala:23)\n\tat Problem.main(tmpgq84h9r4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val numElements = l.length\n\
    \        if (numElements % 2 == 0) l.sortedRight(1).head / 2 else\n          \
    \  l.sortedRight(1).last.getOrElse(l.sortedRight(1).size / 2) - 1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppa0unw50.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (numElements % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) l.sortedRight(\e[31m1\e[0m).head / \e[31m2\e[0m \e[33melse\e[0m\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         value sortedRight is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppa0unw50.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            l.sortedRight(\e[31m1\e[0m).last.getOrElse(l.sortedRight(\e\
    [31m1\e[0m).size / \e[31m2\e[0m) - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value sortedRight is not\
    \ a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1659978737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        import scala.math._\n   \
    \     val n = l.length\n        if (n % 2 == 0) \n            l.drop(n/2).reduceLeft(_\
    \ + _)/n \n        else\n            l.take(n/2).reduceRight(_ + _)/n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bwp71md.scala:18)\n\tat Problem.main(tmp5bwp71md.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.length / 2\n  \
    \      if(l.length%2 == 0) (l.sortWith(_ < _).take(m).last + l.sortWith(_ < _).drop(m).last)\
    \ / 2\n        else l.sortWith(_ < _).take(m).last / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuy8ouohv.scala:15)\n\tat Problem.main(tmpuy8ouohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        val\
    \ sorted = l.sorted\n        val half = n/2\n        if (n < 2L) sorted((0.toFloat,\
    \ sorted.head))\n        else (sorted((n-1).toFloat, sorted.take(half))._1.toFloat+sorted((n-1).toFloat,\
    \ sorted.drop(half).head))/2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys0w89j_.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (n < \e\
    [31m2L\e[0m) sorted((\e[31m0\e[0m.toFloat, sorted.head))\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (Float, Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpys0w89j_.scala:14:21 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33melse\e[0m (sorted((n-\e[31m1\e[0m).toFloat, sorted.take(half))._1.toFloat+sorted((n-\e\
    [31m1\e[0m).toFloat, sorted.drop(half).head))/\e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    (Float, List[Long])\n\e[31m   |\e[0m         \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val (first, second) = l.splitAt(l.size\
    \ / 2)\n        val average = first reduce { (x, y) => x + y } / 2\n        val\
    \ difference = second - average\n        average\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgew45oil.scala:11:38 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36maverage\e[0m = first reduce\
    \ { (\e[36mx\e[0m, \e[36my\e[0m) => x + y } / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \             Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \                   I could not infer the type of the parameter x.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpgew45oil.scala:11:41 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36maverage\e[0m = first reduce\
    \ { (\e[36mx\e[0m, \e[36my\e[0m) => x + y } / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \                      I could not infer the type of the parameter y.\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgew45oil.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = second\
    \ - average\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.sortBy(_.toFloat)\n   \
    \     l.size match {\n            case 0 => 0f\n            case n => l.head +\
    \ n.toFloat / 2\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppa477wo1.scala:17)\n\tat Problem.main(tmppa477wo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val m = l.size / 2\n      if(l\
    \ == null || l.isEmpty)\n        throw new Exception(\"list cannot be empty or\
    \ null\")\n      if(l.size % 2 == 1)\n        l.sorted.drop(m).last.toFloat\n\
    \      else\n        l.sorted.drop(m).last.toFloat + (l.sorted.take(m).head -\
    \ l.sorted.take(m-1)last).toFloat\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6jsk7duw.scala:16:87 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l.sorted.drop(m).last.toFloat + (l.sorted.take(m).head\
    \ - l.sorted.take(m-\e[31m1\e[0m)last).toFloat\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp6jsk7duw.scala:16:63 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        l.sorted.drop(m).last.toFloat + (l.sorted.take(m).head - l.sorted.take(m-\e\
    [31m1\e[0m)last).toFloat\n\e[31m\e[31m   |\e[0m                              \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (List[Long])\n2 errors found\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val numElements = l.length\n\
    \        val sortedList = l.sorted\n        val len = sortedList.length\n    \
    \    val mid = len / 2\n        (sortedList(mid) - sortedList(len - 1)) / 2.0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz8aevrn6.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (sortedList(mid) - sortedList(len\
    \ - \e[31m1\e[0m)) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val size = l.size\n     \
    \   if (size < 2) 0f\n        else {\n            val first  = l.get(0)\n    \
    \        val last   = l.get(size - 1)\n            val median = (first + last)\
    \ / 2\n            median.toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpla6v_28p.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m  = l.get(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m\
    \   |\e[0m           value get is not a member of List[Long] - did you mean l.seq?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpla6v_28p.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlast\e[0m   = l.get(size\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue get is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var temp = 0\n        var\
    \ temp2 = 0\n        var temp3 = 1\n        var temp4 = 0\n        val n = l.length\n\
    \        while (n > 1) {\n            if (l(n-1) < l(n)) {\n                temp\
    \ = l(n)\n                temp2 = l(n-1)\n                n = n - 1\n        \
    \    } else if (l(n-1) > l(n)) {\n                temp3 = l(n)\n             \
    \   temp4 = l(n-1)\n                n = n - 1\n            }\n        }\n    \
    \    return (temp + temp2 + temp3 + temp4)/4.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug61u2vk.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                temp = l(n)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug61u2vk.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                temp2 = l(n-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Long\n\e[31m   |\e[0m            \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpug61u2vk.scala:19:18 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val n\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug61u2vk.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                temp3 = l(n)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug61u2vk.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                temp4 = l(n-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Long\n\e[31m   |\e[0m            \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpug61u2vk.scala:23:18 -----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                n = n - \e[31m1\e[0m\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1659978746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var list = l.toArray\n  \
    \      if (list.size < 2) return list.head\n        var mid = list.size / 2\n\
    \        val first = list.drop(mid)\n        val second = list.take(mid)\n   \
    \     val leftMedian = median(first)\n        val rightMedian = median(second)\n\
    \        val leftMedianDouble = (leftMedian + rightMedian) / 2\n        val rightMedianDouble\
    \ = (leftMedian + rightMedian) / 2\n        val medianDouble = (leftMedianDouble\
    \ + rightMedianDouble) / 2\n        return medianDouble\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8rqzutn.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mleftMedian\e\
    [0m = median(first)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (first : Array[Long])\n\
    \e[31m   |\e[0m                                Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8rqzutn.scala:16:33 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrightMedian\e[0m = median(second)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (second : Array[Long])\n\e[31m \
    \  |\e[0m                                 Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val s = l.sortWith(_ < _)\n\
    \      s(math.ceil.length(l / 2)) / 2.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyivmca7y.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      s(math.ceil.length(l / \e[31m2\e[0m)) / \e[31m2\e\
    [0m.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value length is not a member of Double => Double\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpyivmca7y.scala:11:27 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m      s(math.ceil.length(l / \e[31m2\e[0m)) / \e[31m2\e[0m.toFloat\n\
    \e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0mvalue /\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val lSize = l.size\n    \
    \    val firstMedian = l.min\n        val secondMedian = l.min\n        val middleMedian\
    \ = (lSize - 1) * (l.min + l.max)\n        val median = (firstMedian + secondMedian)\
    \ / 2.0\n        val firstHalf = l diff (0 until lSize)\n        val secondHalf\
    \ = l diff (1 until lSize)\n        val median = (firstMedian.abs + secondMedian.abs\
    \ + middleMedian.abs) / 2.0\n        val thirdHalf = l diff (2 until lSize)\n\
    \        val median = (firstHalf(1) + secondHalf(1) + middleMedian.abs + thirdHalf(1))\
    \ / 2.0\n        val fourthHalf = l diff (3 until lSize)\n        val median =\
    \ (firstHalf(2) + secondHalf(2) + middleMedian.abs + thirdHalf(2) + fourthHalf(2))\
    \ / 3.0\n        val fifthHalf = l diff (4 until lSize)\n        val median =\
    \ (firstHalf(3) + secondHalf(3) + middleMedian.abs + thirdHalf(3) + fourthHalf(3)\
    \ + fifthHalf(3)) / 4.0\n        val sixthHalf = l diff (5 until lSize)\n    \
    \    val median = (firstHalf(4) + secondHalf(4) + middleMedian.abs + thirdHalf(4)\
    \ + fourthHalf(4) + fifthHalf(4) + sixthHalf(4)) / 5.0\n        val seventhHalf\
    \ = l diff (6 until lSize)\n        val median = (firstHalf(5) + secondHalf(5)\
    \ + middleMedian.abs + thirdHalf(5) + fourthHalf(5) + fifthHalf(5) + sixthHalf(5)\
    \ + seventhHalf(5)) / 6.0\n        val eighthHalf = l diff (7 until lSize)\n \
    \       val median = (firstHalf(6) + secondHalf(6) + middleMedian.abs + thirdHalf(6)\
    \ + fourthHalf(6) + fifthHalf(6) + sixthHalf(6) + seventhHalf(6) + eighthHalf(6))\
    \ / 7.0\n        val ninthHalf = l diff (8 until lSize)\n        val median =\
    \ (firstHalf(7) + secondHalf(7) + middleMedian.abs + thirdHalf(7) + fourthHalf(7)\
    \ + fifthHalf(7) + sixthHalf(7) + seventhHalf(7) + e\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5jp_m8qp.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jp_m8qp.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmedian\e[0m = (firstMedian.abs + secondMedian.abs + middleMedian.abs)\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedian is already defined as \e[33mvalue\e[0m \e[35mmedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jp_m8qp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (firstHalf(\e[31m1\e[0m)\
    \ + secondHalf(\e[31m1\e[0m) + middleMedian.abs + thirdHalf(\e[31m1\e[0m)) / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedian is already defined as \e[33mvalue\e[0m \e[35mmedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jp_m8qp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (firstHalf(\e[31m2\e[0m)\
    \ + secondHalf(\e[31m2\e[0m) + middleMedian.abs + thirdHalf(\e[31m2\e[0m) + fourthHalf(\e\
    [31m2\e[0m)) / \e[31m3.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmedian is already defined as \e[33mvalue\e[0m \e[35mmedian\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jp_m8qp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (firstHalf(\e[31m3\e[0m"
  stdout: ''
  timestamp: 1659978747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Get size of list\n   \
    \     val length = l.length\n        val pivot = length / 2\n        val low =\
    \ pivot - 1\n        val high = pivot + 1\n        var sum = 0\n        for (i<-\
    \ low until high)\n            sum += l(i)\n        val median = sum / length\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqzelguu.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += l(i)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n <= 0) 0.0f\n        else {\n            val half = n / 2\n          \
    \  val lo = l.take(half)\n            val hi = l.drop(half)\n            val hsum\
    \ = hi.sum\n            val losum = lo.sum\n            val m = (hsum + losum)\
    \ / 2.0f\n            if( losum > hsum ) m\n            else m\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg8rzvgec.scala:24)\n\tat Problem.main(tmpg8rzvgec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        val\
    \ r = n / 2\n        val x = l.sortWith(_ < _).take(r).toList\n        val m =\
    \ (x.last + x.head) / 2\n        x(r.toInt - 1) + x(r.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.median(tmpmcdcdcgh.scala:14)\n\tat Problem$.main(tmpmcdcdcgh.scala:17)\n\
    \tat Problem.main(tmpmcdcdcgh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Calculate number of elements\
    \ in the list l.\n        var n = 0\n        for (x <- l) n += 1.0\n        //\
    \ Calculate number of elements less than or equal to the median of list l.\n \
    \       var i = 0\n        for (x <- l)\n            if (x < l(n/2.0))\n     \
    \           i += 1\n        // Calculate number of elements greater than or equal\
    \ to the median of list l.\n        var j = 0\n        for (x <- l)\n        \
    \    if (x > l(n/2.0))\n                j += 1\n        if (i == 0)\n        \
    \    0.0\n        else if (i == j)\n            l(n/2.0)\n        else if (j >\
    \ 0)\n            l((n+1)/2.0).toFloat\n        else\n            l((n-1)/2.0).toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0pps6f_.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (x <- l) n += \e[31m1.0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m         \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf0pps6f_.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (x < l(n/\e[31m2.0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    Double\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0pps6f_.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (x\
    \ > l(n/\e[31m2.0\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    Double\n\e[31m   |\e[0m       \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf0pps6f_.scala:26:14 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            l(n/\e[31m2.0\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    Double\n\e[31m   |\e[0m          \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0pps6f_.scala:28:14\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            l((n+\e[31m1\e[0m)/\e\
    [31m2.0\e[0m).toFloat\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              Found:    Double\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0pps6f_.scala:30:14\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            l((n-\e[31m1\e[0m)/\e\
    [31m2.0\e[0m).toFloat\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^\e[0m\n\e[31m\
    \   "
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if (sorted.isEmpty) 0.0f\n        else {\n            val middle = sorted.length\
    \ / 2\n            val even = sorted.take(middle)\n            val odd = sorted.drop(middle)\n\
    \            val median = (even.toFloat + odd.toFloat) / 2\n            median\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8yxmbhwy.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (even.toFloat\
    \ + odd.toFloat) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l\n            .sortBy(x\
    \ => x)\n            .drop(l.length / 2)\n            .toList\n            .median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7dnu2mt.scala:14:13 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l\n\e[31m11 |\e[0m            .sortBy(\e[36mx\e\
    [0m => x)\n\e[31m12 |\e[0m            .drop(l.length / \e[31m2\e[0m)\n\e[31m13\
    \ |\e[0m            .toList\n\e[31m14 |\e[0m            .median\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        value median is not a member\
    \ of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if (sorted.length == 1)\n            sorted[0]\n        else if (sorted.length\
    \ == 0)\n            throw new IllegalArgumentException\n        else\n      \
    \      sorted.length match {\n                case x if x > 0 => sorted.last\n\
    \                case x if x < 0 => sorted.last * (-1).toFloat\n             \
    \   case _ => throw new IllegalArgumentException\n            }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xwl82st.scala:12:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            sorted[\e[31m0\e[0m]\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m does not take type parameters\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.toList.sorted\n\
    \        val median = sorted.head + if (sorted.size > 1) sorted.last / 2 else\
    \ sorted.last\n        median\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwwsdbd1l.scala:11:35 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = sorted.head\
    \ + \e[33mif\e[0m (sorted.size > \e[31m1\e[0m) sorted.last / \e[31m2\e[0m \e[33melse\e\
    [0m sorted.last\n\e[31m\e[31m   |\e[0m                                   ^^\e\
    [0m\n\e[31m   |\e[0m                                   expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwsdbd1l.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : String)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val counts: mutable.Map[Long,\
    \ Int] = mutable.Map.empty[Long, Int]\n        l.foreach { e => counts(e) = counts.getOrElse(e,\
    \ 0) + 1 }\n        counts.size\n            .times(1.0 / counts.size) *\n   \
    \         counts.getOrElse(l(0), 0) +\n            l.size / 2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lrxp5v9.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m: mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8lrxp5v9.scala:10:45 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m: mutable.Map[\e[35mLong\e\
    [0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mInt\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sortWith(_\
    \ > _)\n        val midPoint = (sortedList.size / 2).floor.toFloat\n        val\
    \ midPointFloat = midPoint * 1\n        if (sortedList.size == 1) midPointFloat\n\
    \        else {\n            if (midPointFloat == sortedList(0)) sortedList(0)\n\
    \            else sortedList(sortedList.size - 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgeibfiii.scala:11:45 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmidPoint\e[0m = (sortedList.size\
    \ / \e[31m2\e[0m).floor.toFloat\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value floor is not a member of Int.\n\e[31m   |\e[0m\
    \      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(sortedList.size./(\e[31m2\e\
    [0m))\n1 error found\n"
  stdout: ''
  timestamp: 1659978747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val evens = l.filter(_ %\
    \ 2 == 0)\n        val odds = l.filter(_ % 2 == 1)\n\n        if (evens.isEmpty)\
    \ 0f\n        else if (evens.size == 1)\n            evens(0)\n        else {\n\
    \            val first = (evens.head / 2).toFloat\n            val second = (evens.last\
    \ / 2).toFloat\n            if (second > first) first\n            else second\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvzrc1ms.scala:24)\n\tat Problem.main(tmpmvzrc1ms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList : scala.collection.mutable.List[Long]\
    \ = l.toList.sortWith(math.Ordering.Long.<)\n        if (sortedList.size < 2)\
    \ { sortedList.head }\n        else { \n            val halfList = l.toList.take(sortedList.size\
    \ / 2)\n            val leftMedian = median(halfList.head.toList)\n          \
    \  val rightMedian = median(halfList.tail.toList)\n            (leftMedian + rightMedian)\
    \ / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpptfze29x.scala:10:50 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m : scala.collection.mutable.List[\e\
    [35mLong\e[0m] = l.toList.sortWith(math.Ordering.Long.<)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtype\
    \ List is not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpptfze29x.scala:10:100 -----------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m : scala.collection.mutable.List[\e\
    [35mLong\e[0m] = l.toList.sortWith(math.Ordering.Long.<)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of object\
    \ scala.math.Ordering.Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpptfze29x.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mleftMedian\e[0m = median(halfList.head.toList)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         value toList is not a member of Long - did you mean\
    \ Long.toInt?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var min = 0l\n        var\
    \ max = -1l\n        val median = l.toSet.toList.sortWith((x: Long, y: Long) =>\
    \ x.toFloat < y.toFloat).last\n\n        while (max < l.toSet.toList.maxByOrdered(_.toFloat))\
    \ {\n            max = l.toSet.toList.maxByOrdered(_.toFloat)\n        }\n\n \
    \       while (min.lessThanOrEqualTo(l.toSet.toList.minByOrdered(_.toFloat)))\
    \ {\n            min = l.toSet.toList.minByOrdered(_.toFloat)\n        }\n\n \
    \       (min + max) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaz4sqxmn.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (max < l.toSet.toList.maxByOrdered(_.toFloat))\
    \ {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value maxByOrdered is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaz4sqxmn.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            max = l.toSet.toList.maxByOrdered(_.toFloat)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value maxByOrdered is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaz4sqxmn.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (min.lessThanOrEqualTo(l.toSet.toList.minByOrdered(_.toFloat)))\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               value lessThanOrEqualTo is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpaz4sqxmn.scala:18:52 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (min.lessThanOrEqualTo(l.toSet.toList.minByOrdered(_.toFloat)))\
    \ {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value minByOrdered is not a member\
    \ of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaz4sqxmn.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            min = l.toSet.toList.minByOrdered(_.toFloat)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value minByOrdered is not a member of List[Long]\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.map(_.toFloat).sortWith(_\
    \ < _).last\n        if (l.size % 2 == 0) (l.size / 2).toFloat + m else m\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2uproj75.scala:14)\n\tat Problem.main(tmp2uproj75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) {\n      \
    \      throw Left(List(\"No median in empty list\"))\n        }\n        val mid\
    \ = l.size / 2\n        val midval = l.lift(mid)\n        val leftMedian = l.lift(mid\
    \ - 1)\n        val rightMedian = l.lift(mid + 1)\n        math.max(leftMedian,\
    \ rightMedian).toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1jecp1vh.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mthrow\e[0m\
    \ Left(List(\e[31m\"No median in empty list\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    Left[List[String], Nothing]\n\e[31m   |\e[0m     \
    \             Required: Throwable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmp1jecp1vh.scala:17:13 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        math.max(leftMedian, rightMedian).toFloat\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((leftMedian\
    \ : Option[Long]), (rightMedian : Option[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659978755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val half = n / 2\n        if (n % 2 != 0) (l.head + l.last) / 2\n        else\
    \ if (n == 1) l.head\n        else {\n            val m = l.partition(_ > l.last)\n\
    \            val m1 = m._1.take(half)\n            val m2 = m._2.take(half)\n\
    \            val m = m1.zip(m2).map(_._2).reduceLeft((a, b) => a + b) / half\n\
    \            if (m == l.last) l.last\n            else m\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk3no94jg.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = m1.zip(m2).map(_._2).reduceLeft((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a + b) / half\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpk3no94jg.scala:19:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mif\e[0m (m == l.last) l.last\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types (List[Long], List[Long]) and\
    \ Long cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk3no94jg.scala:20:17 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \            \e[33melse\e[0m m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\
    \e[31m   |\e[0m                 Found:    (m : (List[Long], List[Long]))\n\e[31m\
    \   |\e[0m                 Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.toSeq.sorted\n\
    \        val listSize = sortedList.length\n        val halfSize = listSize / 2\n\
    \        val median = sortedList(halfSize)\n        val isEven = halfSize % 2\
    \ == 0\n        val medianIsNegative = median.isNegative\n        val medianIsEven\
    \ = median.isEven && medianIsNegative\n        val medianIsOdd = median.isOdd\
    \ && !medianIsEven\n        if (medianIsOdd) if (isEven) median.asInstanceOf[Float]\
    \ else median.asInstanceOf[Float] - 0.5f\n        else median.asInstanceOf[Float]\
    \ + 0.5f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmu3vlqch.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianIsNegative\e[0m =\
    \ median.isNegative\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNegative is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmu3vlqch.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianIsEven\e[0m = median.isEven && medianIsNegative\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \               value isEven is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpmu3vlqch.scala:17:33 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianIsOdd\e[0m = median.isOdd &&\
    \ !medianIsEven\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value isOdd is not a member of Long\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.foldLeft(0l) {\n      \
    \      case (m, n) => if (m >= n) m else n\n        }.floor / 2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7a7wyhb2.scala:12:10 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft(\e[31m0l\e[0m) {\n\e[31m11 |\e[0m\
    \            \e[33mcase\e[0m (m, n) => \e[33mif\e[0m (m >= n) m \e[33melse\e[0m\
    \ n\n\e[31m12 |\e[0m        }.floor / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m      value floor is not a member of Long.\n\e[31m\
    \   |\e[0m      An extension method was tried, but could not be fully constructed:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(\n\e[31m   |\e[0m     \
    \       l.foldLeft[\e[35mLong\e[0m](\e[31m0L\e[0m)(\n\e[31m   |\e[0m         \
    \     {\n\e[31m   |\e[0m                \e[33mdef\e[0m \e[36m$anonfun\e[0m(\e\
    [36mx$1\e[0m: \e[35mLong\e[0m, \e[36mx$2\e[0m: \e[35mLong\e[0m): \e[35mLong\e\
    [0m = \n\e[31m   |\e[0m                  Tuple2.apply[\e[35mLong\e[0m, \e[35mLong\e\
    [0m](x$1, x$2)\e[33m match \e[0m\n\e[31m   |\e[0m                    {\n\e[31m\
    \   |\e[0m                      \e[33mcase \e[0mTuple2.unapply[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m](m @ _, n @ _) => \n\e[31m   |\e[0m                        (\e\
    [33mif \e[0mm.>=(n)\e[33m then\e[0m m\e[33m else \e[0mn):\e[35mLong\e[0m\n\e[31m\
    \   |\e[0m                    }\n\e[31m   |\e[0m                closure($anonfun)\n\
    \e[31m   |\e[0m              }\n\e[31m   |\e[0m            )\n\e[31m   |\e[0m\
    \          )\n1 error found\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.sortWith(_.toDouble < _.toDouble)\
    \ match {\n            case Nil => l.head\n            case x :: Nil => x.toFloat\n\
    \            case x :: xs => 0.5 * (x.toFloat + median(xs))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqzfnf50.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => \e[31m0.5\e[0m * (x.toFloat + median(xs))\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    Double\n\e[31m   |\e[0m               \
    \             Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val half = Math.round(sorted[mid].toDouble\
    \ * 0.5).asInstanceOf[Float]\n        sorted[mid].toFloat - half\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvvq8v9h.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhalf\e[0m = Math.round(sorted[\e\
    [35mmid\e[0m].toDouble * \e[31m0.5\e[0m).asInstanceOf[\e[35mFloat\e[0m]\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                   Not found: type mid\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzvvq8v9h.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        sorted[\e[35mmid\e[0m].toFloat - half\n\e[31m\e\
    [31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var high = l.last\n     \
    \   var low = l.head\n        var mid = l.head\n        for ( x <- l.tail) {\n\
    \            if (x < low || x > high) throw new IllegalArgumentException(\"List\
    \ is not sorted correctly.\")\n            if (x < low) low = x\n            if\
    \ (x > high) high = x\n            mid = x\n        }\n        return (high +\
    \ low) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: List is not sorted correctly.\n\tat\
    \ Problem$.median$$anonfun$1(tmpgrjllxx_.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.median(tmpgrjllxx_.scala:18)\n\
    \tat Problem$.main(tmpgrjllxx_.scala:22)\n\tat Problem.main(tmpgrjllxx_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.getOrElse(List[Long]())\n\
    \        val n = l.size\n        if (n < 2) return(l.last)\n        val mid =\
    \ n / 2\n        val lo = l.take(mid)\n        val hi = l.drop(mid)\n        val\
    \ i = lo.indices\n        if (i.size > 1) (lo.sorted.take(i(i).last).last + lo.sorted)\n\
    \        else if(hi.size < 2) hi.last\n        else (lo.last + hi)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppx8ia9a_.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.getOrElse(List[\e\
    [35mLong\e[0m]())\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        def sort(l : List[Long],\
    \ lo : Long = 0, hi : Long = 0) : List[Long] = {\n            if (lo < hi) {\n\
    \                val i = (lo + hi) >>> 1\n                val val = l(i)\n   \
    \             var llo = lo\n                while (llo < hi) {\n             \
    \       val llo = llo + 1\n                    val hi = i\n                  \
    \  var hi = hi\n                    val val = l(i)\n                    var llo\
    \ = lo\n                    while (llo < hi) {\n                        if (llo\
    \ < hi && llo < i) \n                            llo = llo + 1\n             \
    \           if (llo > hi && llo < i) \n                            hi = hi - 1\n\
    \                        if (llo < hi && llo > i) \n                         \
    \   llo = llo + 1\n                        if (llo > hi && llo > i) \n       \
    \                     hi = hi - 1\n                        val tmp = l(i)\n  \
    \                      val tmp2 = llo\n                        val tmp3 = hi\n\
    \                        val tmp4 = lo\n                        l(i) = val\n \
    \                       llo = tmp\n                        hi = tmp2\n       \
    \                 lo = tmp3\n                        i = tmp4\n              \
    \      }\n                }\n                sort(l, lo, i)\n            } else\
    \ {\n                l\n            }\n        }\n        val n = l.length\n \
    \       if (n % 2 == 0)\n            (l.last() + l.head) / 2l\n        else\n\
    \            sort(l)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplb92h_xu.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = l(i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m           \
    \         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmplb92h_xu.scala:19:24 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                    \e[33mval\e[0m \e[33mval\e[0m = l(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m                  \
    \      pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplb92h_xu.scala:34:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                     \
    \   l(i) = \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \  ^^^\e[0m\n\e[31m   |\e[0m                               expression expected\
    \ but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplb92h_xu.scala:18:24 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                    \e[33mvar\e[0m \e[36mhi\e[0m = hi\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhi is already defined\
    \ as \e[33mvalue\e[0m \e[35mhi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplb92h_xu.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mvar\e[0m \e[36mllo\e[0m = lo\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mllo\
    \ is already defined as \e[33mvalue\e[0m \e[35mllo\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplb92h_xu.scala:16:30\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    \e\
    [33mval\e[0m \e[36mllo\e[0"
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0\n      \
    \  else {\n            val mid = (l.length + 1) >> 1\n            if (l.length\
    \ % 2 == 1) l.sorted.apply(mid)\n            else l.sorted.apply(mid + 1)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumbh_awo.scala:18)\n\tat Problem.main(tmpumbh_awo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l2 = l sorted\n     \
    \   val mid = l2.size / 2.0\n        l2.size / 2.0 + l2(mid - 1).toFloat\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpadkx19nn.scala:10:25 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = l sorted\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         expression expected but \e[31mend of statement\e[0m found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadkx19nn.scala:12:27 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l2.size / \e[31m2.0\e[0m + l2(mid - \e[31m1\e\
    [0m).toFloat\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    Double\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val counts = l.toSet.toList\n\
    \            .groupBy( x => x / 1e12 )\n            .map { case (k, v) => (k,\
    \ v.size.toDouble) }\n        val max = counts.maxBy( x => x._2 )\n        val\
    \ min = counts.minBy( x => x._2 )\n        val median = (max._2 + min._2) / 2.0\n\
    \        val sumOfCounts = counts.sum\n\n        val scaled = List.range(1, sumOfCounts)\n\
    \            .map { x => (x - 1l.toLong) / 1e12 }\n            .zipWithIndex.map\
    \ { case (x, i) => (i.toLong, x)}\n            .filter { case (i, _) => counts(i)\
    \ >= median }\n            .map( x => (x._1, x._2))\n            .sortBy( x =>\
    \ x._1 )\n            .reverse\n            .head._1\n\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsxyysut5.scala:16:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msumOfCounts\e[0m = counts.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m      No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \      where:    B is a type variable with constraint >: (Double, Double)\n\e\
    [31m   |\e[0m      .\n1 error found\n"
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n       var sorted = l.sorted\n  \
    \     val mid = sorted.length/2\n       sorted.init\n       if (sorted.length%2==0)\
    \ {\n          val even = sorted.drop(mid)\n          val odd = sorted.take(mid)\n\
    \          (even.sum.toFloat/odd.sum.toFloat).ceil.toFloat\n       }\n       else\
    \ {\n          val even = sorted.take(mid)\n          val odd = sorted.drop(mid)\n\
    \          (odd.sum.toFloat/even.sum.toFloat).ceil.toFloat\n       }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fk707kb.scala:25)\n\tat Problem.main(tmp7fk707kb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Find middle element.\n\
    \        val mid = l.size / 2\n        val a = l splitAt mid\n        // Find\
    \ median of elements around middle element.\n        val med1 = a.take(mid)\n\
    \        val med2 = a.drop(mid)\n        // Find median of elements around middle\
    \ element.\n        val med3 = a.takeRight(mid)\n        val med = (med1 + med2\
    \ + med3) / 3\n        val min = (min(med.toDouble, l.head.toDouble), med.toDouble)\n\
    \        val max = (max(med.toDouble, l.head.toDouble), med.toDouble)\n      \
    \  val median = if(min < max) min else max\n        median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmzuwqav9.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmed3\e[0m = a.takeRight(mid)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \         value takeRight is not a member of (List[Long], List[Long])\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmzuwqav9.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmed\e[0m = (med1 + med2\
    \ + med3) / \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of Tuple.Take[(List[Long], List[Long]),\
    \ (mid : Int)], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpmzuwqav9.scala:19:19 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = (min(med.toDouble,\
    \ l.head.toDouble), med.toDouble)\n\e[31m\e[31m   |\e[0m                   ^\e\
    [0m\n\e[31m   |\e[0m                   Recursive \e[33mvalue\e[0m \e[35mmin\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmzuwqav9.scala:20:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax\e[0m = (max(med.toDouble, l.head.toDouble), med.toDouble)\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Recursive\
    \ \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmzuwqav9.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m(min < max) min \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1659978762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList : List[Long]\
    \ = l.sortWith(_ < _)\n        val length = sortedList.length\n\n        val midPoint\
    \ = (length - 1) / 2.0\n        val left = sortedList.slice(0, midPoint)\n   \
    \     val right = sortedList.slice(midPoint, length)\n\n        if (sortedList.length\
    \ % 2 == 0) {\n            (left + right) / 2\n        } else {\n            ((left.last\
    \ + right.last) / 2.0).toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiokhghu8.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mleft\e\
    [0m = sortedList.slice(\e[31m0\e[0m, midPoint)\n\e[31m\e[31m   |\e[0m        \
    \                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                        Found:    (midPoint : Double)\n\e[31m   |\e[0m      \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpiokhghu8.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = sortedList.slice(midPoint,\
    \ length)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (midPoint :\
    \ Double)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiokhghu8.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            (left + right)\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sortWith(_\
    \ < _)\n        val median = if (sortedList.length % 2 == 0) sortedList(sortedList.length\
    \ / 2 - 1) else (sortedList(sortedList.length / 2) - sortedList.length / 2)\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_yafmx7.scala:15)\n\tat Problem.main(tmpj_yafmx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var nums : List[Long] = l.toList\n\
    \        val sorted = nums.sortWith(_ < _)\n        if(nums.isEmpty) 0.0f\n  \
    \      else if(nums.size == 1 || nums.size == 2 ) nums.head.toFloat\n        else\
    \ {\n            val mid = nums.size / 2\n            val median = nums(mid)\n\
    \            val left = nums.take(mid)\n            val right = nums.drop(mid)\n\
    \            val result = left + median + right\n            if( result.toInt\
    \ <= 0) 0.0f else result.toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0cq01i__.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = left +\
    \ median + right\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.length == 1) l.head\
    \ else (l.length/2).toFloat + l.last.toFloat/2 + l.init.toFloat/2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyh2owj58.scala:10:88 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (l.length == \e[31m1\e[0m) l.head\
    \ \e[33melse\e[0m (l.length/\e[31m2\e[0m).toFloat + l.last.toFloat/\e[31m2\e[0m\
    \ + l.init.toFloat/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                                                          ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toFloat is not a member of List[Long @uncheckedVariance],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        def half(n: Int) : Float\
    \ = n / 2.0\n        def medianOf3(n: Int) : Float = {\n            var x = 0f\n\
    \            var y = 0f\n            var i = 0\n            var j = 0\n      \
    \      var mid = half(n)\n            while (i < n && j < n) {\n             \
    \   if (i < n && j < n) {\n                    if (l(i) < l(j)) {\n          \
    \              x = l(i); y = l(j)\n                    }\n                   \
    \ else {\n                        x = l(j); y = l(i)\n                    }\n\
    \                }\n                else {\n                    if (l(i) < mid)\
    \ {\n                        x = l(i); y = mid\n                    }\n      \
    \              else {\n                        x = mid; y = l(j)\n           \
    \         }\n                }\n                i += 1\n                j += 1\n\
    \            }\n            if (i < n) {\n                x = l(i); y = l(j)\n\
    \            }\n            else {\n                x = mid; y = mid\n       \
    \     }\n            return x\n        }\n        def medianOf3(n: Int, l: List[Long])\
    \ : Float = {\n            var x = 0f\n            var y = 0f\n            var\
    \ i = 0\n            var j = 0\n            var mid = half(n)\n            var\
    \ mid2 = half(l)\n            while (i < n && j < l) {\n                if (i\
    \ < n && j < l) {\n                    if (l(i) < l(j)) {\n                  \
    \      x = l(i); y = l(j)\n                    }\n                    else {\n\
    \                        x = l(j); y = l(i)\n                    }\n         \
    \       }\n                else {\n                    if (l(i) < mid) {\n   \
    \                     x = l(i); y = mid\n                    }\n             \
    \       else {\n                        x = mid; y = l(j)\n                  \
    \  }\n                }\n                i += 1\n                j += 1\n    \
    \        }\n            if (i < n) {\n                x = l(i); y = l(j)\n   \
    \         }\n            else {\n                x = mid; y = mid\n          \
    \  }\n            return x\n        }\n        def medianOf3(n: Int, l: List[Long],\
    \ p: Int) : Float = {\n            var x = 0f\n            var y = 0f\n      \
    \      var i = 0\n            var j = 0\n            var mid = half(n)\n     \
    \       var mid2 = half(l)\n            var pmid = half(p)\n            while\
    \ (i < n && j < l && p > 0) {\n                if (i < n && j < l && p > 0) {\n\
    \                    if (l(i) < l(j) && p > 0) {\n                        x =\
    \ l(i); y = l(j)\n                    }\n                    else {\n        \
    \                x = l(j); y = l(i)\n                    }\n                }\n\
    \                else {\n                    if (l(i) < mid) {\n             \
    \           x = l(i); y = mid\n                    }\n                    else\
    \ {\n                        x = mid; y = l(j)\n                    }\n      \
    \          }\n                i += 1\n                j += 1\n               \
    \ p -= 1\n            }\n            if (i < n) {\n                x = l(i); y\
    \ = l(j)\n            }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hhtbrza.scala:122:0 ---------------------------\e\
    [0m\e[0m\n\e[31m122 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hhtbrza.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mdef\e[0m\
    \ \e[36mmedianOf3\e[0m(\e[36mn\e[0m: \e[35mInt\e[0m, \e[36ml\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m]) : \e[35mFloat\e[0m = {\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0mmedianOf3 is already defined as \e[33mmethod\e[0m \e[35mmedianOf3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m46 |\e[0m         \
    \   \e[33mvar\e[0m \e[36mx\e[0m = \e[31m0f\e[0m\n\e[31m47 |\e[0m            \e\
    [33mvar\e[0m \e[36my\e[0m = \e[31m0f\e[0m\n\e[31m48 |\e[0m            \e[33mvar\e\
    [0m \e[36mi\e[0m = \e[31m0\e[0m\n\e[31m49 |\e[0m            \e[33mvar\e[0m \e\
    [36mj\e[0m = \e[31m0\e[0m\n\e[31m50 |\e[0m            \e[33mvar\e[0m \e[36mmid\e\
    [0m = half(n)\n\e[31m51 |\e[0m            \e[33mvar\e[0m \e[36mmid2\e[0m = half(l)\n\
    \e[31m52 |\e[0m            \e[33mwhile\e[0m (i < n && j < l) {\n\e[31m53 |\e[0m\
    \                \e[33mif\e[0m (i < n && j < l) {\n\e[31m54 |\e[0m           \
    \         \e[33mif\e[0m (l(i) < l(j)) {\n\e[31m55 |\e[0m                     \
    \   x = l(i); y = l(j)\n\e[31m56 |\e[0m                    }\n\e[31m57 |\e[0m\
    \                    \e[33melse\e[0m {\n\e[31m58 |\e[0m                      \
    \  x = l(j); y = l(i)\n\e[31m59 |\e[0m                    }\n\e[31m60 |\e[0m \
    \               }\n\e[31m61 |\e[0m                \e[33melse\e[0m {\n\e[31m62\
    \ |\e[0m                    \e[33mif\e[0m (l(i) < mid) {\n\e[31m63 |\e[0m    \
    \                    x = l(i); y = mid\n\e[31m64 |\e[0m                    }\n\
    \e[31m65 |\e[0m                    \e[33melse\e[0m {\n\e[31m66 |\e[0m        \
    \                x = mid; y = l(j)\n\e[31m67 |\e[0m                    }\n\e[31m68\
    \ |\e[0m                }\n\e[31m69 |\e[0m                i += \e[31m1\e[0m\n\e\
    [31m70 |\e[0m                j += \e[31m1\e[0m\n\e[31m71 |\e[0m            }\n\
    \e[31m72 |\e[0m            \e[33mif\e[0m (i < n) {\n\e[31m73 |\e[0m          \
    \      x = l(i); y = l(j)\n\e[31"
  stdout: ''
  timestamp: 1659978762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val l = l.reverse\n        val h = (l.head.toDouble + l.last.toDouble) / 2\n\
    \        val lo = l.slice(0,l.length-(n-1))\n        val hi = l.slice(0,n)\n \
    \       val m = (lo.head + lo.last) / 2.0\n        if (hi min h) m else h\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprntrw_p7.scala:11:16 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.reverse\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val list = l.toList.sortWith(_\
    \ < _)\n        (list.last+list.head)/2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp57v38sth.scala:15)\n\tat Problem.main(tmp57v38sth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val hd = l.head\n       \
    \ val rt = l.tail\n        val n = rt.length\n        if (rt.isEmpty) hd\n   \
    \     else {\n            val m = (hd + rt.min) / 2\n            val rthd = rt.filter(_\
    \ > m).length\n            if (rthd == n) m\n            else if (rthd == 0) hd\n\
    \            else if (rthd == n-1) rt.filter(_ > m).max\n            else m\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5un79h94.scala:24)\n\tat Problem.main(tmp5un79h94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val length = l.size\n   \
    \     // Return null if the list has zero length\n        if (length == 0)\n \
    \           return null\n        // Find the middle index\n        val mid = length\
    \ >>> 1\n        // Compute the median\n        val half = length / 2\n      \
    \  if (half == 0) return l.get(0)\n        val halfMedian = (l(mid - half) + l(mid\
    \ + half)) / 2.0\n        return halfMedian\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphw5xeh4m.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mreturn\e[0m\
    \ \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Found:    Null\n\e[31m   |\e[0m                  \
    \ Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphw5xeh4m.scala:18:32\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (half\
    \ == \e[31m0\e[0m) \e[33mreturn\e[0m l.get(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m           value get\
    \ is not a member of List[Long] - did you mean l.seq?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphw5xeh4m.scala:20:15 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mreturn\e[0m halfMedian\n\e[31m\e[31m   |\e[0m   \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (halfMedian\
    \ : Double)\n\e[31m   |\e[0m               Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.toList\n \
    \       sorted.sortWith(_ < _)\n        val mid = (sorted.length / 2).round\n\
    \        val median = (sorted(mid) + sorted(mid - 1)).toFloat\n        median\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3obtkxr.scala:18)\n\tat Problem.main(tmpe3obtkxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.groupBy(x => x.toFloat).values.toSeq.map(_.sortBy(x\
    \ => x)).map(_.reverse).flatten match {\n            case x if x.size == 1 =>\
    \ x.head\n            case x if x.size % 2 == 0 => x.size / 2\n            case\
    \ x if x.size % 2 == 1 => (x.size / 2).toFloat * 1.0\n            case _ => x.size\
    \ / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56z_xaop.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x.size % \e[31m2\e[0m == \e[31m1\e[0m => (x.size / \e[31m2\e[0m).toFloat\
    \ * \e[31m1.0\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                  Found:    Double\n\e[31m   |\e[0m                         \
    \                Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp56z_xaop.scala:14:22 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m            \e[33mcase\e[0m _ => x.size / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val k = n/2\n        if (k < 1)\n            return l.head\n        val m =\
    \ math.ceil(n/2)\n        return l.lift(m).sum / m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0o2tx2db.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mreturn\e[0m l.lift(m).sum\
    \ / m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (m : Double)\n\e[31m   |\e[0m                   \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n\
    \        if (sortedList.length % 2 == 0) sortedList.get(sortedList.length / 2)\n\
    \        else sortedList.get(sortedList.length / 2 - 1) + sortedList.get(sortedList.length\
    \ / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_f1hh7_.scala:11:51 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (sortedList.length % \e[31m2\e\
    [0m == \e[31m0\e[0m) sortedList.get(sortedList.length / \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value get is not a member of List[Long] - did you mean sortedList.seq?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_f1hh7_.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m sortedList.get(sortedList.length\
    \ / \e[31m2\e[0m - \e[31m1\e[0m) + sortedList.get(sortedList.length / \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ get is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val count = l.length\n  \
    \      if (count % 2 == 0) (l.head + l.last) / 2\n        else (l.last + l.head\
    \ - count / 2) / 2.0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gk51ed8.scala:12:13\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m (l.last\
    \ + l.head - count / \e[31m2\e[0m) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    Found:    Double\n\e[31m   |\e[0m             Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n\
    \        val midIndex = sortedList.length / 2\n        val lower = if (sortedList.length\
    \ % 2 == 0) sortedList((midIndex - 1) + midIndex) / 2.0\n        else sortedList((midIndex\
    \ - 1) + midIndex)\n        val upper = if (sortedList.length % 2 == 0) sortedList(midIndex\
    \ + midIndex + 1) / 2.0\n        else sortedList(midIndex + midIndex)\n      \
    \  val middle = (lower + upper) / 2.0\n        val median = (lower + middle +\
    \ upper) / 3.0\n        median.asInstanceOf[Float]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxlob1ngj.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmiddle\e[0m = (lower + upper)\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of AnyVal, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxlob1ngj.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmedian\e[0m = (lower + middle + upper) / \e[31m3.0\e[0m\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of AnyVal, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        if\
    \ (n <= 0) 0f\n        else if (n >= 1) l(0)\n        else (n - 1) + (0.5f * median(l.drop(1)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6f3gfer.scala:17)\n\tat Problem.main(tmpb6f3gfer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.toArray\n     \
    \   val len = m.length\n        if (len < 2) 0.0f\n        else {\n          \
    \  val mid = len/2\n            (mid % 2 == 0) ? (mid + (mid / 2)) :\n       \
    \            (mid - (mid / 2))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ukl2b1j.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                   (mid - (mid / \e[31m2\e[0m))\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Not found: type -\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_ukl2b1j.scala:15:27 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            (mid % \e[31m2\e[0m == \e[31m0\e[0m) ? (mid + (mid / \e[31m2\e\
    [0m)) :\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.length == 0) 0.0f\n\
    \        val mid = l.length / 2.0\n        var a = l(0), b = l(0)\n        for(x\
    \ <- l.init) {\n            if((x < b) || (x == b)) {\n                a += x\n\
    \            } else {\n                b += x\n            }\n        }\n    \
    \    (b - a) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_3xitxcs.scala:12:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = l(\e[31m0\e[0m),\
    \ b = l(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m\
    \   |\e[0m                    end of statement expected but ',' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_3xitxcs.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m((x < b) || (x == b)) {\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3xitxcs.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                b += x\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3xitxcs.scala:20:9\
    \ -------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        (b - a) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Not found:\
    \ b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp_3xitxcs.scala:10:27\
    \ ----------------\e[0m\e[0m\n\e[33m10 |\e[0m        \e[33mif\e[0m (l.length ==\
    \ \e[31m0\e[0m) \e[31m0.0f\e[0m\n\e[33m\e[33m   |\e[0m                       \
    \    ^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if(l.isEmpty) throw new IndexOutOfBoundsException(\"\
    Empty list\")\n        val n = l.length\n        val mid = math.ceil(n/2)\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = if (n.isEven) left.length else right.length\n        val m = (l + right) match\
    \ {\n            case Nil => (0l).toFloat\n            case x :: xs => if (x.toFloat.isFinite)\
    \ x.toFloat else x.toDouble\n        }\n        math.min(m, median.toFloat)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbtqfw89.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mleft\e\
    [0m = l.take(mid)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e\
    [31m   |\e[0m                          Found:    (mid : Double)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsbtqfw89.scala:14:27 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = l.drop(mid)\n\e\
    [31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (mid : Double)\n\e[31m   |\e[0m              \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsbtqfw89.scala:15:27 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e[0m (n.isEven) left.length\
    \ \e[33melse\e[0m right.length\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value isEven is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbtqfw89.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = (l + right) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \      ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsbtqfw89.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (x.toFloat.isFinite) x.toFloat \e[33melse\e[0m x.toDouble\n\e[3"
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Initialize list to store\
    \ list of medians.\n        var lMedians = List.empty[Long]\n        // Sort list\
    \ l on descending order.\n        l.sortBy(-_)\n        // Get the length of list\
    \ l.\n        var lLength = l.length\n        // If list l length is odd, return\
    \ mid element.\n        if(lLength % 2 == 0) {\n            return l(lLength/2)\n\
    \        }\n        // If list l length is even, divide list l into 2 halves.\n\
    \        else {\n            var lHalf1 = l.take(lLength/2) // Keep first half.\n\
    \            var lHalf2 = l.drop(lLength/2) // Keep second half.\n           \
    \ // Find median of first half.\n            var lMedian1 = median(lHalf1)\n \
    \           // Find median of second half.\n            var lMedian2 = median(lHalf2)\n\
    \            // Concatenate two lists.\n            lMedians = lHalf1 ::: lHalf2\n\
    \            // Find median of concatenated lists.\n            return (lMedian1\
    \ + lMedian2)/2\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.median(tmpubpwltct.scala:18)\n\tat Problem$.median(tmpubpwltct.scala:25)\n\
    \tat Problem$.median(tmpubpwltct.scala:25)\n\tat Problem$.median(tmpubpwltct.scala:27)\n\
    \tat Problem$.main(tmpubpwltct.scala:35)\n\tat Problem.main(tmpubpwltct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val medianIndex : Float =\
    \ l.length match {\n            case 1 => l.head\n            case 2 => l.length/2\n\
    \            case _ => {\n                val mid = l.length/2\n             \
    \   var count = (l.tail -mid).length\n                while (count > 0) {\n  \
    \                  count -= 1\n                    val half = l.length/2\n   \
    \                 val index = (half - count).floor + half\n                  \
    \  if (index < l.length) {\n                        if (l(mid - index) == l(mid\
    \ + index)) {\n                            mid = index\n                     \
    \   }\n                    }\n                }\n                mid\n       \
    \     }\n        }\n        return l.slice(0,medianIndex).sum/l.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtwf3_v9.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mvar\e[0m \e[36mcount\e[0m = (l.tail\
    \ -mid).length\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of List[Long @uncheckedVariance], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpbtwf3_v9.scala:22:32 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                            mid = index\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                      Reassignment to val mid\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbtwf3_v9.scala:29:25 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m l.slice(\e[31m0\e[0m,medianIndex).sum/l.length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Found:    (medianIndex : Float)\n\e[31m   |\e[0m   \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _) // ascending order\n        var halfWay = sorted.size / 2\n        var\
    \ high = sorted.last\n        var low = sorted.drop(halfWay).last\n        if(sorted.size\
    \ == 0 || sorted.last == 0)\n            throw new RuntimeException(\"List is\
    \ empty\")\n        while(high - low > 1) {\n            if(sorted((high + low)\
    \ / 2) < sorted.last)\n                halfWay -= 1\n            else\n      \
    \          halfWay += 1\n        }\n        val middle = sorted.last\n       \
    \ return middle\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog490l4c.scala:17:22\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(sorted((high\
    \ + low) / \e[31m2\e[0m) < sorted.last)\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if(n > 1) l.sorted.take(n.toDouble / 2).last\n        else {\n            val\
    \ m = (l.head + l.last) / 2\n            (l.head + l.last)/2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44j32n_w.scala:11:32\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(n > \e\
    [31m1\e[0m) l.sorted.take(n.toDouble / \e[31m2\e[0m).last\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Found:    Double\n\e[31m   |\e[0m                 \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0.0f\n   \
    \     else {\n            val n = l.length\n            val mid = (n - 1) / 2\n\
    \            if (n % 2 == 0) l.get(mid) else l.get(mid + 1)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphg734zdv.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) l.get(mid) \e[33melse\e[0m l.get(mid + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m           value get\
    \ is not a member of List[Long] - did you mean l.seq?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphg734zdv.scala:14:46 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) l.get(mid)\
    \ \e[33melse\e[0m l.get(mid + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.size <= 1) 0.0f else\
    \ (l.sortWith(_ > _).last.asInstanceOf[Float] - l.sortWith(_ > _).head.asInstanceOf[Float])\
    \ / l.size\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5dp4e0zv.scala:13)\n\tat Problem.main(tmp5dp4e0zv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 1) -1f\n        else {\n            val l = l.sortWith(_ < _)\n   \
    \         (l(n/2)+1l(n/2-1)+l(n/2))/2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2dsdkhvy.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m     \
    \               Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if(n == 0) 0.0f\n        else {\n            val m = l.size / 2\n         \
    \   val a = (l(n-1) + l(n)) / 2.0\n            val b = (l(n) + l(n+1)) / 2.0\n\
    \            Math.min(a, b).toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.median(tmpjjjmihqb.scala:14)\n\tat Problem$.main(tmpjjjmihqb.scala:20)\n\
    \tat Problem.main(tmpjjjmihqb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m1 = l.min\n        val\
    \ m2 = l.max\n        (m1 + m2) / 2.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeuu1zhcf.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        (m1 + m2) / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    Double\n\e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val listLen = l.length\n\
    \        val listMedian = l.sortWith(_.isLessThan(_)) match {\n            case\
    \ Nil => null\n            case head :: tail => head\n        }\n        val listSize\
    \ = {\n            val len = (listLen / 2).toInt\n            val len2 = len -\
    \ listLen % 2\n            len + len2\n        }\n        listSize match {\n \
    \           case 0 => null\n            case _ => (listMedian + listSize / 2.0).toFloat\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppgualn8b.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlistMedian\e[0m = l.sortWith(_.isLessThan(_))\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLessThan\
    \ is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppgualn8b.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e\
    [31m0\e[0m => \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Null\n\e[31m   |\e[0m    \
    \                  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppgualn8b.scala:22:34 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mcase\e[0m _ => (listMedian + listSize / \e[31m2.0\e[0m).toFloat\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Matchable, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if(l.length%2==0) l(0l) +\
    \ ((l.length)/2.0l*median(l[1 until l.length/2])).asInstanceOf[Float] + ((l.length)/2.0l*median(l[l.length/2\
    \ until l.length])).asInstanceOf[Float]\n        else (l(0l) + ((l.length)/2.0l*median(l[1\
    \ until l.length/2])).asInstanceOf[Float] + ((l.length)/2.0l*median(l[l.length/2\
    \ until l.length])))\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_ly8h2_5.scala:10:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m(l.length%\e[31m2\e[0m==\e[31m0\e\
    [0m) l(\e[31m0l\e[0m) + ((l.length)/2.0l*median(l[\e[31m1\e[0m until l.length/\e\
    [31m2\e[0m])).asInstanceOf[\e[35mFloat\e[0m] + ((l.length)/2.0l*median(l[l.length/\e\
    [31m2\e[0m until l.length])).asInstanceOf[\e[35mFloat\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                              ^\e[0m\n\e[31m   |\e[0m     \
    \                                         Invalid literal number\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_ly8h2_5.scala:10:116 ----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m(l.length%\e[31m2\e[0m==\e[31m0\e\
    [0m) l(\e[31m0l\e[0m) + ((l.length)/2.0l*median(l[\e[31m1\e[0m until l.length/\e\
    [31m2\e[0m])).asInstanceOf[\e[35mFloat\e[0m] + ((l.length)/2.0l*median(l[l.length/\e\
    [31m2\e[0m until l.length])).asInstanceOf[\e[35mFloat\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                       Invalid literal number\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_ly8h2_5.scala:11:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m (l(\e[31m0l\e[0m) + ((l.length)/2.0l*median(l[\e\
    [31m1\e[0m until l.length/\e[31m2\e[0m])).asInstanceOf[Float] + ((l.length)/2.0l*median(l[l.length/\e\
    [31m2\e[0m until l.length])))\n\e[31m\e[31m   |\e[0m                         \
    \         ^\e[0m\n\e[31m   |\e[0m                                  Invalid literal\
    \ number\n\e[31m\e[31m-- Error: /tmp/tmp_ly8h2_5.scala:11:104 ----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m (l(\e[31m0l\e[0m) + ((l.length)/2.0l*median(l[\e\
    [31m1\e[0m until l.length/\e[31m2\e[0m])).asInstanceOf[Float] + ((l.length)/2.0l*median(l[l.length/\e\
    [31m2\e[0m until l.length])))\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                               "
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty)\n        \
    \    0.0f\n        else {\n            val m = l.sortWith(_ < _)\n           \
    \ val n = m.length\n            if(n == 0)\n                0.0f\n           \
    \ else\n                (n/2.0).floor + m.last\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5473jau_.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                (n/\e[31m2.0\e\
    [0m).floor + m.last\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Double\n\e[31m   |\e[0m        \
    \        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if(n % 2 == 0)\n            l.sortWith(_ > _).last\n        else\n        \
    \    l.sortWith(_ < _).last\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqnpinw64.scala:17)\n\tat Problem.main(tmpqnpinw64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        import scala.collection.JavaConversions._\n\
    \        val l = l.toIterator\n        val mid = l span 2 map {_ / 2}.max\n  \
    \      val high = l.last\n        val low = l dropRight 1\n        val mid diff\
    \ high - low\n        if (mid > high)\n            low\n        else high\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvpw9jht3.scala:16:0 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (mid > high)\n\e[31m\e[31m   |\e\
    [0m^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvpw9jht3.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m mid diff high - low\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mmid is already defined as \e\
    [33mvalue\e[0m \e[35mmid\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvpw9jht3.scala:15:21 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m mid diff high - low\n\e[31m\e\
    [31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mhigh is already defined\
    \ as \e[33mvalue\e[0m \e[35mhigh\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvpw9jht3.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m mid diff high - low\n\e[31m\e\
    [31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e[0mlow is already\
    \ defined as \e[33mvalue\e[0m \e[35mlow\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpw9jht3.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mimport\e[0m scala.collection.JavaConversions._\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               value JavaConversions is not a member of collection\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvpw9jht3.scala:11:16 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toIterator\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compilin"
  stdout: ''
  timestamp: 1659978778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val median = l.sorted.slice(0, math.ceil((n+1)/2)).last\n        val high =\
    \ l.sorted.takeWhile(_ < median)\n        val low = l.sorted.takeWhile(_ > median)\n\
    \        median.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvma66p48.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmedian\e\
    [0m = l.sorted.slice(\e[31m0\e[0m, math.ceil((n+\e[31m1\e[0m)/\e[31m2\e[0m)).last\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Double\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val a = l.sorted\n      \
    \  var m = a.head\n        var n = a.tail.head\n\n        while( n <= m.toLong){\n\
    \            if( n % 2 == 0) {\n                n = n+1\n            } else {\n\
    \                m = m+1\n                n = n+1\n            }\n        }\n\
    \        m + (n-m)/2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt0q1720b.scala:25)\n\tat Problem.main(tmpt0q1720b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if(l.length <= 0) throw Error\n\
    \        if(l.length == 1) l.head.toFloat\n        else if(l.length == 2) (l.head.toFloat\
    \ + l.last.toFloat)/2\n        else {\n            val l1 = l.tail\n         \
    \   val l2 = l.tail\n            val m = (l1.head.toFloat + l2.head.toFloat)/2\n\
    \            val l = List.empty[Long]\n            while (l1.nonEmpty || l2.nonEmpty)\
    \ l ::: (l1.head + l2.head)/2\n            m\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E119] Type Error: /tmp/tmp8bxadi22.scala:10:32 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m(l.length <= \e[31m0\e[0m) \e[33mthrow\e\
    [0m Error\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Java defined \e[33mclass\e[0m \e\
    [35mError\e[0m is not a value\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bxadi22.scala:18:49\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mwhile\e\
    [0m (l1.nonEmpty || l2.nonEmpty) l ::: (l1.head + l2.head)/\e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value ::: is not a\
    \ member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.sorted\n      \
    \  val length = l.length\n        if (length <= 1) (l.head.toFloat+l.last.toFloat)/2.0\n\
    \        else (l.head.toFloat+l.last.toFloat)/2.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfxuhu9_c.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sorted\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var min1 = Int.MaxValue\n\
    \        var min2 = Int.MaxValue\n        var max1 = -Int.MaxValue\n        var\
    \ max2 = -Int.MaxValue\n        for (x <- l)\n            if (x < min1) min1 =\
    \ x\n            if (x < min2) min2 = x\n            if (x > max1) max1 = x\n\
    \            if (x > max2) max2 = x\n        var mid1 = (min1 + max1) / 2\n  \
    \      var mid2 = (min2 + max2) / 2\n        var m1 = (mid1 + mid2) / 2\n    \
    \    var m2 = (mid1 - mid2) / 2\n        var m = math.ceil(m1 + (m2 - m1) / 2.0).toInt\n\
    \        var n = l.size - m\n        if (n < 0) m = 0\n        if (n < 0) n =\
    \ 0\n        if (m > l.size - 1) m = l.size - 1\n        if (m > l.size - 1) m\
    \ = l.size - 1\n        return (l.apply(m).asInstanceOf[Float])\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej0uixth.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (x\
    \ < min1) min1 = x\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (x : Long)\n\e\
    [31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej0uixth.scala:16:33 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (x < min2) min2 = x\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (x : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpej0uixth.scala:17:33 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m (x > max1) max1 = x\n\e[31m\e[31m   |\e[0m \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \            Found:    (x : Long)\n\e[31m   |\e[0m                           \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej0uixth.scala:18:33\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (x\
    \ > max2) max2 = x\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    (x : Long)\n\e\
    [31m   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        if\
    \ (n % 2 == 1) l.sorted.init.toFloat/2 else {\n            val mid = (n+1)/2 -\
    \ 1\n            val lower = l.take(mid)\n            val upper = l.drop(mid)\n\
    \            (median(lower) + (median(upper))/2)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn2rn91yl.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m1\e\
    [0m) l.sorted.init.toFloat/\e[31m2\e[0m \e[33melse\e[0m {\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat\
    \ is not a member of List[Long @uncheckedVariance], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val min = l.min\n       \
    \ val max = l.max\n        (min + max) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyz4l6ndc.scala:16)\n\tat Problem.main(tmpyz4l6ndc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.sorted\n            .grouped(2)\n\
    \            .map(_.sorted)\n            .fold(l.head)({ case (list1, list2) =>\
    \ list1.length % 2 == 0 ? list1(list1.length / 2).toFloat : (list1(list1.length\
    \ / 2).toFloat + list2(list2.length / 2).toFloat) / 2 })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp194s8jgo.scala:13:115 --------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            .fold(l.head)({ \e[33mcase\e[0m (list1, list2)\
    \ => list1.length % \e[31m2\e[0m == \e[31m0\e[0m ? list1(list1.length / \e[31m2\e\
    [0m).toFloat : (list1(list1.length / \e[31m2\e[0m).toFloat + list2(list2.length\
    \ / \e[31m2\e[0m).toFloat) / \e[31m2\e[0m })\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                     ')' expected, but '(' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp194s8jgo.scala:13:177 -----------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            .fold(l.head)({ \e[33mcase\e[0m (list1, list2) => list1.length\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? list1(list1.length / \e[31m2\e[0m).toFloat\
    \ : (list1(list1.length / \e[31m2\e[0m).toFloat + list2(list2.length / \e[31m2\e\
    [0m).toFloat) / \e[31m2\e[0m })\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                                   \
    \    Not found: type /\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp194s8jgo.scala:13:57\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            .fold(l.head)({\
    \ \e[33mcase\e[0m (list1, list2) => list1.length % \e[31m2\e[0m == \e[31m0\e[0m\
    \ ? list1(list1.length / \e[31m2\e[0m).toFloat : (list1(list1.length / \e[31m2\e\
    [0m).toFloat + list2(list2.length / \e[31m2\e[0m).toFloat) / \e[31m2\e[0m })\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value length is not a member\
    \ of Matchable\n3 errors found\n"
  stdout: ''
  timestamp: 1659978781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val sorted = l.sortWith((a, b) => a <= b)\n        if (n > 1) {\n         \
    \   math.ceil(n * math.min(sorted) / 2.0)\n        } else {\n            sorted\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0471x9ll.scala:13:31 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            math.ceil(n * math.min(sorted) / \e[31m2.0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((sorted : List[Long]))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0471x9ll.scala:15:12 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            sorted\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (sorted : List[Long])\n\e[31m   |\e[0m       \
    \     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2.0\n        val low = sorted.slice(0, mid)\n\
    \        val high = sorted.slice(mid, sorted.length)\n        val m1 = if (low.isEmpty)\
    \ sorted.last else low.min\n        val m2 = if (high.isEmpty) sorted.first else\
    \ high.max\n        if (m1 < m2) m1 else m2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jynkmve.scala:12:34\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlow\e\
    [0m = sorted.slice(\e[31m0\e[0m, mid)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (mid : Double)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jynkmve.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mhigh\e\
    [0m = sorted.slice(mid, sorted.length)\n\e[31m\e[31m   |\e[0m                \
    \                ^^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (mid : Double)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jynkmve.scala:15:42\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mm2\e[0m = \e[33mif\e[0m (high.isEmpty) sorted.first \e[33melse\e[0m high.max\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value first is not a member of List[Long] - did you mean sorted.find?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.sorted\n      \
    \  (l.head + l.tail.last) / 2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmvsa4nb8.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sorted\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n\
    \        val lower = sortedList.head\n        val upper = sortedList.last\n  \
    \      val middle = (lower + upper) / 2.0\n        if (upper - lower < 0)\n  \
    \          lower\n        else\n            middle\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt22drgdg.scala:17:12\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            middle\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (middle\
    \ : Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        val low = sorted.head\n        val high = sorted.last\n      \
    \  (low + high) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_yxccxd.scala:17)\n\tat Problem.main(tmp8_yxccxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0f\n     \
    \   else if (l.length == 1) l(0) \n        else (l.size / 2) * (l.head.toFloat\
    \ + l.last.toFloat) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsq4o5m2e.scala:15)\n\tat Problem.main(tmpsq4o5m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n\
    \        val half = (sortedList.size / 2).toInt\n        val mid = sortedList.length\
    \ / 2\n        (sortedList(mid) + sortedList(mid-1)) / 2.0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnxoyvwe.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        (sortedList(mid) + sortedList(mid-\e\
    [31m1\e[0m)) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val length = l.length\n \
    \       if (length == 0) throw new IllegalArgumentException(\"Empty list\")\n\
    \        val half = (length+1)/2\n        val sum = l.tail.foldLeft(0l) { (sum,\
    \ element) => sum + element }\n        val avg = sum/length\n        val index\
    \ = (length-1)/2\n        if (l.contains(half)) l.lift(index) else l.lift(index+1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd3ozwpck.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (l.contains(half))\
    \ l.lift(index) \e[33melse\e[0m l.lift(index+\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     Found:    Option[Long]\n\e[31m   |\e[0m                \
    \              Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd3ozwpck.scala:16:55 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mif\e[0m (l.contains(half)) l.lift(index) \e[33melse\e[0m\
    \ l.lift(index+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                 Found:    Option[Long]\n\e[31m   |\e[0m    \
    \                                             Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Sort the list in-place.\n\
    \        l.sortWith(_ < _)\n        // Find the middle element in the list.\n\
    \        var mid = l.length // 2\n        var mElement = l(0)\n        // Find\
    \ the first element larger than the middle element.\n        for(element <- l.tail\
    \ if element > mElement) {\n            mid = mid-1\n            mElement = element\n\
    \        }\n        return mElement\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped8bc1xy.scala:23)\n\tat Problem.main(tmped8bc1xy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val arr = l.toArray\n   \
    \     val len = arr.length\n        var sum = 0.0\n        var middle = len/2\n\
    \        var median = arr(middle)\n        var j = 0\n        while (j < len -\
    \ 1) {\n            sum += arr(j)\n            if (sum > median) {\n         \
    \       median = arr(middle)\n                middle = middle+1\n            \
    \    j += 1\n            }\n            else {\n                j += 2\n     \
    \       }\n        }\n        median\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length\
    \ 5\n\tat Problem$.median(tmpul1jdlhw.scala:19)\n\tat Problem$.main(tmpul1jdlhw.scala:30)\n\
    \tat Problem.main(tmpul1jdlhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if (sorted.isEmpty) 0f\n        else sorted.last.asInstanceOf[Float] /\
    \ 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvckrl417.scala:15)\n\tat Problem.main(tmpvckrl417.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val arr = l.toArray\n   \
    \     val len = arr.length\n        if (len > 0) {\n            val mid = len\
    \ / 2\n            val first = (arr[mid] - arr(mid-1) < 0l) ? arr[mid-1] : arr(mid-1)\n\
    \            val second = (arr(mid + 1) - arr[mid] <0l) ? arr[mid+1] : arr(mid)\n\
    \            (first + second)/2\n        }\n        else 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpws8xe4an.scala:14:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m = (arr[\e\
    [35mmid\e[0m] - arr(mid-\e[31m1\e[0m) < \e[31m0l\e[0m) ? arr[\e[35mmid-\e[31m1\e\
    [0m] : \e[35marr\e[0m(mid-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '(' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpws8xe4an.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m = (arr[\e\
    [35mmid\e[0m] - arr(mid-\e[31m1\e[0m) < \e[31m0l\e[0m) ? arr[\e[35mmid-\e[31m1\e\
    [0m] : \e[35marr\e[0m(mid-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \              ^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Create an empty List which\
    \ would hold the median.\n        var list = List[Long]()\n        // Store the\
    \ sum of all elements in the list l.\n        var sum = 0.0\n        // Store\
    \ the counts of the elements in the list l.\n        var counts = scala.collection.mutable.Map[Long,\
    \ Int]()\n        // Iterate through the list l and compute sum and counts of\
    \ each element.\n        // Store the sum and counts in their respective variables\
    \ respectively.\n        l.foreach{ e => sum += e }\n        l.foreach{ e => counts(e)\
    \ += 1 }\n        // Find the average (mean) of elements in the list l.\n    \
    \    // Compute the difference between each element of the list and their mean.\n\
    \        // Find the median and store its index in the list l.\n        // Return\
    \ the element at the median.\n        var medianIndex = 0\n        var median\
    \ = sum/counts(0)\n        var sumOfDiffs = 0.0\n        l.foreach{ e =>\n   \
    \         sumOfDiffs += (e - median)\n        }\n        val numOfDiffs = l.length\n\
    \        val medianDiff = sumOfDiffs/numOfDiffs\n        // Find the index in\
    \ the list l where the median element is, \n        // and return the element\
    \ with that index.\n        val index = l.zipWithIndex.find { case (e, i) => e\
    \ == median }\n        medianIndex = index._2\n        median = l.apply(medianIndex)\n\
    \        return median.toFloat\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf65hgu3b.scala:35:28 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        medianIndex = index._2\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ _2 is not a member of Option[(Long, Int)]\n1 error found\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n\
    \        val middleIndex = (sortedList.length - 1) / 2\n        val middle = sortedList(middleIndex)\n\
    \        val isEven = l.length % 2 == 0\n        val median = (if(isEven) middle\
    \ + sortedList(sortedList.length - 1 - middleIndex) \n        else middle - (sortedList(middleIndex)\
    \ + sortedList(middleIndex + 1))) / 2\n        median.toFloat\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9okd8ze.scala:19)\n\tat Problem.main(tmpc9okd8ze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val h : Array[Float] = l.toArray\n\
    \        val median = (h min (h max) + 1.0f)/2.0f\n        median.toFloat\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwduy1yff.scala:11:34 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (h min (h\
    \ max) + \e[31m1.0f\e[0m)/\e[31m2.0f\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \  expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwduy1yff.scala:10:31 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mh\e[0m : \e[35mArray\e[0m[\e\
    [35mFloat\e[0m] = l.toArray\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    Array[\e\
    [1m\e[31mLong\e[0m]\n\e[31m   |\e[0m                               Required: Array[\e\
    [1m\e[32mFloat\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.size / 2\n    \
    \    if (l.size > 0)\n            if (l.last <= m)\n                l.removeLast\n\
    \            else\n                l.removeAt\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelpht340.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                l.removeLast\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value removeLast\
    \ is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpelpht340.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                l.removeAt\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value removeAt is not a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.toList.sortWith(_\
    \ < _)\n        if (m.length == 1) m(0) else m(m.length/2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_51xq6k.scala:15)\n\tat Problem.main(tmp5_51xq6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      val n = l.size\n      val sorted\
    \ = l.sorted\n      val half = n / 2\n      (sorted.head + sorted.last) / 2.0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7u5qko5x.scala:13:6\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m      (sorted.head + sorted.last)\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    Double\n\e[31m   |\e[0m      Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if (sorted.length == 1) {\n            sorted\n        } else {\n    \
    \        val mid = sorted.length / 2\n            val m1 = sorted.slice(0, mid)\n\
    \            val m2 = sorted.slice(mid, sorted.length)\n            (m1 + m2 )\
    \ / 2.toFloat\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9surhpsy.scala:12:12\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            sorted\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (sorted\
    \ : List[Long])\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9surhpsy.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            (m1 + m2 ) / \e[31m2\e[0m.toFloat\n\e[31m\e\
    [31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n       var result = -l.size / 2\n\
    \       if (l.size % 2 == 1) {\n           result += l.last\n       }\n      \
    \ result.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ipm8ob_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m           result += l.last\n\e[31m\e[31m   |\e[0m  \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var i = l.length\n      \
    \  if (i <= 0) {\n            throw new ArithmeticException(\"List contains no\
    \ elements.\");\n        }\n        if (l.length == 1) {\n            l.head\n\
    \        } else {\n            if (l.head + l.last == l.length) {\n          \
    \      l.last / 2.0\n            } else {\n                val mid = (l.head +\
    \ l.last) / 2.0\n                if (mid - l.head == l.last - l.head) {\n    \
    \                mid\n                } else {\n                    val i = (l.head\
    \ + l.last) / 2.0\n                    val mid = (mid + l.head) / 2\n        \
    \            val m = mid - i\n                    l.head + l.get(i)\n        \
    \        }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjf4p0v97.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                l.last / \e[31m2.0\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Found:    Double\n\e[31m   |\e[0m                Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjf4p0v97.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    mid\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Found:    (mid : Double)\n\e[31m   |\e[0m                    Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjf4p0v97.scala:25:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e\
    [33mval\e[0m \e[36mmid\e[0m = (mid + l.head) / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           Recursive \e[33mvalue\e[0m \e[35mmid\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4p0v97.scala:27:31 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    l.head + l.get(i)\n\e[31m\e[31m \
    \  |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0mvalue get is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n      l.foldLeft(0f)({\n        case\
    \ (sum, e) => if (sum < e) sum\n        else e\n      })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpol785y5g.scala:16)\n\tat Problem.main(tmpol785y5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Sort the list\n      \
    \  val l2 = l.sortWith((a, b) => a < b)\n        // Return the middle element\n\
    \        val n = l2.length\n        if (n < 2) 0f\n        else (n/2 - 1) * (l2.last.toFloat\
    \ + (l2.last.toFloat - l2.init.toFloat)) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpucp_w4c7.scala:15:71 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (n/\e[31m2\e[0m - \e[31m1\e[0m)\
    \ * (l2.last.toFloat + (l2.last.toFloat - l2.init.toFloat)) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is not a member of List[Long\
    \ @uncheckedVariance], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l toList sortWith(_\
    \ < _)\n        val n = l.length\n        val mid = (n + 1) \\/ 2\n\n        if\
    \ (n < 2) (l(0), l(mid)) else (l(mid), l(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpovl1v5ph.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l toList sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m         \
    \       Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovl1v5ph.scala:14:19 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n < \e[31m2\e[0m) (l(\e[31m0\e\
    [0m), l(mid)) \e[33melse\e[0m (l(mid), l(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (Nothing, Nothing)\n\e[31m   |\e[0m                   Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovl1v5ph.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (n < \e\
    [31m2\e[0m) (l(\e[31m0\e[0m), l(mid)) \e[33melse\e[0m (l(mid), l(\e[31m0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (Nothing, Nothing)\n\
    \e[31m   |\e[0m                                       Required: Float\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val mid = l.length / 2\n\
    \        val a = l.take(mid).toList\n        val b = l.drop(mid).toList\n    \
    \    if( a.isEmpty ) 0\n        else ( b.head+(a.last+a.last)/2.0 )\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1n7pdse.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m ( b.head+(a.last+a.last)/\e\
    [31m2.0\e[0m )\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    Double\n\e[31m   |\e[0m         \
    \      Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) l(0)\n        else {\n            val a = l.min\n            val\
    \ b = l.max\n            val m = (a + b) / 2\n            val mid = l.partition(_\
    \ < m)\n            val lo = mid.head\n            val hi = mid.last\n       \
    \     val m = lo.filter(_ < m)\n            val med = m.reduce(_ + _)\n      \
    \      if (n / 2 > med.toInt) m\n            else m\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf74zxp9h.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = lo.filter(_\
    \ < m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf74zxp9h.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmed\e[0m = m.reduce(_ + _)\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value reduce is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        var\
    \ m = 0\n        var med = -1\n        var median = -1\n        if (n > 0) {\n\
    \            val hi = math.floor(n/2)\n            val lo = math.floor(n/2)\n\
    \            var c = 0\n            for (x <- l.view.take(hi){x => c += 1; c})\
    \ med = (x+med)/2\n            for (x <- l.view.take(lo){x => c += 1; c}) med\
    \ = (x+med)/2\n        }\n        if (med == -1) med = l.last\n        median\
    \ = med\n        return median\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu9tegxm.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (x\
    \ <- l.view.take(hi){\e[36mx\e[0m => c += \e[31m1\e[0m; c}) med = (x+med)/\e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                  ^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Found:    (hi : Double)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpfu9tegxm.scala:18:38 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (x <- l.view.take(hi){\e[36mx\e\
    [0m => c += \e[31m1\e[0m; c}) med = (x+med)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \           Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m         \
    \                 I could not infer the type of the parameter x.\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfu9tegxm.scala:19:34 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (x <- l.view.take(lo){\e[36mx\e\
    [0m => c += \e[31m1\e[0m; c}) med = (x+med)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                  ^^\e[0m\n\e[31m   |\e[0m                  \
    \                Found:    (lo : Double)\n\e[31m   |\e[0m                    \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpfu9tegxm.scala:19:38 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mfor\e[0m (x <- l.view.take(lo){\e[36mx\e[0m => c +=\
    \ \e[31m1\e[0m; c}) med = (x+med)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \         I could not infer the type of the parameter x.\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfu9tegxm.scala:21:31 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (med == -\e[31m1\e[0m) med = l.last\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.map(_.toFloat).sortWith(_\
    \ < _).last\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptc0b_1qi.scala:13)\n\tat Problem.main(tmptc0b_1qi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var l = l.toList\n      \
    \  val sorted = l.sorted\n        val mid = (sorted.length /2).asInstanceOf[Int]\n\
    \        if(sorted.length %2 == 1)\n            return sorted[mid]\n        else\
    \ \n            return (sorted[mid] + sorted[(mid-1)/2]) / 2.toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphpkp69ww.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphpkp69ww.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mreturn\e[0m sorted[\e[35mmid\e[0m]\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Not found: type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphpkp69ww.scala:16:27 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mreturn\e[0m (sorted[\e[35mmid\e[0m] + sorted[(\e\
    [35mmid-\e[31m1\e[0m)\e[35m/\e[31m2\e[0m]) / \e[31m2\e[0m.toFloat\n\e[31m\e[31m\
    \   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m               \
    \            Not found: type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.size / 2\n    \
    \    if(l.size % 2 == 0) l.size / 2 else (l.size + l.size / 2) / 2.0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ek882sd.scala:11:44\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(l.size\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) l.size / \e[31m2\e[0m \e[33melse\e[0m (l.size\
    \ + l.size / \e[31m2\e[0m) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Double\n\e[31m   |\e\
    [0m                                            Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val listDouble = l.toDouble\n\
    \        val listSum = l.sum\n        val listAvg = l.sum / l.length\n       \
    \ val listSquare = listDouble * listDouble\n        val listSqrtLength = math.sqrt((listSquare\
    \ / listSum).toDouble)\n        val listSqrtSum = math.sqrt((listSum).toDouble)\n\
    \n        if (listSqrtLength < 0.001) {\n            // This check is necessary\
    \ since math.sqrt returns a value with less precision than Double.\n         \
    \   listSqrtLength\n        } else {\n            val listSqrtAvg = math.sqrt((listAvg).toDouble)\n\
    \            val listMed = (listAvg + (listSqrtSum * listSqrtAvg)) / listSqrtLength\n\
    \            listMed.toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi0cdoggs.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlistDouble\e[0m = l.toDouble\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toDouble is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi0cdoggs.scala:19:12\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            listSqrtLength\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Found:    (listSqrtLength : Double)\n\e[31m   |\e[0m            Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val midPoint = (sorted.length/2).toInt\n        val pivot = sorted.last\n\
    \        var left = midPoint-1\n        var right = midPoint\n        while (left\
    \ <= right) {\n            if (pivot < sorted[left])\n                left +=\
    \ 1\n            else if (pivot > sorted[right])\n                right -= 1\n\
    \            else\n                left++\n        }\n        val mid = math.min((left\
    \ + 1l), right)\n        (sorted[mid]).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3u1yef9x.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                left++\n\e[31m\e[31m   |\e[0m       \
    \               ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3u1yef9x.scala:16:31 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mif\e[0m (pivot < sorted[\e[35mleft\e[0m])\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    Not found: type left\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3u1yef9x.scala:18:36 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (pivot > sorted[right])\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    Not found: type right\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3u1yef9x.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        (sorted[\e[35mmid\e[0m]).toFloat\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type mid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if(n==0) 0.0f else l.sortWith(_ < _).last._2 / n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpze3m7_hx.scala:11:50 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(n==\e[31m0\e[0m) \e[31m0.0f\e[0m\
    \ \e[33melse\e[0m l.sortWith(_ < _).last._2 / n\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  value _2 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val numElements = l.length\n\
    \        val numEven = l.filter(_ % 2 == 0)\n        val numOdd = l.filter(_ %\
    \ 2 != 0)\n        val middleIndex = numElements / 2\n        val highIndex =\
    \ numElements - 1\n        val highMiddle = numEven.max\n        val lowMiddle\
    \ = numOdd.min\n        val highMiddleIndex = highIndex - numElements / 2\n  \
    \      val lowMiddleIndex = middleIndex + numElements / 2\n        if(highIndex\
    \ == 0)\n            return l(0)\n        if(lowIndex == numElements - 1)\n  \
    \          return l((numElements / 2) - 1)\n        if (numElements % 2 == 1)\
    \ {\n            if (numEven.last < highMiddle) {\n                return l((highIndex\
    \ + 1)/2)\n            } else if (numOdd.last > lowMiddle) {\n               \
    \ return l((highIndex + 1)/2)\n            } else {\n                return (l((highIndex\
    \ + 1)/2).toFloat)\n            }\n        } else {\n            if (numEven.last\
    \ < highMiddle) {\n                return l((highIndex - 1)/2)\n            }\
    \ else if (numOdd.last > lowMiddle) {\n                return l((highIndex - 1)/2)\n\
    \            } else {\n                return (l((highIndex - 1)/2).toFloat)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdm6h4o7c.scala:21:11 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(lowIndex == numElements - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  Not found: lowIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0.0f\n   \
    \     else {\n            var min = l.head\n            var max = l.head\n\n \
    \           var pos = 1\n            var pos1 = 1\n            var pos2 = l.size\n\
    \n            while(pos < pos2) {\n                while (pos < pos2 && min.compareTo(l.at(pos2))\
    \ < 0) pos += 1\n                while (pos < pos2 && max.compareTo(l.at(pos2))\
    \ > 0) pos += 1\n                if (min == l.at(pos)) min = l.at(pos)\n     \
    \           if (max == l.at(pos)) max = l.at(pos)\n                pos1 += 1\n\
    \                pos2 -= 1\n            }\n\n            var medi = (min + max)\
    \ / 2\n            while (pos < pos2) {\n                medi = (medi + l.at(pos)).floor.toFloat\n\
    \                pos += 1\n            }\n            medi\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy5tx0ffv.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mwhile\e[0m (pos < pos2 && min.compareTo(l.at(pos2))\
    \ < \e[31m0\e[0m) pos += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value at is not a member of List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy5tx0ffv.scala:21:53 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                \e[33mwhile\e[0m (pos < pos2 && max.compareTo(l.at(pos2))\
    \ > \e[31m0\e[0m) pos += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value at is not a member of List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy5tx0ffv.scala:22:29 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (min == l.at(pos)) min = l.at(pos)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        value at is not a member of List[Long]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy5tx0ffv.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (min == l.at(pos)) min\
    \ = l.at(pos)\n\e[31m\e[31m   |\e[0m                                         \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                                  value at is not\
    \ a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy5tx0ffv.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m (max == l.at(pos)) max = l.at(pos)\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                           value at is not\
    \ a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy5tx0ffv.scala:23:46\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m (max == l.at(pos)) max = l.at(pos)\n\e[31m\e[31m   |\e[0m                \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            value at is not a member of List[Long]\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sortWith(_\
    \ < _)\n        sorted.length match {\n            case x if x < 2 => sorted.head\n\
    \            case x if x == 2 => sorted.init\n            case x if x > 2 => if\
    \ (sorted.length % 2) (sorted.last + sorted.init) / 2 else (sorted.last + sorted.init)\
    \ / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6whtqhl.scala:13:39\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x == \e[31m2\e[0m => sorted.init\n\e[31m\e[31m   |\e[0m      \
    \                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               Found:    List[Long @uncheckedVariance]\n\e[31m   |\e[0m     \
    \                           Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpe6whtqhl.scala:14:35 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > \e[31m2\e\
    [0m => \e[33mif\e[0m (sorted.length % \e[31m2\e[0m) (sorted.last + sorted.init)\
    \ / \e[31m2\e[0m \e[33melse\e[0m (sorted.last + sorted.init) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    Int\n\e[31m   |\e\
    [0m                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpe6whtqhl.scala:14:67 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x > \e[31m2\e\
    [0m => \e[33mif\e[0m (sorted.length % \e[31m2\e[0m) (sorted.last + sorted.init)\
    \ / \e[31m2\e[0m \e[33melse\e[0m (sorted.last + sorted.init) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments ((sorted.init : => List[Long\
    \ @uncheckedVariance]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe6whtqhl.scala:14:104\
    \ ----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m     "
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        import scala.math._\n   \
    \     import scala.collection.mutable._\n        val sortedList = l.sortBy(x =>\
    \ x)\n        val size = sortedList.size\n        val mid = math.round((size +\
    \ 1.0) / 2.0)\n        if(size % 2 == 0) {\n            sortedList.get((mid +\
    \ 0.5).toInt)\n        } else {\n            sortedList.get(mid)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3x8duyj8.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sortedList.get((mid + \e[31m0.5\e[0m).toInt)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value get\
    \ is not a member of List[Long] - did you mean sortedList.seq?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3x8duyj8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sortedList.get(mid)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if(l.isEmpty) 0.0f\n    \
    \    else if(l.size == 1) l.head\n        else (l.size / 2l).toFloat + (l.size\
    \ % 2l).toFloat / 2l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdy2epujx.scala:15)\n\tat Problem.main(tmpdy2epujx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.length == 0) null\n\
    \        else {\n            val mid = l.length / 2\n            val l1 = l.slice(0,\
    \ mid)\n            val l2 = l.slice(mid)\n            val l3 = l.slice(0, l1.length)\n\
    \            val l4 = l.slice(l1.length)\n            val xs = (l1 ++ l2 ++ l3\
    \ ++ l4).sortBy(_).reverse\n            val median = (xs take 1).sorted\n    \
    \        val median_index = (xs index median)\n            median(median_index)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78jh1brj.scala:10:27\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (l.length\
    \ == \e[31m0\e[0m) \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                           Found:    Null\n\e\
    [31m   |\e[0m                           Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp78jh1brj.scala:14:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36ml2\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp78jh1brj.scala:16:28 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36ml4\e[0m = l.slice(l1.length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m\
    \ in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmp78jh1brj.scala:17:51 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mxs\e[0m = (l1 ++ l2\
    \ ++ l3 ++ l4).sortBy(_).reverse\n\e[31m\e[31m   |\e[0m                      \
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => (l1 ++ l2 ++ l3 ++ l4).sortBy(_$1).reverse.\n\
    \e[31m\e[31m-- Error: /tmp/tmp78jh1brj.scala:17:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mxs\e[0m = (l1 ++ l2\
    \ ++ l3 ++ l4).sortBy(_).reverse\n\e[31m\e[31m   |\e[0m                      \
    \                               ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobje"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val arr = l.toArray\n   \
    \     val sorted = arr.sortWith((x,y) => x < y)\n        val middle = (sorted.length\
    \ + 1) /2\n        val median = if (sorted.length % 2 == 1) sorted((middle-1)/2).asInstanceOf[Float]\
    \ else sorted.last.asInstanceOf[Float]\n        median\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1kx4i2n.scala:17)\n\tat Problem.main(tmpk1kx4i2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Sort the list by decreasing\
    \ order\n        val sortedList = l.sortWith(_ < _)\n        // Find the mid-point\
    \ of the sorted list\n        val midpoint = sortedList.size / 2.0\n        //\
    \ Find the average of the two mid-points\n        val average = (sortedList(midpoint)\
    \ + (sortedList.length - midpoint) * (midpoint - 1.0f)) / 2.0\n        average.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpallgt_ih.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36maverage\e\
    [0m = (sortedList(midpoint) + (sortedList.length - midpoint) * (midpoint - \e\
    [31m1.0f\e[0m)) / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (midpoint : Double)\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // We need to find the median\
    \ of this list\n        // We cannot use median method defined on List directly\n\
    \        // because the input List may not be sorted\n        // So we sort it,\
    \ and then get the median\n        val sortedList = l.sorted\n        val len\
    \ = sortedList.size\n\n        if (len % 2 == 0) {\n            sortedList((len\
    \ / 2) - 1).asInstanceOf[Float]\n        } else {\n            sortedList((len\
    \ / 2) + 1).asInstanceOf[Float]\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphd15v0zz.scala:24)\n\tat Problem.main(tmphd15v0zz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if(n.toDouble <= 1) 0.toFloat\n        else {\n            val median = (l.sorted.last.toDouble\
    \ + l.sorted.head.toDouble) / 2.0\n            if(n % 2 == 0) median else (median\
    \ + l.sorted.last) / 2.0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndi4o288.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(n %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) median \e[33melse\e[0m (median + l.sorted.last)\
    \ / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (median : Double)\n\e[31m\
    \   |\e[0m                           Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpndi4o288.scala:14:39 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(n % \e[31m2\e[0m == \e[31m0\e\
    [0m) median \e[33melse\e[0m (median + l.sorted.last) / \e[31m2.0\e[0m\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Double\n\e\
    [31m   |\e[0m                                       Required: Float\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val nElements = l.length\n\
    \        val half = nElements/2\n        if(nElements <= 0) 0.0f\n        else\
    \ {\n            val sortedElements = l.sorted\n            if(sortedElements.size\
    \ < 2) sortedElements.head\n            else sortedElements.last(half) + sortedElements.init(half).last/2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp4ecyg8n1.scala:16:32 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m sortedElements.last(half)\
    \ + sortedElements.init(half).last/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mmethod\e\
    [0m \e[35mlast\e[0m in \e[33mclass\e[0m \e[35mList\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0)\n            throw new ArithmeticException(\"The median of an empty\
    \ list is undefined.\")\n        val middle = (n / 2).asInstanceOf[Int]\n    \
    \    val left = l.slice(0, middle)\n        val right = l.slice(middle + 1, n)\n\
    \        val middleOfLeft = median(left)\n        val middleOfRight = median(right)\n\
    \        val sumOfMiddles = left.sum + middle.asInstanceOf[Int] + right.sum\n\
    \        val avgOfMiddles = sumOfMiddles / n.asInstanceOf[Int]\n        val result\
    \ = avgOfMiddles + middleOfLeft + middleOfRight\n        (result * 1.0).asInstanceOf[Float]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: The median of an empty list is undefined.\n\
    \tat Problem$.median(tmpq95gwwbz.scala:12)\n\tat Problem$.median(tmpq95gwwbz.scala:16)\n\
    \tat Problem$.median(tmpq95gwwbz.scala:16)\n\tat Problem$.median(tmpq95gwwbz.scala:16)\n\
    \tat Problem$.main(tmpq95gwwbz.scala:24)\n\tat Problem.main(tmpq95gwwbz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0)\n            0.0f\n        else\n            (l.last + l.first\
    \ + l.drop(1).dropRight(1).sum / n).toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphee3bp5q.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            (l.last + l.first + l.drop(\e[31m1\e[0m).dropRight(\e\
    [31m1\e[0m).sum / n).toFloat\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value first is not a member of List[Long] - did you\
    \ mean l.find?\n1 error found\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n       // Return the median of the\
    \ list, or 0.0 if it has no elements.\n       // >>> median((List[Long](0, 1,\
    \ 2, 3, 4)))\n       // 3.0\n       l match {\n          case Nil => 0.0f\n  \
    \        case x::xs => x match {\n            case 0 => 0.0f\n            case\
    \ 1 => 1.0f\n            case _ => ((xs.size - 1) / 2.0).toFloat + ((xs.size -\
    \ 1) / 2.0).toFloat / 2.0f\n          }\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp982cgczs.scala:23)\n\tat Problem.main(tmp982cgczs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length.toFloat\n\
    \        val n2 = n.toInt\n        if (n == 0) 0\n        else if (n%2 == 0)\n\
    \            l.min.toFloat\n        else\n            l.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2zbjj4qt.scala:19)\n\tat Problem.main(tmp2zbjj4qt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val nums = new mutable.WrappedArray[Long](l)\n\
    \        nums.sortWith(_ < _)\n        nums.headOption.map(_.toFloat).getOrElse(throw\
    \ new Exception(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecm4udlt.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mnew\e\
    [0m mutable.WrappedArray[\e[35mLong\e[0m](l)\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortme = l.toList.sortBy(-_)\n\
    \        (sortme.length / 2).toFloat * 0.5f\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yr185cx.scala:14)\n\tat Problem.main(tmp1yr185cx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.toList\n      \
    \  if (l.isEmpty)\n            0\n        else {\n            val mid = l.length\
    \ / 2\n            if (l.isSorted && l.tail.isEmpty)\n                l.head\n\
    \            else if (l.tail.isEmpty)\n                l.head\n            else\
    \ {\n                val m1 = l.slice(0, mid)\n                val m2 = l.slice(mid)\n\
    \                if (m2.sum / m2.size < m1.sum / m1.size)\n                  \
    \  median(m1)\n                else\n                    median(m2)\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7peei39s.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.size\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = (n + 1) >>> 1\n        \
    \    val avg = (l(mid + 1) + l(mid - 1)) >>> 1\n            if (n < mid) avg\n\
    \            else (l(mid - 1) + l(mid + 1)) >>> 1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzf9xf7v0.scala:22)\n\tat Problem.main(tmpzf9xf7v0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // For each element, take\
    \ middle element. Since median is the\n        // middle element if there are\
    \ an odd number of elements,\n        // return the middle element. If there are\
    \ an even number of\n        // elements, return the average of the two middle\
    \ elements.\n        val halfLength = l.length / 2\n        val middle = l.slice(halfLength)\n\
    \        var mid = 0.0\n        var sum = 0.0\n        for (x <- middle) {\n \
    \           sum = sum + x\n        }\n        // Compute average of middle elements\n\
    \        val avg = sum / l.length\n        val halfLength2 = l.length / 2.0\n\
    \        val average = l.slice(halfLength2).sum / l.length\n        // Return\
    \ the middle element if odd number of elements\n        if (l.length%2 == 0) {\n\
    \            mid = middle(0)\n        }\n        // Return the average of middle\
    \ elements if even number of elements\n        else {\n            mid = average\n\
    \        }\n        // Return the median element\n        mid.toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprzbdi35h.scala:15:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmiddle\e[0m = l.slice(halfLength)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m\
    \ in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzbdi35h.scala:24:30 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36maverage\e[0m = l.slice(halfLength2).sum\
    \ / l.length\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (halfLength2 : Double)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n == 0)\n            0.0f\n        else if (n == 1)\n            l(0)\n\
    \        else\n            (l diff l.take(n / 2).map(_.toFloat).sum / 2.0).toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw57fttff.scala:16:20\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (l diff l.take(n\
    \ / \e[31m2\e[0m).map(_.toFloat).sum / \e[31m2.0\e[0m).toFloat\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    Double\n\e[31m   |\e[0m              \
    \      Required: scala.collection.Seq[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = (l.length-1)/2\n\
    \        if(l.length % 2 == 0) (l.dropRight(n+1).sum/2.0) else (l.drop(n+1).sum/2.0\
    \ + l.drop(n+1).sum/2.0)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrjd4bts.scala:11:31\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(l.length\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) (l.dropRight(n+\e[31m1\e[0m).sum/\e[31m2.0\e\
    [0m) \e[33melse\e[0m (l.drop(n+\e[31m1\e[0m).sum/\e[31m2.0\e[0m + l.drop(n+\e\
    [31m1\e[0m).sum/\e[31m2.0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    Double\n\e[31m   |\e[0m                               Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrjd4bts.scala:11:63\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m(l.length\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) (l.dropRight(n+\e[31m1\e[0m).sum/\e[31m2.0\e\
    [0m) \e[33melse\e[0m (l.drop(n+\e[31m1\e[0m).sum/\e[31m2.0\e[0m + l.drop(n+\e\
    [31m1\e[0m).sum/\e[31m2.0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       if (sorted length % 2 == 0) sorted((sorted((sorted.length - 1) / 2) +\
    \ sorted((sorted.length - 1) / 2).toInt)).toFloat / 2.0\n        else sorted.last\
    \ / 2.0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcwm93wpk.scala:11:28 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (sorted length % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) sorted((sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m)\
    \ + sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m).toInt)).toFloat / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m\
    \   |\e[0m                            ')' expected, but integer literal found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwm93wpk.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (sorted length % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) sorted((sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m)\
    \ + sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m).toInt)).toFloat / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: %\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpcwm93wpk.scala:11:19 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (sorted length % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) sorted((sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m)\
    \ + sorted((sorted.length - \e[31m1\e[0m) / \e[31m2\e[0m).toInt)).toFloat / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            \e[33mmethod\e[0m \e[35mlength\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcwm93wpk.scala:11:44 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mif\e[0m (sorted length % \e[31m2\e[0m == \e[31m0\e[0m) sorted((sorted((sorted.length\
    \ - \e[31m1\e[0m) / \e[31m2\e[0m) + sorted((sorted.length - \e[31m1\e[0m) / \e\
    [31m2\e[0m).toInt)).toFloat / \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    Long\n\
    \e"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // If all elements are equal,\
    \ the median is just the element.\n        if (l.length == 1) l.head\n       \
    \ else l.sorted[(Int, Long)].reverse.head._2.toFloat + (l.length.toFloat - l.sorted[(Int,\
    \ Long)].reverse.length.toFloat) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxz3e3u_g.scala:12:48 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m l.sorted[(Int, Long)].reverse.head._2.toFloat\
    \ + (l.length.toFloat - l.sorted[(Int, Long)].reverse.length.toFloat) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value _2 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) 0\n      \
    \  else (l.toArray.sortBy(-_.toFloat).length)/2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c4w4ptf.scala:14)\n\tat Problem.main(tmp0c4w4ptf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // Sort the list\n      \
    \  val sorted = l.sortWith(_ < _)\n        val midpoint = sorted.size / 2\n  \
    \      // If list is even, middle is median.\n        if (sorted.size % 2 == 0)\
    \ {\n            (sorted.head + sorted((midpoint-1).toInt)).toFloat\n        }\
    \ else {\n            sorted((midpoint).toInt).toFloat\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8b8svkze.scala:22)\n\tat Problem.main(tmp8b8svkze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sortedList = l.sortWith((x,\
    \ y) => x < y)\n        val length = sortedList.length / 2\n        sortedList(length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp457mhrkj.scala:16)\n\tat Problem.main(tmp457mhrkj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var x = l.head\n        var\
    \ y = l.tail.head\n        var z = (l.head+l.tail.head)/2.0\n        var count\
    \ = 0\n        while (x != y && z != y) {\n            count +=1\n           \
    \ x = (x+z)/2\n            y = y+1\n            z = (z+z)/2\n        }\n     \
    \   if (z == y)\n            z\n        else\n            y\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7r4ks09l.scala:16:16\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            x = (x+z)/\e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    Double\n\e[31m   |\e[0m                Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7r4ks09l.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            z\n\e[31m\e[31m \
    \  |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    (z : Double)\n\
    \e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        // If only 1 element, return\
    \ it directly\n        if (l.size == 1){\n            l.head\n        } else {\n\
    \            // Get the middle element\n            val mid = l.size / 2\n   \
    \         // Find the middle element\n            val median = l.take(mid).toList\
    \ match {\n            case h :: t => h\n            case _ => median(l.drop(mid))\n\
    \            }\n\n            // Recursively find the median of the left and right\
    \ halves\n            val leftMedian = median(l.take(mid))\n            val rightMedian\
    \ = median(l.drop(mid))\n\n            math.min(leftMedian, rightMedian)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm6q60059.scala:19:22 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m _ => median(l.drop(mid))\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpm6q60059.scala:23:29 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mleftMedian\e[0m = median(l.take(mid))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             \e[33mvalue\e[0m \e[35mmedian\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm6q60059.scala:24:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mrightMedian\e[0m = median(l.drop(mid))\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val m = l.size\n        val\
    \ sortedList = l.sorted\n        if (m == 0) 0.0f else ((sortedList.length - 1)\
    \ / 2.0f) + sortedList(m)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.median(tmpbv3j7tcl.scala:12)\n\tat Problem$.main(tmpbv3j7tcl.scala:15)\n\
    \tat Problem.main(tmpbv3j7tcl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val mid = (l length) / 2\n\
    \        if(l.isEmpty) {\n            1.0f\n        }\n        else if(l.head\
    \ == l.last) {\n            l.head\n        }\n        else if(mid > 0 && (l.head\
    \ + mid) < (l.head + mid + 1)){\n            val x = (l.head + mid) / 2\n    \
    \        x - (x.toFloat / 2.0f)\n        }\n        else {\n            val x\
    \ = (l.head + mid - 1) / 2\n            x - (x.toFloat / 2.0f)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvmmyzbb9.scala:10:27 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmid\e[0m = (l length) /\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m\
    \   |\e[0m                           expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val counts = l.groupBy(_.toFloat).mapValues(_.size)\n\
    \        val zeros = counts.getOrElse(0f, 0)\n        val keys = counts.keys.sortBy(-_)\n\
    \        keys.head + (keys.last * counts.keys.tail.sum / zeros).toFloat\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpax3vijst.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = counts.keys.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value sortBy is not a member of Iterable[Float]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val (even, odd) = l.partition(x\
    \ => x % 2 == 0)\n        if (even.size == 0) even.head\n        else even.take(1).max\
    \ / 2.0 + odd.take(1).min / 2.0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp87vielvp.scala:12:13\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m even.take(\e\
    [31m1\e[0m).max / \e[31m2.0\e[0m + odd.take(\e[31m1\e[0m).min / \e[31m2.0\e[0m\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        if (l.isEmpty) throw new\
    \ Exception(\"List is empty\")\n        var median : Float = l.head._2\n     \
    \   l.foldLeft(l.head)((x, y) => {\n            if (x._2 < y._2) x else y\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzlrjn8nr.scala:11:36 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mmedian\e[0m : \e[35mFloat\e\
    [0m = l.head._2\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value _2 is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzlrjn8nr.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (x._2 < y._2) x \e[33melse\e\
    [0m y\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m       \
    \         value _2 is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val l = l.sortWith(_ < _)\n\
    \        val n = l.length\n        if (n <= 1L) 0f\n        else\n        n /\
    \ 2\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpstyi3xbs.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        l.sorted.reverse.head\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpszmt_ea5.scala:13)\n\tat Problem.main(tmpszmt_ea5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val N = l.length\n      \
    \  if (N == 0) 0f else (l sorted.last) / N\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpczkexull.scala:11:37 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (N == \e[31m0\e[0m) \e[31m0f\e\
    [0m \e[33melse\e[0m (l sorted.last) / N\n\e[31m\e[31m   |\e[0m               \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \      expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f else (l.last + l.dropRight(n).takeRight(1).sum + l.takeRight(n).sum)\
    \ / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvo20fxoy.scala:14)\n\tat Problem.main(tmpvo20fxoy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        var l : List[Long] = l.toList\n\
    \        l.sortBy(-_)\n        val middle = l.length / 2\n        if (l.length\
    \ % 2 == 0)\n            l.size / 2\n        else\n            l.size / 2 + l.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmp11u4x39t.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = l.toList\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m             l is a forward reference extending over the definition\
    \ of l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\nthere were 2 deprecation warnings; re-run with -deprecation\
    \ for details\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978811
