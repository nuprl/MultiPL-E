language: scala
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var res = 0.0\n        for (i<-0 until lst.size)\
    \ {\n            if (lst(i) % 2 == 1) {\n                res += lst(i)\n     \
    \       }\n        }\n        res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphe6xnya8.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        res\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (res : Double)\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n      \
    \  lst.zipWithIndex.foreach { e =>\n            if (e._2 % 2 == 0) even = even\
    \ + e._1\n            else odd = odd + e._1\n        }\n        odd + even\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5b6diazt.scala:22)\n\tat Problem.main(tmp5b6diazt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                if (lst(i) %2 == 1)\n    \
    \                sum += lst(i)\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytiz25m3.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    sum += lst(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if(lst.isEmpty) 0\n        else {\n        \
    \    var sum = 0\n            var i = 0\n            while(i < lst.size) {\n \
    \               if(lst(i) %2 == 0) {\n                    sum += 1\n         \
    \       }\n                i += 1\n            }\n            return sum\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui3dac8b.scala:27)\n\tat Problem.main(tmpui3dac8b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val nums = lst.filter(_%2==0)\n        val sum\
    \ = nums.reduce((a,b) => a+b)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuesa7vc7.scala:18)\n\tat Problem.main(tmpuesa7vc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val n = lst.length\n        val evenPos = lst.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).toSet\n        val oddPos =  lst.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1).toSet\n        val result =  oddPos.filter(_ => evenPos.contains(_)).sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfa1ymfue.scala:16:41\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m =  oddPos.filter(_ => evenPos.contains(_)).sum\n\e[31m\e[31m   |\e[0m    \
    \                                     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    \e[1m\e[31mLong\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m \
    \  |\e[0m                                         Required: Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n       var evenSum = 0\n       for (x <- lst) {\n  \
    \        if (x % 2 != 0){\n            evenSum += x\n          }\n       }\n \
    \      evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkijem11o.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            evenSum += x\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(x => x.toString.toInt%2\
    \ == 1)\n        val even = lst.filter(x => x.toString.toInt%2 == 0)\n       \
    \ lst.foldLeft(0l){ (sum, cur) =>\n            val pos = cur.toString.toInt/2\n\
    \            val sum = sum + if (pos == 0) odd(cur) else even(cur)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpva5afwmv.scala:17:28 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum + \e\
    [33mif\e[0m (pos == \e[31m0\e[0m) odd(cur) \e[33melse\e[0m even(cur)\n\e[31m\e\
    [31m   |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m            \
    \                expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpva5afwmv.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.isEmpty) 0\n        else {\n       \
    \     val odd = lst.filter(x => x % 2 == 1)\n            val even = lst.filter(x\
    \ => x % 2 == 0)\n            val res = odd.foldLeft(0l)(_ + _)\n            even\
    \ foreach (a => res += a)\n            res\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbnvxos1v.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            even foreach (\e[36ma\e[0m => res += a)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value += is not a member of Long - did you mean res.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var evenIndex = lst.indexWhere(lst.head.isEven)\n\
    \        for(i <- 0 to lst.length - 2 by 2){\n            if(i == evenIndex){\n\
    \                sum += lst(i).asInstanceOf[Long]\n            }else{\n      \
    \          sum += lst(i).asInstanceOf[Long]\n            }\n        }\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ilb2fee.scala:14:48 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mevenIndex\e[0m = lst.indexWhere(lst.head.isEven)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isEven is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ilb2fee.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                sum += lst(i).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Int - did you mean Int.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ilb2fee.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i).asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var result : Long = ListBuffer.empty[Long].head\
    \ // First element is the sum of all elements that are even\n        var sum :\
    \ Long = 0\n        for (i <- 0 until lst.length) sum += lst(i)\n        for (j\
    \ <- 0 until lst.length) result += j % 2 == 0 ? sum : 0\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4mraebfw.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (j <- \e[31m0\e[0m until lst.length)\
    \ result += j % \e[31m2\e[0m == \e[31m0\e[0m ? sum : \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4mraebfw.scala:16:59 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (j <- \e[31m0\e[0m until lst.length)\
    \ result += j % \e[31m2\e[0m == \e[31m0\e[0m ? sum : \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^\e[0m\n\e\
    [31m   |\e[0m                                          value ? is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Solution One\n        var sum = 0\n     \
    \   for (i <- 0 until lst.size)\n            if (i%2 == 0)\n                sum\
    \ += lst(i)\n        // Solution Two\n        // val evenSum = lst.map(x => x%2\
    \ == 0l).sum\n        // val oddSum = lst.filter(x => x%2 == 1l).sum\n       \
    \ // val evenSum = (lst.filter(x => x%2 == 0l).sum/lst.size)\n        // val oddSum\
    \ = (lst.filter(x => x%2 == 1l).sum/lst.size)\n        // val evenSum = (lst.map(x\
    \ => x%2 == 0l).sum/lst.size)\n        // val oddSum = (lst.map(x => x%2 == 1l).sum/lst.size)\n\
    \        // Solution Three\n        // val evenSum = lst.foldLeft(0l){\n     \
    \   //     (sum,x) => if (x%2 == 0) sum+x else sum\n        // }\n        // val\
    \ oddSum = lst.foldLeft((0l,0l)) {\n        //     (sum,x) => if (x%2 == 1) sum+x\
    \ else sum\n        // }\n        // Solution Four\n        val evenSum = lst.foldLeft(0l)\
    \ {\n            (sum,x) => sum+x%2\n        }\n        val oddSum = lst.foldLeft(0l)\
    \ {\n            (sum,x) => sum+(x%2)\n        }\n        // Solution Five\n \
    \       // val evenSum = lst.foldLeft(0l)(\n        //     (sum,x) => if(x%2 ==\
    \ 0) sum+x\n        // )\n        // val oddSum = lst.foldLeft(0l)(\n        //\
    \     (sum,x) => sum+(x%2)\n        // )\n        // Solution Six\n        //\
    \ val evenSum = lst.foldLeft(0l){\n        //     (sum,x) => if (x%2 == 0) sum+(x+sum)\
    \ else sum\n        // }\n        // val oddSum = lst.foldLeft(0l){\n        //\
    \     (sum,x) => if (x%2 == 1) sum+(x+sum) else sum\n        // }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7b8_dcfc.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val numSum = 0\n        lst.foldLeft(0l){ (curSum:\
    \ Long, curElem: List[Long]) => {\n            if (curElem.exists(_ % 2 == 0))\n\
    \                curSum + curElem.last\n            else\n                curSum\n\
    \        }}\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugxcqn__.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.foldLeft(\e[31m0l\e\
    [0m){ (\e[36mcurSum\e[0m: \e[35mLong\e[0m, \e[36mcurElem\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m]) => {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e\
    [31m   |\e[0m                          Found:    (Long, \e[1m\e[31mList\e[0m\e\
    [1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m) => Long\n\e[31m   |\e[0m               \
    \           Required: (Long, Long) => Long\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (curElem.exists(_ % \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m16 |\e[0m      \
    \          curSum + curElem.last\n\e[31m17 |\e[0m            \e[33melse\e[0m\n\
    \e[31m18 |\e[0m                curSum\n\e[31m19 |\e[0m        }}\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      def isOdd(x : Long) = x % 2 != 0\n      val res\
    \ = lst.foldLeft(0L)((sum, next) => if (isOdd(next)) sum + next else sum)\n  \
    \    res.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe33vc_7q.scala:18)\n\tat Problem.main(tmpe33vc_7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        var evenpos = lst.indexWhere(_\
    \ % 2 == 0)\n        lst.indices.foreach{i =>\n            if ((i+1) % 2 == 0\
    \ && (i+1) != evenpos) {\n                sum += lst(i)\n            }\n     \
    \   }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pupe1gh.scala:23)\n\tat Problem.main(tmp4pupe1gh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // We use mutable.HashMap in order to avoid\
    \ unnecessary re-allocations.\n        // To avoid unnecessary re-allocations\
    \ we use a mutable array (ArraySeq)\n        // This array is created at the first\
    \ call on solution method\n        // and is used afterwards.\n        // If mutable.HashMap\
    \ isn't enough we would have to use an immutable map instead.\n        val even\
    \ = mutable.HashMap[Long,Long]()\n        val odd = mutable.HashMap[Long,Long]()\n\
    \        // The total sum starts from the beginning\n        var sum = 0l\n  \
    \      lst.foreach(x => x % 2 match {\n            case 0 => even += ((x, 1l))\n\
    \            case 1 => odd += ((x, 1l))\n            case _ =>\n        })\n \
    \       for ( (key, value) <- odd) sum += value\n        for ( (key, value) <-\
    \ even) sum += value\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptd4zu41n.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptd4zu41n.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = mutable.Set[Long]()\n        val even\
    \ = mutable.Set[Long]()\n        lst.foreach{ x =>\n            if(x % 2 == 0)\n\
    \                even.add(x)\n            else {\n                if(even.contains(x))\
    \ odd.add(x)\n                else odd.remove(x)\n            }\n        }\n \
    \       odd.sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd65bn1ok.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpd65bn1ok.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.map(x => if (x % 2 == 0) x + 1 else: x).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq9487ekn.scala:13:47 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.map(\e[36mx\e[0m => \e[33mif\e[0m (x % \e\
    [31m2\e[0m == \e[31m0\e[0m) x + \e[31m1\e[0m \e[33melse\e[0m: x).sum\n\e[31m\e\
    [31m   |\e[0m                                               ^\e[0m\n\e[31m   |\e\
    [0m                                         expression expected but \e[31m:\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // If lst is empty, return 0\n        if (lst.size==0)\
    \ return 0\n        // Create two mutable vectors, odds and evens, to store the\
    \ odd and even elements in each list respectively\n        var odds = Vector.empty[Long]\n\
    \        var evens = Vector.empty[Long]\n        // Iterate over the list to find\
    \ out whether an even or odd elements are in each vector\n        for (i <- lst.indices)\
    \ {\n            if (lst(i) % 2 != 0) evens += lst(i)\n            else odds +=\
    \ lst(i)\n        }\n        // Find out whether the odd elements are in even\
    \ positions\n        val evensum = evens.sum\n        // If the evens vector is\
    \ not empty, return the sum of the evens vector\n        if (evens.nonEmpty) evensum\n\
    \        // If the odds vector is not empty, return the sum of the odds vector\n\
    \        else oddsum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwr_wt8f.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (lst(i) % \e[31m2\e[0m != \e\
    [31m0\e[0m) evens += lst(i)\n\e[31m\e[31m   |\e[0m                           \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of Vector[Long]\
    \ - did you mean Vector[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuwr_wt8f.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m odds += lst(i)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue += is not a member of Vector[Long] - did you mean Vector[Long].!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwr_wt8f.scala:28:13 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m oddsum\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m             Not found: oddsum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter{ _ % 2 == 0 }\n     \
    \   val odds = lst.filter{ _ % 2 != 0 }\n        val oddsAndEvens = odds.unionAll(evens)\n\
    \        oddsAndEvens.sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkteolgjx.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddsAndEvens\e[0m = odds.unionAll(evens)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m value unionAll is not a member of List[Long] - did you mean odds.union?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- lst.drop(lst.indexOf(i.toLong).toLong\
    \ + 1).filter(i => i%2==0).toList)\n            sum += i\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rtkj3cc.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(i <- lst.drop(lst.indexOf(i.toLong).toLong\
    \ + \e[31m1\e[0m).filter(\e[36mi\e[0m => i%\e[31m2\e[0m==\e[31m0\e[0m).toList)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: i\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1rtkj3cc.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) {\n                sum += lst(i)\n          \
    \  }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ks9u7rw.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.map { x =>\n            if (x % 2 == 1)\
    \ x\n            else if (x % 2 == 0) x + lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x + (lst(x\
    \ + (lst(x \n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctrx1776.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctrx1776.scala:28:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\nException in thread \"\
    main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:191)\n\
    \tat dotty.tools.dotc.core.TypeComparer.isSubType(TypeComparer.scala:199)\n\t\
    at dotty.tools.dotc.core.TypeComparer.topLevelSubType(TypeComparer.scala:126)\n\
    \tat dotty.tools.dotc.core.TypeComparer.testSubType(TypeComparer.scala:142)\n\t\
    at dotty.tools.dotc.core.TypeComparer$.testSubType(TypeComparer.scala:2749)\n\t\
    at dotty.tools.dotc.typer.Typer.adaptNoArgsOther$1(Typer.scala:3686)\n\tat dotty.tools.dotc.typer.Typer.adaptNoArgs$1(Typer.scala:3783)\n\
    \tat dotty.tools.dotc.typer.Typer.adapt1(Typer.scala:3995)\n\tat dotty.tools.dotc.typer.Typer.adapt(Typer.scala:3329)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:695)\n\tat dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2801)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2894)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:898)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpctrx1776.scala

    '
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var oddSum = 0\n        lst.foreach{elem =>\
    \ \n            if (elem.toString % 2 == 0) \n                oddSum += elem.toLong\n\
    \        }\n        oddSum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn1f_pmsf.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (elem.toString % \e[31m2\e\
    [0m == \e[31m0\e[0m) \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn1f_pmsf.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                oddSum += elem.toLong\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val nums = lst.toList\n        var sum = 0\n\
    \        var evens = 0\n        var odds = 0\n        for (i <- 0 to lst.length\
    \ - 1 by 2) {\n            if (nums(i) % 2 != 0) {\n                sum += nums(i)\n\
    \                evens += 1\n            } else {\n                odds += 1\n\
    \            }\n        }\n        if (evens == nums.size) {\n            sum\n\
    \        } else {\n            sum - evens * 2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4q6621.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += nums(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenPos = lst.filter { i => i % 2 == 0 }\n\
    \        val oddPos  = lst.filter { i => i % 2 != 0 }\n        val odd = oddPos.foldLeft(0l)(_\
    \ + _)\n        val even = evenPos.foldLeft(0l)(_ + _)\n        even + odd\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9xypvnk.scala:20)\n\tat Problem.main(tmpx9xypvnk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val n = lst.size\n        val odd = mutable.ArrayBuffer(lst.last)\n\
    \        val even = mutable.ArrayBuffer(lst.init)\n        for(i <- 0 until n){\n\
    \            if(even(i % 2) != 1){\n                odd += lst(i)\n          \
    \  }else{\n                even += lst(i)\n            }\n        }\n        odd.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmphufvwj.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ArrayBuffer(lst.last)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmphufvwj.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ArrayBuffer(lst.init)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n       val even = lst.filter(_ % 2 == 0).toList\n  \
    \     val odd = lst.filter(_ % 2 != 0).toList\n       even.zip(odd).foldLeft(0l)\
    \ { (acc, x) => acc + x._1 }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbuf_k_2c.scala:18)\n\tat Problem.main(tmpbuf_k_2c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_%2==0).toList\n     \
    \   val odd = lst.filter(_%2!=0).toList\n        val result = odd.map(x => x %\
    \ 2 == 1 ? x*x + 1 : x).toSet.sum\n        even.exists(x => x == result) ? result\
    \ : 0\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6_o1zl4.scala:15:57 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = odd.map(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m ? x*x + \e[31m1\e[0m : \e[35mx\e\
    [0m).toSet.sum\n\e[31m\e[31m   |\e[0m                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Not found: type x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpa6_o1zl4.scala:15:45 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = odd.map(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m1\e[0m ? x*x + \e[31m1\e[0m : \e[35mx\e[0m).toSet.sum\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                          value ? is not a member of\
    \ Int\n\e[31m\e[31m-- Error: /tmp/tmpa6_o1zl4.scala:15:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = odd.map(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m ? x*x + \e[31m1\e[0m : \e[35mx\e\
    [0m).toSet.sum\n\e[31m\e[31m   |\e[0m                                        \
    \                             ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpa6_o1zl4.scala:16:38 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        even.exists(\e[36mx\e[0m => x == result) ? result : \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenSums = lst(0 until lst.length).filter(i\
    \ => i % 2 == 0).map(_ + lst(i / 2) / 2)\n        evenSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6772tyy7.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSums\e\
    [0m = lst(\e[31m0\e[0m until lst.length).filter(\e[36mi\e[0m => i % \e[31m2\e\
    [0m == \e[31m0\e[0m).map(_ + lst(i / \e[31m2\e[0m) / \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    Range\n\e[31m   |\e[0m                 \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for((index, value) <- lst.zipWithIndex)\
    \ {\n            if( value % 2 == 0) {\n                sum += value\n       \
    \     }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlovt58p.scala:22)\n\tat Problem.main(tmpqlovt58p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var total = 0\n        var i = lst.indexOf(0)\n\
    \        while(i != -1) {\n            total += lst(i)\n            i -= 1\n \
    \       }\n        total += lst.lastIndexWhere(_ % 2 == 1).toDouble\n        total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpao2dle87.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            total += lst(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpao2dle87.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        total += lst.lastIndexWhere(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd = lst.filter(_ % 2 == 1)\n        val result = odd.foldLeft(0.0L){ (sum,\
    \ element) =>\n            sum + element\n        }\n        result + even.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp39uayfiw.scala:15:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = odd.foldLeft(0.0L){\
    \ (\e[36msum\e[0m, \e[36melement\e[0m) =>\n\e[31m\e[31m   |\e[0m             \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \  Invalid literal number\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39uayfiw.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum + element\n\
    \e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp39uayfiw.scala:18:15\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result + even.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import col"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val oddEvenList = mutable.ArrayBuffer(lst(0))\
    \ ++ lst.drop(1).filter { x => x % 2 == 0 }\n        oddEvenList.foldLeft(0)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7p97sb90.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddEvenList\e[0m = mutable.ArrayBuffer(lst(\e\
    [31m0\e[0m)) ++ lst.drop(\e[31m1\e[0m).filter { \e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      lst.foldLeft(0L)((sum, e) => if (e % 2 == 0) sum\
    \ + e else sum)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6upj4_q.scala:16)\n\tat Problem.main(tmpm6upj4_q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        // Sort list with ordering:\
    \ Even numbers, odd - Odd numbers\n        lst.sortBy(_ % 2 == 0).foreach{\n \
    \           x => \n            if(x % 2 == 0) {\n                sum += x\n  \
    \          }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_y3e4a_4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Convert input list to map of even positions\
    \ to odd positions\n        var evenPos = mutable.Map[Long, Long]()\n        lst.foreach{x\
    \ => if (x % 2 == 0) evenPos(x /2 -> x /2)}\n        // Add up all odd positions\
    \ present in even positions\n        evenPos.values.foldLeft(0L){_ + _}\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqq8md_1n.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mevenPos\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        val evenIndex = lst.indexWhere(_\
    \ % 2 == 0)\n        for(i <- evenIndex to lst.size) {\n            if(lst.apply(i)\
    \ % 2 != 0) {\n                sum = sum + lst.apply(i)\n            }\n     \
    \   }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.solution$$anonfun$1(tmpdrlop697.scala:16)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.solution(tmpdrlop697.scala:19)\n\
    \tat Problem$.main(tmpdrlop697.scala:23)\n\tat Problem.main(tmpdrlop697.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 0) sum += lst(i)\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj9pomxzz.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(lst(i) % \e[31m2\e[0m == \e\
    [31m0\e[0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd = lst.filter(_ % 2 == 1)\n        val map = new mutable.HashMap[Long,Long]\n\
    \        for (i<-even) map(i) = i\n        var res = 0.toLong\n        for (i\
    \ <- odd) {\n            res = res + map.get(i).get\n        }\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzsb6m5xx.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m,\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(x => x % 2 == 0).map(x\
    \ => List(x, x-2)).flatten\n        val odds  = lst.filter(x => x % 2 == 1).map(x\
    \ => List(x, x-2)).flatten\n        val result = evens.sum(odds).sum\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmu9w7szz.scala:15:31\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = evens.sum(odds).sum\n\e[31m\e[31m   |\e[0m                             \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (odds :\
    \ List[Long])\n\e[31m   |\e[0m                               Required: Numeric[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(x => x % 2 == 0)\n   \
    \     val odd = lst.filter(x => x % 2 != 0)\n        even.foldLeft(0l) { (sum,\
    \ x) =>\n            if (odd.contains(x)) sum + x else sum\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdwhxzvh.scala:20)\n\tat Problem.main(tmpzdwhxzvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenOddMap = new collection.mutable.HashMap[Int,\
    \ Long]()\n        lst.foreach{ x =>\n            x match {\n                case\
    \ x if x % 2 == 0 => evenOddMap += ((x % 2 == 0) -> (x+1))\n                case\
    \ x if x % 2 != 0 => evenOddMap += ((x % 2 != 0) -> (x-1))\n            }\n  \
    \      }\n        evenOddMap.foldLeft[Long](0l){ case (acc, (k,v)) => acc + v\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn_1v0veo.scala:16:55\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m x \e[33mif\e[0m x % \e[31m2\e[0m == \e[31m0\e[0m => evenOddMap += ((x % \e\
    [31m2\e[0m == \e[31m0\e[0m) -> (x+\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (\e[1m\e\
    [31mBoolean\e[0m, Long)\n\e[31m   |\e[0m                                     \
    \          Required: (\e[1m\e[32mInt\e[0m, Long)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn_1v0veo.scala:17:55 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m x % \e\
    [31m2\e[0m != \e[31m0\e[0m => evenOddMap += ((x % \e[31m2\e[0m != \e[31m0\e[0m)\
    \ -> (x-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                \
    \                       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                    Found:    (\e[1m\e[31mBoolean\e[0m, Long)\n\
    \e[31m   |\e[0m                                               Required: (\e[1m\e\
    [32mInt\e[0m, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val oddEven = lst.groupBy(x => x % 2l)\n   \
    \     val even_odd_count = oddEven.filter(_._2.length == 1).map(_._1).sum\n  \
    \      even_odd_count\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_we0r_fg.scala:18)\n\tat Problem.main(tmp_we0r_fg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0l)\n       \
    \ val odd = lst.filter(_ % 2 == 1l)\n        val sumOdd = odd.foldLeft(0l) { (sum,\
    \ value) =>\n            val currentSum = sum + value\n            if(currentSum\
    \ % 2 == 1l) currentSum\n            else currentSum\n        }\n        val totalOdd\
    \ = even.map(_.toDouble).sum\n        totalOdd + (sumOdd * 2.toDouble)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_mrd5lh.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        totalOdd + (sumOdd *\
    \ \e[31m2\e[0m.toDouble)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val r = mutable.ArrayBuffer.empty[Long]\n  \
    \      lst.foreach{ x =>\n            x match {\n                case 0 => ()\n\
    \                case _ if (x % 2 == 0) => r += x\n                case _ => ()\n\
    \            }\n        }\n        if(r.isEmpty) 0\n        else r.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyg1vo51.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var odd = 0\n        for\
    \ (i<- 0 until lst.size) {\n            if (i%2 == 0) even += lst(i).toLong\n\
    \            if (i%2 != 0) odd += lst(i).toLong\n        }\n        sum = even\
    \ + odd\n        return sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevi91l4m.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i%\e[31m2\e[0m == \e[31m0\e\
    [0m) even += lst(i).toLong\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: even\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpevi91l4m.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (i%\e[31m2\e[0m != \e[31m0\e\
    [0m) odd += lst(i).toLong\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevi91l4m.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        sum = even + odd\n\
    \e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              Not\
    \ found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var evenPos = 0;\n        var sum = 0;\n   \
    \     for (i <- 0 until lst.size) {\n            if (evenPos < 2) sum += lst(i);\n\
    \            else if (evenPos > 0) sum += (lst(i) % 2 == 0) ? 0 : lst(i);\n  \
    \          else evenPos = 1;\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplz820nja.scala:17:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (evenPos >\
    \ \e[31m0\e[0m) sum += (lst(i) % \e[31m2\e[0m == \e[31m0\e[0m) ? \e[31m0\e[0m\
    \ : lst(i);\n\e[31m\e[31m   |\e[0m                                           \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \     end of statement expected but '(' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplz820nja.scala:16:33 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (evenPos < \e[31m2\e[0m) sum += lst(i);\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplz820nja.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (evenPos >\
    \ \e[31m0\e[0m) sum += (lst(i) % \e[31m2\e[0m == \e[31m0\e[0m) ? \e[31m0\e[0m\
    \ : lst(i);\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplz820nja.scala:17:59\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (evenPos > \e[31m0\e[0m) sum += (lst(i) % \e[31m2\e[0m == \e\
    [31m0\e[0m) ? \e[31m0\e[0m : lst(i);\n\e[31m\e[31m   |\e[0m                  \
    \                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var even = 0l\n        var odd = 0l\n      \
    \  for(i <- 0 to (lst.length - 1)) {\n            val x = lst(i)\n           \
    \ val y = lst(i+1)\n            if(x % 2L == 0 && y % 2L == 0) {\n           \
    \     even = even + x\n            }\n            if(x % 2L == 0 && y % 2L !=\
    \ 0) {\n                odd = odd + x\n            }\n        }\n        even\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.solution$$anonfun$1(tmp4dsn7yit.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.solution(tmp4dsn7yit.scala:24)\n\
    \tat Problem$.main(tmp4dsn7yit.scala:28)\n\tat Problem.main(tmp4dsn7yit.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenList = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 to lst.length - 1) {\n            if (lst(i) % 2 == 0) {\n\
    \                evenList += lst(i)\n            }\n        }\n        evenList.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqpo0oqig.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        val evens = lst.filter(\
    \ i => i % 2 === 0)\n        val odds = lst.filter( i => i % 2 !== 0)\n      \
    \  for ((i, e) <- evens zip odds) {\n            if (i % 2 == 0) {\n         \
    \       sum += e\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfd43zypk.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = lst.filter(\
    \ \e[36mi\e[0m => i % \e[31m2\e[0m === \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     value === is not a member of Long - did you mean Long.==?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfd43zypk.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = lst.filter(\
    \ \e[36mi\e[0m => i % \e[31m2\e[0m !== \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value !== is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfd43zypk.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum += e\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenPositions = lst.filter(_ % 2 == 0)\n\
    \        val oddPositions = lst.filter(_ % 2 != 0)\n        val sumEvenEvenPositions\
    \ = evenPositions.sum\n        val sumOddEvenPositions = oddPositions.sum\n  \
    \      (sumEvenEvenPositions + sumOddEvenPositions)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gmwhvua.scala:20)\n\tat Problem.main(tmp_gmwhvua.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val res = lst.foldLeft((0l, List.empty[Long]))\
    \ {\n            (acc, l) =>\n                val i = acc._2 + 1\n           \
    \     if (i % 2 == 0)\n                    (acc._1 + l, acc._2 + i)\n        \
    \        else\n                    (acc._1 + l, acc._2)\n        }\n        res._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp244tfpab.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mi\e[0m = acc._2\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp244tfpab.scala:17:40 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                    (acc._1 + l, acc._2 + i)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter (x => x % 2 == 0)\n \
    \       val odds = lst.filter (x => x % 2 == 1)\n        odds zip evens map {case\
    \ (y,x) => x+y}.reduce(_+_)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpx64sar9x.scala:15:28 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odds zip evens map {\e[33mcase\e[0m (y,x) =>\
    \ x+y}.reduce(_+_)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter x$1 of expanded function:\n\e[31m   |\e\
    [0m   x$1 => \n\e[31m   |\e[0m     x$1\e[33m match \e[0m\n\e[31m   |\e[0m    \
    \   {\n\e[31m   |\e[0m         \e[33mcase \e[0m(y, x) => \n\e[31m   |\e[0m   \
    \        x + y\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx64sar9x.scala:15:42 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        odds zip evens map {\e[33mcase\e[0m (y,x) => x+y}.reduce(_+_)\n\e[31m\e\
    [31m   |\e[0m                                          ^\e[0m\n\e[31m   |\e[0m\
    \                                          Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var evens : List[Long] = Nil\n        var sum\
    \ : Long = 0\n        for(i <- 0 until lst.size)\n            if(i % 2 == 0)\n\
    \                evens = evens :+ lst(i)\n        for(i <- 0 until lst.size)\n\
    \            if(i % 2 != 0)\n                sum = sum + lst(i)\n        for(i\
    \ <- 0 until evens.size) {\n            sum = sum + evens(i)\n        }\n    \
    \    sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdw9l1dm.scala:27)\n\tat Problem.main(tmpzdw9l1dm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var result : Long = 0l\n        var isOdd :\
    \ Boolean = false\n        lst.foreach{\n          e => if(e % 2l.toLong == 0)\
    \ isOdd = true\n        }\n        if(isOdd && lst.length != 0) result = lst.reduce{\n\
    \          case (sum, current) => sum + current\n        }\n        return result\n\
    \      }\n}\n</code>\n<|/ a tags=scala,data-structures dscore=0 |>\n<| a tags=scala,data-structures\
    \ |>\n<code>\ndef solution(l: List[Long]): Long = {\n  val evenAndOdd = l.filter(_\
    \ % 2 == 0)\n  evenAndOdd.sum\n}\n\nsolution(List(1, 2, 3, 4, 5))\n// res1: Long\
    \ = 6\nsolution(List(1, 2, 3, 9, 5, 6, 4))\n// res2: Long = 10\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks, it helped a lot\n<|/ c |>\n<| a dscore=0 tags=scala,data-structures\
    \ |>\n<code>\ndef solution(l: List[Long]): Long = {\n  val odd = l.filter(_ %\
    \ 2 != 0)\n  val even = l.filter(_ % 2 == 0)\n  odd.length == 0 ? 0 : (odd.sum\
    \ +: even).sum\n}\n</code>\n<|/ a |>\n<| a tags=scala,data-structures |>\n<code>\n\
    scala> def solution(l: List[Long]): Long = {\n     |     val odd = l.filter(_\
    \ % 2 != 0)\n     |     val even = l.filter(_ % 2 == 0)\n     |     odd.length\
    \ == 0 ? 0 : (odd.sum +: even).sum\n     | }\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nWelcome to StackOverflow. While this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value. [How to Answer](https://stackoverflow.com/help/how-to-answer).\
    \ Kind Regards.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| c |>\nHow does this code differ from other\
    \ answers already given by others ?\n<|/ c |>\n<| c |>\nThis one works, and it's\
    \ very readable. No clunky var declarations. Also no \"if\" constructions. And\
    \ also no \"reduce\".\n<|/ c |>\n<|\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpbtk108w3.scala:24:0 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpbtk108w3.scala:33:0 ----------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0msolution(List(\e[31m1\e[0m, \e[31m2\e[0m, \e[31m3\e[0m, \e[31m4\e[0m,\
    \ \e[31m5\e[0m))\n\e[31m\e[31m   |\e[0m^^^^^^^^\e[0m\n\e[31m   |\e[0mIllegal start\
    \ of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbtk108w3.scala:47:41\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m47 |\e[0m  odd.length\
    \ == \e[31m0\e[0m ? \e[31m0\e[0m : (odd.sum \e[35m+:\e[0m \e[35meven\e[0m).sum\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but '.' found\n\
    \e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpbtk108w3.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpbtk108w3.scala:84:0 ----------------------------\e[0m\e[0m\n\e[31m84\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbtk108w3.scala:47:33 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m  odd.length == \e[31m0\e[0m ? \e[31m0\e[0m : (odd.sum\
    \ \e[35m+:\e[0m \e[35meven\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \               ^^\e[0m\n\e[31m   |\e[0m                                 Not found:\
    \ type +:\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtk108w3.scala:47:18\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m  odd.length == \e[31m0\e\
    [0m ? \e[31m0\e[0m : (odd.sum \e[35m+:\e[0m \e[35meven\e[0m).sum\n\e[3"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (lst(i) % 2 == 0) sum += lst(i)\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpio3stei8.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (lst(i) % \e[31m2\e[0m == \e\
    [31m0\e[0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m                             \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_ % 2 == 1)\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val res = even.foldLeft(0l) { (acc, x)\
    \ =>\n            acc + (if (x % 2 == 1) odd else 0)\n        }\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpuntggf1i.scala:16:16 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            acc + (\e[33mif\e[0m (x % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m) odd \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((odd : List[Long]) |\
    \ (\e[31m0\e[0m : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def evenPos(x : Long) : List[Long] = {\n   \
    \         if (x % 2 == 0) x.toList else Nil\n        }\n\n        def oddPos(x\
    \ : Long) : List[Long] = {\n            if (x % 2 != 0) x.toList else Nil\n  \
    \      }\n        val evenList = evenPos(lst(0).toLong).distinct\n        val\
    \ oddList = oddPos(lst(1).toLong).distinct\n        evenList.map { x => oddList.find(y\
    \ => y == x).map(_+x) }.reduceLeft((x,y)=>x+y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzwjfunl0.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e\
    [0m) x.toList \e[33melse\e[0m Nil\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toList is not a member\
    \ of Long - did you mean x.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzwjfunl0.scala:18:30\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m\
    \ (x % \e[31m2\e[0m != \e[31m0\e[0m) x.toList \e[33melse\e[0m Nil\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value toList is not a member of Long - did you mean x.toInt?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzwjfunl0.scala:22:84 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        evenList.map { \e[36mx\e[0m => oddList.find(\e\
    [36my\e[0m => y == x).map(_+x) }.reduceLeft((\e[36mx\e[0m,\e[36my\e[0m)=>x+y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Option[Long], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        var evenPos : List[Long]\
    \ = Nil\n        for (i <- 0 until lst.size) {\n            if (i%2 == 0) {\n\
    \                sum += lst(i)\n                evenPos ::= i\n            }\n\
    \        }\n        val sum = evenPos.sum\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6ntktjzn.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenPos.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is\
    \ already defined as \e[33mvariable\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.size % 2 == 0) {\n            return\
    \ lst(lst.size / 2)\n        }\n        val evens = lst.filter(x => x % 2 == 0).reverse\n\
    \        var sum = 0\n        for (i<- evens.indices) {\n            sum += evens(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0rreqf0m.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += evens(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var evenIndex = 0\n   \
    \     var oddIndex = 1\n        for (e <- lst) {\n            if (e % 2 == 0)\
    \ {\n                sum += lst(evenIndex)\n                evenIndex += 2\n \
    \           } else {\n                sum += lst(oddIndex)\n                oddIndex\
    \ += 2\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1mgnyxj2.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                sum += lst(evenIndex)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp1mgnyxj2.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                sum += lst(oddIndex)\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_ % 2 != 0).map(_ / 2)\n\
    \        val even = lst.filter(_ % 2 == 0).map(_ / 2)\n        (odd.sum + even.sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9gfh_5g3.scala:18)\n\tat Problem.main(tmp9gfh_5g3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(x => x % 2 == 0)\n   \
    \     val odd = lst.filter(x => x % 2 != 0)\n        odd.sumBy(x => even.count(y\
    \ => x == y))\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbcwaw_n.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odd.sumBy(\e[36mx\e[0m => even.count(\e[36my\e\
    [0m => x == y))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \       value sumBy is not a member of List[Long] - did you mean odd.sum?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 2 == 0) sum += lst(i)\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsf8kr8pe.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m                            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if(lst.length < 2) 0\n        else lst.find(_\
    \ % 2 != 0).map(lst.indexOf(_)).getOrElse(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnco_oy9h.scala:17)\n\tat Problem.main(tmpnco_oy9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Sort the list, then check if its even index\n\
    \        val odd = lst.sortBy(_ % 2 == 0)\n        // The index of odd is even\
    \ - 1, the index of even is even + 1\n        val even = lst.sortBy(_ % 2 == 1).zip(lst.sortBy(_\
    \ % 2 == 0).drop(1))\n\n        // Sum the odd index\n        odd.zipWithIndex.filter(_._2._1\
    \ % 2 == 1).map(_._1).sum\n        // Sum the even index\n        even.zipWithIndex.filter(_._2._1\
    \ % 2 == 0).map(_._1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3e5koln2.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        odd.zipWithIndex.filter(_._2._1 % \e[31m2\e[0m\
    \ == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ _1 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3e5koln2.scala:21:38\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        even.zipWithIndex.filter(_._2._1\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            value _1 is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmp3e5koln2.scala:21:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ even.zipWithIndex.filter(_._2._1 % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m          No implicit Ordering defined for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a type variable with\
    \ constraint >: (Long, Long)\n\e[31m   |\e[0m          .\n3 errors found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      var odds = lst.filter(x => x % 2 == 1).toList\n\
    \      var evens = lst.filter(x => x % 2 == 0).toList\n      \n      odds :::\
    \ evens.reverse.foldLeft(0L) {\n        (_ + _ % _)\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd7ph43xs.scala:17:9 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (_ + _ % _)\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Wrong number of parameters, expected: 2\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val map = new collection.mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => map.put(x, map.getOrElse(x, 0)+1))\n      \
    \  map.filter(_._2 % 2 == 1).foldLeft(0L)(_ + _._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjnk2lrb.scala:18)\n\tat Problem.main(tmpjjnk2lrb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def isOdd(i : Long) : Boolean = {\n        \
    \    ((i % 2) == 1)\n        }\n        def calcOddEven(i: Long) : Long = {\n\
    \            val oddSum = sumOdd(i, lst)\n            val evenSum = sumEven(i,\
    \ lst)\n            (oddSum + evenSum)\n        }\n        def sumEven(i: Long,\
    \ lst: List[Long]) : Long = {\n            var sum = 0\n            lst.foreach(e\
    \ => {\n                sum = (sum + e)\n            })\n            var evenSum\
    \ = sum\n            val lstCopy = lst.toList\n            lstCopy.foreach(e =>\
    \ {\n                if ((e % 2) == 0) {\n                    evenSum = (evenSum\
    \ + e)\n                }\n            })\n            sum\n        }\n      \
    \  def sumOdd(i: Long, lst: List[Long]) : Long = {\n            var sum = 0\n\
    \            lst.foreach(e => {\n                sum = (sum + e)\n           \
    \ })\n            var oddSum = sum\n            val lstCopy = lst.toList\n   \
    \         lstCopy.foreach(e => {\n                if (isOdd(e)) {\n          \
    \          oddSum = (oddSum + e)\n                }\n            })\n        \
    \    sum\n        }\n        lst.filter(_ % 2 != 0).foldLeft(0)(calcOddEven)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebzb3254.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                sum = (sum +\
    \ e)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebzb3254.scala:30:31\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    evenSum =\
    \ (evenSum + e)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpebzb3254.scala:38:23 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                sum = (sum + e)\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpebzb3254.scala:44:30 --------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                    oddSum = (oddSum + e)\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpebzb3254.scala:49:43 --------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m        lst.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).foldLeft(\e[31m0\e\
    [0m)(calcOddEven)\n\e[31m\e[31m   |\e[0m                                     \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ Found:    Long => AnyVal\n\e[31m   |\e[0m                                  \
    \    Required: \e[1m\e[32m(\e[0m\e[1m\e[3"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def odd(x : Long) : Boolean = x%2 != 0\n   \
    \     def evenPos(x : Long) : Boolean = x%2 == 0\n        val odd = lst.filter(odd).zipWithIndex.filter(x\
    \ => evenPos(x._2))\n        lst.map(_+odd.sum).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9xvknopi.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = lst.filter(odd).zipWithIndex.filter(\e\
    [36mx\e[0m => evenPos(x._2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mmethod\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9xvknopi.scala:16:22 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        lst.map(_+odd.sum).sum\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value sum is not a member of Long => Boolean\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.filter(x => x % 2 == 1).foldLeft(0l) { (acc,\
    \ i) => acc + i }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf05d5w4l.scala:16)\n\tat Problem.main(tmpf05d5w4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 0) {\n                result\
    \ += x\n            }\n        })\n        result.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzyhskd46.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val sum = lst(0)\n        for(i <- 0 until lst.size-1)\
    \ {\n            val ev = lst(i)\n            val dod = (ev.toInt - sum.toInt)\
    \ / 2\n            sum += if (ev.even) dod else dod\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9embuvxt.scala:17:19 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += \e[33mif\e[0m (ev.even) dod \e[33melse\e\
    [0m dod\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m    \
    \               expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9embuvxt.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += \e[33mif\e[0m (ev.even) dod \e[33melse\e\
    [0m dod\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value += is not a member of Long - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        for( e <- lst ) if( e % 2 == 0 ) result += e\n        result.toList.reduce((_\
    \ + _))\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqsxfntu1.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val m = mutable.HashMap.empty[Long, Long]\n\
    \        lst.foreach{ x => \n            m(x%2l.toLong) += x\n        }\n    \
    \    m.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7oza3l2.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenPos = 0\n        val oddPos = -1\n \
    \       val evenVal = 0\n        val oddVal = 0\n        val nElem = lst.size\n\
    \        if (nElem == 0) 0\n        else {\n            val even = lst.filter(x\
    \ => x == evenPos)\n            val odd = lst.filter(x => x == oddPos)\n     \
    \       val evenSum = even.sum\n            val oddSum = odd.sum\n           \
    \ evenSum + (oddSum % 2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gkhvqgm.scala:28)\n\tat Problem.main(tmp4gkhvqgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenOddList = lst.filter(x => x % 2 == 0).map(x\
    \ => x -> 1)\n        val listWithOddEven = evenOddList.groupBy(x => x._1)\n \
    \       val sums = listWithOddEven.map{ case (x, y) =>\n            val y = y.toList\n\
    \            if (y.length == 0) 0 else y.reverse.foldLeft(0){ case (a, b) => a\
    \ + b }\n        }\n        sums.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj79_28zx.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = y.toList\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35my\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val oddEven = mutable.ListBuffer[Long]()\n \
    \       for (i <- 0 until lst.size) {\n            if (i % 2 == 1) {\n       \
    \         oddEven.append(lst(i))\n            }\n        }\n        oddEven.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpees06q3z.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      val even = lst.filter(_ % 2 == 0)\n      val odd\
    \ = lst.filter(_ % 2 == 1)\n      even.zip(odd).map {\n        case (_ + _, even)\
    \ => even\n      }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao_6ln0f.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mcase\e[0m (_ + _, even) => even\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(a <- lst) {\n     \
    \       if(a.toInt % 2 == 1) sum += a\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7t4uipj.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(a.toInt % \e[31m2\e[0m == \e\
    [31m1\e[0m) sum += a\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var oddSum = 0\n        lst.foreach(i => if(i%2\
    \ == 1) oddSum = oddSum + i)\n        oddSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflxusgew.scala:14:47\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(\e[36mi\e\
    [0m => \e[33mif\e[0m(i%\e[31m2\e[0m == \e[31m1\e[0m) oddSum = oddSum + i)\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Long\n\
    \e[31m   |\e[0m                                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenPos =  lst.filter(_ % 2 == 0).map(_\
    \ / 2)\n        val oddPos = lst.filter(_ % 2 == 1).map(_ / 2)\n        val res\
    \ = evenPos.foldLeft(oddPos.sum)((res, pos) =>\n            (res + pos * pos))\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4p7_slg.scala:20)\n\tat Problem.main(tmpu4p7_slg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val (odd, even) = lst.splitAt(lst.length / 2)\n\
    \        val odd_sum = odd.map(i => if (i % 2 == 1) i else 0)\n        val even_sum\
    \ = even.map(i => if (i % 2 == 1) i else 0)\n        odd_sum.sum + even_sum.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpamow8bkz.scala:19)\n\tat Problem.main(tmpamow8bkz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.takeWhile( _.isOdd ).reverse\n\
    \        val even = lst.dropWhile( _.isEven )\n        even.foldLeft(0) { case\
    \ (sum, num) => sum + (num % 2) }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkdlder2.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = lst.takeWhile(\
    \ _.isOdd ).reverse\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isOdd is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprkdlder2.scala:14:36\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = lst.dropWhile( _.isEven )\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \         value isEven is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprkdlder2.scala:15:46 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        even.foldLeft(\e[31m0\e[0m) { \e[33mcase\e[0m (sum, num) => sum\
    \ + (num % \e[31m2\e[0m) }\n\e[31m\e[31m   |\e[0m                            \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      val evens = lst.filter(num => num % 2 == 0L)\n\
    \      val odds = lst.filter(num => num % 2 != 0L)\n      val result = 0L\n  \
    \    for (i <- 0 until evens.size) {\n        result += odds(i) * 2L\n      }\n\
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_d3b0v8_.scala:17:15 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        result += odds(i) * \e[31m2L\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member\
    \ of Long - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      val odd = lst.filter(odd => odd % 2 != 0)\n  \
    \    val even = lst.filter(even => even % 2 == 0)\n      val res = even.zip(odd).map(n\
    \ => n._1 + n._2).sum\n      res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi52c05y_.scala:19)\n\tat Problem.main(tmpi52c05y_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) {\n            case (acc, _)\
    \ => (acc + lst(acc) & 1l)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspvhwuq9.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m (acc,\
    \ _) => (acc + lst(acc) & \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \               Found:    (acc : Long)\n\e[31m   |\e[0m                      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l)((acc, curr) => acc + ((curr.toInt)\
    \ mod 2 != 0 ? curr.toLong : 0l))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntq_yxa_.scala:13:60 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.foldLeft(\e[31m0l\e[0m)((\e[36macc\e[0m,\
    \ \e[36mcurr\e[0m) => acc + ((curr.toInt) mod \e[31m2\e[0m != \e[31m0\e[0m ? curr.toLong\
    \ : \e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of\
    \ Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpntq_yxa_.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.foldLeft(\e[31m0l\e[0m)((\e[36macc\e[0m,\
    \ \e[36mcurr\e[0m) => acc + ((curr.toInt) mod \e[31m2\e[0m != \e[31m0\e[0m ? curr.toLong\
    \ : \e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                                  ^^^\e[0m\n\e[31m   |\e[0m                 \
    \                         value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val map = lst.groupBy(_.toInt)\n        val\
    \ res = map.values.flatMap { x => \n            (x.filter(_.toInt % 2 != 0).toList\
    \ :+ x.sum)\n        }.sum\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppyaor8w.scala:20)\n\tat Problem.main(tmpppyaor8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(_%2==0)\n        val\
    \ sum = evens.sum\n        val odds = lst.filter(_%2==1)\n        val totalOdds\
    \ = odds.reduce(_+_)\n        sum + totalOdds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqt9dcz4i.scala:20)\n\tat Problem.main(tmpqt9dcz4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your code in Scala 2.13.2 with optimizations\
    \ enabled. \n        val arr = lst.map(_ % 2 == 0).zipWithIndex\n        val sum\
    \ = arr.foldLeft(0l)(\n            (sum, el) => (sum + el._1)\n        )\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmprnv7trmv.scala:16:30 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36msum\e[0m, \e[36mel\e[0m) => (sum +\
    \ el._1)\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m  \
    \ |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String):\
    \ String\n\e[31m   |\e[0mmatch arguments ((el._1 : => Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.map(x => (x % 2 == 1 ? x : 0)).sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkwyi87p4.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.map(\e[36mx\e[0m => (x % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m ? x : \e[31m0\e[0m)).sum\n\e[31m\e[31m   |\e[0m               \
    \                ^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def odd(lst: List[Long], index: Int) : List[Long]\
    \ = {\n            if (lst(index) % 2 == 0) odd(lst, (index + 1)) else lst\n \
    \       }\n        odd(lst, 0) match {\n            case List() => 0\n       \
    \     case l1 :: l2 :: Nil => l1.toLong + l2.toLong\n            case l1 :: l2\
    \ :: l3 :: Nil => l1.toLong + l2.toLong + l3.toLong\n            case l1 :: l2\
    \ :: l3 :: l4 :: Nil => l1.toLong + l2.toLong + l3.toLong + l4.toLong\n      \
    \      case l1 :: l2 :: l3 :: l4 :: l5 :: Nil => l1.toLong + l2.toLong + l3.toLong\
    \ + l4.toLong + l5.toLong\n            case l1 :: l2 :: l3 :: l4 :: l5 :: l6 ::\
    \ Nil => l1.toLong + l2.toLong + l3.toLong + l4.toLong + l5.toLong + l6.toLong\n\
    \            case l1 :: l2 :: l3 :: l4 :: l5 :: l6 :: l7 :: Nil => l1.toLong +\
    \ l2.toLong + l3.toLong + l4.toLong + l5.toLong + l6.toLong + l7.toLong\n    \
    \        case l1 :: l2 :: l3 :: l4 :: l5 :: l6 :: l7 :: l8 :: Nil => l1.toLong\
    \ + l2.toLong + l3.toLong + l4.toLong + l5.toLong + l6.toLong + l7.toLong + l8.toLong\n\
    \            case l1 :: l2 :: l3 :: l4 :: l5 :: l6 :: l7 :: l8 :: l9 :: Nil =>\
    \ l1.toLong + l2.toLong + l3.toLong + l4.toLong + l5.toLong + l6.toLong + l7.toLong\
    \ + l8.toLong + l9.toLong\n            case l1 :: l2 :: l3 :: l4 :: l5 :: l6 ::\
    \ l7 :: l8 :: l9 :: l10 :: Nil => l1.toLong + l2.toLong + l3.toLong + l4.toLong\
    \ + l5.toLong + l6.toLong + l7.toLong + l8.toLong + l9.toLong + l10.to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzmmve4b.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpnzmmve4b.scala:26:197\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m\
    \ l1 :: l2 :: l3 :: l4 :: l5 :: l6 :: l7 :: l8 :: l9 :: l10 :: Nil => l1.toLong\
    \ + l2.toLong + l3.toLong + l4.toLong + l5.toLong + l6.toLong + l7.toLong + l8.toLong\
    \ + l9.toLong + l10.to\n\e[31m\e[31m   |\e[0m                                \
    \                                                                            \
    \                                                                            \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mto\e[0m in \e[33mtrait\e[0m \e[35mIntegralProxy\e\
    [0m with types\n\e[31m   |\e[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnzmmve4b.scala:38:1 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpnzmmve4b.scala:28:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m28 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) { (acc, curr) => acc + (if\
    \ (curr%2==1) curr%2 else 0)  }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0mcubnc.scala:16)\n\tat Problem.main(tmpu0mcubnc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val counts = lst.map(x => x % 2 == 0).count(x\
    \ => x != 0).toList\n        val sum = (0 until lst.length).filter(x => x % 2\
    \ == 0).map(x => x % 2).sum\n        sum + counts(lst.indexOf(0)) * lst(0) / (2\
    \ * lst.length)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu9pgn1q0.scala:13:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = lst.map(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).count(\e[36mx\e[0m => x != \e\
    [31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m                                    \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Boolean\
    \ and Int cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val lst2 = lst.sortWith(_.isLessThan(_))\n \
    \       val evens = lst2.filter(_.isEven)\n        evens.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwri41t0.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlst2\e[0m = lst.sortWith(_.isLessThan(_))\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value isLessThan is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwri41t0.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = lst2.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isEven is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val list = lst.filter(_ % 2 == 0).toList\n \
    \       if (list.isEmpty) 0\n        else list.head + list.filter(_ % 2 == 1).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprv8s_29p.scala:18)\n\tat Problem.main(tmprv8s_29p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter { i => i % 2 == 0 }\n\
    \        val odds = lst.filter { i => i % 2 != 0 }\n        var sum = 0\n    \
    \    for (i <- evens.indices) {\n            sum += evens(i)\n        }\n    \
    \    for (i <- odds.indices) {\n            sum += odds(i)\n        }\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmperaw58bu.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += evens(i)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmperaw58bu.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum += odds(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = mutable.HashSet[Long]()\n        lst.map(x\
    \ => if (x%2 == 1) odd.add(x) else 0)\n        lst.filter(x => x%2 == 1).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgc2z2ww2.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) {\n          case (sum, cur)\
    \ => sum + cur % 2 match {\n            case 0 => cur\n            case 1 => cur\n\
    \            case _ => 0l\n          }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfvjk1y3_.scala:22)\n\tat Problem.main(tmpfvjk1y3_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.size <= 0) 0\n        else (lst.filter(_.toInt\
    \ % 2 == 0l).sum) + solution(lst.filter(_.toInt % 2 != 0l))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\
    \tat scala.math.Numeric$LongIsIntegral$.fromInt(Numeric.scala:139)\n\tat scala.math.Numeric.zero(Numeric.scala:218)\n\
    \tat scala.math.Numeric.zero$(Numeric.scala:218)\n\tat scala.math.Numeric$LongIsIntegral$.zero(Numeric.scala:139)\n\
    \tat scala.collection.IterableOnceOps.sum(IterableOnce.scala:889)\n\tat scala.collection.IterableOnceOps.sum$(IterableOnce.scala:889)\n\
    \tat scala.collection.AbstractIterable.sum(Iterable.scala:926)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.solution(tmpe_dhwn35.scala:14)\n\
    \tat Problem$.solution(tmpe_dhwn35.scala:14)\n\tat Problem$.sol"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = mutable.ArrayBuffer(0L)\n      \
    \  for (i <- 0 to (lst.size - 1)) if (lst(i) % 2L == 0L) {\n            evens\
    \ += lst(i)\n        }\n        evens.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcy_glzm.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer(\e\
    [31m0L\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var evenCount = 0\n        var oddCount = 0\n\
    \        for (elem <- lst) {\n            if (elem % 2 == 0) {\n             \
    \   evenCount += 1\n            }\n            else {\n                oddCount\
    \ += 1\n            }\n        }\n        return evenCount + oddCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulel88d4.scala:26)\n\tat Problem.main(tmpulel88d4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        // TODO: Write your logic\
    \ here\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnggt4xjf.scala:18)\n\tat Problem.main(tmpnggt4xjf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenIndexes = lst.zipWithIndex.filter(_._2%2\
    \ == 0).toList\n        var sum = 0L\n        for(i <- evenIndexes) {\n      \
    \      sum += lst(i._1)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp50aw3eu_.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += lst(i._1)\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50aw3eu_.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += lst(i._1)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                Found:    Long\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.isEmpty) {\n            return 0\n \
    \       }\n        var sum = 0\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        var evens = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until\
    \ lst.size) {\n            if (i % 2 == 0) {\n                evens += lst(i)\n\
    \            } else {\n                odds += lst(i)\n            }\n       \
    \ }\n        for (x <- odds ) {\n            sum += x\n        }\n        for\
    \ (x <- evens ) {\n            sum += x\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyii860op.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyii860op.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(_ % 2 == 0).toList\n\
    \        val odd = lst.filter(_ % 2 == 1).toList\n        odd.foldLeft(0)((acc,\
    \ x) => acc + (x+evens.indexOf(x)).longValue)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0a_fpmxa.scala:15:36\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        odd.foldLeft(\e[31m0\e\
    [0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + (x+evens.indexOf(x)).longValue)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    Long\n\e[31m\
    \   |\e[0m                                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0)((acc, elem) => {\n         \
    \   acc + (if (elem % 2 == 0) elem else 0)\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7zfvrk6l.scala:14:12\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            acc + (\e[33mif\e\
    [0m (elem % \e[31m2\e[0m == \e[31m0\e[0m) elem \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_%2 == 0l)\n        val\
    \ even = lst.filter(_%2 == 1l)\n        odd.sum + even.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp894ixu0n.scala:18)\n\tat Problem.main(tmp894ixu0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var oddSum = 0\n        var evenSum = 0\n  \
    \      var evenNum = lst(0)\n        lst.drop(1).foreach { x =>\n            if\
    \ (x.toLong % 2 == 0) {\n                evenNum = x\n                evenSum\
    \ += evenNum\n            }\n            else\n                oddSum += x\n \
    \       }\n        evenSum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3km9mnzz.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                evenSum += evenNum\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3km9mnzz.scala:22:23 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                oddSum += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.takeWhile(_%2 == 0).sorted\n\
    \        val odd = lst.takeWhile(_%2 != 0).sorted\n        val res = even.takeWhile(_%2\
    \ == 1).sum - odd.sum\n        val evenEven = (even.takeWhile(_%2 == 0).sum +\
    \ even.takeWhile(_%2 != 0).sum) / 2\n        val evenOdd = (even.takeWhile(_%2\
    \ == 1).sum + odd.takeWhile(_%2 != 1).sum) / 2\n        val oddEven = (odd.takeWhile(_%2\
    \ != 0).sum + odd.takeWhile(_%2 == 0).sum) / 2\n        val oddOdd = (odd.takeWhile(_%2\
    \ == 1).sum + odd.takeWhile(_%2 != 1).sum) / 2\n        val evenOddEven = evenEven\
    \ * 2\n        val evenOddOdd = oddOdd * 2\n        val oddEvenOdd = evenOdd *\
    \ 2\n        val evenOddEvenOdd = oddEvenOdd * 2\n        val evenOddEvenOddEven\
    \ = evenOddEvenOdd * 2\n        val oddEvenOddEvenOdd = evenOddEvenOdd * 2\n \
    \       val evenOddEvenOddEvenOdd = oddEvenOddEvenOdd * 2\n        val evenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOddEven * 2\n        val oddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddOdd\
    \ * 2\n        val evenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEven\
    \ * 2\n        val evenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddOdd\
    \ * 2\n        val oddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddOdd\
    \ * 2\n        val evenOddEvenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEvenOddOdd\
    \ * 2\n        val evenOddEvenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddEvenOddOddEven\
    \ * 2\n        val oddEvenOddEvenOddEvenOddEvenOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplju1znga.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplju1znga.scala:27:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddEvenOddEven\e[0m = evenOddEvenOddEvenOddEven * \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplju1znga.scala:28:39\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36moddEvenOddEvenOddEvenOdd\e[0m = evenOddEvenOddEvenOddOdd * \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: evenOddEvenOddEvenOddOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplju1znga.scala:29:43\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOddEvenOddEvenOddEvenOdd\e[0m = oddEvenOddEvenOddEvenOddEven * \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: oddEvenOddEvenOddEvenOddEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplju1znga.scala:30:47\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOddEvenOddEvenOddEvenOddEven\e[0m = evenOddEvenOddEvenOddEvenOddOdd *\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              Not found: evenOddEvenOddEvenOddEvenOddOdd\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longe"
  stdout: ''
  timestamp: 1660009664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) {\n            (sum, i) =>\
    \ if (i%2 == 0) sum + i else sum\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp213m8zvd.scala:18)\n\tat Problem.main(tmp213m8zvd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009668
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.length == 0 || lst.head == 0)\n    \
    \        return 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        even.foldLeft(0L) {\n            (acc, x)\
    \ => acc + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp004asopb.scala:22)\n\tat Problem.main(tmp004asopb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_ % 2 != 0).toSet\n   \
    \     val even = lst.filter(_ % 2 == 0).toSet\n        odd ++ even.map(x => x\
    \ + lst(x)).sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6yfb5rb.scala:15:37\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        odd ++ even.map(\e[36mx\e\
    [0m => x + lst(x)).sum\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                     Found:    (x\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpz6yfb5rb.scala:15:12 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odd ++ even.map(\e[36mx\e[0m => x + lst(x)).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m++\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e\
    [0m with types\n\e[31m   |\e[0m [B >: Long](suffix: IterableOnce[B]): Set[B]\n\
    \e[31m   |\e[0m (that: IterableOnce[Long]): Set[Long]\n\e[31m   |\e[0mmatch arguments\
    \ (Long)\n2 errors found\n"
  stdout: ''
  timestamp: 1660009668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        // The first element is\
    \ a special case\n        if(lst.head % 2 == 0){\n            sum = lst.head *\
    \ 2\n            lst.drop(1)\n        }else{\n            sum = lst.head\n   \
    \         lst.drop(1)\n        }\n        lst.foreach{x => sum += x}\n       \
    \ return sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpco2o6g58.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum = lst.head *\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpco2o6g58.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sum = lst.head\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpco2o6g58.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lst.foreach{\e[36mx\e[0m => sum += x}\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def loop(remaining : List[Long], acc : Long):\
    \ Long = {\n            val odds = remaining.filter(elem => elem % 2 != 0)\n \
    \           acc + (odds.sum + odds.size)\n        }\n\n        if (lst.size <\
    \ 2) 0\n        else loop(lst.tail, loop(lst.tail, 0L))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoib67a26.scala:22)\n\tat Problem.main(tmpoib67a26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Step 1. Create a List containing all the\
    \ even numbers in lst\n        // Step 2. Create an empty mutable set to hold\
    \ the odd numbers\n        // Step 3. For each element in the list, check if it\
    \ is odd or not. If it is odd, add it to the set\n        // Step 4. For the values\
    \ in the set, get the sum and return it\n        val evens : List[Long] = lst.filter(x\
    \ => x.isMultiple(2L)).toList\n        val odds  : mutable.Set[Long] = mutable.Set[Long]()\n\
    \        lst.foreach { x => if (x.isMultiple(2L)) odds += x }\n        odds.foreach\
    \ { x => odds += x }\n        odds.toList.map(x => x + evens.sum).toSet.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2px42bvd.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = lst.filter(\e[36mx\e[0m => x.isMultiple(\e[31m2L\e[0m)).toList\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isMultiple is not a\
    \ member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2px42bvd.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m  : mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2px42bvd.scala:18:40 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m  : mutable.Set[\e[35mLong\e[0m] = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2px42bvd.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst.foreach { \e\
    [36mx\e[0m => \e[33mif\e[0m (x.isMultiple(\e[31m2L\e[0m)) odds += x }\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value isMultiple is not a member of Long\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var max = 0l\n        var evenCount = 0\n  \
    \      var oddCount = 0\n        for( i <- 0 until lst.size ) {\n            if(\
    \ lst(i) %2 == 0 )\n                evenCount += 1\n            else\n       \
    \         oddCount += 1\n        }\n\n        for(i <- 0 until evenCount) {\n\
    \            if( lst(i) %2 == 1 ) {\n                max += lst(i)\n         \
    \   }\n        }\n\n        if( oddCount == 0 ) {\n            return 0\n    \
    \    }\n        else if(evenCount < oddCount) {\n            for( i <- 0 until\
    \ oddCount ) {\n                max += lst(i)\n            }\n        }\n    \
    \    return max\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2iz7986w.scala:40)\n\tat Problem.main(tmp2iz7986w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var even = 0\n        var\
    \ odd = 0\n        lst.foreach{el =>\n            if(el & 1 == 0)\n          \
    \      even += el\n            else\n                odd += el\n        }\n  \
    \      sum = even + odd\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpuzjkax52.scala:17:18 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(el & \e[31m1\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m&\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((\e[31mfalse\e\
    [0m : Boolean))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuzjkax52.scala:18:21\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                even += el\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuzjkax52.scala:20:20 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                odd += el\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def checkEven(x: Long, sum : Long) : Long =\
    \ {\n            if (x % 2 != 0) sum\n            else checkEven(x + 2, sum +\
    \ x)\n        }\n        checkEven(lst.last, lst.last)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69o69ilu.scala:20)\n\tat Problem.main(tmp69o69ilu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        var evenCount = 0\n  \
    \      var odd = 1L\n        for (i <- 0 until lst.size) {\n            if (evenCount\
    \ % 2 == 0) {\n                sum += lst(i)\n            }\n            evenCount\
    \ += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsl58h7l.scala:27)\n\tat Problem.main(tmpfsl58h7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val nums = lst.iterator.toList\n        var\
    \ sum = 0\n        var lastOdd = 0\n        var lastEven = 0\n\n        for (x\
    \ <- nums) {\n            if (x % 2 == 0) {\n                lastEven = x\n  \
    \          } else {\n                sum += lastOdd * lastEven\n             \
    \   lastEven = 0\n                lastOdd = x\n            }\n        }\n\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ree6aj1.scala:20:27\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                lastEven = x\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (x : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ree6aj1.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lastOdd = x\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var count = 0\n        var sum = 0\n       \
    \ for (i <- 0 until lst.size){\n            if (lst.apply(i).toInt == 1){\n  \
    \              count += 1\n            }\n            if (lst.apply(i).toInt ==\
    \ 0){\n                sum += 1\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3d93fk2c.scala:26)\n\tat Problem.main(tmp3d93fk2c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val result = lst.foldLeft(0l) { (result, element)\
    \ =>\n            if (element % 2 == 0) result + element else result\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3oe42nm6.scala:19)\n\tat Problem.main(tmp3oe42nm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var total = 0L\n        lst.foreach(i => {\n\
    \            if (i % 2 == 0) total += i\n        })\n        total\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_zsqulg.scala:20)\n\tat Problem.main(tmpa_zsqulg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evens = lst.filter(_ % 2 == 0)\n        val odd = odds.reduceLeft(_ + _)\n \
    \       evens.foldLeft(odd)((a, b) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp726gvaui.scala:19)\n\tat Problem.main(tmp726gvaui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = lst.head._2\n        for(i <- 0 until\
    \ lst.size-1) {\n            if (lst(i)._2 < lst(i + 1)._2) {\n              \
    \  sum = lst(i)._2 + sum\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphf5p3199.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36msum\e[0m = lst.head._2\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphf5p3199.scala:15:23 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            \e[33mif\e[0m (lst(i)._2 < lst(i + \e[31m1\e[0m)._2) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphf5p3199.scala:16:29 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                sum = lst(i)._2 + sum\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value _2 is not\
    \ a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var evenSum = 0\n        val evenPos = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 0) evenPos += x\n      \
    \      else evenSum += x\n        })\n        evenSum += evenPos.last\n      \
    \  return evenSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7xh0kxxn.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenPos\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7xh0kxxn.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m evenSum += x\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter { _ % 2 == 0 }\n     \
    \   val odd = lst.filter { _ % 2 != 0 }\n        odd.map(_.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp25j_kg_9.scala:18)\n\tat Problem.main(tmp25j_kg_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var odd = mutable.Buffer.empty[Long]()\n   \
    \     for (i <- 0 until lst.size)\n            if (i % 2 == 0)\n             \
    \   odd = odd.updated(i, lst(i))\n        lst.size match {\n            case 0\
    \ => (0l /: odd)(_ + _)\n            case _ => (lst.size /: odd)(_ + _)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkm1pb04u.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36modd\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def helper(lst: List[Long], start: Long): Long\
    \ = {\n            if (lst.isEmpty) return 0\n            if (lst.head % 2 ==\
    \ 0) helper(lst.tail, start + 1) else helper(lst.tail, start)\n        }\n   \
    \     helper(lst, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdq_efad3.scala:20)\n\tat Problem.main(tmpdq_efad3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var oddEvenSum = 0\n        var evenOddSum =\
    \ 0\n\n        lst.foreach { i =>\n            if (i % 2 != 0) {\n           \
    \     oddEvenSum += i\n            } else {\n                evenOddSum += i\n\
    \            }\n        }\n        oddEvenSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmif75of.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                oddEvenSum += i\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbmif75of.scala:20:27 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                evenOddSum += i\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(x => x % 2 == 0)\n   \
    \     val odd = lst.filter(x => x % 2 != 0)\n        even.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg2f3bg3b.scala:18)\n\tat Problem.main(tmpg2f3bg3b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(x => x % 2 == 0)\n   \
    \     val odd = lst.filter(x => x % 2 != 0)\n        odd.map(x => x * 2 + even.indexOf(x)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfp3fg5vf.scala:18)\n\tat Problem.main(tmpfp3fg5vf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val total = 0L\n        for (i <- lst.indices)\
    \ {\n            if (lst.apply(i) % 2 == 0) {\n                total += lst.apply(i)\n\
    \            }\n        }\n        return total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq4va0bh9.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                total += lst.apply(i)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Long - did you mean total.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if(lst.isEmpty) return 0\n\n        var evenSum\
    \ = 0l\n        var oddSum = 0l\n        var evenPosition = 0\n        var oddPosition\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(even(lst(i))) evenSum\
    \ += lst(i)\n            if(odd(lst(i))) oddSum += lst(i)\n            evenPosition\
    \ += 1\n            oddPosition += 1\n            if(evenPosition == oddPosition)\
    \ evenPosition = 0\n        }\n        return evenSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulxevqul.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(even(lst(i))) evenSum += lst(i)\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Not\
    \ found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulxevqul.scala:21:15\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(odd(lst(i)))\
    \ oddSum += lst(i)\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e\
    [0m               Not found: odd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val result = mutable.Map[Long, Long]()\n   \
    \     val odd = mutable.ListBuffer[Long]()\n        lst.foreach {\n        case\
    \ i: Long if i % 2 != 0 => result += (i -> i.toLong)\n        case i: Long if\
    \ i % 2 == 0 => odd.append(i)\n        }\n        val even = result - odd\n  \
    \      odd.foreach {\n        case i: Long if even.get(i.toLong) == None => result\
    \ += (i -> i.toLong)\n        }\n        result.reduceLeftOption(_ + _).getOrElse(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxhlyr5z.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxhlyr5z.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val (even, odd) = lst.partition (_ % 2 == 0L)\n\
    \        even.sum + odd.sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpll0xismt.scala:17)\n\tat Problem.main(tmpll0xismt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        lst.foreach{ i =>\n   \
    \         if(((i%2l).toLong).equals(0l)){\n                sum = sum + i.toLong\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjqs3pplq.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                sum = sum + i.toLong\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      var evenOddSum = 0\n      var even = 0\n     \
    \ var odd = 0\n      for(i <- 0 until lst.size) {\n        if(lst(i) % 2 == 0)\
    \ {\n          even += lst(i)\n        } else {\n          odd += lst(i)\n   \
    \     }\n      }\n      evenOddSum = even + odd\n      return evenOddSum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5g3lv31p.scala:18:15 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          even += lst(i)\n\e[31m\e[31m   |\e[0m     \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5g3lv31p.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m          odd += lst(i)\n\
    \e[31m\e[31m   |\e[0m          ^^^^^^\e[0m\n\e[31m   |\e[0m          value +=\
    \ is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter { x => x.toInt%2==0}\n\
    \        val odds = lst.filter { x => x.toInt%2!=0}\n        val res = evens.reduceLeft(_+_)\n\
    \        lst.filterNot(x => x==res).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qx4oew1.scala:19)\n\tat Problem.main(tmp2qx4oew1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter( _ % 2 == 0 ).foldLeft(0L)(_\
    \ + _)\n        even * (lst.filter( _ % 2 == 1 ).size % 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7q2doyj.scala:17)\n\tat Problem.main(tmpv7q2doyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(_%2==0).map(x => x%2==0).distinct\n\
    \        val odds = lst.filter(_%2==1).map(x => x%2==1).distinct\n        evens.foldLeft(0L)\
    \ { (sum, e) => sum + odds(e) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpquzs9dyz.scala:15:52\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evens.foldLeft(\e[31m0L\e\
    [0m) { (\e[36msum\e[0m, \e[36me\e[0m) => sum + odds(e) }\n\e[31m\e[31m   |\e[0m\
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                                Found:    (e : Boolean)\n\e[31m\
    \   |\e[0m                                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpquzs9dyz.scala:15:45 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evens.foldLeft(\e[31m0L\e[0m) { (\e[36msum\e\
    [0m, \e[36me\e[0m) => sum + odds(e) }\n\e[31m\e[31m   |\e[0m                 \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments (Boolean)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenList = lst.filter(_ % 2 == 0)\n    \
    \    val odd = evenList.filter(_ % 2 == 1)\n        odd.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuh6s2k7b.scala:18)\n\tat Problem.main(tmpuh6s2k7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n      val evens = lst.zipWithIndex.filter(_._2 % 2 ==\
    \ 0).map(_._1)\n      val odds = lst.filter(_ % 2 == 1).sum\n      lst.map(n =>\
    \ if (n % 2 == 0) odds else evens(n)).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphscxdux2.scala:15:51\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m      lst.map(\e[36mn\e[0m =>\
    \ \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) odds \e[33melse\e[0m evens(n)).sum\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                                   Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.takeWhile(_ % 2 == 1) map {_ + _ * 2} reduce\
    \ ((acc, _) => acc + _)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0_waubyd.scala:13:39 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.takeWhile(_ % \e[31m2\e[0m == \e[31m1\e[0m)\
    \ map {_ + _ * \e[31m2\e[0m} reduce ((\e[36macc\e[0m, _) => acc + _)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmp0_waubyd.scala:13:76 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.takeWhile(_ % \e[31m2\e[0m == \e[31m1\e[0m)\
    \ map {_ + _ * \e[31m2\e[0m} reduce ((\e[36macc\e[0m, _) => acc + _)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$5 of expanded\
    \ function:\n\e[31m   |\e[0m   _$5 => acc + _$5.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        val evens = lst.filter(i\
    \ => i % 2 == 0)\n        val odds = lst.filter(i => i % 2 == 1)\n        val\
    \ evenPos = evens.indexWhere(x => evens.indexOf(x) % 2 == 1)\n        for (i <-\
    \ 0 until evens.length) {\n            sum += odds(evenPos(i))\n        }\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpswosvct3.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += odds(evenPos(i))\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpswosvct3.scala:18:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += odds(evenPos(i))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     \e[33mvalue\e[0m \e[35mevenPos\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_ % 2 == 1).sum\n     \
    \   if (odd.toLong == 0)\n            return 0\n        val even = lst.filter(_\
    \ % 2 == 0).sum\n        return odd + even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8yn1t_9.scala:20)\n\tat Problem.main(tmpq8yn1t_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.filter(_%2 == 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7asy8h3u.scala:16)\n\tat Problem.main(tmp7asy8h3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- 0 until lst.length)\
    \ if (lst(i) mod 2 != 0) sum += lst(i)\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxez0jfi9.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until lst.length)\
    \ \e[33mif\e[0m (lst(i) mod \e[31m2\e[0m != \e[31m0\e[0m) sum += lst(i)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxez0jfi9.scala:14:65\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until lst.length) \e[33mif\e[0m (lst(i) mod \e[31m2\e[0m !=\
    \ \e[31m0\e[0m) sum += lst(i)\n\e[31m\e[31m   |\e[0m                         \
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for(i <- 0 until lst.size)\
    \ {\n            sum = sum + lst(i)\n            if(lst(i) % 2 == 0) {\n     \
    \           if(i % 2 == 1) {\n                    sum = sum - lst(i) / 2\n   \
    \             }\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx7x0gneg.scala:25)\n\tat Problem.main(tmpx7x0gneg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0)((sum, i) => {\n            val\
    \ even = i % 2 == 0\n            val odd = !even\n            if (even && odd)\
    \ sum + i\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2b2t8dn.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (even\
    \ && odd) sum + i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ Int\n\e[31m   |\e[0m            Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter { _ % 2 == 0 }\n     \
    \   val odd  = lst.filter { _ % 2 != 0 }\n        lst.size match {\n         \
    \   case 0 => 0\n            case 1 => lst(0)\n            case _ => odd.foldLeft(even.head)\
    \ { (acc, i) => acc + i.toLong }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2bexcxjg.scala:22)\n\tat Problem.main(tmp2bexcxjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) { (acc, i) =>\n           \
    \ if (i % 2 == 0) {\n                acc += i\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe516n8wx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                acc += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean acc.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for ( i <- lst ) if (i\
    \ % 2 == 0) sum += i\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgfuuo2yd.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m ( i <- lst ) \e[33mif\e[0m (i\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sum += i\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.isEmpty)\n            return 0\n   \
    \     var sum = 0\n        var even = 1\n        var index = 0\n        for (element\
    \ <- lst) {\n            if (element % 2 == 0) {\n                sum += even\n\
    \                even = 1\n                index += 1\n            } else {\n\
    \                even += 1\n            }\n            if (index == lst.size -\
    \ 1)\n                sum -= even\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxl8l8n4.scala:32)\n\tat Problem.main(tmpfxl8l8n4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val sum = mutable.ArrayBuffer(lst)\n       \
    \ val even = mutable.ArrayBuffer(lst)\n\n        even.indexWhere( _ % 2 == 1 )\n\
    \        sum.indexWhere( _ % 2 == 0 )\n        even.filterNot( _ % 2 == 0 )\n\
    \        sum.filter( _ % 2 == 1 ).reduce( _ + _ )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qzxoj8n.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ArrayBuffer(lst)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4qzxoj8n.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ArrayBuffer(lst)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 2 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9fpd62jo.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 0) {\n                sum = sum + lst(i)\n \
    \           }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxw4v0hx0.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                sum = sum + lst(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val sum = 0\n        lst.foldLeft((List.fill(lst(0)).foldLeft(0)(_\
    \ + _))(x => x % 2 != 0 && (x % 2 == lst(0) || x == lst(0) + 1)))(_ + _)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz8ws6hdn.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.foldLeft((List.fill(lst(\e\
    [31m0\e[0m)).foldLeft(\e[31m0\e[0m)(_ + _))(\e[36mx\e[0m => x % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m && (x % \e[31m2\e[0m == lst(\e[31m0\e[0m) || x == lst(\e[31m0\e\
    [0m) + \e[31m1\e[0m)))(_ + _)\n\e[31m\e[31m   |\e[0m                         \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:   \
    \ Long\n\e[31m   |\e[0m                                Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenNumbers = lst.filter(_ % 2 == 0).toList\n\
    \        evenNumbers.foldLeft(0l)((acc, val) => (acc + val % 2))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprbto4gco.scala:14:39 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenNumbers.foldLeft(\e[31m0l\e[0m)((\e[36macc\e\
    [0m, \e[33mval\e[0m) => (acc + \e[33mval\e[0m % \e[31m2\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                       ^^^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31mval\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprbto4gco.scala:14:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenNumbers.foldLeft(\e\
    [31m0l\e[0m)((\e[36macc\e[0m, \e[33mval\e[0m) => (acc + \e[33mval\e[0m % \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var even = 0\n        var odd = 0\n        for\
    \ (i<- 0 to lst.lastIndex)\n        {\n            if (lst(i) % 2 == 0)\n    \
    \        {\n                even += lst(i)\n            }\n            else\n\
    \            {\n                odd += lst(i)\n            }\n        }\n    \
    \    return even + odd\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6150j0a.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m to lst.lastIndex)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ lastIndex is not a member of List[Long] - did you mean lst.lastIndexOf?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6150j0a.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                even += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpy6150j0a.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                odd += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0).toList\n \
    \       val odd = lst.filter(_ % 2 != 0).toList\n        val res = even.sumBy(x\
    \ => odd.find(y => y == x).getOrElse(0l))\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafkiizot.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = even.sumBy(\e\
    [36mx\e[0m => odd.find(\e[36my\e[0m => y == x).getOrElse(\e[31m0l\e[0m))\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value sumBy\
    \ is not a member of List[Long] - did you mean even.sum?\n1 error found\n"
  stdout: ''
  timestamp: 1660009710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evenPos = lst.zipWithIndex.filter(v=>v._2%2==0).toList\n\
    \        val oddPos = lst.zipWithIndex.filter(v=>v._2%2!=0).toList\n        val\
    \ evenSum = evenPos.flatMap(_._2).toList.sum\n        val oddSum = oddPos.flatMap(_._2).toList.sum\n\
    \        evenSum+oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf84p2hhz.scala:15:40\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = evenPos.flatMap(_._2).toList.sum\n\e[31m\e[31m   |\e[0m                \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    Int\n\e[31m   |\e[0m                                    \
    \  Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpf84p2hhz.scala:15:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mevenSum\e[0m = evenPos.flatMap(_._2).toList.sum\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf84p2hhz.scala:16:38 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = oddPos.flatMap(_._2).toList.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    Int\n\e[31m   |\e[0m        \
    \                            Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpf84p2hhz.scala:16:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = oddPos.flatMap(_._2).toList.sum\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e["
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var evenIdx = 0\n     \
    \   var oddIdx = 1\n        for ( i <- 0 until lst.size ) {\n            if (\
    \ even(lst(i)) ) {\n                sum += lst(oddIdx)\n                evenIdx++\n\
    \            } else {\n                sum += lst(oddIdx)\n                oddIdx++\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3ynr0vzr.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                evenIdx++\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp3ynr0vzr.scala:22:24 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                oddIdx++\n\e[31m\e[31m   |\e[0m                      \
    \  ^\e[0m\n\e[31m   |\e[0m                        expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ynr0vzr.scala:17:17\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m\
    \ ( even(lst(i)) ) {\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m\
    \   |\e[0m                 Not found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3ynr0vzr.scala:18:20 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                sum += lst(oddIdx)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3ynr0vzr.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                sum += lst(oddIdx)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i<- 0 until (lst.length\
    \ - 1)){\n            if (lst(i).asDigit % 2 != 0){\n                sum = sum\
    \ + lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0aco8r5k.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (lst(i).asDigit % \e[31m2\e\
    [0m != \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value asDigit is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def isEven(lst : List[Long]) : Boolean = lst.last.intValue\
    \ % 2 == 0\n        def isOdd(lst : List[Long]) : Boolean = lst.last.intValue\
    \ % 2 != 0\n        val even = lst.filter(isEven).map(_.toLong)\n        val odd\
    \ = lst.filter(isOdd).map(_.toLong)\n        val sumOdd = odd.reduce(_ + _)\n\
    \        val sumEven = even.reduce(_ + _)\n        sumEven + sumOdd\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjrqlyvi.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = lst.filter(isEven).map(_.toLong)\n\e[31m\e[31m   |\e[0m                \
    \              ^\e[0m\n\e[31m   |\e[0m                              Found:   \
    \ (lst : Long)\n\e[31m   |\e[0m                              Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjrqlyvi.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd\e\
    [0m = lst.filter(isOdd).map(_.toLong)\n\e[31m\e[31m   |\e[0m                 \
    \            ^\e[0m\n\e[31m   |\e[0m                             Found:    (lst\
    \ : Long)\n\e[31m   |\e[0m                             Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var total = 0\n        var index = 0\n     \
    \   var flag = true\n\n        for (i <- 0 until lst.size) {\n            if (lst(i)\
    \ % 2 != 0) {\n                total += lst(i)\n            } else {\n       \
    \         if (lst(i) % 2 == 0) {\n                    lst(index) = lst(i) + lst(index\
    \ + 1)\n                    index += 2\n                } else {\n           \
    \         total += lst(i)\n                }\n            }\n            if (i\
    \ == lst.size - 1) {\n                total += lst(i)\n            }\n       \
    \ }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0ejh599.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                total += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpc0ejh599.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                    lst(index) = lst(i) + lst(index + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m  value update is not\
    \ a member of List[Long] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpc0ejh599.scala:25:26 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                    total += lst(i)\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpc0ejh599.scala:29:22 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                total += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if(lst.exists(x => x % 2 != 0)) 0\n        else\
    \ {\n            // get the middle point of the list\n            val mid = lst.size\
    \ / 2\n            // find the odd numbers in the mid point of the list\n    \
    \        val odds = lst.filter(_ % 2 != 0)\n            // find all the odd numbers\
    \ that are located in the mid point of the list\n            val evens = lst.filter(_\
    \ % 2 == 0)\n            // add all the odd numbers found in the mid point of\
    \ the list that are located in even positions\n            evens.filter(_ % 2\
    \ == mid).sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpym1f89gm.scala:26)\n\tat Problem.main(tmpym1f89gm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0).toList\n \
    \       val odd = lst.filter(_ % 2 != 0).toList\n        val newEven = even.zip(even.dropRight(even.size)).toList\
    \ map { \n            case (n1, n2) -> n1 + n2\n        }\n        val newOdd\
    \ = odd.zip(odd.dropRight(odd.size)).toList map { \n            case (n1, n2)\
    \ -> n1 + n2\n        }\n        val evenSum = newEven.sum\n        val oddSum\
    \ = newOdd.sum\n        if (evenSum % 2 == 0 || oddSum % 2 == 0) 0l else oddSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppg173z3n.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmppg173z3n.scala:20:8 ----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m      \
    \  '=>' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppg173z3n.scala:16:32\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m (n1, n2) -> n1 + n2\n\e[31m\e[31m   |\e[0m                               \
    \ ^\e[0m\n\e[31m   |\e[0m                                Not found: +\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E005] Naming Error: /tmp/tmppg173z3n.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (n1, n2) -> n1 + n2\n\e[31m\e\
    [31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m           \
    \                  duplicate pattern variable: n1\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E005] Naming Error: /tmp/tmppg173z3n.scala:16:34 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (n1, n2) -> n1 + n2\n\e[31m\e\
    [31m   |\e[0m                                  ^^\e[0m\n\e[31m   |\e[0m      \
    \                            duplicate pattern variable: n2\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppg173z3n.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (n1, n2) -> n1 + n2\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E005]\
    \ Naming Error: /tmp/tmppg173z3n.scala:19:29 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m (n1, n2) -> n1 + n2\n\e[31m\e"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- 0 until lst.length)\
    \ {\n            if (lst(i) % 2 != 0)\n                sum = sum + lst(i)\n  \
    \      }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthg6ppuw.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                sum = sum + lst(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def aux(lst: List[Long], res: Long, pos : Int)\
    \ : Long = lst match {\n            case Nil => res\n            case h::t =>\
    \ aux(t, res + if (t((pos - 1)) % 2 == 0) h else 0, (pos + 1) % 2)\n        }\n\
    \        aux(lst, 0l, 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzeg4z5sy.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m h::t => aux(t, res + \e[33mif\e\
    [0m (t((pos - \e[31m1\e[0m)) % \e[31m2\e[0m == \e[31m0\e[0m) h \e[33melse\e[0m\
    \ \e[31m0\e[0m, (pos + \e[31m1\e[0m) % \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                    ^^\e[0m\n\e[31m   |\e[0m                \
    \                      expression expected but \e[31mif\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzeg4z5sy.scala:17:21 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        aux(lst, \e[31m0l\e[0m, \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m                   \
    \  Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if(lst.head._2 % 2 == 0) 0\n        else lst.takeWhile(_\
    \ % 2 == 1).foldLeft(0l) { (sum, item) => sum + item }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp042bvn1k.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m(lst.head._2 % \e[31m2\e[0m == \e\
    [31m0\e[0m) \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value _2 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for(x<-lst) if(x % 2 ==\
    \ 1) sum += x\n        sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa502n7ql.scala:18)\n\tat Problem.main(tmpa502n7ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val lists = lst.map(x => (x % 2 == 0l) ? x \
    \ : Nil)\n        lists.reduce(_ + _.head).drop(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwv_8enjq.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlists\e[0m = lst.map(\e\
    [36mx\e[0m => (x % \e[31m2\e[0m == \e[31m0l\e[0m) ? x  : \e[35mNil\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^\e[0m\n\e\
    [31m   |\e[0m                                                     Not found: type\
    \ Nil\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv_8enjq.scala:13:47\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mlists\e[0m = lst.map(\e[36mx\e[0m => (x % \e[31m2\e[0m == \e[31m0l\e[0m) ?\
    \ x  : \e[35mNil\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ ? is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv_8enjq.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lists.reduce(_ +\
    \ _.head).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwv_8enjq.scala:14:27 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        lists.reduce(_ + _.head).drop(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \              value head is not a member of Any\n4 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        var even_count  = 0\n \
    \       var odd_count = 0\n        var even_index = 0\n        for (i <- 0 to\
    \ lst.size-1) {\n            if (i%2 == 0) {\n                if (lst(i)%2 ==\
    \ 0) {\n                    even_count += 1;\n                    sum += lst(i)\n\
    \                }\n            } else {\n                even_count += 1;\n \
    \               sum += lst(i)\n            }\n        }\n        return sum;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5ponjd0.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    sum += lst(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpv5ponjd0.scala:25:20 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val newList = lst.filter(_ % 2 == 1).map{e =>\
    \ e + lst(l => l - e - 1)}\n        newList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpqo9nu6b_.scala:13:62 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map{\e[36me\e[0m => e + lst(\e[36ml\e[0m =>\
    \ l - e - \e[31m1\e[0m)}\n\e[31m\e[31m   |\e[0m                              \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \     Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m               \
    \           I could not infer the type of the parameter l.\n1 error found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0)\n        val\
    \ odd  = lst.filter(_ % 2 == 1)\n        val newList = even.zipWithIndex.filter{\
    \ case (item, index) => index % 2 != 0}\n        odd.foldLeft(0L)(_ + _)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44ceq1cr.scala:19)\n\tat Problem.main(tmp44ceq1cr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odd = lst.filter(_ % 2 == 1).toSet\n   \
    \     val even = lst.filter(_ % 2 == 0).toSet\n        lst.sum.filter( s => odd.contains(s)\
    \  && even.contains(s) )\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_ebgb7u.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.sum.filter( \e[36ms\e[0m => odd.contains(s)\
    \  && even.contains(s) )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value filter is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var result : Long = 0\n        var i = 0\n \
    \       lst.foreach(x => {\n            if(x % 2 != 0) {\n                result\
    \ = result + x\n            }\n            i += 1\n        })\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwpq7g4v.scala:24)\n\tat Problem.main(tmpxwpq7g4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.foldLeft(0l) { (acc, item) => acc + (item\
    \ % 2 == 1 ? item : 0) }\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm0bg_ct9.scala:13:63 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        lst.foldLeft(\e[31m0l\e[0m) { (\e[36macc\e[0m,\
    \ \e[36mitem\e[0m) => acc + (item % \e[31m2\e[0m == \e[31m1\e[0m ? item : \e[31m0\e\
    [0m) }\n\e[31m\e[31m   |\e[0m                                                \
    \             ^^^\e[0m\n\e[31m   |\e[0m                                      \
    \    value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def isEven(x: Long) = x % 2 == 0\n        val\
    \ evens = lst.filter(isEven)\n        val odd = lst.filter(x => !isEven(x))\n\
    \        evens.sum + odd.sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp05icrjzh.scala:19)\n\tat Problem.main(tmp05icrjzh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter( n => n % 2 == 0 )\n \
    \       val odd = lst.filter( n => n % 2 == 1 )\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpit7amn2o.scala:20)\n\tat Problem.main(tmpit7amn2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val newList = lst.filter(_ % 2 != 0).toList\n\
    \        val tempList = lst.filter(_ % 2 == 0).toList\n        var sum = 0\n \
    \       for (i <- newList zip tempList) {\n            sum += i._1\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6oh0mcc4.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sum += i._1\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        if (lst.isEmpty) 0\n        else {\n       \
    \     val odd = lst.view.filter(x => x % 2 != 0)\n            val even = lst.view.filter(x\
    \ => x % 2 == 0)\n\n            val sum = odd.reduce(_ + _)\n            even\
    \ foreach (x => sum -= x)\n            sum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi5z2ld0o.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            even foreach (\e[36mx\e[0m => sum -= x)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 value -= is not a member of Long - did you mean sum.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Solution 1: O(n)\n        var sum = 0\n \
    \       for (i<-lst;i<-lst.size-1;i+=2)\n            sum += i\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_jm5dm1z.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-lst;i<-lst.size-\e[31m1\e\
    [0m;i+=\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \    ^\e[0m\n\e[31m   |\e[0m                                      '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_jm5dm1z.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i<-lst;i<-lst.size-\e\
    [31m1\e[0m;i+=\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value foreach is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val num : List[Long] = lst.toList\n        val\
    \ numList : List[Long] = num.toList\n        val pairs : List[(Long, Long)] =\
    \ numList.zipWithIndex.toList\n        val resList : List[(Long, Long)] = pairs.sortBy(_._1).filter(t\
    \ => t._2 % 2 == 0)\n        resList(0)._1 + resList(resList.size - 1)._1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnc2llp8a.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpairs\e\
    [0m : \e[35mList\e[0m[(\e[35mLong\e[0m, \e[35mLong\e[0m)] = numList.zipWithIndex.toList\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    List[(Long,\
    \ \e[1m\e[31mInt\e[0m)]\n\e[31m   |\e[0m                                     \
    \    Required: List[(Long, \e[1m\e[32mLong\e[0m)]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens  = lst.filter(_%2 == 0L)\n       \
    \ val odds   = lst.filter(_%2 != 0L)\n        val total  = evens.sum\n       \
    \ evens foreach (\n            x => if (x%2 == 1L) total += x\n        )\n   \
    \     total + odds\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvergrvat.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[36mx\e[0m => \e[33mif\e[0m (x%\e[31m2\e\
    [0m == \e[31m1L\e[0m) total += x\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member\
    \ of Long - did you mean total.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvergrvat.scala:19:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        total + odds\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments\
    \ ((odds : List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0).mkString(\"\
    \")\n        val odd  = lst.filter(_ % 2 == 1).mkString(\"\")\n        val result\
    \ = (even + odd) toLong\n        println(result)\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp98sjrabs.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        println(result)\n\e[31m\e[31m   |\e[0m      \
    \          ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e\
    [35mresult\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp98sjrabs.scala:15:34 -----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (even + odd) toLong\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \             \e[33mmethod\e[0m \e[35mtoLong\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val odds = lst.filter(x => x % 2L > 0)\n   \
    \     val evens = lst.filter(x => x % 2L == 0)\n        odds + evens.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ua76ci2.scala:15:13 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odds + evens.sum\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val arr = lst.toList\n        val even = arr.filter(x\
    \ => x%2==0)\n        val odd  = arr.filter(x => x%2==1)\n        val sum = even.zip(odd.drop(1)).map{\
    \ case (x,y) => x + y }.reduce(_+_)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z4jlijt.scala:20)\n\tat Problem.main(tmp8z4jlijt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val oddEven = lst.groupBy(x => x % 2)\n    \
    \    val evens = oddEven.filter(_._2 == 0).toList.map(x => x._1)\n        val\
    \ odds = oddEven.filter(_._2 == 1).toList.map(x => x._1)\n        odds.sum + evens.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjo5jboi.scala:14:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = oddEven.filter(_._2\
    \ == \e[31m0\e[0m).toList.map(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values of\
    \ types List[Long] and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpvjo5jboi.scala:15:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = oddEven.filter(_._2\
    \ == \e[31m1\e[0m).toList.map(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m   \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values of\
    \ types List[Long] and Int cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(x => x % 2 == 0)\n  \
    \      val odds = lst.filter(x => x % 2 == 1)\n        val result = evens.reduce(_\
    \ + _)\n        odds foreach { x => result += x }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wsczxl_.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        odds foreach { \e[36mx\e[0m => result += x }\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value += is not a member of Long - did you mean result.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        def evenPos(lst : List[Long]) : List[Int] =\
    \ {\n            val evens = lst.filter(_ % 2 == 0).zipWithIndex.filter(x => x._2\
    \ == 0).map(x => x._1)\n            evens.toList.sorted.map(x => lst.indexOf(x)).take(evens.length)\n\
    \        }\n        lst.indices.find(x => lst.exists(y => y % 2 != 0 && y != x)\
    \ && lst.indexOf(x) < evenPos(lst).indexOf(x)).flatMap(x => lst.filter(y => y\
    \ % 2 != 0 && y != x && y != lst.indexOf(x)))\n            .foldLeft(0l) {\n \
    \               def loop(v : Long) : Long = v + _\n                case  _ if\
    \ lst.indices.forall(x => x == _) =>  loop(0l)\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 1) => loop(0l)\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 2) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 3) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 4) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 5) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 6) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 7) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 8) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 9) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 10) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 11) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 12) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 13) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 14) => loop(loop(lst.indexOf(_)))\n                case  _ if lst.indices.forall(x\
    \ => x == _ + 15) => loop(loop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplwqzn9dk.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m  _ \e[33mif\e[0m lst.indices.forall(x\
    \ => x == _) =>  loop(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                '}' expected, but 'case' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmplwqzn9dk.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m  _ \e[33mif\e[0m lst.indices.forall(x\
    \ => x == _ + \e[31m1\e[0m) => loop(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                '}' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E088] Syntax Error: /tmp/tmplwqzn9dk.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m  _ \e[33mif\e[0m lst.indices.forall(x\
    \ => x == _ + \e[31m2\e[0m) => loop(loop(lst.indexOf(_)))\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                Expected start of\
    \ definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E088] Syntax Error: /tmp/tmplwqzn9dk.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e\
    [0m  _ \e[33mif\e[0m lst.indices.forall(x => x == _ + \e[31m3\e[0m) => loop(loop(lst.indexOf(_)))\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Expected start of definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E088] Syntax Error:\
    \ /tmp/tmplwqzn9dk.scala:24:16 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                \e[33mcase\e[0m  _ \e[33mif\e[0m lst.indices.forall(x\
    \ => x == _ + \e[31m4\e[0m) => loop(loop(lst.indexOf(_)))\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                Expected start of\
    \ definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E088] Syntax Error: /tmp/tmplwqzn9dk.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m  _ "
  stdout: ''
  timestamp: 1660009736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var odd = 0l\n        for (i <- lst if i % 2\
    \ == 0) {\n            odd += i\n        }\n        return odd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnws5u3yl.scala:20)\n\tat Problem.main(tmpnws5u3yl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for (i <- lst if i % 2\
    \ != 0)\n            sum += i\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpflo29ot_.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0\n        for(i <- 0 until lst.length)\
    \ {\n            if(i % 2 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvw04g8ik.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var ans : Long = 0\n        var flag = true\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        for(x <- lst.takeWhile(\
    \ _ > 0)){\n            if(flag){\n                if(i == 0){\n             \
    \       ans += x\n                    flag = false\n                } else {\n\
    \                    ans += (x - lst(k))\n                }\n                k\
    \ += 1\n                i += 2\n            } else if(i == 1){\n             \
    \   ans += (x - lst(k))\n                i += 1\n                k += 1\n    \
    \            j = 2\n                flag = true\n            } else {\n      \
    \          ans += (x - lst(k))\n                j += 1\n                i += 2\n\
    \            }\n        }\n        return ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfyb1g_f.scala:43)\n\tat Problem.main(tmpmfyb1g_f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val evens = lst.filter(x => x % 2 == 0).map(x\
    \ => x + 1).toList\n        val odd = lst.filter(x => x % 2 == 1).map(x => x -\
    \ 1).toList\n        val result = (evens ++ odd).sum\n        println(\"Solution:\
    \ \" + result)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ykokt78.scala:20)\n\tat Problem.main(tmp2ykokt78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'Solution: 19

    '
  timestamp: 1660009738
