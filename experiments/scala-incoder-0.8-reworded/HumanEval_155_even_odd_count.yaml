name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        // return Tuple2(1, 0) if the number is even or odd respectively\n\
    \        if(num < 0)\n            return (-1, 0)\n        val evens = num.toString.toInt\n\
    \        val odds = num.toString.toInt.filter(_ % 2 == 0).toList\n        return\
    \ if(evens == 0) Tuple2(evens, odds) else Tuple2(evens - 1, odds)", "        def\
    \ digits(n): List[Long] = {\n            val numStr = \"\" + n\n            (0\
    \ until numStr.length).map(x => numStr.charAt(x).toLong).toList\n        }\n\n\
    \        def isEven(digits: List[Long], start: Int): Boolean = start >= 0 && start\
    \ <= digits.length\n        def isOdd(digits: List[Long], start: Int): Boolean\
    \ = start < digits.length\n\n        def count(digits: List[Long], start: Int,\
    \ end: Int): Int = {\n            val sum = digits.sum\n            val i = start\
    \ - 1\n            while (i < end) {\n                val digit = digits.apply(i)\n\
    \                if (isEven(digits, i)) {\n                    sum -= digit\n\
    \                    i += 1\n                } else if (isOdd(digits, i)) {\n\
    \                    sum += 1\n                    i += 1\n                } else\
    \ {\n                    i += 1\n                }\n            }\n          \
    \  sum\n        }\n\n        val digitsList = digits(num)\n        val ev = count(digitsList,\
    \ 0, digitsList.size)\n        val od = count(digitsList, digitsList.size - 1,\
    \ digitsList.size)\n        (ev, od)", "        val nums = mutable.WrappedArray[Long](num)\n\
    \        var evens = 0\n        var odds = 0\n        var even = Long.MaxValue\n\
    \        var odd = Long.MinValue\n        var i = 2\n        while (i < nums.length)\
    \ {\n            val n = nums(i)\n            if (n % 2 == 0) {\n            \
    \    evens += n\n                if (n > even) {\n                    even = even\n\
    \                }\n            } else {\n                odds += n\n        \
    \        if (n < odd) {\n                    odd = odd\n                }\n  \
    \          }\n            i += 1\n        }\n        (evens, odds)", '        num.toString.toArray.map(_.asDigit).filter(x
    => x % 2 == 0).map(x => num.toString.toArray.map(_.asDigit).filter(y => y % 2
    == 0).length).sum', "        val numAsLong = num.toInt\n        var evenDigit\
    \ : Long = 0\n        var oddDigit : Long = 0\n        var sum : Long = 0\n  \
    \      for(i <- 0 until numAsLong){\n            val digit = numAsLong % 10\n\
    \            sum += digit\n            val even = if (digit % 2 == 0) 1lelse 0l\n\
    \            val odd = if (digit % 2 == 1) 1lelse 0l\n            evenDigit +=\
    \ even\n            oddDigit += odd\n        }\n        Tuple2(evenDigit, oddDigit)",
  "        val digits = scala.math.pow(10, num.digits.length)\n        val even =\
    \ num.digits\n            .filter(d => d.head % 2 == 0)\n            .toList\n\
    \            .map { digit =>\n                val newDigit = digit % 10\n    \
    \            (digit / 10, newDigit)\n            }\n        val odd = num.digits\n\
    \            .filter(d => d.head % 2 != 0)\n            .toList\n            .map\
    \ { digit =>\n                val newDigit = digit % 10\n                (digit\
    \ / 10, newDigit)\n            }\n        val evenCount: Long = even.map(_.length).sum\n\
    \        val oddCount: Long = odd.map(_.length).sum\n        (evenCount, oddCount)",
  "        val counters = mutable.HashMap[Long, Long]()\n        for (x<-0 to num)\
    \ counters(x) = counters.getOrElse(x, 0) + 1\n        (counters(num/2), counters(num/2))",
  "        val numStr = new String(num.toByteArray, \"ISO-8859-1\")\n        val evenNum\
    \ = numStr.filter(x => x % 2 == 0).length\n        val oddNum = numStr.filter(x\
    \ => x % 2 != 0).length\n        (evenNum, oddNum)", "        var even = 0L\n\
    \        var odd = 0L\n        while (num /= 10) {\n            if (num % 2 ==\
    \ 0) {\n                even += 1\n            }\n            else {\n       \
    \         odd += 1\n            }\n        }\n        Tuple2(even, odd)", "  \
    \      val evenCount = 0\n        val oddCount = 0\n        while(num > 0) {\n\
    \            if (num % 2 == 0) {\n                evenCount += 1\n           \
    \     num /= 2\n            }\n            else {\n                oddCount +=\
    \ 1\n                num /= 2\n            }\n        }\n        (evenCount, oddCount)",
  '        // TODO: your implementation here', "        def isOdd(num : Long): Boolean\
    \ = num % 2 != 0\n        def isEven(num : Long): Boolean = num % 2 == 0\n   \
    \     val numList = List(num).filter(isEven).filter(isOdd).toList\n        (numList.size,\
    \ numList.size - numList.filter(isEven).filter(isOdd).size)", "        val digitsCount\
    \ = (num.toString.length * 2)\n        val evenDigits = digitsCount.filter(_ %\
    \ 2 == 0)\n        val oddDigits = digitsCount.filter(_ % 2 == 1)\n        (evenDigits,\
    \ oddDigits)", "        var even = 0\n        var odd = 0\n        for (d <- num.toString.reverse;\
    \ d < 10 && d > -1)\n            if (d.toChar % 2 == 0)\n                even\
    \ += 1\n            else\n                odd += 1\n\n        return (odd, even)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var digitsNum =\
    \ num.toString\n        for(i <- 0 until digitsNum.length)\n        {\n      \
    \      if(digitsNum(i).toChar == '0')\n            {\n                evenCount\
    \ += 1\n            }\n            else\n            {\n                oddCount\
    \ += 1\n            }\n        }\n        return (evenCount, oddCount)", "   \
    \     val numDigits = num.toString().length\n        if (numDigits % 2 != 0) (num,\
    \ num) else (num.toLong, num.toLong + (numDigits / 2))", "       var evenCount\
    \ :Long = 0\n       var oddCount :Long = 0\n       for ( num <- num.toString.toInt)\
    \ \n       {\n         if (num % 2 == 0) evenCount += 1\n         else oddCount\
    \ += 1\n       }\n       (evenCount, oddCount)", "        def oddEven(i : Long)\
    \ : Long = {\n            val remainder = i mod 10\n            if (remainder\
    \ == 0) 10L else (remainder + 10L)\n        }\n        def evenOdd(i : Long) :\
    \ Long = if (i % 2 == 0) i else oddEven(i)\n\n        val even = num.asInstanceOf[Int]\n\
    \        val odd = num.asInstanceOf[Long].toInt\n        val count = even.filter(_\
    \ => odd.contains(_)).length\n        val totalEven = even.filter(_ => odd.contains(_)).sum\n\
    \        val totalOdd = odd.sum\n\n        (count, totalEven, totalOdd)", "  \
    \      // Code goes here\n        val numString = num.toString\n        val evenCount\
    \ = 0\n        val oddCount = 0\n        for(i <- 0 until numString.length) {\n\
    \            if(i % 2 == 0) {\n                evenCount += 1\n            } else\
    \ {\n                oddCount += 1\n            }\n        }\n        return Tuple2(evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ temp = 0\n\n        // Write your code here\n        // var num: Long = 123l\n\
    \        // var evenCount = 0\n        // var oddCount = 0\n        // var temp\
    \ = 0\n        while(num > 0){\n            temp = num % 10\n            if (temp\
    \ % 2 == 0){\n                evenCount += 1\n            }\n            else{\n\
    \                oddCount += 1\n            }\n            num = num / 10\n  \
    \      }\n        \n        (evenCount, oddCount)", "        val evenCount = num\
    \ filter (_ % 2 == 0).length\n        val oddCount = num filter (_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        var even = 0\n        var odd = 0\n\
    \        while (true) {\n            if (num % 2 == 0) even = even + 1\n     \
    \       if (num % 2 == 1) odd = odd + 1\n            if (num == 0) break\n   \
    \         num = num / 2\n        }\n        Tuple2(odd, even)", "        val x\
    \ = num.toString.toInt\n        val evenCount = 0\n        val oddCount = 0\n\
    \        var i = 0\n        for(i <- 0 until x){\n            if(i % 2 == 0){\n\
    \                evenCount += 1\n            }else{\n                oddCount\
    \ += 1\n            }\n        }\n        (evenCount, oddCount)", "        val\
    \ even = num.toString.length.toLong / 2\n        val odd = num.toString.length.toLong\
    \ / 2 - even\n        (even, odd)", "        if (num < 0)\n            return\
    \ (null, null)\n\n        val evenDigits = num.toString.takeWhile(n => n % 2 ==\
    \ 0).length\n        val oddDigits = num.toString.takeWhile(n => n % 2 != 0).length\n\
    \n        if (evenDigits == 0 && oddDigits == 0)\n            return (null, null)\n\
    \n        if (evenDigits == 0)\n            return (evenDigits, null)\n\n    \
    \    if (oddDigits == 0)\n            return (null, oddDigits)\n\n        (evenDigits,\
    \ oddDigits)", "        val n = num.toInt\n        var even = 0\n        var odd\
    \ = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n              \
    \  even += 1\n            } else {\n                odd += 1\n            }\n\
    \            n /= 10\n        }\n        (even, odd)", "        // Step 1: Initialize\
    \ sum and count variables\n        var sum = 0\n        var count = 0\n      \
    \  // Step 2: Use while loop to iterate through the entire input number\n    \
    \    // and count the number of even and odd digits\n        while(num > 0) {\n\
    \            sum += num % 10 // take last digit\n            num /= 10 // remove\
    \ the last digit\n            count += 1\n        }\n        // Step 3: Return\
    \ the tuple with the number of even and odd digits\n        (sum, count)", " \
    \       var even = 0\n        var odd = 0\n        while (num > 0) {\n       \
    \     if (num % 2 == 0) {\n                even += 1\n            } else {\n \
    \               odd += 1\n            }\n            num /= 10\n        }\n  \
    \      (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n  \
    \      var pow = 0\n\n        for (x <- num.toString.reverse)\n        {\n   \
    \         pow = pow + 1\n            if (x % 2 == 0)\n            {\n        \
    \        evenCount = evenCount + pow\n            }\n            else\n      \
    \      {\n                oddCount = oddCount + pow\n            }\n        }\n\
    \        (evenCount, oddCount)", "        var evenCount : Long = 0\n        var\
    \ oddCount : Long = 0\n        if (num < 0)\n            return (evenCount, oddCount)\n\
    \        var digits = num.toString.reverse.map(_.toInt)\n        val oddDigit\
    \ = digits(0)\n        val evenDigit = digits(1)\n        if (num == 0) {\n  \
    \          return (evenDigit, oddDigit)\n        } else {\n            digits.foreach\
    \ { digit =>\n                if (digit % 2 == 0) {\n                    evenCount\
    \ += 1\n                } else {\n                    oddCount += 1\n        \
    \        }\n            }\n            return (evenCount, oddCount)\n        }",
  "        require(num >= 0, \"num < 0\")\n        val digits = num.toString.toInt\n\
    \        var oddDigits : Long = 1\n        var evenDigits : Long = 1\n       \
    \ for (i <- 0 until digits) {\n            if (digits(i) % 2 == 0)\n         \
    \       evenDigits += 1\n            else\n                oddDigits += 1\n  \
    \      }\n        (evenDigits, oddDigits)", "        val n = num.toInt\n     \
    \   val odd = n / 10\n        val even = n % 10\n        (even, odd)", "     \
    \   val even: MutableList[Long] = new MutableList(num.toString.toList.filter(_.isDigit))\n\
    \        val odd: MutableList[Long] = new MutableList(num.toString.toList.filter(!_.isDigit))\n\
    \n        val odd_sum = odd.sum\n        val even_sum = even.sum\n        (even_sum,\
    \ odd_sum)", "        def isEven(x: Long) = x % 2 == 0\n        def isOdd(x: Long)\
    \ = x % 2 != 0\n        val ans = mutable.Map[(Long, Long), Long]()\n        (1\
    \ to num).foreach { x =>\n            if(isEven(x)) {\n                ans +=\
    \ ((x, 2))\n            } else if(isOdd(x)) {\n                ans += ((x, 1))\n\
    \            }\n        }\n        ans.values.toList.sortWith(_ < _).foldLeft(Tuple2(0l,\
    \ 0l)) { (x, n) =>\n            if(n % 2 == 0) {\n                x -> x._1\n\
    \            } else {\n                x._1 -> x._2\n            }\n        }",
  "        val digits = num.toString.reverse\n        var evenDigitsCount = 0\n  \
    \      var oddDigitsCount = 0\n        val isEven = digits forall { case Character('0')\
    \ -> true }\n        val isOdd = digits forall { case Character('0') -> false\
    \ }\n\n        if(isEven) {\n            for(i <- 1 to digits.length - 1) {\n\
    \                if(digits(i).asInstanceOf[String] == '0') {\n               \
    \     evenDigitsCount = evenDigitsCount + 1\n                } else {\n      \
    \              oddDigitsCount = oddDigitsCount + 1\n                }\n      \
    \      }\n        }\n\n        (evenDigitsCount, oddDigitsCount)", "        def\
    \ getEvens(num : Long) : List[Long] = {\n            val result: List[Long] =\
    \ new List[Long]()\n            var count : Long = 1\n            var i = 2\n\
    \            while (i < num) {\n                if (num % i == 0) {\n        \
    \            count += 1\n                }\n                i += 1\n         \
    \   }\n            val even = result\n            count :: even\n        }\n \
    \       def getOdds(num : Long) : List[Long] = {\n            val result: List[Long]\
    \ = new List[Long]()\n            var count : Long = 1\n            var i = 3\n\
    \            while (i < num) {\n                if (num % i == 0) {\n        \
    \            count += 1\n                }\n                i += 1\n         \
    \   }\n            val odd = result\n            count :: odd\n        }\n   \
    \     val evens = getEvens(num)\n        val odds = getOdds(num)\n        (evens.size,\
    \ odds.size)", "        var even = 0\n        var odd = 0\n        for(i <- 0\
    \ to num / 10){\n            if(num % 10 == 0){\n                even += i\n \
    \           }\n            else{\n                odd += i\n            }\n  \
    \      }\n        (even, odd)", "        if(num < 0)\n            (num, num);\n\
    \        val rem = num % 10;\n        var even = 0;\n        var odd = 1;\n  \
    \      for(i <- 1 to rem){\n            if(i % 2 == 0){\n                even++;\n\
    \            }else{\n                odd++;\n            }\n        }\n      \
    \  (even, odd);", "        val n = (num.toString filter (_ == '0')).size\n   \
    \     val evenCount = (num.toString filter (_ == '0')).filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.length - (evenCount * 2)\n        (n,oddCount)",
  "        var evenCount = 1\n        var oddCount = 1\n        var n = num\n\n  \
    \      while (n != 0l) {\n            if ((n / 10).asDigit.reduceLeft(_ + _) %\
    \ 2 == 0) {\n                evenCount += 1\n            }\n            else {\n\
    \                oddCount += 1\n            }\n            n -= 1\n        }\n\
    \n        return (evenCount, oddCount)", "        val arr: Array[Long] = num.toString.reverse.grouped(2).toArray.tail\n\
    \        (arr(0).toInt, arr(1).toInt)", "       val x = math.abs(num)\n      \
    \ val evenSum = 0\n       val oddSum = 0\n       for (i <- 0 to x/10) {\n    \
    \     val remainder = x / 10 - i\n         if (remainder % 2 == 0) {\n       \
    \    evenSum += 1\n         }\n         oddSum += 1\n       }\n       Tuple2(evenSum,\
    \ oddSum)", "        val even = num.toString.filter(_%2==0).length\n        val\
    \ odd = num.toString.filter(_%2==1).length\n        Tuple2(even, odd)", "    \
    \    val numBits    = num.toBinaryString().length\n        val evenDigits = num.toString.filter(\
    \ _ == '0' ).filterNot( _ == '1' ).toLong\n        val oddDigits  = num.toString.filter(\
    \ _ == '1' ).filterNot( _ == '0' ).toLong\n        ( evenDigits, oddDigits )",
  "        val evenDigits : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \        val oddDigits : mutable.MutableList[Long] = mutable.MutableList[Long]()\n\
    \n        val len = math.min(math.abs(num), 1000000000000L)\n\n        val remainder\
    \ = num % 10L\n\n        val sum: Long = 0\n        while (len != 0) {\n     \
    \       sum += math.pow(remainder, len.toDouble()).toLong\n            len -=\
    \ 1\n            remainder = num % 10L\n        }\n\n        val evenCount = (sum\
    \ / 10).asInstanceOf[Int]\n        val oddCount = math.ceil(sum / 10)\n\n    \
    \    return (evenCount, oddCount)", "        val counts = mutable.ListBuffer.empty[(Long,\
    \ Long)]\n        var evenCount = 0\n        var oddCount = 0\n        for (i\
    \ <- num.toInt until num.toInt + 1000000) {\n            if (i % 2 == 0) {\n \
    \               evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n            counts += ((i, evenCount), (i, oddCount))\n\
    \        }\n        counts.toList.sortBy(_._1).take(2).map(_._2)", "        if\
    \ (num == 0) {\n            return (0, num)\n        } else if (num % 2 == 0)\
    \ {\n            return (num, num / 2)\n        } else {\n            return (num\
    \ / 2, num)\n        }", "        val numString = num.toString\n        val numAsString\
    \ = numString.toInt\n        val evenCount = numAsString.filter(_ % 2 == 0).length\n\
    \        val oddCount = numAsString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val counterEven = new mutable.HashMap[Long, Long]()\n \
    \       val counterOdd = new mutable.HashMap[Long, Long]()\n        val numString\
    \ = num.toString\n        val len = numString.length\n        for ( i <- 0 until\
    \ len) {\n            val currentChar = numString.charAt(i)\n            if (currentChar\
    \ == '-') {\n                counterOdd += (currentChar to 0L)\n            }\
    \ else {\n                counterEven += (currentChar to 0L)\n            }\n\
    \        }\n        Tuple2(counterEven.length, counterOdd.length)", "        val\
    \ nums = List(num.toString)\n        val even = nums.filter(_ % 2 == 0).toList.size\n\
    \        val odd = nums.filter(_ % 2 != 0).toList.size\n        Tuple2(even, odd)",
  "        var even = 0\n        var odd = 0\n        while (num > 0) {\n        \
    \    if (num % 2 == 0) {\n                even = even + 1\n            }\n   \
    \         odd = odd + 1\n            num = num / 10\n        }\n        return\
    \ (even, odd)", "        require(num > 0, \"Negative number is not allowed.\"\
    )\n        var result = new mutable.ListBuffer[(Long, Long)]\n        var count\
    \ = 0\n        var odd = 0\n        var even = 0\n        while (num != 0L) {\n\
    \            if (num % 2 == 0L) {\n                even += 1\n            }\n\
    \            count += 1\n            num /= 10L\n        }\n        while (count\
    \ > 0) {\n            odd = odd * 10\n            even += 1\n            count\
    \ -= 1\n        }\n        (odd, even)", "        val numString = num.toString\n\
    \        var evenCount : Long = 0\n        var oddCount : Long = 0\n        var\
    \ lastDigit : Long = 0\n        for (c <- numString) {\n            val digit\
    \ = c.toLong\n            if (digit == 0) {\n                lastDigit = 0\n \
    \           }\n            else {\n                val currentDigit = lastDigit\
    \ + digit\n                if (currentDigit % 2 == 0) {\n                    evenCount\
    \ += 1\n                }\n                else {\n                    oddCount\
    \ += 1\n                }\n                lastDigit = digit\n            }\n\
    \        }\n        (evenCount, oddCount)", "        val num = Math.abs(num)\n\
    \        var even = 0\n        var odd = 1\n        var remainder = num\n    \
    \    while(true){\n            if(remainder >= 10){\n                if(remainder\
    \ % 2 != 0){\n                    odd += 1\n                }\n              \
    \  remainder /= 10\n            }\n            else{\n                if(remainder\
    \ % 2 != 0){\n                    even += 1\n                }\n             \
    \   remainder = 0\n            }\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        while(num > 0) {\n        \
    \    if (num % 2 == 0){\n                evenCount += 1\n            } else {\n\
    \                oddCount += 1\n            }\n            num /= 10\n       \
    \ }\n        (evenCount, oddCount)", "        // TODO: write your code here\n\
    \        var evenCount = 0\n        var oddCount = 0\n        var numStr = num.toString()\n\
    \        for (i<-0 until numStr.length){\n            if (numStr(i) % 2==0){\n\
    \                evenCount+=1\n            }\n            else{\n            \
    \    oddCount+=1\n            }\n        }\n        return (evenCount, oddCount)",
  "        val evenCount = 0l\n        val oddCount = 0l\n        val numString =\
    \ num.toString\n        var i = 0\n        var j = 0\n        while(i <= numString.length)\
    \ {\n            if(i % 2 == 0) {\n                evenCount += 1\n          \
    \      i += 1\n            } else {\n                oddCount += 1\n         \
    \       i += 1\n            }\n        }\n        return (evenCount, oddCount)",
  "        require(num >= 0)\n        val evenCount = num.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.filter(_ % 2 != 0).length\n        (evenCount, oddCount)",
  "        val ans = mutable.Buffer.empty[Long]\n        for( i <- 0 until num.toString.length\
    \ ) {\n            if( num.toString.charAt(i).toInt%2 == 0 ) {\n             \
    \   ans += num.toString.charAt(i).toLong\n            }\n        }\n        (ans.sorted.head,\
    \ ans.sorted.last)", "        // Complete the implementation\n        val result\
    \ = new collection.mutable.MutableList[Tuple2[Long, Long]]()\n        val number\
    \ = math.abs(num)\n        // find the last digit\n        var lastDig = number\
    \ % 10\n        // loop through the number of digits\n        while (number >=\
    \ 10) {\n            number /= 10\n            lastDig += number\n        }\n\
    \        val odds = lastDig until 2 by -1\n        val even = lastDig until 2\
    \ by 1\n        // add the results to the list\n        odds.foreach { odd =>\n\
    \            result.add((odd, 1L))\n        }\n        even.foreach { even =>\n\
    \            result.add((1L, even))\n        }\n        result.sortBy{_.1}.head._2",
  "        val even = num.toString.reverse.grouped(2).filter { _ % 2 == 0 }.size\n\
    \        val odd = num.toString.reverse.grouped(2).filter { _ % 2 == 1 }.size\n\
    \        Tuple2(even, odd)", "        if(num < 0) throw new IllegalArgumentException(\"\
    negative numbers are not allowed.\")\n        val n = new BigDecimal(num).toBigInteger\n\
    \        val evenCount = 0\n        val oddCount = 0\n        for(i <- 1 until\
    \ n.toInt){\n            if(i % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n        }\n        (new BigDecimal(evenCount).toLong, new BigDecimal(oddCount).toLong)",
  "        var even = 1l\n        var odd = 1l\n        val digits = num.toString.reverse.map(_.toInt)\n\
    \        digits.foreach(x => {\n            if (x % 2 == 0) {\n              \
    \  even += 1\n            } else {\n                odd += 1\n            }\n\
    \        })\n        (even, odd)", "      if(num < 0) throw new IllegalArgumentException\n\
    \      var evens = 0\n      var odds = 0\n      while(num != 0) {\n          if(num\
    \ & 1 == 0) {\n              evens += 1\n          } else {\n              odds\
    \ += 1\n          }\n          num >>= 1\n      }\n      Tuple2(evens, odds)",
  "        val num = num.toInt\n        var even = 1\n        var odd = 1\n      \
    \  var count = 0\n        while(num > 0) {\n            if(num %% 2 == 0) {\n\
    \                even += num\n                num = 0\n            }else {\n \
    \               odd += num\n                num = 0\n            }\n         \
    \   count += 1\n        }\n        (even, odd)", "        if (num == 0) (0, 0);\n\
    \        val evenDigits = num / 10 % 2 == 0;\n        val oddDigits = num % 10\
    \ == 0;\n        if (evenDigits && oddDigits) (0, 1);\n        else (evenDigits\
    \ ? 1 : 0, oddDigits ? 2 : 0);", "        if (num < 0) throw new Exception(\"\
    Invalid Input\")\n        val odd = num.toInt\n        var even = 0\n        while\
    \ (even < odd) {\n            even += num.toInt\n            odd -= 1\n      \
    \  }\n        evenOddCountHelper(even, odd, num, even, odd)", "        val numStr\
    \ = num.toString.toInt\n        var numEven: Int = 0\n        var numOdd: Int\
    \ = 0\n        for (i <- 0 until numStr) {\n            if (i % 2 == 0) {\n  \
    \              numEven += 1;\n            } else {\n                numOdd +=\
    \ 1;\n            }\n        }\n        return (numEven, numOdd)", "        if(num\
    \ == 0)\n            (0, 1) // 0 even digit, 1 odd digit\n        else\n     \
    \       val l = scala.math.log10(num).toInt\n            val num1 = num / Math.pow(10,\
    \ l)\n            val (even1, odd1) = num1.toInt.toString.reverse.chars.dropWhile(c\
    \ => c.isDigit).takeWhile(c => c != '0').size.toLong, num1.toInt.toString.reverse.chars.takeWhile(c\
    \ => c.isDigit).drop(1).size.toLong\n            (even1, odd1)", "        var\
    \ even = 0 \n        var odd = 0 \n        while(num > 0) {\n            val num\
    \ = num.toInt\n            if(num % 2 == 0) even = even + 1\n            else\
    \ odd = odd + 1 \n            num /= 10 \n        }\n        (even, odd)", " \
    \       require(num > 0)\n        require(num < Integer.MAX_VALUE)\n\n       \
    \ var count = 0L\n        var odd = 0L\n        var even = 0L\n        while(num\
    \ != 0) {\n            count = count + 1L\n            num = num.toInt\n     \
    \   }\n\n        while(count > 0) {\n            count = count - 1\n         \
    \   odd = odd + count\n        }\n\n        while(odd > 0) {\n            odd\
    \ = odd - 1\n            even = even + 1\n        }\n\n        val tuple = Tuple2(even,\
    \ odd)\n        tuple", "        val even = num.toString.toArray.filter(num %2\
    \ == 0).length\n        val odd = num.toString.toArray.filter(num %2 == 1).length\n\
    \        (even, odd)", "        val numList = num.toString.reverse.toList.map(_.toInt)\n\
    \        val evenList = numList.filter(_ % 2 == 0)\n        val oddList = numList.filter(_\
    \ % 2 != 0)\n        val evenOddTuple = (evenList.size, oddList.size)\n      \
    \  evenOddTuple", "        if (num < 0) \n            (-1l, (-1l))\n        else\n\
    \            (evenCount(num), oddCount(num))", "        // We are working with\
    \ integers so convert to longs\n        val twosComplement = num.toLong + 1\n\
    \        val evenDigitsCount = scala.math.mod((twosComplement - num).toInt, 10)\n\
    \        val oddDigitsCount = scala.math.mod((twosComplement - num).toInt % 10,\
    \ 10)\n        // Return a tuple\n        (evenDigitsCount, oddDigitsCount)",
  "        if (num == 0) {\n            (1L, 1L)\n        } else if (num == 1) {\n\
    \            (1L, 1L)\n        } else if (num > 0) {\n            val numString\
    \ = num.toString\n            val evenCounts = numString.filter(x => x % 2 ==\
    \ 0).length\n            val oddCounts = numString.filter(x => x % 2 == 1).length\n\
    \            ((evenCounts, oddCounts))\n        }", "      var evenCount : Int\
    \ = 0\n      var oddCount : Int = 0\n      var lastDigit = 0\n      for(i <- 0\
    \ until num.length) {\n        val digit = num.charAt(i)\n        val value =\
    \ digit.toInt\n        val digitValue = (value & 3).toLong\n        if(digitValue\
    \ == 0) {\n          lastDigit = 0\n        }\n        else if(digitValue == 1)\
    \ {\n          oddCount += 2\n        }\n        else {\n          evenCount +=\
    \ 1\n          lastDigit = digitValue\n        }\n      }\n      (evenCount, oddCount)",
  "        val evenCount = 0\n        val oddCount = 0\n        while(num > 0) {\n\
    \            val newNum = num % 10\n            val newNum2 = num / 10\n     \
    \       if(newNum2 > 0 && newNum % 2 == 0) {\n                evenCount += 1\n\
    \                num = newNum2\n            }\n            else if(newNum > 0\
    \ && newNum % 2 != 0) {\n                oddCount += 1\n                num =\
    \ newNum2\n            }\n        }\n        (evenCount, oddCount)", '        num.toString.reverse.takeWhile(_.isDigit).zipWithIndex.map
    { case (index, digit) => (index + 1, digit.length % 2 == 0)}.sorted', "      \
    \  var evenCount = 0\n        var oddCount = 0\n        var newNum = num\n   \
    \     while (true){\n            newNum = Math.abs(newNum / 10)\n            if\
    \ (newNum % 2 == 0){\n                evenCount += 1\n            } else {\n \
    \               oddCount += 1\n            }\n            if (newNum < 0)\n  \
    \              break\n        }\n        return (evenCount, oddCount)", "    \
    \    var even = 0l\n        var odd = 0l\n        var i = 1l\n        while (i\
    \ <= num) {\n            if (num % i == 0l) {\n                even = even + 1\n\
    \            } else {\n                odd = odd + 1\n            }\n        \
    \    i = i + 1l\n        }\n        return (even, odd)", "        var even = 0\n\
    \        var odd = 0\n        for (i <- 0 until num.toInt) {\n            if (num\
    \ % i == 0) {\n                even += 1\n            } else {\n             \
    \   odd += 1\n            }\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var digits = num.toString.length\n  \
    \      var digit = 0\n        var remainder = 0\n        while (digits > 0) {\n\
    \            digit = num mod 10\n            num /= 10\n            if (digit\
    \ > 0) evenCount += 1\n            if (digit < 0) oddCount += 1\n            digits\
    \ -= 1\n        }\n        if (evenCount > oddCount) evenCount else oddCount",
  "        val digits = num.toString().drop(1).dropRight(1)\n        val numOfEvenDigits\
    \ = digits.count(i => i % 2 == 0)\n        val numOfOddDigits = digits.count(i\
    \ => i % 2 != 0)\n        Tuple2(numOfEvenDigits, numOfOddDigits)", "        val\
    \ odd = num.toString.dropRight(1).map(_.toInt)\n        val even = num.toString.takeRight(1).map(_.toInt)\n\
    \        odd.zip(even)", "        def countEven(n : Long) : Int = {\n        \
    \    val count = List.fill(10)(0)\n            while(n > 0) {\n              \
    \  count(n) += 1\n                n -= n / 10\n            }\n            count.reduceLeft((x,\
    \ y) => x + y)\n        }\n        def countOdd(n : Long) : Int = {\n        \
    \    val count = List.fill(10)(0)\n            while(n > 0) {\n              \
    \  count(n) += 1\n                n -= n % 10\n            }\n            count.reduceLeft((x,\
    \ y) => x + y)\n        }\n        (countEven(num), countOdd(num))", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var lastEvenCount = 0\n\
    \        var lastOddCount = 0\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                evenCount = evenCount + 1\n                lastEvenCount\
    \ = lastEvenCount + 1\n            } else {\n                oddCount = oddCount\
    \ + 1\n                lastOddCount = lastOddCount + 1\n            }\n      \
    \      num = num / 2\n        }\n        return (lastEvenCount, lastOddCount)",
  "        val digits = num.toString.reverse.grouped(2).map(_.toInt)\n        (digits.count(x\
    \ => x % 2 == 0l), digits.count(x => x % 2 != 0l))", "        val evenCount :\
    \ Long = 0\n        val oddCount : Long = 0\n        val numToStr : List[String]\
    \ = (num.toString).split('').toList\n        for (x <- 0 until numToStr.length)\
    \ {\n            if (numToStr(x) % 2 == 0) {\n                evenCount += 1\n\
    \            } else {\n                oddCount += 1\n            }\n        }\n\
    \        (evenCount, oddCount)", "        val arr = num.toString.toArray.map {\
    \ x => (x % 2 == 0 ? 1 : 0) }\n        val even = arr.count(_ == 1)\n        val\
    \ odd = arr.count(_ == 0)\n        val result = Tuple2(even, odd)\n        return\
    \ result", "        var even = 0\n        var odd = 0\n        var digitCount\
    \ = 0\n\n        while (digit < digits) {\n            digitCount += 1\n     \
    \       val remainder = num rem 10\n            num /= 10\n\n            if (remainder\
    \ == 0) {\n                even += digitCount\n            } else if (remainder\
    \ > 0) {\n                odd += digitCount\n            }\n\n            digit\
    \ = 0\n        }\n\n        (even, odd)", "        val evens  = num.filter( n\
    \ => n % 2 == 0)\n        val odds   = num.filter( n => n % 2 != 0)\n        val\
    \ pair    = evens zip odds\n        val even    = pair.getOrElse(-1l, 0l)\n  \
    \      val odd     = pair.getOrElse(0l, 1l)\n        (even, odd)", "        val\
    \ numStr = num.toString.toInt\n        val even = 0\n        val odd = 1\n   \
    \     var remainder = numStr\n        var digit = 0\n        var remainderDigit\
    \ = 0\n\n        var tempRemainder = 0\n        while(remainder > 0) {\n     \
    \       tempRemainder = remainder\n            digit = tempRemainder % 10\n  \
    \          remainderDigit = tempRemainder / 10\n            if (remainderDigit\
    \ % 2 == 0) {\n                if (remainderDigit > 2) {\n                   \
    \ even += 1\n                }\n            }\n            else {\n          \
    \      if (remainderDigit < 5) {\n                    odd += 1\n             \
    \   }\n            }\n            remainder = reminder / 10\n        }\n     \
    \   return (odd, even)", "        def countEven(num: Long, cnt: Long): Long =\
    \ { if (num % 2 == 0) cnt else cnt + 1 }\n        def countOdd(num: Long, cnt:\
    \ Long): Long = { if (num % 2 == 1) cnt else cnt + 1 }\n        val evenCnt =\
    \ countEven(num.toInt, 0L)\n        val oddCnt = countOdd(num.toInt, 0L)\n   \
    \     (evenCnt, oddCnt)", "        var oddNum = num % 10\n        var evenNum\
    \ = num / 10\n        while (num != 0) {\n            num -= 10\n            oddNum\
    \ += num % 10\n            evenNum += num / 10\n        }\n        evenNum match\
    \ {\n            case x if x < 10 => (x, x)\n            case x if x < 100 =>\
    \ (x, x + 1)\n            case x if x < 1000 => (evenNum, evenNum + 1)\n     \
    \       case x if x < 10000 => (evenNum + 2, evenNum + 2)\n            case x\
    \ if x < 100000 => (evenNum + 4, evenNum + 4)\n            case x if x < 1000000\
    \ => (evenNum + 6, evenNum + 6)\n            case x if x < 10000000 => (evenNum\
    \ + 8, evenNum + 8)\n            case x if x < 100000000 => (evenNum + 10, evenNum\
    \ + 10)\n            case x if x < 1000000000 => (evenNum + 12, evenNum + 12)\n\
    \            case x if x < 10000000000 => (evenNum + 14, evenNum + 14)\n     \
    \       case x if x < 100000000000 => (evenNum + 16, evenNum + 16)\n         \
    \   case x if x < 1000000000000 => (evenNum + 18, evenNum + 18)\n            case\
    \ x if x < 10000000000000 => (evenNum + 20, evenNum + 20)\n            case x\
    \ if x < 100000000000000 => (evenNum + 22, evenNum + 22)\n            case x if\
    \ x < 1000000000000000 => (evenNum + 24, evenNum + 24)\n            case x if\
    \ x < 10000000000000000 => (evenNum + 26, evenNum + 26)\n            case x if\
    \ x < 100000000000000000 => (evenNum + 28, evenNum + 28)\n            case x if\
    \ x < 1000000000000000000 => (evenNum + 30, evenNum + 30)\n            case x\
    \ if x < 10000000000000000000 => (evenNum + 32, evenNum + 32)\n            case\
    \ x if x < 100000000000000000000 => (evenNum + 34, evenNum + 34)\n           \
    \ case x if x < 1000000000000000000000 => (evenNum + 36, evenNum + 36)\n     \
    \       case x if x < 10000000000000000000000 => (evenNum + 38, evenNum + 38)\n\
    \            case x if x < 100000000000000000000000 => (evenNum + 40, evenNum\
    \ + 40)\n            case x if x < 1000000000000000000000000 => (evenNum + 42,\
    \ evenNum + 42)\n            case x if x < 10000000000000000000000000 => (evenNum\
    \ + 44, evenNum + 44)\n            case x if x < 100000000000000000000000000 =>\
    \ (evenNum + 46, evenNum + 46)\n            case x if x < 1000000000000000000000000000\
    \ => (evenNum + 48, evenNum + 48)\n            case x if x < 10000000000000000000000000000\
    \ => (", "        var even = 0\n        var odd = 0\n        var result = 0\n\
    \        for(i <- 0 until num.toString.length) {\n            val num = num.toString.charAt(i).toInt\n\
    \            if(num % 2 == 0) {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n        }\n        result = Tuple2(even,\
    \ odd)\n        result", "        var evenCount : Long = 0\n        var oddCount\
    \ : Long = 0\n        var sumEven = 0\n        var sumOdd = 0\n        var sumEvenDigit\
    \ = 0\n        var sumOddDigit = 0\n        var lastOddDigit = 0\n        var\
    \ lastEvenDigit = 0\n        var digit = 0\n\n        while (num > 0) {\n    \
    \        digit += 1\n            lastOddDigit = num / 10l\n            num = lastOddDigit\n\
    \            sumOdd += lastOddDigit % 2\n            sumEvenDigit += lastOddDigit\
    \ / 2\n        }\n\n        while (evenCount < digit) {\n            sumEven +=\
    \ lastEvenDigit\n            evenCount += 1\n            lastEvenDigit = num /\
    \ 10l\n            num = lastEvenDigit\n            sumEvenDigit += lastEvenDigit\
    \ / 2\n        }\n\n        while (oddCount < digit - evenCount) {\n         \
    \   sumOdd += lastOddDigit\n            oddCount += 1\n            lastOddDigit\
    \ = num / 10l\n            num = lastOddDigit\n            sumOddDigit += lastOddDigit\
    \ % 2\n        }\n        val even_num = sumEven\n        val odd_num = sumOdd\n\
    \        val evenodd_num = evenCount + oddCount\n        val even_sum = sumEvenDigit\
    \ * digit\n        val odd_sum = sumOddDigit * digit\n        val even_odd_num\
    \ = evenodd_num * digit\n        return (even_num, odd_num);", "        var even\
    \ = 0 \n        var odd = 0 \n        for (x <- num.toString.reverse) {\n    \
    \        val xNum = x.toInt\n            if (xNum % 2 == 0) {\n              \
    \  even += xNum\n            } else {\n                odd += xNum\n         \
    \   }\n        }\n        (even, odd)", "        val evenDigit = num.toString.filter(x\
    \ => (x % 2 == 0)).length\n        val oddDigit = num.toString.filter(x => (x\
    \ % 2 == 1)).length\n        Tuple2(evenDigit, oddDigit)", "        var evenCount\
    \ : Long = 0\n        var oddCount : Long = 0\n        var digit = 0\n\n     \
    \   for (digit <- 0 until num.toString().length) {\n            if (num % 10 ==\
    \ 0)\n                evenCount += 1\n            else\n                oddCount\
    \ += 1\n        }\n\n        return Tuple2(evenCount, oddCount)", "        val\
    \ count = new mutable.HashMap[Int, Int]()\n        // find all odd digits and\
    \ record their count\n        while(num > 0){\n            val rem = num % 10\n\
    \            count.putIfAbsent(rem, count.get(rem) + 1)\n            num = num\
    \ / 10\n        }\n        val oddCount = count.filter(_._2 < 2).size\n      \
    \  (count.size, oddCount)", "        val evenCount = 0\n        val oddCount =\
    \ 0\n\n        var temp = 0\n        for(i <- num.toString.toInt) {\n        \
    \    if((i%2) == 0) {\n                evenCount += 1\n            } else {\n\
    \                oddCount += 1\n            }\n\n            if(evenCount > 0\
    \ && oddCount > 0) {\n                break\n            }\n        }\n\n    \
    \    if(evenCount == 0 && oddCount == 0) {\n            return (1, 0)\n      \
    \  }\n        return (evenCount, oddCount)", "        var evenCount = 0L\n   \
    \     var oddCount = 0L\n        for(i <- 1 to num.toInt) {\n            val numStr\
    \ = i.toString\n            val numArray = numStr.split(\"-\")\n            val\
    \ even = numArray(0)\n            val odd = numArray(1)\n            evenCount\
    \ += even.toLong\n            oddCount += odd.toLong\n        }\n        return\
    \ ((evenCount, oddCount))", "        var even = 0\n        var odd = 0\n     \
    \   var num = num.toInt;\n        var remainder = num % 10;\n        num /= 10;\n\
    \n        while (num > 0) {\n            var newRemainder = num % 10;\n      \
    \      if (newRemainder == 0) {\n                even = even.toLong + even;\n\
    \                odd += 1;\n            }\n            if (newRemainder != 0)\
    \ {\n                even = even.toLong + even;\n                odd += 1;\n \
    \           }\n            num /= 10;\n        }\n        return (even.toLong,\
    \ odd.toLong)", "        val n = num.toInt\n        val evenCount = n.filter(_\
    \ % 2 == 0).length\n        val oddCount = n.filter(_ % 2 == 1).length\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount =\
    \ 0\n        var numAsString: String = num.toString\n        for (i <- 0 until\
    \ numAsString.length()) {\n            val intVal = numAsString.charAt(i).toInt\n\
    \            if (intVal % 2 == 0) {\n                evenCount += 1\n        \
    \    }\n            else {\n                oddCount += 1\n            }\n   \
    \     }\n        return (evenCount, oddCount)", "        val even = num filter\
    \ { _ % 2 == 0 }\n        val odd = num filter { _ % 2 == 1 }\n        (even.length,\
    \ odd.length)", "        val counters = mutable.Map.empty[Long, Long]\n      \
    \  var countEven = 1\n        var countOdd = 1\n        while (num >= 0) {\n \
    \           val digit = num % 10\n            val counter = counters.get(digit)\n\
    \            if (counter == null) {\n                counters(digit) = countEven\n\
    \                countEven *= 2\n            } else {\n                counters(digit)\
    \ *= 2\n                countEven *= 2\n                countOdd *= 2\n      \
    \      }\n            num /= 10\n        }\n        (counters(0), counters(1))",
  "        if (num == 0) (1, 0)\n        if (num == 1) (0, 1)\n        if (num < 0)\
    \ (-num, -num)\n        val list = num.toString.toList.sorted\n        val evens\
    \ = list.count { x => x % 2 == 0 }\n        val odds = list.count { x => x % 2\
    \ != 0 }\n        ((evens, odds))", "        if (num > 0) {\n            var even\
    \ = 0L;\n            var odd = 0L;\n            while(num > 0) {\n           \
    \     val remainder = num % 10L;\n                if (remainder == 0L) {\n   \
    \                 even += 1L;\n                } else {\n                    odd\
    \ += 1L;\n                }\n                num /= 10L;\n            }\n    \
    \        Tuple2(even, odd);\n        } else {\n            throw new IllegalArgumentException(\"\
    Invalid input\");\n        }", "        var even = 0\n        var odd = 0\n  \
    \      while (even <= num) {\n            if (num % 2 == 0) {\n              \
    \  even += 1\n            } else {\n                odd += 1\n            }\n\
    \            num /= 10\n        }\n        (odd, even)", "        val even = num.toString.grouped(2).filter(_.head==0)\n\
    \        val odd = num.toString.grouped(2).filter(_.head==1)\n        (even.size,\
    \ odd.size)", "        if(num < 0) throw new IllegalArgumentException(\"Input\
    \ must be a positive number\");\n        if(num == 0) return (-1L, 1L)\n     \
    \   val digits = num.toString.reverse.foldLeft((0L, 0L)){\n            case ((evenDigit,\
    \ oddDigit), digit) => (digit % 2 == 0 ? digit.toLong : digit.toLong * 10 + digit.toLong,\
    \ digit % 2 == 0 ? evenDigit : oddDigit)\n        }\n        (digits._1, digits._2)",
  "        // Convert num to string\n        val str = num.toString\n        // Initialize\
    \ a mutable collection\n        var evenCount = 0\n        var oddCount = 0\n\
    \        // Iterate through string and increment the counter for even and odd\
    \ digits\n        str.foreach(i => {\n            if (i % 2 == 0) {\n        \
    \        evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n        })\n        // Return the tuple of the digits\n      \
    \  (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount =\
    \ 0\n        for(i <- 0 to num){\n            if(i%2 != 0){\n                evenCount\
    \ += 1\n            }\n            else{\n                oddCount += 1\n    \
    \        }\n        }\n        return (evenCount, oddCount)", "        val (even,\
    \ odd) = num.asInstanceOf[Long](2).divmod(10l).unzip\n        (even, odd)", " \
    \       val evenCount :Long = num.toString.split(\"\\\\D\").length\n        val\
    \ oddCount = num.toString.split(\"\\\\D\").filter(_ % 2 != 0).length\n       \
    \ (evenCount, oddCount)", "        val even: MutableSet[Long] = mutable.Set[Long]()\n\
    \        val odd: MutableSet[Long] = mutable.Set[Long]()\n        val longDigits\
    \ = num.toString.toLong\n        for (digit <- 0 until longDigits) {\n       \
    \     if (digit % 2 == 0) {\n                even.add(digit)\n            } else\
    \ {\n                odd.add(digit)\n            }\n        }\n        (even.size,\
    \ odd.size)", "        val n = num.toString.toInt\n        val m = Math.pow(n,\
    \ 2)\n        val even = 0\n        val odd = 0\n        val count = 0\n     \
    \   for (i <- 0 to n) {\n            val t = num % m\n            num = num /\
    \ m\n            if (t % 2 == 0) {\n                even += 1\n            }\n\
    \            else {\n                odd += 1\n            }\n        }\n    \
    \    val evenOdd = (even.toLong, odd.toLong)\n        return (evenOdd, count)",
  '        num.asInstanceOf[Long].toString.toList.filter(_ % 2 == 0).length.toLong',
  "        val even = math.ceil(num / 2.0)\n        val odd = num - even\n\n     \
    \   (even, odd)", "        // Write your code here\n        var countEven = 0\n\
    \        var countOdd = 0\n        var numString = \"\" + num\n\n        // first\
    \ countOdd\n        for ( i <- 0 until numString.length ) {\n            if (numString(i).isDigit)\
    \ {\n                val n = new BigInteger(numString(i).toInt)\n            \
    \    if (n.toString.size == 1)\n                    countOdd += 1\n          \
    \      else if (n.toString.size == 2) {\n                    countEven += 1 //\
    \ we only count odd if we have two digits, not more\n                }\n     \
    \       }\n        }\n        // Now countEven\n        for ( i <- 0 until numString.length\
    \ ) {\n            if (!(numString(i).isDigit))\n                countEven +=\
    \ 0 // we only count even if we have a digit\n        }\n        // (countEven,\
    \ countOdd)\n        (countEven, countOdd)", "        if (num < 0L) throw new\
    \ ArithmeticException(\"Negative number is detected.\")\n        var even = 0L\n\
    \        var odd = 0L\n        var rem = num\n        while(true){\n         \
    \   val mod = rem % 10L\n            even += (mod == 0L) ? 1L : 0L\n         \
    \   odd += (mod == 2L) ? 1L : 0L\n            rem /= 10L\n            if (rem\
    \ < 1L) break\n        }\n        (even, odd)", "        var even_count : Long\
    \ = 0\n        var odd_count : Long = 0\n        var next_num : Long = num\n \
    \       var next_num2 : Long = num\n\n        while (next_num != 0){\n       \
    \     val current_num_as_int = next_num.toInt\n            if(current_num_as_int\
    \ == 0){\n                next_num2 = 0\n            }\n            else{\n  \
    \              next_num2 = next_num % 10\n            }\n\n            even_count\
    \ += next_num2\n            odd_count += 10 - next_num2\n\n            next_num\
    \ = next_num / 10\n\n        }\n\n        return (even_count, odd_count)", " \
    \       // count the number of digits\n        var cntEven = 0\n        var cntOdd\
    \ = 0\n        var digits = 0\n        var evenDigit = 0\n        var oddDigit\
    \ = 0\n\n        // Loop through all the digits\n        while (digits < num.toString.length)\
    \ {\n            var index = num.toString.length - digits - 1\n            var\
    \ digit = num.toString.charAt(index)\n\n            digits = digits+1\n\n    \
    \        if (digit == \"0\") {\n                if (digits % 2 == 0) {\n     \
    \               evenDigit = evenDigit + 1\n                } else {\n        \
    \            oddDigit = oddDigit + 1\n                }\n                digits\
    \ = digits-1\n            } else {\n                if (digit == \"1\") {\n  \
    \                  if (digits % 2 == 0) {\n                        evenDigit =\
    \ evenDigit + 1\n                    } else {\n                        oddDigit\
    \ = oddDigit + 1\n                    }\n                    digits = digits-1\n\
    \                } else {\n                    if (digits % 2 == 0) {\n      \
    \                  evenDigit = evenDigit + 1\n                    } else {\n \
    \                       oddDigit = oddDigit + 1\n                    }\n     \
    \               digits = digits-1\n                }\n            }\n\n      \
    \  }\n\n        // return the counts\n        (cntEven, cntOdd)", "        var\
    \ evenOddDigitsCount = 0\n        var evenDigitsCount = 0\n        var oddDigitsCount\
    \ = 0\n        for (d <- num.toCharArray.toSeq){\n            if(d == '0'){\n\
    \                evenDigitsCount += 1\n            } else {\n                oddDigitsCount\
    \ += 1\n            }\n        }\n        (evenDigitsCount, oddDigitsCount)",
  "        val numAsList = num.toString.toList\n        val evenDigit = numAsList.filter\
    \ { n => n % 2 == 0 }.size\n        val oddDigit = numAsList.filter { n => n %\
    \ 2 != 0 }.size\n        val tuple = (evenDigit, oddDigit)\n        return tuple",
  "        var evenDigit : Long = 0\n        var oddDigit : Long = 0\n        var\
    \ i : Long = 0\n        var temp : Long = 0\n        while (num > 0) {\n     \
    \       temp = num % 10\n            num = num / 10\n            evenDigit = evenDigit\
    \ + temp\n            if (temp % 2 == 0) {\n                oddDigit = oddDigit\
    \ + 1\n            }\n            i = i + 1\n        }\n        return (evenDigit,\
    \ oddDigit)", "        var sumEven = 0\n        var sumOdd = 1\n        var i\
    \ = 0\n        while (i < num.length) {\n            if (num(i) % 2 == 0) {\n\
    \                sumEven += num(i)\n                i++\n            } else {\n\
    \                sumOdd += num(i)\n                i++\n            }\n      \
    \  }\n        (sumEven, sumOdd)", "        if (num < 0) throw new ArithmeticException(\"\
    Input should be greater than 0\")\n\n        var evenCount : Long = 0\n      \
    \  var oddCount : Long = 0\n\n        var remainder = 0\n\n        var i = num\n\
    \        var quotient = 0\n\n        while(i != 0) {\n            quotient = i\
    \ % 10\n            i = i / 10\n\n            if (quotient == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n\n            if (quotient > 0) remainder\
    \ = 10\n            else remainder = 0\n        }\n\n        ((evenCount, oddCount),\
    \ (remainder, num))", "        val oddDigitsCount = num.toString.filter(_ % 2\
    \ == 0).length\n        val evenDigitsCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenDigitsCount, oddDigitsCount)", "      val m = num.toDouble\n   \
    \   val odd = num.toString replaceAll(\"\\\\D\", \"\")\n      val even = odd.replaceAll(\"\
    0+$\", \"\")\n      (odd.length, even.length)", "        val oddSum = 0l\n   \
    \     val evenSum = 0l\n        val n = new mutable.Queue[Long]\n        while(num\
    \ > 0l) {\n            n.enqueue(num)\n            num /= 10l\n        }\n   \
    \     for (i <- 0 to n.size - 1) {\n            if(n.dequeue() % 2 == 0) {\n \
    \               evenSum += n.dequeue()\n            } else {\n               \
    \ oddSum += n.dequeue()\n            }\n        }\n        (evenSum, oddSum)",
  "        val intDigits = num.toString.reverse.grouped(2).map(_.toInt)\n        val\
    \ evenIntDigits = intDigits.filter(num => num % 2 == 0)\n        val oddIntDigits\
    \ = intDigits.filter(num => num % 2 != 0)\n        val evenLen = evenIntDigits.size\n\
    \        val oddLen = oddIntDigits.size\n        (evenLen, oddLen)", "       \
    \ // Counting odd digits in one go\n        val evenOddDigitsCount = ((num.toString.length\
    \ - num.toString.filter(_ % 2 == 0).toList.length) /\n                       \
    \              (num.toString.toString.length))\n        val oddDigitsCount = ((num.toString.length\
    \ - num.toString.filter(_ % 2 == 1).toList.length) /\n                       \
    \       (num.toString.toString.length))\n        val oddDigitsTuple = (oddDigitsCount,\
    \ evenOddDigitsCount)\n        oddDigitsTuple", "        val odd = num.toString.reverse.charAt(0).toInt\n\
    \        val even = num.toString.reverse.charAt(1).toInt\n        (odd, even)",
  "        var odd = 0\n        var even = 0\n        while(num > 0) {\n         \
    \   val temp = num / 10\n            if(temp % 2 == 0)\n                even +=\
    \ temp\n            else\n                odd += temp\n            num = temp\n\
    \        }\n        return (even, odd)", "        var evenCount : Long = 0\n \
    \       var oddCount : Long = 0\n        while(num > 0) {\n            if(num\
    \ % 2 == 0) {\n                evenCount += 1\n            }\n            else\
    \ {\n                oddCount += 1\n            }\n            num /= 10\n   \
    \     }\n        return (evenCount, oddCount)", "        val rem = num % 10\n\
    \        val evenCount = if(rem == 0) 1 else 2\n        val oddCount = if(rem\
    \ == 10) 1 else 0\n        (evenCount, oddCount)", "        var sumEven = 0\n\
    \        var sumOdd = 0\n\n        val digits = num.toString.reverse.map(_.toInt)\n\
    \        val evenCount = digits.count(_ % 2 == 0)\n        val oddCount = digits.count(_\
    \ % 2 != 0)\n\n        (evenCount, oddCount)", "        val evenNums = num.toString.dropWhile(_\
    \ <= 0).dropWhile(_ > 0)\n        val oddNums = num.toString.dropWhile(_ < 0).dropWhile(_\
    \ >= 0)\n        (evenNums.size.toLong, oddNums.size.toLong)", "        val even_count\
    \ = num.toString.filter(_.isDigit).length\n        val odd_count = num.toString.filterNot(_.isDigit).length\n\
    \        val tuple = even_count zip odd_count\n        tuple", "        val evenCount\
    \ = 0\n        val oddCount = 0\n        // Count the number of even and odd digits\n\
    \        while(num > 0) {\n            if(num % 2 != 0)\n                oddCount\
    \ += 1\n            num /= 10\n        }\n        // Return the tuple with the\
    \ count of even and odd digits\n        (evenCount, oddCount)", "        var even\
    \ = 0\n        var odd = 0\n        var numString = \"\" + num\n\n        for\
    \ (i <- 0 until numString.length) {\n            if (numString.charAt(i) == '0')\
    \ {\n                even += 1\n            } else {\n                odd += 1\n\
    \            }\n        }\n        return (even, odd)", "        val sumEven =\
    \ num.toString.split(\"-\".toCharArray).map(_.length).sum\n        val sumOdd\
    \ = num.toString.reverse.split('-'.toCharArray).map(_.length).sum\n        (sumEven,\
    \ sumOdd)", "        val digits = num.toString.toList\n        val evenCount =\
    \ digits.count( d => d % 2 == 0)\n        val oddCount = digits.count( d => d\
    \ % 2 == 1)\n        Tuple2(evenCount, oddCount)", "        var even = num\n \
    \       var odd = num\n\n        while (num >= 10) {\n            even = (even\
    \ / 10).toLong\n            odd = (odd / 10).toLong\n        }\n        (even,\
    \ odd)", "        var evenCount = 1 // even digit\n        var oddCount = 1 //\
    \ odd digit\n        for(i <- 0 until num) {\n            val d = num / i.toInt\n\
    \            if(d % 2 == 0) {\n                evenCount += 1\n            } else\
    \ {\n                oddCount += 1\n            }\n        }\n        (evenCount,\
    \ oddCount)", "        var result = 0l\n        for(i <- 0 until num) {\n    \
    \        val d = num % 10\n            if(d != 0) {\n                result =\
    \ result + 1\n            }\n            num = num / 10\n        }\n        val\
    \ even = result\n        val odd = num - even\n        Tuple2(even, odd)", " \
    \       val digits = num.toString.reverse.map(_.toInt)\n        // find the number\
    \ of even digits:\n        var evenDigit : Int = 0\n        digits = digits.filter(_.toDouble\
    \ % 2 == 0)\n        val even = digits.foldLeft(List[Double](0.0)) { (acc, digit)\
    \ =>\n            if (digit.toDouble % 2 == 0) acc.head + digit.toDouble\n   \
    \         else acc.head + 0.1 }\n        evenDigit = even.sum\n\n        // find\
    \ the number of odd digits:\n        var oddDigit : Int = 0\n        digits =\
    \ digits.filter(_.toDouble % 2 != 0)\n        val odd = digits.foldLeft(List[Double](0.0))\
    \ { (acc, digit) =>\n            if (digit.toDouble % 2 != 0) acc.head + digit.toDouble\n\
    \            else acc.head + 0.1 }\n        oddDigit = odd.sum\n\n        (evenDigit,\
    \ oddDigit)", "        if(num <= 0) return (0L, 0L)\n        val oddCount : mutable.Set[Long]\
    \ = mutable.Set[Long]()\n        val evenCount : mutable.Set[Long] = mutable.Set[Long]()\n\
    \        while(num != 0) {\n            if(num % 2 == 0) evenCount += num\n  \
    \          else oddCount += num\n            val temp = num / 10\n           \
    \ num = temp\n        }\n        (evenCount.size, oddCount.size)", "        var\
    \ countEven = 0\n        var countOdd = 0\n        while (num > 0) {\n       \
    \     val last = num % 10\n            if (last % 2 == 0) {\n                countEven\
    \ += 1\n            } else {\n                countOdd += 1\n            }\n \
    \           num = num / 10\n        }\n        return (countEven, countOdd)",
  "        val even = num.toInt/2 % 2 == 0\n        val odd = num.toInt/2 > 0\n  \
    \      val count = (even, odd)\n        count", "        var count = 0\n     \
    \   var even = 0\n        var odd = 0\n\n        var str : String = num.toString\n\
    \        var strList = str.split(\",\")\n        strList.foreach(str => {\n  \
    \          if (str.toString.indexOf(\"e\") > -1) {\n                even += str.toString.length\n\
    \            } else {\n                odd += str.toString.length\n          \
    \  }\n        })\n        return ((even.toLong, odd.toLong))", "        var numDigits\
    \ : Long = 0\n        var evenDigit : Long = 0\n        var oddDigit : Long =\
    \ 0\n        var totalDigits : Long = 0\n        var tempNum : Long = 0\n\n  \
    \      // First get the number of digits in num\n        numDigits = num.toString.length\n\
    \n        // Now for each digit check evenDigit or oddDigit accordingly\n    \
    \    while (tempNum < numDigits) {\n            // We take num mod 10\n      \
    \      tempNum = num % 10\n\n            // If the digit is even, increment evenDigit\
    \ by 1\n            if (tempNum == 0) {\n                evenDigit += 1\n    \
    \        } else {\n                // else increment oddDigit by 1\n         \
    \       oddDigit += 1\n            }\n\n            // Now increment num\n   \
    \         num /= 10\n        }\n\n        // Then create tuple and return\n  \
    \      return (evenDigit, oddDigit)", "        val even = num.toString.filter(_.isDigit).filter(x\
    \ => x.toInt % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(x\
    \ => x.toInt % 2 != 0).length\n        (even, odd)", "        var even = 1\n \
    \       var odd = 1\n        val num = num.toString\n        var index = 1\n \
    \       var length = num.length\n        while (index < length) {\n          \
    \  if (num(index) == '0') {\n                even = even + 1\n            } else\
    \ {\n                odd = odd + 1\n            }\n            index += 1\n  \
    \      }\n        return even.toLong -> (odd + 1)", "        val counts = mutable.HashMap[Int,\
    \ Long]()\n        val even = mutable.ArrayBuffer(0)\n        val odd = mutable.ArrayBuffer(0)\n\
    \        // Convert the number to string\n        val str = num.toString\n   \
    \     // Iterate over each char one by one\n        for (i <- 0 until str.length)\
    \ {\n            val c = str.charAt(i)\n            // If its an even digit, add\
    \ it to the even arraybuffer\n            if(c == '2') {\n                even\
    \ += i\n            }\n            // If its an odd digit, add it to the odd arraybuffer\n\
    \            if(c == '1') {\n                odd += i\n            }\n       \
    \     counts.getOrElse(c, 0)\n            counts += (c -> counts.getOrElse(c,\
    \ 0)+1)\n        }\n        // Count number of even digits and return it\n   \
    \     (even.toArray.length, odd.toArray.length)", "        val n = num % 2l\n\
    \        val m = num / 2l\n        if (n == 0) (1, 1l) else (2, 1)", "       def\
    \ toDigit(a: Long, b: Long) : Long = {\n         if (a < 0 || b < 0)\n       \
    \    throw new IllegalArgumentException(\"Invalid arguments\")\n         else\
    \ if (a == 0)\n           b\n         else if (b == 0)\n           a\n       \
    \  else\n           a / 10 + b / 10\n       }\n\n       val nums = num.toString.toLongArray.toIndexedSeq\n\
    \       val even = 0\n       val odd = 0\n       nums.foreach(num => {\n     \
    \    val n = toDigit(num, num)\n         if (num % 2 == 0)\n           even +=\
    \ n\n         else\n           odd += n\n       })\n       Tuple2(odd, even)",
  "        if (num < 0) (-1l, -1l) // impossible since we are using Long type\n  \
    \      else {\n            var count = 0;\n            var odd = 1L;\n       \
    \     var even = 1L;\n            var n = num;\n            while (n > 0) {\n\
    \                n = n/10L\n                if (n % 2 == 0) {\n              \
    \      even = even * 10 + n % 10;\n                    count = count + 1\n   \
    \             } else {\n                    odd = odd * 10 + n % 10;\n       \
    \             count = count + 1\n                }\n            }\n          \
    \  (odd, even)\n        }", "        var even = 0\n        var odd = 0\n     \
    \   var i = num.toInt\n        var a = i.toString()\n        while (i-- != 0)\
    \ {\n            if (i % 2 == 0) {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n        }\n        return (even,\
    \ odd)", "        if (num < 0) throw new IllegalArgumentException(\"num must be\
    \ positive\")\n        val count = mutable.ArrayBuffer.empty[Long]\n        var\
    \ odd = 0\n        var even = 0\n        num match {\n            case -1 | 0\
    \ => throw new IllegalArgumentException(\"num must be a positive Long\")\n   \
    \         case _ => {\n                var digit = num / 1000000000000\n     \
    \           var remainder = num - (digit * 1000000000000)\n                for\
    \ (_ <- 0 until digit) {\n                    val tempNum = remainder * 10\n \
    \                   count += tempNum\n                    remainder = tempNum\n\
    \                }\n                val tempNum = remainder * 1000000000000\n\
    \                count += tempNum\n                count += (digit * 1000000000000)\n\
    \            }\n        }\n        count.reverse.toList.sortWith(_ > _).reverse.foldLeft((0L,\
    \ 0L))((a, b) => (a + b, a)).tail", "        def getEven(x : Long) : Long = if(x\
    \ % 2 == 0) 1l else 0l\n        def getOdd(x : Long) : Long = if(x % 2 == 1) 1l\
    \ else 0l\n\n        // Get even-odd digits\n        var even = 0l\n        var\
    \ odd = 0l\n        for(i <- 0 until num.toInt) {\n            var tempEven =\
    \ getEven(i)\n            var tempOdd = getOd(i)\n            even += tempEven\n\
    \            odd += tempOdd\n        }\n        \n        // Get the tuple with\
    \ number of even and odd digits.\n        Tuple2(even.toInt, odd.toInt)", "  \
    \      var even = 0\n        var odd = 0\n        var tmp = num\n        while\
    \ (tmp > 0) {\n            val tmp = num / 10\n            if (tmp % 2 == 0) {\n\
    \                even += 1\n            } else {\n                odd += 1\n \
    \           }\n        }\n        (odd, even)", "      val numberStr = \"%d\"\
    .toCharArray.mkString\n      val number = num.toString.toLong\n      val evenDigits\
    \ = number.toString.filterNot(numberStr.contains).toList.map(_.toInt).filter(_\
    \ % 2 == 0).toList.length\n      val oddDigits = number.toString.filterNot(numberStr.contains).toList.map(_.toInt).filter(_\
    \ % 2 != 0).toList.length\n      (evenDigits, oddDigits)", "        val numDigits\
    \ = num.toString().length\n        val evens = num.toString.filter(_.isDigit)\n\
    \        val odds  = num.toString.filterNot(_.isDigit)\n        (evens.length,\
    \ odds.length)", '        num.toString.reverse.grouped(2).map{case Array(x, y)
    => (x, y.length)}.toMap', "        val even = num.toString.filter(x => x % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n \
    \       (even, odd)", "        val str = new StringBuilder()\n        var evenCount\
    \ : Long = 0\n        var oddCount : Long = 0\n        while (num != 0) {\n  \
    \          str.append(num % 10)\n            num /= 10\n            if (num !=\
    \ 0) {\n                if (num % 2 == 0) {\n                    evenCount +=\
    \ 1\n                }\n                else {\n                    oddCount +=\
    \ 1\n                }\n            }\n        }\n        (evenCount, oddCount)",
  "        val even = num filter { n => n % 2 == 0 }\n        val odd = num filter\
    \ { n => n % 2 != 0 }\n        even.length, odd.length", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        return Tuple2(even, odd)", "        val evenDigits : Seq[Long] = num.toString.filter(_\
    \ % 2 == 0).toSeq\n        val oddDigits : Seq[Long] = num.toString.filter(_ %\
    \ 2 == 1).toSeq\n        val numEven = evenDigits.size // number of even digits\
    \ in the number\n        val numOdd = oddDigits.size // number of odd digits in\
    \ the number\n        (numEven, numOdd)", "        // We will store the count\
    \ of even and odd digits in a tuple. \n        // The tuple consists of two elements,\
    \ even and odd digit count. \n        // If it is an even number, the value of\
    \ the tuple will be 0\n        val evenOddTuplable = new mutable.MutableTuple[Long,\
    \ Long]()\n        // We will store the count of even and odd digits in a tuple.\
    \ \n        // The tuple consists of two elements, even and odd digit count. \n\
    \        // If it is an odd number, the value of the tuple will be 0\n       \
    \ val evenOddTuplable1 = new mutable.MutableTuple[Long, Long]()\n        \n  \
    \      // Iterate the odd digits of the given number\n        for (i <- num.toString.dropWhile(_.isDigit).toInt)\
    \ {\n            evenOddTuplable.push((i, num.toString.indexOf(i, num.toString.lastIndexOf(i))\
    \ % 2 == 0))\n        }\n        // Iterate the even digits of the given number\n\
    \        for (i <- num.toString.takeWhile(_.isDigit).toInt) {\n            evenOddTuplable1.push((i,\
    \ num.toString.indexOf(i, num.toString.lastIndexOf(i)) % 2 == 1))\n        }\n\
    \        \n        // Return the tuple with the count of even and odd digit\n\
    \        evenOddTuplable.zip(evenOddTuplable1)", "        // Write your code here\n\
    \        val evenCount = 0\n        val oddCount = 0\n        val sum = 0\n  \
    \      for(i <- num.toString.reverse.sliding(2)){\n            sum += i\n    \
    \        if(i%2 == 0){\n                evenCount += 1\n            }else{\n \
    \               oddCount += 1\n            }\n        }\n        sum", "     \
    \   val digits = num.toString.reverse.grouped(2)\n        val even = digits.count(_\
    \ % 2 == 0)\n        val odd = digits.count(_ % 2 != 0)\n        tuple2(even,\
    \ odd)", "      val evenDigits : Long = 0\n      val oddDigits : Long = 0\n  \
    \    var temp = num\n      var temp = temp.toInt\n      while (temp != 0) {\n\
    \        temp = temp.toInt\n        if (temp % 2 == 0) {\n          evenDigits\
    \ += 1\n        } else {\n          oddDigits += 1\n        }\n      }\n     \
    \ (evenDigits, oddDigits)", "        if (num < 0) return (evenOddCount(-num),\
    \ num);\n        var even = 0l\n        var odd = 0l\n        while (num != 0)\
    \ {\n            val digit = num % 10\n            if (digit == 0) even += 1\n\
    \            else {\n                if (digit > 0) odd += 1\n               \
    \ num /= 10\n            }\n        }\n        (even, odd)", "      var evenDigit\
    \ : Long = 0\n      var oddDigit : Long = 0\n      val temp = num.toString.toLong\n\
    \      var tempInt = temp\n      while(tempInt > 0) {\n        if(tempInt % 2\
    \ == 0) evenDigit += 1\n        else oddDigit += 1\n        tempInt /= 10\n  \
    \    }\n      return (evenDigit, oddDigit)", "        val numStr = \"-\" + num.toString\n\
    \        val evenStrs = numStr.filter(str => str == \"0\").takeWhile(str => !str.isDigit).iterator\n\
    \        val oddStrs = numStr.filter(str => str != \"0\").takeWhile(str => !str.isDigit).iterator\n\
    \        evenStrs zip oddStrs", "        val evens = num.toString.takeWhile(_\
    \ != '0').count(c => c == '0')\n        val odds = num.toString.takeWhile(_ !=\
    \ '0').count(c => c == '1')\n        Tuple2(evens, odds)", "        var even =\
    \ num / 2l\n        var odd = num % 2l\n        while (odd > 0) {\n          \
    \  odd -= 1l\n            even += 2l\n        }\n        (even, odd)", "     \
    \   var evenCount = 0\n        var oddCount = 0\n        val str = num.toString\n\
    \        for ((c, i) <- str.toArray.zipWithIndex) \n            if(c % 2 == 0)\
    \ evenCount += i\n            else oddCount += i\n        (evenCount, oddCount)",
  "        var evenCount : Long = 0\n        var oddCount : Long = 0\n\n        var\
    \ digits = num.toString.reverse.map(_.toInt)\n\n        for (digit <- digits)\
    \ {\n            digit match {\n                case 0 => evenCount += 1\n   \
    \             case 1 => oddCount += 1\n                case _ => continue\n  \
    \          }\n        }\n\n        (evenCount, oddCount)", "        val digits\
    \ = num.toString\n        var evenCount = 0\n        var oddCount = 0\n      \
    \  for((i, c) <- digits.indices) {\n            val remainder = num % 10\n   \
    \         if(c == 0 && remainder == 0) {\n                evenCount += 1\n   \
    \         }\n            if(c == 1 && remainder != 0) {\n                oddCount\
    \ += 1\n            }\n            num = num / 10\n        }\n        (evenCount,\
    \ oddCount)", "        if (num == 0) {\n            (1L, 0L)\n        }\n    \
    \    else if (num < 0){\n            evenOddCount(-num)\n        }\n        else\
    \ {\n            val temp = num.toString.toInt\n            val even = temp filter\
    \ (_ % 2 == 0)\n            val odd = temp - even\n            (even.length, odd.length)\n\
    \        }", "        var even = 0\n        var odd = 0\n        for (i in 0 until\
    \ num) {\n            if (num % 2 == 0) {\n                even += 1\n       \
    \     } else {\n                odd += 1\n            }\n        }\n        return\
    \ (odd, even)", "        var evenCnt = 0\n        var oddCnt = 0\n        num\
    \ match {\n            case 0 | -1 => return (evenCnt, oddCnt)\n            case\
    \ n => n match {\n                case n % 2 => return (evenCnt, oddCnt)\n   \
    \             case n % 2 => oddCnt += 1\n                case _    => evenCnt\
    \ += 1\n            }\n        }\n        return (evenCnt, oddCnt)", "       \
    \ if (num < 0) return 0l\n\n        val evenCount = 0\n        val oddCount =\
    \ 0\n\n        while(num > 0){\n            if(num % 2 == 0) evenCount += 1\n\
    \            else               oddCount += 1\n            num = num / 10\n  \
    \      }\n\n        (evenCount, oddCount)", "        if (num < 0) throw new Exception(\"\
    Only positive numbers are allowed.\")\n        val evens = num.toString.takeWhile(_\
    \ => '0' != _).toList\n        val odds = num.toString.drop(evens.size)\n    \
    \    (evens.size, odds.size)", "        var numEven = 0\n        var numOdd =\
    \ 0\n        var remainder = num / 10\n        while(!(remainder == 0)) ++numEven,\
    \ --numOdd, remainder = num / 10, num % 10\n        while(!(remainder == 0)) ++numEven,\
    \ ++numOdd, remainder = num % 10, num / 10\n        while(num != 0) {\n      \
    \      num %= 10\n        }\n        if(num == 0) numEven, numOdd\n        else\
    \ numEven, numOdd", "        var evenCount = new mutable.HashMap[Long, Long]();\n\
    \        var oddCount = new mutable.HashMap[Long, Long]();\n        var evenDigit\
    \ : Long = 0;\n        var oddDigit : Long = 0;\n        var numDigit : Long =\
    \ 0;\n        val digits = num.toString.toLongArray.map(_.toInt)\n        while\
    \ (digits != -1) {\n            val digit = digits(digits.length-1)\n        \
    \    if(digit % 2 == 0){\n                evenDigit += digit\n               \
    \ evenCount += digit -> 1\n            } else if(digit % 2 != 0){\n          \
    \      oddDigit += digit\n                oddCount += digit -> 1\n           \
    \ } \n            numDigit += 1\n            digits -= 1\n        }\n        Tuple2(evenDigit,\
    \ oddCount)", "        val evenCount : Long = num.asInstanceOf[Int].par.filter(_\
    \ % 2 == 0).length\n        val oddCount : Long = num.asInstanceOf[Int].par.filter(_\
    \ % 2 != 0).length\n        (evenCount, oddCount)", "        val odd = num.toString.reverse.foldLeft(0)((acc,\
    \ b) => acc + b - '0')\n        val even = num.toString.reverse.foldLeft((num\
    \ % 2 == 0).lshift(1) + 1)((acc, b) => acc + b - '0')\n        (even, odd)", " \
    \       val digitCount = num.toString.length\n        val evenDigitCount = (num.toString.reverse.filter(_\
    \ % 2 == 0).length) / digitCount\n        val oddDigitCount = (num.toString.reverse.filter(_\
    \ % 2 != 0).length) / digitCount\n        (evenDigitCount, oddDigitCount)", " \
    \     val counts = mutable.Map.empty[Long, Long]\n      val temp = num\n     \
    \ var sum = 0\n      var even = 1\n      while(temp != 0) {\n        sum += 1\n\
    \        temp = temp / 10\n      }\n      while(sum != 0) {\n        if(temp %\
    \ 2 == 0) {\n          even *= 2\n          counts(even) = counts(even) + 1\n\
    \          temp /= 10\n        } else {\n          even += 1\n          temp /=\
    \ 10\n        }\n        sum += 1\n      }\n      (counts.filter(_._2 > 0).map(_._1),\
    \ counts.filter(_._2 < 0).map(_._1))", "        val counter = mutable.HashMap[Int,\
    \ Int]()\n        for( n <- num.toString.toInt if num > 0 )\n            if(num\
    \ % 2 == 0) counter(2) += 1\n            else if(num % 2 == 1) counter(1) + 1\n\
    \        val odd = counter(1).toDouble / 2\n        val even = counter(0).toDouble\
    \ / 2\n        (even, odd)", "        val l = math.abs(num)\n        val even\
    \ = math.min(l % 2 , 0)\n        val odd = l - even\n        (even, odd)", " \
    \       val nums = num.abs.toString.reverse\n        nums.takeWhile(!_.isDigit)\n\
    \                .map(_.toInt)\n                .map(i => (i, nums.drop(i).takeWhile(!_.isDigit).length))\n\
    \                .filter(_._2 == 1).map(_._1)\n                .foldRight((0l,\
    \ 0l))((a, b) => a + (b._1, b._2))", "        require(num > 0, \"num must be positive\"\
    )\n        require(num <= Long.MaxValue, \"num must be less than a max value of\
    \ \" + Long.MaxValue)\n        var count = 0\n        var even = 0\n        var\
    \ odd = 0\n        var remainder = num\n        while (remainder > 0) {\n    \
    \        if (remainder % 2 == 0) {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n            count += 1\n       \
    \     remainder = remainder / 2\n        }\n        even.toLong -> odd.toLong"]
stop_tokens:
- "\n    }\n"
