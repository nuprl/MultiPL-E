language: scala
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split\n\n      \
    \  if (words.length == 0) {\n            return Nil\n        }\n\n        var\
    \ found = 0\n        var list: List[String] = Nil\n\n        words.foreach(w =>\
    \ if (found.compareTo(n) == 0L) {\n            found += 1\n            if (found\
    \ == n)\n                list ::= w\n        }) \n\n        return list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmp5v5szro4.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Your code goes here\n     \
    \   var ret: List[String] = List()\n        val myset = s.toSet\n        var cnt:\
    \ Long = 0\n        for (w <- myset) {\n            if (w.toString.count(_ ==\
    \ 'a') > n || w.toString.count(_ == 'e') > n || w.toString.count(_ == 'i') > n\
    \ || w.toString.count(_ == 'o') > n || w.toString.count(_ == 'u') > n) {\n   \
    \             cnt += 1\n            }\n            if (cnt == n) {\n         \
    \       ret += w\n            }\n        }\n        if (ret.size == 0) {\n   \
    \         ret\n        } else {\n            ret\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_3udi9zz.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                ret += w\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length - 1) if (s(i).isConsonant && s.substring(i,\
    \ i+1).isConsonant) {\n            val next = s.substring(i+1, i+2)\n        \
    \    if (next.length == n) words += next\n        }\n        if (s.length == 0)\
    \ words.toList\n        else words\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldg5vwml.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpldg5vwml.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until s.length\
    \ - \e[31m1\e[0m) \e[33mif\e[0m (s(i).isConsonant && s.substring(i, i+\e[31m1\e\
    [0m).isConsonant) {\n\e[31m\e[31m   |\e[0m                                   \
    \         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isConsonant is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val r = new scala.collection.mutable.StringBuilder(s)\n\
    \        var i : Int = 0\n        while (i < r.length) {\n            if (r.charAt(i)\
    \ == ' ') { \n                if (r.length == i) \n                    r.clear()\n\
    \                else\n                    r.setCharAt(i, ' ')\n            }\n\
    \            i += \n                if (r.charAt(i) != ' ') \n               \
    \     r.length\n                else if (r.charAt(i) == ' ' && r.length != i)\
    \ \n                    1\n                else\n                    -1\n    \
    \    }\n        if (n == 1l) \n            List(s)\n        else if (r.length\
    \ == 0) \n            Nil\n        else \n            r.split(\" \").map(_.toUpperCase).filter(_.size\
    \ == n).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpku_x2osv.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            i += \n\e[31m\e[31m   |\e[0m            \
    \    ^\e[0m\n\e[31m   |\e[0m                expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpku_x2osv.scala:33:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (r.charAt(i) == \e[31m' '\e[0m && r.length\
    \ != i) \n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m    \
    \            end of statement expected but 'else' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpku_x2osv.scala:35:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m                \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but 'else' found\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpku_x2osv.scala:34:20\
    \ ----------------\e[0m\e[0m\n\e[33m34 |\e[0m                    \e[31m1\e[0m\n\
    \e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        var result = List()\n        for (i<-0 until list.size) {\n         \
    \   if ((list.count(elem => elem.contains(s(i), i, n)) > 0l)) {\n            \
    \    result += list(i)\n            }\n        }\n        if (result.isEmpty)\
    \ List()\n        else result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjl9mg4nf.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result += list(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[Nothing] - did you mean List[Nothing].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val map = mutable.HashMap()\n\
    \        // We use a mutable map to track how each word is seen \n        val\
    \ words = mutable.ArrayBuffer.empty[String]\n        \n        // We use a mutable\
    \ Set to track how each character is seen\n        val characters = mutable.Set.empty[Char]\n\
    \        \n        // We iterate through the characters in the string\n      \
    \  for(i <- 0 until s.length()) {\n            val c = s.charAt(i)\n         \
    \   \n            // If this character has been seen before\n            if(map.contains(c))\
    \ {\n                val prev = map.get(c).get\n                // If n is greater\
    \ than the current number of consonants \n                // seen on this character\n\
    \                if(n == prev) {\n                    characters -= c\n      \
    \          } else {\n                    // Otherwise, keep adding to the set\n\
    \                    characters -= c\n                    characters += c\n  \
    \              }\n            } else {\n                // Otherwise, keep adding\
    \ to the set\n                characters -= c\n                characters += c\n\
    \            }\n            \n            // If the character is in the set, add\
    \ the word to the list\n            if(characters.contains(c)) {\n           \
    \     words += s.substring(i)\n            }\n            \n            // Update\
    \ the map if the character was previously seen\n            if(map.contains(c))\
    \ {\n                map.get(c) += n\n            } else {\n                map.put(c,\
    \ Set(n))\n            }\n        }\n        \n        // Return the list\n  \
    \      words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5brl_9w.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf5brl_9w.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf5brl_9w.scala:26:25 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcharacters\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result = List[String]()\n\
    \        for(c <- s.toCharArray) {\n            if(c.toString.toList.filter(_\
    \ == 'b').length == n || c.toString.toList.filter(_ == 'c').length == n || c.toString.toList.filter(_\
    \ == 'd').length == n || c.toString.toList.filter(_ == 'f').length == n || c.toString.toList.filter(_\
    \ == 'g').length == n || c.toString.toList.filter(_ == 'h').length == n || c.toString.toList.filter(_\
    \ == 'j').length == n || c.toString.toList.filter(_ == 'k').length == n || c.toString.toList.filter(_\
    \ == 'l').length == n || c.toString.toList.filter(_ == 'm').length == n || c.toString.toList.filter(_\
    \ == 'n').length == n || c.toString.toList.filter(_ == 'p').length == n || c.toString.toList.filter(_\
    \ == 'r').length == n || c.toString.toList.filter(_ == 's').length == n || c.toString.toList.filter(_\
    \ == 't').length == n || c.toString.toList.filter(_ == 'v').length == n || c.toString.toList.filter(_\
    \ == 'w').length == n || c.toString.toList.filter(_ == 'x').length == n || c.toString.toList.filter(_\
    \ == 'z').length == n) {\n                result += [s]\n            }\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7uxh2wcz.scala:24:26 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                result += [s]\n\e[31m\e[31m   |\e[0m\
    \                          ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'['\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7uxh2wcz.scala:24:23 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                result += [s]\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result: List[String] = Nil\n\
    \        var i = 0\n        var last: Option[String] = None\n        while (i\
    \ < s.length() && i <= n) {\n            if (s.charAt(i) == '\\\\') {\n      \
    \          i += 1\n            }\n            if (s.charAt(i) == ' ') {\n    \
    \            if (!last.isDefined) {\n                    last = Some(s.substring(i,\
    \ i + 1))\n                } else {\n                    result ::= last.get\n\
    \                    last = Some(\"\")\n                }\n            }\n   \
    \         i += 1\n        }\n        if (!last.isDefined) {\n            result\
    \ ::= last.get\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzd6zrzls.scala:44)\n\tat Problem.main(tmpzd6zrzls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // TODO: define words with exactly\
    \ n consonants.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp44ns41o3.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// TODO: define words with exactly n consonants.\e[0m\n\e[31m22 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // base case: empty string \n\
    \        if (s == \"\") List.empty[String]\n        else {\n            val list\
    \ = new mutable.ListBuffer[String]()\n            var index = 0\n            var\
    \ c = 0\n            var currentChar = s.charAt(index)\n            var letterCount\
    \ = 0\n            while (index < s.length) {\n                c += 1\n      \
    \          letterCount += s.charAt(index).toString.toInt\n                index\
    \ += 1\n                if (letterCount == n) {\n                    list += currentChar\n\
    \                }\n                currentChar = s.charAt(index)\n          \
    \      letterCount = 0\n            }\n            list += currentChar\n     \
    \       list.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwp_pa4il.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = if(s.isEmpty)\
    \ Nil else {\n            val len = s.length\n            val consonants = mutable.Set[Char](\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        \
    \    val lastConsonant: String = \"\"\n            var currentIndex = 0\n\n  \
    \          while(currentIndex < len) {\n                if(consonants.contains(s.charAt(currentIndex)))\
    \ {\n                    currentIndex += 1\n                }\n              \
    \  else if(s.charAt(currentIndex) == lastConsonant) {\n                    currentIndex\
    \ += 1\n                }\n                else {\n                    lastConsonant\
    \ = s.charAt(currentIndex)\n                    words += s.substring(currentIndex,\
    \ currentIndex + 1).replaceAll(\"[^a-zA-Z ]\", \"\")\n                    currentIndex\
    \ += 1\n                }\n            }\n            words\n        }\n     \
    \   val result = words.length == n\n        if(result) words\n        else Nil\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpas95x_.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mconsonants\e[0m = mutable.Set[\e\
    [35mChar\e[0m](\e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e\
    [0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"p\"\e[0m, \e\
    [31m\"q\"\e[0m, \e[31m\"r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"\
    v\"\e[0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e[0m, \e[31m\"z\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpnpas95x_.scala:31:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m(s.charAt(currentIndex)\
    \ == lastConsonant) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnpas95x_.scala:35:44\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                    lastConsonant\
    \ = s.charAt(currentIndex)\n\e[31m\e[31m   |\e[0m                            \
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \            Found:    Char\n\e[31m   |\e[0m                                 \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpas95x_.scala:36:26\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                    words\
    \ += s.substring(currentIndex, currentIndex + \e[31m1\e[0m).replaceAll(\e[31m\"\
    [^a-zA-Z ]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member of List[String]\
    \ - did you mean words.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val lst = ListBuffer[String]()\n\
    \        for {\n            i <- 0 until s.length\n            c <- 0 until s.length\n\
    \        } yield {\n            if (s.length != 0 && !c.isLetter) lst\n      \
    \      else {\n                var a = i\n                var b = c\n        \
    \        var c = n - 1\n                while (a < b) if (s.charAt(a) == s.charAt(b))\
    \ a += 1; else c -= 1\n                if (c == 0) lst += s.substring(a, b + 1)\n\
    \            }\n        }\n        lst.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkpjlx_un.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (s.length != \e[31m0\e[0m &&\
    \ !c.isLetter) lst\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value isLetter is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkpjlx_un.scala:31:58\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33mwhile\e\
    [0m (a < b) \e[33mif\e[0m (s.charAt(a) == s.charAt(b)) a += \e[31m1;\e[0m \e[33melse\e\
    [0m c -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                        Found:    (b : Long)\n\e[31m   |\e[0m               \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkpjlx_un.scala:32:50 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mif\e[0m (c == \e[31m0\e[0m) lst\
    \ += s.substring(a, b + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                  Found:    Long\n\e[31m   |\e[0m           \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var index = 0\n        var result:\
    \ List[String] = Nil\n        while (index < s.length - 1) {\n            val\
    \ next = s.charAt(index + 1)\n            if (next == n || next == ' ') {\n  \
    \              result ::= s.substring(index + 1, s.length)\n                index\
    \ += 1\n            } else {\n                index += 1\n            }\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_zl3g9u.scala:35)\n\tat Problem.main(tmpg_zl3g9u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.length == 0) Nil\n     \
    \   else {\n            def find(s: List[Char], n : Long, acc : List[String])\
    \ : List[String] = \n                if (s.length >= n) acc :: (for {\n      \
    \                  c <- s\n                        cn <- if (c == ' ') Nil else\
    \ List(c + \"\")\n                } yield cn :: acc)\n                else find((s.drop(1),\
    \ n, acc), n, Nil)\n\n            find(s.drop(1), n, Nil)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbuqx2cah.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m\
    \ (s.length >= n) acc :: (\e[33mfor\e[0m {\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     Found:    List[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e\
    [0m]\n\e[31m   |\e[0m                                   Required: List[String]\n\
    \e[31m25 |\e[0m                        c <- s\n\e[31m26 |\e[0m               \
    \         cn <- \e[33mif\e[0m (c == \e[31m' '\e[0m) Nil \e[33melse\e[0m List(c\
    \ + \e[31m\"\"\e[0m)\n\e[31m27 |\e[0m                } \e[33myield\e[0m cn ::\
    \ acc)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbuqx2cah.scala:28:26\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33melse\e\
    [0m find((s.drop(\e[31m1\e[0m), n, acc), n, Nil)\n\e[31m\e[31m   |\e[0m      \
    \                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (List[Char], Long, List[String])\n\e[31m   |\e[0m      \
    \                    Required: List[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbuqx2cah.scala:30:23 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            find(s.drop(\e[31m1\e[0m), n, Nil)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    String\n\e[31m   |\e[0m                 Required: List[Char]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        if (list.length < 1) return Nil\n        val words = list.map(x => x.replaceAll(\"\
    \"\"\\W*\"\"\", \"\").toLowerCase + \" \").toList\n        val maxLen = (words.length\
    \ - 1) * n / 2\n        val retList = words.tail.flatMap(x => if (x.matches(\"\
    \"\"\\W*\"\"\")\n                                               x.replaceAll(\"\
    \"\"\\W*\"\"\", \"\").toLowerCase\n                                          \
    \     else List.empty)\n                                            .takeWhile(_\
    \ <= maxLen)\n                                            .sorted)\n        if\
    \ (words.length <= n) retList\n        else retList.drop(retList.length)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkcll0c1c.scala:26:48 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                                               x.replaceAll(\e\
    [31m\"\"\"\\W*\"\"\"\e[0m, \e[31m\"\"\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                  expression expected but \e[31m'.'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkcll0c1c.scala:29:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                     \
    \                       .sorted)\n\e[31m\e[31m   |\e[0m                      \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                  'then' expected, but ')' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val stringList = List(\"a\",\"\
    \",\"b\",\"\",\"c\",\"\",\"d\",\"\",\"e\",\"\",\"f\",\"\",\"g\",\"\",\"h\",\"\"\
    ,\"i\",\"\",\"j\",\"\",\"k\",\"\",\"l\",\"\",\"m\",\"\",\"n\",\"\",\"o\",\"\"\
    ,\"p\",\"\",\"q\",\"\",\"r\",\"\",\"s\",\"\",\"t\",\"\",\"u\",\"\",\"v\",\"\"\
    ,\"w\",\"\",\"x\",\"\",\"y\",\"\",\"z\",\"\",\"A\",\"\",\"B\",\"\",\"C\",\"\"\
    ,\"D\",\"\",\"E\",\"\",\"F\",\"\",\"G\",\"\",\"H\",\"\",\"I\",\"\",\"J\",\"\"\
    ,\"K\",\"\",\"L\",\"\",\"M\",\"\",\"N\",\"\",\"O\",\"\",\"P\",\"\",\"Q\",\"\"\
    ,\"R\",\"\",\"S\",\"\",\"T\",\"\",\"U\",\"\",\"V\",\"\",\"W\",\"\",\"X\",\"\"\
    ,\"Y\",\"\",\"Z\",\"\")\n        val characterList = List(\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"\")\n        val vowelList\
    \ = List(\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\")\n      \
    \  val vowelCount = stringList.foldLeft(Map.empty[String, Long])((acc, string)\
    \ => {\n            for (v <- vowelList) \n                if (string.contains(v))\n\
    \                    acc += ((v,string.length))\n        })\n        val nonVowelCount\
    \ = stringList.foldLeft(Map.empty[String, Long])((acc, string) => {\n        \
    \    for (v <- vowelList) \n                if (!string.contains(v))\n       \
    \             acc += ((v,string.length))\n        })\n        val consonantCount\
    \ = characterList.foldLeft(Map.empty[String, Long])((acc, char) => {\n       \
    \     for (c <- consonantList) \n                if (string.contains(c))\n   \
    \                 acc += ((c,string.length))\n        })\n        val consonantCount\
    \ = characterList.foldLeft(Map.empty[String, Long])((acc, char) => {\n       \
    \     for (c <- consonantList) \n                if (!string.contains(c))\n  \
    \                  acc += ((c,string.length))\n        })\n\n        val result\
    \ = nonVowelCount.filter((v, n) => n == n).keySet.toList.filter(k => consonantCount.contains(k)).toList\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4u61khvp.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mconsonantCount\e[0m = characterList.foldLeft(Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m])((\e[36macc\e[0m, \e[36mchar\e[0m) => {\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mconsonantCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mconsonantCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m40 |\e[0m            \e[33mfor\e[0m (c <- consonantList)\
    \ \n\e[31m41 |\e[0m                \e[33mif\e[0m (!string.contains(c))\n\e[31m42\
    \ |\e[0m                    acc += ((c,string.length))\n\e[31m43 |\e[0m      \
    \  })\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u61khvp.scala:25:12\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m (v\
    \ <- vowelList) \n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   \
    \         Found:    Unit\n\e[31m   |\e[0m            Required: scala.collection.mutable.Map[String,\
    \ Long]\n\e[31m26 |\e[0m                \e[33mif\e[0m (string.contains(v))\n\e\
    [31m27 |\e[0m                    acc += ((v,string.length))\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4u61khvp.scala:30:12 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mfor\e[0m (v <- vowelList) \n\e[31m\e\
    [31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: scala.collection.mutable.Map[String, Long]\n\
    \e[31m31 |\e[0m                \e[33mif\e[0m (!string.contains(v))\n\e[31m32 |\e\
    [0m                    acc += ((v,string.length))\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4u61khvp.scala:35:22 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mfor\e[0m (c <- consonantList) \n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Not found: consonantList\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words  = s.toLowerCase().split(\"\
    \ \").map(_.trim).toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        words.foreach(word => \n            val count = word.split(\"[^aeiou]\"\
    ).length\n            if (count == n) result += word\n        )\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu0mdb4gf.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val count = countConsonants(s)\n\
    \        val consonants = count(s) - n\n        if (consonants > 0)\n        \
    \    findWords(s, n, count(s))\n        else\n            List()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1dk2vxwf.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = countConsonants(s)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: countConsonants\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1dk2vxwf.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            findWords(s, n, count(s))\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: findWords\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n \
    \       val ans = words.foldLeft(List(\"\"))((acc, x) => {\n        val letter\
    \ = x(0)\n        val num = x(1)\n        if(acc == \"\") {\n            if (num\
    \ > n) acc :+ x\n            else {\n                acc :+ x\n              \
    \  if (num == n) acc :+ x\n            }\n        } else if(num < n) acc :+ x\n\
    \        else { acc :+ x\n            if (num == n) acc :+ x\n        }\n    \
    \    })\n        ans.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppvs99fbp.scala:25:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(acc == \e[31m\"\"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types List[String]\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppvs99fbp.scala:29:16 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                \e[33mif\e[0m (num == n) acc :+ x\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Found:    Unit\n\e[31m   |\e[0m                Required: List[String]\n\e[31m\
    \   |\e[0m                Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppvs99fbp.scala:33:12\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m (num\
    \ == n) acc :+ x\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ List[String]\n\e[31m   |\e[0m            Maybe you are missing an else part\
    \ for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Your code here\n        val\
    \ chars = s.toCharArray\n        val len = s.length\n        if (len == 0)\n \
    \           return []\n        if (len == 1)\n            if (chars(0) == ' '\n\
    \                && n <= 1\n                && n >= len)\n                return\
    \ List()\n            else\n                return List()\n        if (chars(0)\
    \ == ' ')\n            selectWords(s.substring(1), n)\n        else\n        \
    \    val rem = s.substring(1).toLowerCase\n            if (n == len)\n       \
    \         if (rem == 'q')\n                    return List()\n               \
    \ else\n                    rem.toCharArray.filter (_ == 'q').toList\n       \
    \     else\n                rem :: selectWords(rem, n-1).filter (_ == ' ').toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsc3gbd4_.scala:25:20 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsc3gbd4_.scala:26:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m\
    \ (len == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m\
    \        '=>' expected, but unindent found\n\e[31m\e[31m-- Error: /tmp/tmpsc3gbd4_.scala:38:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m38 |\e[0m       \
    \         \e[33mif\e[0m (rem == \e[31m'q'\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsc3gbd4_.scala:41:54 --------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \                    rem.toCharArray.filter (_ == \e[31m'q'\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m\
    \   |\e[0m                    Required: List[\e[1m\e[32mString\e[0m]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpsc3gbd4_.scala:43:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                rem :: selectWords(rem, n-\e[31m1\e[0m).filter\
    \ (_ == \e[31m' '\e[0m).toList\n\e[31m\e[31m   |\e[0m                        \
    \                             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n5 errors found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list = s.split(\" \").toList\n\
    \        if (list.isEmpty) list.init\n        var nC : Long = 0\n        for (x\
    \ <- list.tail) if (nC <= n) if (x.toString.toList.filter(x => x =~ \"\" && x.toString.toList.count(x\
    \ => x =~ \"a\") <= n && x.toString.toList.count(x => x =~ \"e\") <= n && x.toString.toList.count(x\
    \ => x =~ \"i\") <= n && x.toString.toList.count(x => x =~ \"o\") <= n && x.toString.toList.count(x\
    \ => x =~ \"u\") <= n) nC += 1\n        list.tail.init\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2fqktd5q.scala:24:326 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (x <- list.tail) \e[33mif\e[0m\
    \ (nC <= n) \e[33mif\e[0m (x.toString.toList.filter(\e[36mx\e[0m => x =~ \e[31m\"\
    \"\e[0m && x.toString.toList.count(\e[36mx\e[0m => x =~ \e[31m\"a\"\e[0m) <= n\
    \ && x.toString.toList.count(\e[36mx\e[0m => x =~ \e[31m\"e\"\e[0m) <= n && x.toString.toList.count(\e\
    [36mx\e[0m => x =~ \e[31m\"i\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e\
    [0m => x =~ \e[31m\"o\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e[0m =>\
    \ x =~ \e[31m\"u\"\e[0m) <= n) nC += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 ^\e[0m\n\e[31m   |\e[0m                                 ')'\
    \ expected, but integer literal found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2fqktd5q.scala:24:78 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mfor\e[0m (x <- list.tail) \e[33mif\e[0m (nC <= n) \e[33mif\e\
    [0m (x.toString.toList.filter(\e[36mx\e[0m => x =~ \e[31m\"\"\e[0m && x.toString.toList.count(\e\
    [36mx\e[0m => x =~ \e[31m\"a\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e\
    [0m => x =~ \e[31m\"e\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e[0m =>\
    \ x =~ \e[31m\"i\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e[0m => x =~\
    \ \e[31m\"o\"\e[0m) <= n && x.toString.toList.count(\e[36mx\e[0m => x =~ \e[31m\"\
    u\"\e[0m) <= n) nC += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                                                        ^^^^\e[0m\n\e[31m   |\e\
    [0m                   value =~ is not a member of Char - did you mean x.==?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fqktd5q.scala:24:323 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (x <- list.tail) \e[33mif\e[0m\
    \ (nC <= n) \e[33mif\e[0m (x.toString.toList.filter(\e[36mx\e[0m => x =~ \e[31m\"\
    \"\e[0m && x.toString."
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list = List[String]()\n  \
    \      var temp = \"\"\n        val n = math.max(4l, 3l) // limit the search to\
    \ 4 or 3 letters\n        var i = 0\n        while (i < s.length && n > 0) {\n\
    \            if (s.charAt(i) == 'a' && s.charAt(i + 1) == 'm' && s.charAt(i +\
    \ 2) == 'y') {\n                temp += \" a\"\n                n -= 1\n     \
    \       } else if (s.charAt(i) == 'e' && s.charAt(i + 1) == 'c' && s.charAt(i\
    \ + 2) == 'l' && s.charAt(i + 3) == 'l') {\n                temp += \" e\"\n \
    \               n -= 1\n            } else if (s.charAt(i) == 'h' && s.charAt(i\
    \ + 1) == 'e' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 'o') {\n       \
    \         temp += \" h\"\n                n -= 1\n            } else if (s.charAt(i)\
    \ == 'l' && s.charAt(i + 1) == 'l') {\n                temp += \" l\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'o' && s.charAt(i + 1)\
    \ == 'o') {\n                temp += \" o\"\n                n -= 1\n        \
    \    } else if (s.charAt(i) == 'u' && s.charAt(i + 1) == 'c' && s.charAt(i + 2)\
    \ == 'l' && s.charAt(i + 3) == 's' && s.charAt(i + 4) == 'm' && s.charAt(i + 5)\
    \ == 'e') {\n                temp += \" u\"\n                n -= 1\n        \
    \    } else if (s.charAt(i) == 'a' && s.charAt(i + 1) == 'm' && s.charAt(i + 2)\
    \ == 'y' && s.charAt(i + 3) == 'o' && s.charAt(i + 4) == 'e') {\n            \
    \    temp += \" y\"\n                n -= 1\n            } else if (s.charAt(i)\
    \ == 'e' && s.charAt(i + 1) == 'c' && s.charAt(i + 2) == 'l' && s.charAt(i + 3)\
    \ == 'l' && s.charAt(i + 4) == 'y') {\n                temp += \" e\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'h' && s.charAt(i + 1)\
    \ == 'e' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 'o' && s.charAt(i + 4)\
    \ == 'l' && s.charAt(i + 5) == 'l') {\n                temp += \" h\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'l' && s.charAt(i + 1)\
    \ == 'l' && s.charAt(i + 2) == 'l') {\n                temp += \" l\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'o' && s.charAt(i + 1)\
    \ == 'o' && s.charAt(i + 2) == 'o') {\n                temp += \" o\"\n      \
    \          n -= 1\n            } else if (s.charAt(i) == 'u' && s.charAt(i + 1)\
    \ == 'c' && s.charAt(i + 2) == 'l' && s.charAt(i + 3) == 's' && s.charAt(i + 4)\
    \ == 'm' && s.charAt(i + 5) == 'e' && s.charAt(i + 6) == 'n') {\n            \
    \    temp += \" u\"\n\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwv1t6iyc.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv1t6iyc.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwv1t6iyc.scala:31:18 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwv1t6iyc.scala:34:18 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv1t6iyc.scala:37:18\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwv1t6iyc.scala:40:18 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwv1t6iyc.scala:43:18 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwv1t6iyc.scala:46:18\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value -= is not a member of Long -"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Base case: if the given string\
    \ s is empty then the solution should be an empty list.\n        s match {\n \
    \           case \"\" => Nil\n            case _ => \n                var s =\
    \ s\n                var n = n\n                var list = List[String]()\n  \
    \              while (n > 0) {\n                    list += s.substring(s.indexOf('\
    \ ')).trim\n                    s = s.substring(s.indexOf(' ', s.indexOf(' ')\
    \ + 1).toString.length + 1).trim\n                    n--\n                }\n\
    \                list\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps_j1g913.scala:31:23 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    n--\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps_j1g913.scala:25:24 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mvar\e[0m \e[36ms\e[0m = s\n\e[31m\e[31m   |\e[0m\
    \                        ^\e[0m\n\e[31m   |\e[0m                        Recursive\
    \ \e[33mvariable\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmps_j1g913.scala:26:24 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mvar\e[0m \e[36mn\e[0m = n\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvariable\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps_j1g913.scala:29:25 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    list += s.substring(s.indexOf(\e\
    [31m' '\e[0m)).trim\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result : List[String] = Nil\n\
    \        if (s.isEmpty)\n            result\n        else if (n >= s.size)\n \
    \           result\n        else\n            result += s.substring(0,n)\n   \
    \         var resultSet : Set[String] = Set[String]()\n            var counter\
    \ : Long = 0\n            for (i <- 0 until s.length - n)\n                if\
    \ (s(i) isConsonant)\n                    counter += 1\n            resultSet\
    \ += s.substring(0,n)\n            for (i=n+1 until s.length)\n              \
    \  if (s(i) isConsonant)\n                    counter += 1\n            if (counter\
    \ > resultSet.size)\n                resultSet += s.substring(0,n)\n         \
    \   result += resultSet.toList\n            selectWords(s, n+1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2o6u5qva.scala:31:36 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mif\e[0m (s(i) isConsonant)\n\e\
    [31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                    expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2o6u5qva.scala:34:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mfor\e\
    [0m (i=n+\e[31m1\e[0m until s.length)\n\e[31m\e[31m   |\e[0m                 \
    \ ^\e[0m\n\e[31m   |\e[0m                  ')' expected, but '=' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp2o6u5qva.scala:35:0 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m (s(i) isConsonant)\n\e\
    [31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2o6u5qva.scala:35:36 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m (s(i) isConsonant)\n\e\
    [31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                    expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2o6u5qva.scala:37:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mif\e\
    [0m (counter > resultSet.size)\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'<-'\
    \ expected, but 'end of statement' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp2o6u5qva.scala:39:0 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            result += resultSet.toList\n\e[31m\e[31m   |\e[0m^^^^^^\e\
    [0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp2o6u5qva.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            selectWords(s, n+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if(s.isEmpty) List()\n       \
    \ else {\n        val vowels = \"aeiouy\"\n        var l = s.toLowerCase\n   \
    \     val letters: List[String] = new ListBuffer[String]()\n        val vowel_pos\
    \ = 1\n        var cons_pos = 0\n        for(i <- 1 until l.length) {\n      \
    \      if(cons_pos == n) {\n                letters append (l.substring(i,i +\
    \ n))\n                letters.append(vowels.substring(vowel_pos, vowel_pos +\
    \ 1))\n                cons_pos = 0\n                letters.append(vowels.substring(vowel_pos\
    \ + 1, vowel_pos + n))\n                letters.append(l.substring(i, i + n))\n\
    \                letters.append(vowels.substring(vowel_pos + 1, vowel_pos + n))\n\
    \                cons_pos = 0\n                letters.append(vowels.substring(vowel_pos\
    \ + 1, vowel_pos + n))\n                letters.append(l.substring(i, i + n))\n\
    \                cons_pos = 0\n                letters.append(l.substring(i, i\
    \ + n))\n                cons_pos = 0\n                letters.append(l.substring(i,i\
    \ + n))\n            }\n            else if(cons_pos > 0) {\n                if(l.charAt(i)\
    \ == vowels.charAt(vowel_pos)) {\n                    cons_pos += 1\n        \
    \            vowel_pos += 1\n                }\n            }\n        }\n   \
    \     letters.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_t8nk8w.scala:25:36\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mletters\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_t8nk8w.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                letters append (l.substring(i,i + n))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ append is not a member of List[String] - did you mean letters.appended?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_t8nk8w.scala:30:46 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                letters append (l.substring(i,i + n))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    Long\n\e\
    [31m   |\e[0m                                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_t8nk8w.scala:31:24 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                letters.append(vowels.substring(vowel_pos,\
    \ vowel_pos + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[String] - did you mean\
    \ letters.appended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_t8nk8w.scala:33:24\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                letters.append(vowels.substring(vowel_pos\
    \ + \e[31m1\e[0m, vowel_pos + n))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue append is not a member of List[String] - did you mean\
    \ letters.appended?\n\e[31m\e[31m-- [E007] Type Mismat"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var words: mutable.List[String]\
    \ = Nil\n        var index = 0\n        while(index < s.length){\n           \
    \ if(s.substring(index, index + n.toInt).forall(x => x != ' ')){\n           \
    \     words = words :+ s.substring(index, index + n.toInt)\n            }\n  \
    \          index += 1\n        }\n        return words.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo25akg2l.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m: mutable.List[\e\
    [35mString\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = s.length\n        var\
    \ i : Long = 0\n        var j : Long = 0\n        var k : Long = 0\n        var\
    \ l : Long = 0\n        var ls : List[String] = List()\n        while (i < n)\
    \ {\n            if (j < m) {\n                if (s.charAt(j) == ' ') {\n   \
    \                 k += 1\n                    j += 1\n                } else {\n\
    \                    l += 1\n                    j += 1\n                }\n \
    \           } else {\n                ls = ls :+ s.substring(i)\n            \
    \    i += 1\n                j = 0\n            }\n        }\n        if (l ==\
    \ 0) {\n            ls = ls :+ s.substring(i)\n        }\n        ls.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnhw8fht.scala:29:29\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m\
    \ (s.charAt(j) == \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                   \
    \          ^\e[0m\n\e[31m   |\e[0m                             Found:    (j :\
    \ Long)\n\e[31m   |\e[0m                             Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnhw8fht.scala:37:39 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                ls = ls :+ s.substring(i)\n\e[31m\e[31m\
    \   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m     \
    \                                  Found:    (i : Long)\n\e[31m   |\e[0m     \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprnhw8fht.scala:43:35 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            ls = ls :+ s.substring(i)\n\e[31m\e[31m \
    \  |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m          \
    \                         Found:    (i : Long)\n\e[31m   |\e[0m              \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val res : List[String] = s.split(\"\
    \ \").filter(_.length == n)\n        res.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcpbqzxok.scala:21:52\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter(_.length\
    \ == n)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def wordCount (w : String, count\
    \ : Long) : List[String] =\n            if (w.length == count) w :: Nil\n    \
    \        else wordCount(w.substring(0,count), count) ++ w.substring(count) ::\
    \ Nil\n\n        def splitWords(w : String) : List[String] =\n            w.splitAt(w.lastIndexOf('\
    \ '))\n\n        // We start with a list of all possible words in our list\n \
    \       val list = \n            s.split(\" \").flatMap { w =>\n             \
    \   if (w.length <= n) Nil\n                else {\n                    val count\
    \ = \n                        w.substring(0,w.length - 1).lastIndexOf(' ')\n \
    \                   if (count == -1) Nil\n                    else wordCount(w,\
    \ count).reverse\n                }\n            }.toList\n        \n        if\
    \ (s.isEmpty) Nil\n        else list.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe88d0lyf.scala:23:41\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m wordCount(w.substring(\e\
    [31m0\e[0m,count), count) ++ w.substring(count) :: Nil\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                 Found:    (count : Long)\n\e[31m   |\e[0m  \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe88d0lyf.scala:23:71 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m wordCount(w.substring(\e\
    [31m0\e[0m,count), count) ++ w.substring(count) :: Nil\n\e[31m\e[31m   |\e[0m\
    \                                                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (count : Long)\n\e[31m   |\e[0m                                            \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe88d0lyf.scala:26:21\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            w.splitAt(w.lastIndexOf(\e\
    [31m' '\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (String, String)\n\e[31m   |\e[0m  \
    \          Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def helper(s1 : String, s2 : String,\
    \ counter : Long) : List[String] = {\n            if (s1.isEmpty) {\n        \
    \        return Nil\n            } else if (s2.size == counter) {\n          \
    \      return List(s1.toUpperCase)\n            } else {\n                val\
    \ x = s2.substring(counter, s2.size)\n                val y = s1.toUpperCase\n\
    \                return x :: helper(s1, x + y, counter + 1)\n            }\n \
    \       }\n        helper(s, \"\", 0).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr7r__fiz.scala:27:37\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m\
    \ \e[36mx\e[0m = s2.substring(counter, s2.size)\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                    Found:    (counter : Long)\n\e[31m   |\e[0m             \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result: List[String] = Nil\n\
    \        val stack = mutable.Stack[String]()\n        for (i <- 0 until s.length)\n\
    \            stack push (s.charAt(i).toChar)\n        while (stack.nonEmpty) {\n\
    \            val c = stack.pop()\n            for (i <- 0 until c.length)\n  \
    \              stack push ((c.charAt(i) + n).toChar)\n            if (c.size ==\
    \ n) result ::= c.mkString(\"\")\n        }\n        return result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpupicwfea.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpupicwfea.scala:29:36 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (c.size == n) result ::= c.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value ::= is not a member of List[String] - did you mean\
    \ result.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n      var res = new Array[String](0)\n\
    \      val c = s.toCharArray\n      val l = c.length - 1\n      val m = c.drop(l).filter(_\
    \ == ' ').length\n      val r = c.take(m).filter(_ == ' ').length\n      val k\
    \ = c.takeWhile(_ == ' ').dropWhile(_ == ' ').length\n      \n      if (n == 0\
    \ || m == 0 || k == 0) {\n        return res\n      }\n      if (n == l) {\n \
    \       res = res + c.drop(l + 1).filter(_ == ' ')\n      }\n      if (k == r)\
    \ {\n        res = res + c.take(l - k).filter(_ == ' ')\n      }\n      res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8t9jadx.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m res\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (res : Array[String])\n\e[31m   |\e[0m               Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf8t9jadx.scala:32:18\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        res = res + c.drop(l\
    \ + \e[31m1\e[0m).filter(_ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \     ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Array[String], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf8t9jadx.scala:35:18 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        res = res + c.take(l - k).filter(_ == \e[31m'\
    \ '\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Array[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf8t9jadx.scala:37:6\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m      res\n\e[31m\e[31m   |\e\
    [0m      ^^^\e[0m\n\e[31m   |\e[0m      Found:    (res : Array[String])\n\e[31m\
    \   |\e[0m      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        val newList = []\n        list.foreach(x => {\n            if(x.contains(\"\
    l\") || x.contains(\"t\") || x.contains(\"a\") || x.contains(\"p\") || x.contains(\"\
    h\") || x.contains(\"e\")){\n                newList += x\n            }\n   \
    \     })\n        list.foreach(x => {\n            if(x.contains(\"d\") || x.contains(\"\
    s\") || x.contains(\"c\") || x.contains(\"m\") || x.contains(\"i\") || x.contains(\"\
    u\") || x.contains(\"e\")){\n                newList += x\n            }\n   \
    \     })\n        list.foreach(x => {\n            if(x.contains(\"p\") || x.contains(\"\
    e\")){\n                newList += x\n            }\n        })\n        list.foreach(x\
    \ => {\n            if(x.contains(\"t\") || x.contains(\"s\") || x.contains(\"\
    a\") || x.contains(\"r\") || x.contains(\"n\") || x.contains(\"y\")){\n      \
    \          newList += x\n            }\n        })\n        list.foreach(x =>\
    \ {\n            if(x.contains(\"a\") || x.contains(\"s\") || x.contains(\"h\"\
    ) || x.contains(\"d\") || x.contains(\"r\") || x.contains(\"e\")){\n         \
    \       newList += x\n            }\n        })\n        list.foreach(x => {\n\
    \            if(x.contains(\"n\") || x.contains(\"o\") || x.contains(\"m\") ||\
    \ x.contains(\"u\")){\n                newList += x\n            }\n        })\n\
    \        list.foreach(x => {\n            if(x.contains(\"u\")){\n           \
    \     newList += x\n            }\n        })\n        list.foreach(x => {\n \
    \           if(x.contains(\"l\") || x.contains(\"r\") || x.contains(\"s\") ||\
    \ x.contains(\"t\") || x.contains(\"y\") || x.contains(\"a\") || x.contains(\"\
    p\") || x.contains(\"h\") || x.contains(\"e\")){\n                newList += x\n\
    \            }\n        })\n        newList.take(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp18b4ix34.scala:22:23 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp18b4ix34.scala:23:0 ----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        list.foreach(\e[36mx\e[0m => {\n\e[31m\e[31m   |\e[0m^^^^\e[0m\n\
    \e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp18b4ix34.scala:25:24 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                newList += x\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value += is not a member\
    \ of Null - did you mean newList.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18b4ix34.scala:30:24\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                newList +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.dictionary\
    \ AsScalaMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /t"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = s.split(\"\
    \ \").filter{ _.length > 0 }\n        if (words.length > 0 && n >= 0l && n <=\
    \ words.length)\n            words.sortWith(_ < _).drop(n - 1l).take(n - 1l).map(_.trim).filter(_.nonEmpty).toList\n\
    \        else List[String]()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojzj8u.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).filter{ _.length\
    \ > \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojzj8u.scala:23:39\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            words.sortWith(_\
    \ < _).drop(n - \e[31m1l\e[0m).take(n - \e[31m1l\e[0m).map(_.trim).filter(_.nonEmpty).toList\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    Long\n\e[31m   |\e\
    [0m                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpt_ojzj8u.scala:23:52 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            words.sortWith(_ < _).drop(n - \e[31m1l\e\
    [0m).take(n - \e[31m1l\e[0m).map(_.trim).filter(_.nonEmpty).toList\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    Long\n\
    \e[31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words  = s.split(' ').toList\n\
    \        val consonants = List.fill(n)(List('a', 'e', 'i', 'o', 'u', 'y'))\n \
    \       val consonants = consonants.distinct\n        val finalWords = words.filter(word\
    \ => consonants.forall(_.contains(word)))\n        finalWords.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1b0ly6jl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = consonants.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonants is already defined as \e[33mvalue\e[0m \e[35mconsonants\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp1b0ly6jl.scala:22:35 --------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = List.fill(n)(List(\e\
    [31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e[31m'o'\e[0m, \e[31m'u'\e[0m,\
    \ \e[31m'y'\e[0m))\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (n : Long)\n\e\
    [31m   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordSet = s.split(\" \").toSet\n\
    \        val result = mutable.ListBuffer[String]()\n        for (word <- wordSet.toList)\
    \ {\n            val count = word.split(\"\").count(c => c.toUpperCase == \"A\"\
    \ || c.toUpperCase == \"E\" || c.toUpperCase == \"I\" || c.toUpperCase == \"O\"\
    \ || c.toUpperCase == \"U\")\n            if (count == n) result += \"(\" + word\
    \ + \")\"\n        }\n        \n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy0w3ytf9.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n      val count = mutable.Set[Char]()\n\
    \      for(i <- 0 to s.length - 1) {\n        if(s.charAt(i) == ' ') {\n     \
    \     count.clear()\n        } else {\n          count += s.charAt(i)\n      \
    \  }\n      }\n      count.toList.map(x => s.substring(0,i) + x).filter(x => x.length\
    \ == n).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jv4f9e0.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mcount\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n         // TODO: Write code here.\n \
    \        var count = n\n         var ans: List[String] = List()\n         if (s.isEmpty)\
    \ ans\n         else {\n           for(a <- s)\n              if(Character.getType(a)\
    \ == Character.CONSONANT) {\n                count -= 1\n                ans ::=\
    \ a\n                if (count < 0)\n                  break\n              }\n\
    \         }\n         ans\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbvsvjo2.scala:27:51 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m              \e[33mif\e[0m(Character.getType(a) == Character.CONSONANT)\
    \ {\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value CONSONANT is not a member of object\
    \ Character\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbvsvjo2.scala:29:20\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                ans ::= a\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is\
    \ not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgbvsvjo2.scala:31:18 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                  break\n\e[31m\e[31m   |\e[0m      \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val l = s.toLowerCase\n      \
    \  val m = n / 2\n        val n = n % 2\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val vowels = \"aeiou\"\n        val wordsList = mutable.List.empty[String]\n\
    \n        for(i <- 0 until l.length) {\n            for(j <- 0 until m.toInt)\
    \ {\n                val c = consonants(i)\n                val v = vowels(i)\n\
    \                if (l.charAt(i) == c && l.charAt(i + m) == v) {\n           \
    \         if (wordsList.size == n) {\n                        wordsList += l.substring(i\
    \ + 2, i + j + 2)\n                    }\n                }\n            }\n \
    \       }\n        return wordsList.filterNot(_.isEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jd95l9z.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9jd95l9z.scala:26:24 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwordsList\e[0m = mutable.List.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010456
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var ans: List[String] = Nil\n\
    \        val vowels = \"aeiou\".toSet\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .toSet\n        var count = n\n        var i = 0\n        var word = \"\"\n  \
    \      while (i < s.length()) {\n            val c = s(i).toChar\n           \
    \ word += c\n            i += 1\n            if (count > 1) {\n              \
    \  count += 1\n                i = 0\n            }\n            else {\n    \
    \            if (count == 1) {\n                    if (consonants.contains(word.charAt(0)))\
    \ {\n                        ans = ans :+ word\n                    }\n      \
    \              word = \"\"\n                }\n            }\n        }\n    \
    \    if (ans.isEmpty) {\n            ans = Nil\n        }\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var str = \"\"\n        if (s.isEmpty)\
    \ List(\"\")\n        else {\n            for(i <- 0 until s.length) str+=s.charAt(i).toUpperCase\
    \ \n            val strArray = str.split(\"\")\n            val newArry = strArray.groupBy(x=>\
    \ x.take(n).toLowerCase).values.toList\n            newArry.map(k=> k.toList.sorted.mkString(\"\
    \")).flatten\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpswuqqf9t.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.length)\
    \ str+=s.charAt(i).toUpperCase \n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean String.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpswuqqf9t.scala:26:54 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \            \e[33mval\e[0m \e[36mnewArry\e[0m = strArray.groupBy(\e[36mx\e[0m=>\
    \ x.take(n).toLowerCase).values.toList\n\e[31m\e[31m   |\e[0m                \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                                                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpswuqqf9t.scala:27:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            newArry.map(\e[36mk\e[0m=> k.toList.sorted.mkString(\e\
    [31m\"\"\e[0m)).flatten\n\e[31m\e[31m   |\e[0m                               \
    \                                  ^\e[0m\n\e[31m   |\e[0mno given instance of\
    \ type String => IterableOnce[B] was found for parameter toIterableOnce of \e\
    [33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ <: String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = (\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        var tempList = List[String]()\n\
    \        var index = 0\n        var j = 0\n        while s.nonEmpty {\n      \
    \      if (consonants.contains(s.charAt(index))) tempList ::= s.substring(index,\
    \ index + 1)\n            else {\n                while (vowels.contains(s.charAt(index))\
    \ && index < s.length - 1) {\n                    index += 1\n               \
    \ }\n                if (vowels.contains(s.charAt(index))) {\n               \
    \     tempList ::= s.substring(index, index + 1)\n                }\n        \
    \    }\n            index += 1\n        }\n        if (tempList.size < n) tempList\
    \ ::= s.substring(s.length - 1, s.length)\n        else tempList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnmgk1spk.scala:38:8 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mif\e[0m (tempList.size < n) tempList ::=\
    \ s.substring(s.length - \e[31m1\e[0m, s.length)\n\e[31m\e[31m   |\e[0m      \
    \  ^^\e[0m\n\e[31m   |\e[0m        'do' expected, but 'if' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpnmgk1spk.scala:27:44 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (consonants.contains(s.charAt(index)))\
    \ tempList ::= s.substring(index, index + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 Found:    Char\n\e[31m   |\e[0m            \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnmgk1spk.scala:29:30 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                \e[33mwhile\e[0m (vowels.contains(s.charAt(index))\
    \ && index < s.length - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains is not a member of\
    \ (String, String, String, String, String, String)\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpnmgk1spk.scala:32:27 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                \e[33mif\e[0m (vowels.contains(s.charAt(index)))\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue contains is not a member of (String, String, String, String, String,\
    \ String)\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnmgk1spk.scala:26:16 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mwhile\e[0m s.nonEmpty {\n\e[31m\e[31m \
    \  |\e[0m              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \e[33mmethod\e\
    [0m \e[35mnonEmpty\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpnmgk1spk.scala:40:4\
    \ -----------------\e[0m\e[0m\n\e[33m39 |\e[0m        \e[33melse"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val ls = s.toLowerCase // to lowercase\
    \ s so we don't have to deal with upper and lower case\n        val n = n-1 //\
    \ because we want to match \"b\" or \"c\"\n        val words = (for {\n      \
    \      w <- ls.split(\" \") \n            if (w.length == n)\n            if (w.split(\"\
    \").filter(x => x.toLower == x).length == n)\n        } yield w).toList\n    \
    \    return words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7yqippf7.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n-\e[31m1\e[0m\
    \ \e[34m// because we want to match \"b\" or \"c\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7yqippf7.scala:26:42 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mif\e[0m (w.split(\e[31m\"\"\e[0m).filter(\e[36mx\e[0m =>\
    \ x.toLower == x).length == n)\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    value toLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def vowels(s: String) : List[String]\
    \ = {\n            def isVowel(s: String) : Boolean = {\n                s.toList\
    \ match {\n                    case Nil => false\n                    case x ::\
    \ xs if x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' => true\n   \
    \                 _ => false\n                }\n            }\n            val\
    \ vowelsList = List(\n                'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'\n            )\n            val nonVowelsList = List(\n           \
    \     'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'\n            )\n            val vowels = vowelsList\
    \ filter isVowel\n            val nonVowels = nonVowelsList filter isVowel\n \
    \           (vowels ++ nonVowels).toList\n        }\n\n        def isWord(s :\
    \ String) : Boolean = {\n            def isValidChar(s: String) : Boolean = {\n\
    \                s.toList match {\n                    case Nil => false\n   \
    \                 case x :: xs if x == 'a' || x == 'e' || x == 'i' || x == 'o'\
    \ || x == 'u' => true\n                    _ => false\n                }\n   \
    \         }\n            val nonVowelsList = List(\n                'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'\n            )\n            val nonVowels = nonVowelsList filter\
    \ isValidChar\n            val vowelsList = List(\n                'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n            )\n            val vowels = vowelsList\
    \ filter isValidChar\n            (vowels ++ nonVowels).toList\n        }\n\n\
    \        def filterWord(s : String) : List[String] = {\n            def isWord(s\
    \ : String) : Boolean = {\n                s.toList match {\n                \
    \    case Nil => false\n                    case x :: xs if x == 'a' || x == 'e'\
    \ || x == 'i' || x == 'o' || x == 'u' => true\n                    _ => false\n\
    \                }\n            }\n            def isValidChar(s: String) : Boolean\
    \ = {\n                s.toList match {\n                    case Nil => false\n\
    \                    case x :: xs if x == 'a' || x == 'e' || x == 'i' || x ==\
    \ 'o' || x == 'u' => true\n                    _ => false\n                }\n\
    \            }\n            def isVowel(s: String) : Boolean = {\n           \
    \     s.toList match {\n\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqoha4ws.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'case' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqoha4ws.scala:89:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpaqoha4ws.scala:26:20 -----------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                    _ => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => \n\e[31m   |\e[0m     {\n\e\
    [31m   |\e[0m       \e[31mfalse\e[0m\n\e[31m   |\e[0m     }.\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpaqoha4ws.scala:35:43 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mvowels\e[0m = vowelsList\
    \ filter isVowel\n\e[31m\e[31m   |\e[0m                                      \
    \     ^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (s : Char)\n\e[31m   |\e[0m                                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqoha4ws.scala:36:49\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e\
    [36mnonVowels\e[0m = nonVowelsList filter isVowel\n\e[31m\e[31m   |\e[0m     \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                        Found:    (s : Char)\n\e[31m   |\e[0m\
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqoha4ws.scala:37:34 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            (vowels ++ nonVowels).toList\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       Foun"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if(s.isEmpty) List()\n       \
    \ else if(s.size < n * 6) List(s)\n        else {\n            val list = s.split('\
    \ ')\n            val r = list.map(_.replaceAll(\"(?<=\\\\w)\\\\S\", \"l\")).filter(_.size\
    \ % n == 0).reverse.map(_.toLowerCase + _)\n            val count = r.filter(_.contains('l')).length\n\
    \            val result: List[String] = if (count == 1) List(s) else r.take(count)\n\
    \            result :+ r.drop(count)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdalpzayw.scala:25:99 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mr\e[0m = list.map(_.replaceAll(\e\
    [31m\"(?<=\\\\w)\\\\S\"\e[0m, \e[31m\"l\"\e[0m)).filter(_.size % n == \e[31m0\e\
    [0m).reverse.map(_.toLowerCase + _)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpdalpzayw.scala:25:117\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \
    \    \e[33mval\e[0m \e[36mr\e[0m = list.map(_.replaceAll(\e[31m\"(?<=\\\\w)\\\\\
    S\"\e[0m, \e[31m\"l\"\e[0m)).filter(_.size % n == \e[31m0\e[0m).reverse.map(_.toLowerCase\
    \ + _)\n\e[31m\e[31m   |\e[0m                                                \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val consonants = scala.collection.mutable.Set(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        val letters = scala.collection.mutable.Set.empty[String]\n\
    \        for (i <- s.indices) {\n            val ch = s(i)\n            if (ch\
    \ == \" \") {\n                letters ++= s.substring(i).split(\" \").toList\n\
    \            } else {\n                if (consonants.contains(ch)) {\n      \
    \              letters ++= s.substring(i).split(\" \").toList\n              \
    \  }\n            }\n        }\n        letters.filterNot(letters.contains).toList.takeWhile(letters.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi1xwovl1.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (ch == \e[31m\" \"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi1xwovl1.scala:28:40 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                \e[33mif\e[0m (consonants.contains(ch)) {\n\
    \e[31m\e[31m   |\e[0m                                        ^^\e[0m\n\e[31m \
    \  |\e[0m                                        Found:    (ch : Char)\n\e[31m\
    \   |\e[0m                                        Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def isWord(s : String) : Boolean\
    \ = { \n            if (s.length <= 0) true else { \n                for (c <-\
    \ s) \n                    if (c != ' ') && (c != '\\n') && (c != '\\t') && (c\
    \ != '\\r') && (c != '\\a') && (c != '\\v') && (c != '\\e') && (c != '\\a') &&\
    \ (c != '\\e') && (c != '\\c') && (c != '\\c') && (c != '\\a') && (c != '\\e')\
    \ && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\\
    e') && (c != '\\e') && (c != '\\e') && (c != '\\e') && (c != '\\e') \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpweq94rsz.scala:24:90 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mif\e[0m (c != \e[31m' '\e[0m)\
    \ && (c != \e[31m'\\n'\e[0m) && (c != \e[31m'\\t'\e[0m) && (c != \e[31m'\\r'\e\
    [0m) && (c != \e[31m'\\a'\e[0m) && (c != \e[31m'\\v'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\a'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    c'\e[0m) && (c != \e[31m'\\c'\e[0m) && (c != \e[31m'\\a'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\e'\e[0m) && (c != \e[31m'\\\
    e'\e[0m) && (c != \e[3"
  stdout: ''
  timestamp: 1660010468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = s.toList\n        val\
    \ n = m.length\n        val q = m.mkString\n        var result: List[String] =\
    \ List[String]()\n        if (n.equals(0)) result\n        else {\n          \
    \  val n = n.toInt\n            var i = 0\n            while (i < q.length &&\
    \ result.size < n) {\n                val c = q.charAt(i)\n                val\
    \ m = c.toInt\n                if (m.equals(0)) i += 1\n                else {\n\
    \                    if (c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\"\
    \ && c != \"u\") i += 1\n                    else if (m.equals(1) || m.equals(2)\
    \ || m.equals(3)) i += 1\n                    else if (m.equals(4) || m.equals(5)\
    \ || m.equals(6) || m.equals(7)) i += 1\n                    else if (m.equals(8)\
    \ || m.equals(9)) i += 1\n                    else i += 1\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv3wev9s4.scala:27:20 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpv3wev9s4.scala:34:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    \e[33mif\e[0m (c != \e[31m\"a\"\e\
    [0m && c != \e[31m\"e\"\e[0m && c != \e[31m\"i\"\e[0m && c != \e[31m\"o\"\e[0m\
    \ && c != \e[31m\"u\"\e[0m) i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3wev9s4.scala:34:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \             \e[33mif\e[0m (c != \e[31m\"a\"\e[0m && c != \e[31m\"e\"\e[0m &&\
    \ c != \e[31m\"i\"\e[0m && c != \e[31m\"o\"\e[0m && c != \e[31m\"u\"\e[0m) i +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpv3wev9s4.scala:34:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    \e[33mif\e[0m (c != \e[31m\"a\"\e\
    [0m && c != \e[31m\"e\"\e[0m && c != \e[31m\"i\"\e[0m && c != \e[31m\"o\"\e[0m\
    \ && c != \e[31m\"u\"\e[0m) i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmpv3wev9s4.scala:34:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    \e[33mif\e[0m (c != \e[31m\"a\"\e\
    [0m && c != \e[31m\"e\"\e[0m && c != \e[31m\"i\"\e[0m && c != \e[31m\"o\"\e[0m\
    \ && c != \e[31m\"u\"\e[0m) i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                                   ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared "
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result: List[String] = Nil\n\
    \        for (c <- s ; c != '\\0') {\n            if (c.isLetter) {\n        \
    \        var nLetters = c.toString.length\n                if (nLetters == n)\
    \ {\n                    if (result.isEmpty) result = List(c)\n              \
    \      else if (result.last != c) result += List(c)\n                } else result\
    \ += List(c)\n            } else result += Nil\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp113npyw1.scala:22:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (c <- s ; c != \e[31m'\\0'\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \               octal escape literals are unsupported: use \\u0000 instead\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp113npyw1.scala:22:31 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (c <- s ; c != \e[31m'\\0'\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but ')' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val w = mutable.ListBuffer.empty[String]\n\
    \        val list = s.split(\" \")\n        for (i<-list.length-1) {\n       \
    \     if ((list(i) == \" \") || (n==1)){\n                w += (list(i))\n   \
    \         }\n            else{\n                if (list(i).startsWith(\"a\")\
    \ || list(i).startsWith(\"e\") || list(i).startsWith(\"i\") || list(i).startsWith(\"\
    o\") || list(i).startsWith(\"u\")){\n                    w += (list(i))\n    \
    \            }\n            }\n        }\n        (w.toList)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0qkmc8hp.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0qkmc8hp.scala:23:16 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i<-list.length-\e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         value foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list: List[String] = Nil\n\
    \        for(i <- 0 to s.length-1){\n            val word = s.substring(i, i+1)\n\
    \            if(isConsonant(word) == true){\n                list ::= word\n \
    \           }\n        }\n        if(s.isEmpty){\n            list = Nil\n   \
    \     }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8bk21o4.scala:24:15 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(isConsonant(word) == \e[31mtrue\e\
    [0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \              Not found: isConsonant\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i)\
    \ == \" \") i += 1\n            if (s.charAt(i) == '(') i += 1\n            if\
    \ (s.charAt(i) == ')') i += 1\n            if (s.charAt(i) == ':') i += 1\n  \
    \          if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i) == '.')\
    \ i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') i += 1\n            if (s.charAt(i)\
    \ == '(') i += 1\n            if (s.charAt(i) == ')') i += 1\n            if (s.charAt(i)\
    \ == ':') i += 1\n            if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i)\
    \ == '.') i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') i += 1\n            if (s.charAt(i)\
    \ == '(') i += 1\n            if (s.charAt(i) == ')') i += 1\n            if (s.charAt(i)\
    \ == ':') i += 1\n            if (s.charAt(i) == '|') i += 1\n            if (s.charAt(i)\
    \ == '.') i += 1\n            if (s.charAt(i) == '-') i += 1\n            if (s.charAt(i)\
    \ == '@') i += 1\n            if (s.charAt(i) == '[') i += 1\n            if (s.charAt(i)\
    \ == ']') i += 1\n            if (s.charAt(i) == '+') i += 1\n            if (s.charAt(i)\
    \ == '^') i += 1\n            if (s.charAt(i) == '{') i += 1\n            if (s.charAt(i)\
    \ == '}') i += 1\n            if (s.charAt(i) == '*') i += 1\n            if (s.charAt(i)\
    \ == '+') i += 1\n            if (s.charAt(i) == '<') i += 1\n            if (s.charAt(i)\
    \ == '>') i += 1\n            if (s.charAt(i) == '=') \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqcg8iy_h.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqcg8iy_h.scala:91:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqcg8iy_h.scala:21:19 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpqcg8iy_h.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (s.charAt(i) == \e[31m\" \"\
    \e[0m) i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqcg8iy_h.scala:90:1\
    \ ---------------------\e[0m\e[0m\n\e[31m90 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpqcg8iy_h.scala:80:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m80 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var words: List[String] = Nil\n\
    \        var idx = 0l\n        var c = 0l\n        \n        for(i <- 0 until\
    \ s.length) \n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' || s.charAt(i) == 'A' ||\
    \ s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i)\
    \ == 'U') {\n                c += 1\n            }\n            else {\n     \
    \           idx += 1\n                if(idx == n) {\n                    words\
    \ = (words :+ s.substring(i, s.length)).distinct\n                    idx = 0l\n\
    \                    c = 0l\n                }\n            }\n        if(c >\
    \ 0) {\n            words = (words :+ s.substring(i, s.length)).distinct\n   \
    \     }\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5t6_lrs.scala:38:42 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            words = (words :+ s.substring(i, s.length)).distinct\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: i\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n\
    \        \n        if(s != \"\")\n        {\n            if(s.length() < n) \n\
    \            {\n                for(i <- 0 until s.length())\n               \
    \ {\n                    if(s.charAt(i) != \" \") \n                    {\n  \
    \                      words += s.substring(i,i+n)\n                    }\n  \
    \              }\n            }\n            else\n            {\n           \
    \     for(i in 0 until s.length()) \n                {\n                    if(s.charAt(i)\
    \ != \" \") \n                    {\n                        words += s.substring(i,i+n+1)\n\
    \                    }\n                }\n            }\n        }\n        else\n\
    \        {\n            words.append(\"\")\n        }\n        \n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp19ehl3ma.scala:38:0 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                {\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m\
    \   |\e[0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp19ehl3ma.scala:21:20 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp19ehl3ma.scala:29:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m(s.charAt(i) != \e[31m\"\
    \ \"\e[0m) \n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\".toList\n\
    \        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val letters = s.toList\n\
    \        val wordsContainingNconsonants = \n            if (letters.isEmpty) Nil\
    \ \n            else if (letters.take(n.toInt).distinct.size == letters.size)\
    \ letters.toList.filter( l => letters.exists(l => !vowels.contains(l)))\n    \
    \        else letters.filter( l => letters.exists(l => !consonants.contains(l)))\n\
    \        wordsContainingNconsonants.filter( w => w.length == n ).sortBy(w => w)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbboa02bj.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        wordsContainingNconsonants.filter( \e[36mw\e\
    [0m => w.length == n ).sortBy(\e[36mw\e[0m => w)\n\e[31m\e[31m   |\e[0m      \
    \                                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                value length is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) List()\n      \
    \  else {\n            def selectWordsHelper(s1 : String, s2 : String, n : Long)\
    \ : List[String] = {\n                if (s2.length >= n) {\n                \
    \    (s2.substring(0,n)).split(\" \").foldLeft(List())((xs, y) => xs ++ y).toList\n\
    \                }\n                else {\n                    val lst = selectWordsHelper(s1,\
    \ s2, n-lst.length)\n                    if (lst.isEmpty) lst\n              \
    \      else lst ++ List(s1)\n                }\n            }\n            selectWordsHelper(s,\
    \ s, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmbqbqrk.scala:25:36\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    (s2.substring(\e\
    [31m0\e[0m,n)).split(\e[31m\" \"\e[0m).foldLeft(List())((\e[36mxs\e[0m, \e[36my\e\
    [0m) => xs ++ y).toList\n\e[31m\e[31m   |\e[0m                               \
    \     ^\e[0m\n\e[31m   |\e[0m                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmbqbqrk.scala:25:85\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    (s2.substring(\e\
    [31m0\e[0m,n)).split(\e[31m\" \"\e[0m).foldLeft(List())((\e[36mxs\e[0m, \e[36my\e\
    [0m) => xs ++ y).toList\n\e[31m\e[31m   |\e[0m                               \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (y : String)\n\e[31m   |\e\
    [0m                                         Required: IterableOnce[Nothing]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcmbqbqrk.scala:28:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    \e\
    [33mval\e[0m \e[36mlst\e[0m = selectWordsHelper(s1, s2, n-lst.length)\n\e[31m\e\
    [31m   |\e[0m                                                          ^\e[0m\n\
    \e[31m   |\e[0m                                          Recursive \e[33mvalue\e\
    [0m \e[35mlst\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var res = new scala.collection.mutable.ArrayList\n\
    \        for(x <- 0 until s.length){\n            if(s.charAt(x) == ' ' || s.charAt(x)\
    \ == '')\n                res.clear()\n            else if(s.charAt(x) == ' ')\n\
    \                res.add(x)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1)\
    \ == ' ')\n                res.add(s-x)\n            else if(s.charAt(x) == '\
    \ ' && s.charAt(x-1) != ' ' && s.charAt(x-1) == s.charAt(x))\n               \
    \ res.add(s-x :: res)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1)\
    \ != ' ' && s.charAt(x) == s.charAt(x))\n                res.add(s-x :: res :::\
    \ x)\n            else if(s.charAt(x) == ' ' && s.charAt(x-1) == ' ' && s.charAt(x)\
    \ != s.charAt(x))\n                res.add(s-x :: res ::: x :: x)\n          \
    \  else if(s.charAt(x) == ' ' && s.charAt(x-1) == ' ' && s.charAt(x) != s.charAt(x))\n\
    \                res.add(s-x :: res ::: x :: x :: x)\n            else if(s.charAt(x)\
    \ == ' ' && s.charAt(x-1) != ' ' && s.charAt(x) == s.charAt(x))\n            \
    \    res.add(s-x :: res ::: x :: x :: x)\n            else if(s.charAt(x) == '\
    \ ' && s.charAt(x-1) != ' ' && s.charAt(x) != s.charAt(x))\n                res.add(s-x\
    \ :: res ::: x :: x :: x :: x)\n        }\n        if (res.size == 0)\n      \
    \      List()\n        else\n            res.toList.sortBy(-s.indexOf(_))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp7acesxz.scala:23:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(s.charAt(x) == \e[31m' '\e\
    [0m || s.charAt(x) == '')\n\e[31m\e[31m   |\e[0m                             \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                   empty character literal\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp7acesxz.scala:21:47 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mvar\e[0m \e[36mres\e[0m = \e[33mnew\e[0m scala.collection.mutable.ArrayList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              type ArrayList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7acesxz.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                res.clear()\n\e[31m\e[31m   |\e[0m  \
    \              ^^^\e[0m\n\e[31m   |\e[0m                Not found: 'res\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result: List[String] = Nil\n\
    \        var temp: List[String] = Nil\n        var index = s.length()\n      \
    \  var tempN : Long = n.toLong\n        while(index != 0) {\n            tempN\
    \ /= 2\n            if(tempN < 1) {\n                result :: Nil\n         \
    \   } else {\n                result ::= s.substring(index, (index + tempN))\n\
    \                index /= tempN\n            }\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk9ep88ly.scala:30:23 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result ::= s.substring(index, (index\
    \ + tempN))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9ep88ly.scala:30:47 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                result ::= s.substring(index, (index\
    \ + tempN))\n\e[31m\e[31m   |\e[0m                                           \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpk9ep88ly.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                index /= tempN\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value /= is not a member of Int - did you\
    \ mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val strList : List[String] = s.split(\"\
    \ \").map(_.toUpperCase)\n        val list : List[String] = strList.filter(_.matches(\"\
    [a-zA-Z ]*\"))\n        val consonants = list\n            .map(x=>x.substring(0,x.length-1))\n\
    \            .map(_.toUpperCase)\n            .map(x => if(x.equals(\"A\") ||\
    \ x.equals(\"E\") || x.equals(\"I\") || x.equals(\"O\") || x.equals(\"U\")) 1L\
    \ else 0L)\n            .map(_ + n)\n            .foldLeft(0L)(_ + _)\n      \
    \  val filteredList = strList.filter(x => x.matches(s\"[a-zA-Z ]*${'A'.repeat(consonants)}\"\
    )).toList\n        filteredList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0k5mcm_t.scala:21:37\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrList\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" \"\e[0m).map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                     Required: \e\
    [1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0k5mcm_t.scala:29:75 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mfilteredList\e[0m = strList.filter(\e[36mx\e[0m\
    \ => x.matches(\e[31ms\"[a-zA-Z ]*\e[0m${\e[31m'A'\e[0m.repeat(consonants)}\e\
    [31m\"\e[0m)).toList\n\e[31m\e[31m   |\e[0m                                  \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                             value repeat is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Return the correct result if\
    \ the string s contains only spaces.\n        if (s.isEmpty) \n            List[String]()\
    \ \n        else \n            selectWordsImpl(s, n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotl8ub7q.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            selectWordsImpl(s, n)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: selectWordsImpl\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = new mutable.ListBuffer[String]\n\
    \        if (s.isEmpty) words\n        else {\n            val chars = s.toCharArray\n\
    \            val nOfConsonants = chars.filter(_.isLetter).count(_ == '\\u0008')\n\
    \            if (nOfConsonants == n) words.append(s)\n            else {\n   \
    \             val wordsWithNConsonants = \n                    chars.filter(_.isLetter).takeWhile(c\
    \ => c != '\\u0008' && c != '\\u001f')\n                    .takeWhile(c => c\
    \ != '\\u001f' && c != '\\u007f')\n                    .take(nOfConsonants)\n\
    \                    .foreach(c => words.append(s))\n                words.append(wordsWithNConsonants)\n\
    \            }\n        }\n        words.length == 0 ? Nil \n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqn_k2k6.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def count(cs : Char): Long = {\n\
    \            val res = cs.toString.length\n            if (res < n) res else 0\n\
    \        }\n        val list = s.toList\n        if (list.isEmpty) List()\n  \
    \      else {\n            def cons(i : Int, acc : List[String]): List[String]\
    \ = {\n                val len = count(list(i))\n                if (len == n)\
    \ acc.::(list(i))\n                else cons(i+1, (list(i) +: acc))\n        \
    \    }\n            cons(0, List())\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1_ass5x.scala:30:41\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m\
    \ (len == n) acc.::(list(i))\n\e[31m\e[31m   |\e[0m                          \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Found:    Char\n\e[31m   |\e[0m                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1_ass5x.scala:31:36\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33melse\e\
    [0m cons(i+\e[31m1\e[0m, (list(i) +: acc))\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \     Found:    Char\n\e[31m   |\e[0m                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val word = List[String]()\n  \
    \      var j = 0\n        while ( j < s.length ) {\n            var c = 0\n  \
    \          while (c < n && c < s.length && c <= s.length ) {\n               \
    \ if (s.charAt(j) == ' '){\n                    j += 1\n                    c\
    \ = c+1\n                    c += 1\n                } else {\n              \
    \      if (s.charAt(j) == s.charAt(c)) {\n                        c += 1\n   \
    \                 } else {\n                        word.+=(s.substring(j,j+1))\n\
    \                        j += 1 + 1\n                        c = c+1\n       \
    \                 c += 1\n                    }\n                }\n         \
    \   }\n            word.+=(s.substring(j,j+1))\n            j += 1 + 1\n     \
    \   }\n        return word\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4y41nip.scala:34:29 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                        word.+=(s.substring(j,j+\e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value += is not a member of List[String] - did you mean word.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4y41nip.scala:41:17 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            word.+=(s.substring(j,j+\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of List[String] - did you mean word.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n       val m = s.toList\n       if (m.isEmpty)\
    \ List()\n       else {\n           val n = m.toList\n           val m1 = m.filter(x=>\
    \ x == n(0)).size\n           val m2 = m.filter(x=> n == 0l).size\n          \
    \ if (m1 < m2) m(0 to m1 - 1) ++ selectWords(s(m1 + 1 until s.length), n)\n  \
    \         else if (m2 < m1) selectWords(s(0 until m2 - 1) ++ m, n)\n         \
    \  else {\n               val m3 = m.filter(x=> n == n).size\n               if\
    \ (m3 < m) m.filter(x=> x == n(0)) ++ selectWords(s(m3 + 1 until s.length), n)\n\
    \               else m.filter(x=> n == 0) ++ selectWords(s(0 until m3 - 1) ++\
    \ m, n)\n           }\n       }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxyw2fqib.scala:26:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m           \e[33mval\e[0m \e[36mm2\e[0m = m.filter(\e\
    [36mx\e[0m=> n == \e[31m0l\e[0m).size\n\e[31m\e[31m   |\e[0m                 \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types List[Char] and\
    \ Long cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxyw2fqib.scala:27:26 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \           \e[33mif\e[0m (m1 < m2) m(\e[31m0\e[0m to m1 - \e[31m1\e[0m) ++ selectWords(s(m1\
    \ + \e[31m1\e[0m until s.length), n)\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:    scala.collection.immutable.Range.Inclusive\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxyw2fqib.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m           \e[33mif\e[0m (m1 < m2) m(\e[31m0\e[0m to\
    \ m1 - \e[31m1\e[0m) ++ selectWords(s(m1 + \e[31m1\e[0m until s.length), n)\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Range\n\e[31m   |\e[0m                                                  \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyw2fqib.scala:27:80\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m           \e[33mif\e[0m (m1\
    \ < m2) m(\e[31m0\e[0m to m1 - \e[31m1\e[0m) ++ selectWords(s(m1 + \e[31m1\e[0m\
    \ until s.length), n)\n\e[31m\e[31m   |\e[0m                                 \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                        Found:    (n : List[Char])\n\e[31m  \
    \ |\e[0m                                              Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Ty"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val nCon = list.filter(_.matches(\"[bcdfghjklmnpqrstvwxyz]{\" + n + \"\
    }\"))\n        if (nCon.isEmpty) List(\"\")\n        else nCon\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvi8nw6qn.scala:24:13\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m nCon\n\
    \e[31m\e[31m   |\e[0m             ^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (nCon : Array[String])\n\e[31m   |\e[0m             Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty || n < 0) \n   \
    \         return Nil\n        val m = s.length\n        val count = new Array[Long](m)\n\
    \        var i = 0\n        while (i < m) {\n            if (s(i) == 'a') {\n\
    \                count(i) = 0\n            }\n            else {\n           \
    \     count(i) = count(i) + 1;\n            }\n            if (count(i) == n)\
    \ {\n                i += 1\n            }\n        }\n        val result: List[String]\
    \ = new ArrayList[String]()\n        for (i<-0 until  m) {\n            if (count(i)\
    \ == n) {\n                result.add(s.substring(i,m))\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz91tdt7.scala:37:39 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: type ArrayList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxz91tdt7.scala:40:23\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                result.add(s.substring(i,m))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value add is not a member of List[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var currentIndex = 0\n       \
    \ var words: List[String] = List()\n        while (currentIndex + 2 < s.length\
    \ && s.length - currentIndex < n) {\n            val currentCharacter = s(currentIndex)\n\
    \            if (currentCharacter == currentCharacter.toUpperCase && currentIndex\
    \ + 1 < s.length && s(currentIndex + 1) == currentCharacter.toLowerCase && currentIndex\
    \ + 2 < s.length && s(currentIndex + 2) == currentCharacter.toUpperCase ) {\n\
    \                words += s(currentIndex)\n                currentIndex += 2\n\
    \            }\n            else {\n                currentIndex += 1\n      \
    \      }\n        }\n        if (currentIndex < s.length) words += s(currentIndex)\n\
    \        words\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfyp4prh.scala:25:53 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (currentCharacter == currentCharacter.toUpperCase\
    \ && currentIndex + \e[31m1\e[0m < s.length && s(currentIndex + \e[31m1\e[0m)\
    \ == currentCharacter.toLowerCase && currentIndex + \e[31m2\e[0m < s.length &&\
    \ s(currentIndex + \e[31m2\e[0m) == currentCharacter.toUpperCase ) {\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfyp4prh.scala:26:22\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                words +=\
    \ s(currentIndex)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplfyp4prh.scala:33:43 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mif\e[0m (currentIndex < s.length) words\
    \ += s(currentIndex)\n\e[31m\e[31m   |\e[0m                                  \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did\
    \ you mean List[String].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val letters = mutable.Set.empty[Char]\n\
    \        val vowels = mutable.Set.empty[Char]\n        for (letter <- s.split(\"\
    \")) {\n            if (letter.toLower() != \"w\" && letter.toLower() != \"a\"\
    \ && letter.toLower() != \"o\" && letter.toLower() != \"u\") {\n             \
    \   if (vowels.contains(letter.toLower)) {\n                    vowels -= letter.toLower\n\
    \                } else {\n                    vowels += letter.toLower\n    \
    \            }\n                if (letters.size >= n) {\n                   \
    \ if (vowels.size == 0)\n                        letters -= letter\n         \
    \           else\n                        letters -= letter\n                }\n\
    \            }\n        }\n        val sortedLetters = letters.toList.sorted\n\
    \        var result: List[String] = Nil\n        if (sortedLetters.size < n)\n\
    \            result = (sortedLetters ++ sortedLetters.reverse take (n-sortedLetters.size)).map(s\
    \ => s.dropRight(1)).toList\n        if (sortedLetters.size == n)\n          \
    \  result = sortedLetters.map(s => s.dropRight(1)).toList\n        if (sortedLetters.size\
    \ > n)\n            result = (sortedLetters ++ sortedLetters.reverse take (n-sortedLetters.size)).map(s\
    \ => s.dropRight(1)).toList\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3kk82hh.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpt3kk82hh.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt3kk82hh.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (letter.toLower() != \e[31m\"\
    w\"\e[0m && letter.toLower() != \e[31m\"a\"\e[0m && letter.toLower() != \e[31m\"\
    o\"\e[0m && letter.toLower() != \e[31m\"u\"\e[0m) {\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value toLower\
    \ is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // TODO - put your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9syy9qx0.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// TODO - put your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).count(_ == 'a')\n        if (m == 0) Nil\n        else (0 to\
    \ (n-1)).map(i => (s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).take(i.toInt).toList.mkString(\"\")))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tk6o01u.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(\e\
    [36mc\e[0m => c.isLetter).count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                            ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value toChar is not a member of\
    \ String\n\e[31m\e[31m-- Error: /tmp/tmp4tk6o01u.scala:21:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(\e\
    [36mc\e[0m => c.isLetter).count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4tk6o01u.scala:23:20 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33melse\e[0m (\e[31m0\e[0m to (n-\e[31m1\e[0m)).map(i => (s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).take(i.toInt).toList.mkString(\e[31m\"\"\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    Long\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tk6o01u.scala:23:84 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m (\e[31m0\e[0m to (n-\e[31m1\e\
    [0m)).map(i => (s.toCharArray.map(_.toString.toLowerCase).map(_.toChar).filter(c\
    \ => c.isLetter).take(i.toInt).toList.mkString(\e[31m\"\"\e[0m)))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \   value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmp4tk6o01u.scala:"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val r = new StringBuilder(s)\n\
    \        var t = 0l\n        while (r.size > 0) if (((t = r.indexOf(\" \", t))\
    \ != -1) => (r.slice(0, t)).toList.mkString(\" \"))\n        if ((n > 0)) s match\
    \ {\n            case \"\" => Nil\n            case _ => Nil\n        }\n    \
    \    else Nil\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4754zog7.scala:23:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m (r.size > \e[31m0\e[0m) \e[33mif\e\
    [0m (((t = r.indexOf(\e[31m\" \"\e[0m, t)) != -\e[31m1\e[0m) => (r.slice(\e[31m0\e\
    [0m, t)).toList.mkString(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            not a legal formal parameter\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4754zog7.scala:23:78 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m (r.size > \e[31m0\e[0m) \e[33mif\e\
    [0m (((t = r.indexOf(\e[31m\" \"\e[0m, t)) != -\e[31m1\e[0m) => (r.slice(\e[31m0\e\
    [0m, t)).toList.mkString(\e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (t\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmp4754zog7.scala:25:23 ----------------\e[0m\e[0m\n\e[33m25 |\e[0m   \
    \         \e[33mcase\e[0m \e[31m\"\"\e[0m => Nil\n\e[33m\e[33m   |\e[0m      \
    \                 ^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp4754zog7.scala:26:22 ----------------\e\
    [0m\e[0m\n\e[33m26 |\e[0m            \e[33mcase\e[0m _ => Nil\n\e[33m\e[33m  \
    \ |\e[0m                      ^^^\e[0m\n\e[33m   |\e[0mA pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp4754zog7.scala:28:13\
    \ ----------------\e[0m\e[0m\n\e[33m28 |\e[0m        \e[33melse\e[0m Nil\n\e[33m\e\
    [33m   |\e[0m             ^^^\e[0m\n\e[33m"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (n.toLong == 0)\n         \
    \   return Nil\n        if (s == \"\") \n            return Nil\n        val chars\
    \ = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n   \
    \     for (i <- 0 until chars.length) {\n            if (chars(i) == 'e') {\n\
    \                if (n == chars(i+1)) {\n                    result += s.substring(i)\n\
    \                    result += s.substring(i+1)\n                }\n         \
    \   }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi3gpem92.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = new collection.mutable.LinkedHashSet[String]\n\
    \        if(s.isEmpty) {\n            return new collection.immutable.List[String]()\n\
    \        }\n        val split = s.split(\" \")\n        for(s <- split) {\n  \
    \          if(words.contains(s)) {\n                words.remove(s)\n        \
    \    } else {\n                if(s.toList.length == n) {\n                  \
    \  words.add(s)\n                }\n            }\n        }\n        words._2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90ffc_wp.scala:35:14 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        words._2.toList\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue _2 is not a member of scala.collection.mutable.LinkedHashSet[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val res : List[String] = s.split('\
    \ ').filter(word => \n            word.count(c => c.isLetter && c.isLowerCase\
    \ == false) == n)\n        return res.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmzj18kke.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            word.count(\e[36mc\e[0m => c.isLetter &&\
    \ c.isLowerCase == \e[31mfalse\e[0m) == n)\n\e[31m\e[31m   |\e[0m            \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    value isLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) {\n           \
    \ return Nil\n        }\n        if (n==1) {\n            val chars = s.toCharArray\n\
    \            chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit)\n\
    \        } else {\n            var chars = s.toCharArray\n            chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropRight(1)\n\
    \            chars = chars.takeWhile(char=>\n                char.asInstanceOf[Char].isLetterOrDigit\
    \ && char.asInstanceOf[Char].isSpace)\n            chars = chars.dropWhile(char=>\n\
    \                char.asInstanceOf[Char].isLetterOrDigit && char.asInstanceOf[Char].isSpace)\n\
    \            chars = chars.dropRight(1)\n            chars = chars.takeWhile(char=>\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpryzsqb7k.scala:58:42 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m            chars = chars.takeWhile(\e[36mchar\e[0m=>\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpryzsqb7k.scala:71:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpryzsqb7k.scala:31:83 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                char.asInstanceOf[\e[35mChar\e[0m].isLetterOrDigit\
    \ && char.asInstanceOf[\e[35mChar\e[0m].isSpace)\n\e[31m\e[31m   |\e[0m      \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value isSpace is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryzsqb7k.scala:33:83\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                char.asInstanceOf[\e\
    [35mChar\e[0m].isLetterOrDigit && char.asInstanceOf[\e[35mChar\e[0m].isSpace)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \               value isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpryzsqb7k.scala:39:83 ------------------------\e[0m\e[0m\n\
    \e[31m39 |\e[0m                char.asInstanceOf[\e[35mChar\e[0m].isLetterOrDigit\
    \ && char.asInstanceOf[\e[35mChar\e[0m].isSpace)\n\e[31m\e[31m   |\e[0m      \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value isSpace is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryzsqb7k.scala:41:83\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                char.asInstanceOf[\e\
    [35mChar\e[0m].isLetterOrDigit && char.asInstanc"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // your logic goes here\n    \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprw1qmnut.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// your logic goes here\e[0m\n\e[31m22 |\e[0m        \n\e[31m23 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        if(list.length == 0 || n > list.length) List()\n        else {\n    \
    \        val list = s.split(\" \").toList\n            val s = list.map(_.toLowerCase())\n\
    \            var i = 0\n            var result: List[String] = List()\n      \
    \      while(i < list.length) {\n                if(s(i).isConsonant()) \n   \
    \                 result += s(i)\n                i += 1\n            }\n    \
    \        result\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcuymoa6v.scala:25:20 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = list.map(_.toLowerCase())\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mlist\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuymoa6v.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    result += s(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n         val wordsWithNConsonants = s.split('\
    \ ').map(word => word.split(\"[^aeiou]\")).map(words => {\n             val n\
    \ = words.size\n             val wordsWithConsonants = words.filterNot(word =>\
    \ word.contains(\"\")).filterNot(word => word.contains(\" \")).filter(word =>\
    \ word.length == n).flatMap(word => word.split(\"\")).map(word => if (word.substring(0,\
    \ n).forall(w => w.contains('a')) && word.substring(0, n).forall(w => w.contains('e'))\
    \ && word.substring(0, n).forall(w => w.contains('i')) && word.substring(0, n).forall(w\
    \ => w.contains('o')) && word.substring(0, n).forall(w => w.contains('u'))) word\
    \ else \"\")\n             if (wordsWithConsonants.isEmpty) \"\" else wordsWithConsonants\n\
    \         }).filter(word => word.length == n)\n         if (wordsWithNConsonants.isEmpty)\
    \ List()\n         else wordsWithNConsonants\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_vo6e35.scala:23:236 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m             \e[33mval\e[0m \e[36mwordsWithConsonants\e\
    [0m = words.filterNot(\e[36mword\e[0m => word.contains(\e[31m\"\"\e[0m)).filterNot(\e\
    [36mword\e[0m => word.contains(\e[31m\" \"\e[0m)).filter(\e[36mword\e[0m => word.length\
    \ == n).flatMap(\e[36mword\e[0m => word.split(\e[31m\"\"\e[0m)).map(\e[36mword\e\
    [0m => \e[33mif\e[0m (word.substring(\e[31m0\e[0m, n).forall(\e[36mw\e[0m => w.contains(\e\
    [31m'a'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e[36mw\e[0m => w.contains(\e\
    [31m'e'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e[36mw\e[0m => w.contains(\e\
    [31m'i'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e[36mw\e[0m => w.contains(\e\
    [31m'o'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e[36mw\e[0m => w.contains(\e\
    [31m'u'\e[0m))) word \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_vo6e35.scala:23:289\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m             \e[33mval\e[0m\
    \ \e[36mwordsWithConsonants\e[0m = words.filterNot(\e[36mword\e[0m => word.contains(\e\
    [31m\"\"\e[0m)).filterNot(\e[36mword\e[0m => word.contains(\e[31m\" \"\e[0m)).filter(\e\
    [36mword\e[0m => word.length == n).flatMap(\e[36mword\e[0m => word.split(\e[31m\"\
    \"\e[0m)).map(\e[36mword\e[0m => \e[33mif\e[0m (word.substring(\e[31m0\e[0m, n).forall(\e\
    [36mw\e[0m => w.contains(\e[31m'a'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e\
    [36mw\e[0m => w.contains(\e[31m'e'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e\
    [36mw\e[0m => w.contains(\e[31m'i'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e\
    [36mw\e[0m => w.contains(\e[31m'o'\e[0m)) && word.substring(\e[31m0\e[0m, n).forall(\e\
    [36mw\e[0m => w.contains(\e[31m'u'\e[0m))) word \e[33melse\e[0m \e[31m\"\"\e[0m)\n\
    \e[31m\e[31m "
  stdout: ''
  timestamp: 1660010485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result: List[String] = Nil\n\
    \        var counts : mutable.HashMap[Char, Int] = mutable.HashMap()\n       \
    \ for (ch <- s) {\n            if (counts.getOrElse(ch, 0)) {\n              \
    \  counts.get(ch) -= 1\n            } else {\n                counts.put(ch, 1L)\n\
    \            }\n        }\n        for (c <- counts) {\n            if (counts.get(c)\
    \ == n.toInt) {\n                if (c.toString.length == n.toInt) {\n       \
    \             result = result :+ c.toString\n                }\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkeij35tq.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m : mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.HashMap()\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkeij35tq.scala:22:50\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e\
    [36mcounts\e[0m : mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m] = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        \n        // TODO: Your code goes here\n        \n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfjk_4kk.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def words(s : String) : List[String]\
    \ = {\n            val wordsSet = s.toSet\n            wordsSet.filter(_ == '\
    \ ').toList\n        }\n\n        if (words.isEmpty(s)) Nil\n        else words(s).filter(n\
    \ ==\n            words.map(_ =>\n                (if (_ == 'a') 'ae' else (_\
    \ == 'e') 'eo') ++\n                (_ == 'y') 'ey' ++\n                (_ ==\
    \ 'i') 'io' ++\n                (_ == 'o') 'oo').count(_)).map(s => s.capitalize).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7s2jmzge.scala:29:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                (\e[33mif\e[0m (_ == \e[31m'a'\e[0m)\
    \ \e[31m'ae\e[0m' \e[33melse\e[0m (_ == \e[31m'e'\e[0m) \e[31m'eo\e[0m') ++\n\e\
    [31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal 'ae is no longer supported,\n\e[31m   |\e[0muse a string literal \"\
    ae\" or an application Symbol(\"ae\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{ae} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp7s2jmzge.scala:29:34 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                (\e[33mif\e[0m (_ == \e[31m'a'\e[0m)\
    \ \e[31m'ae\e[0m' \e[33melse\e[0m (_ == \e[31m'e'\e[0m) \e[31m'eo\e[0m') ++\n\e\
    [31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m \
    \                                 ')' expected, but ' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7s2jmzge.scala:29:55 -----------------------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                (\e[33mif\e[0m (_ == \e[31m'a'\e[0m) \e[31m'ae\e\
    [0m' \e[33melse\e[0m (_ == \e[31m'e'\e[0m) \e[31m'eo\e[0m') ++\n\e[31m\e[31m \
    \  |\e[0m                                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                              unclosed character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp7s2jmzge.scala:32:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                (_ == \e[31m'o'\e[0m) \e[31m'oo\e[0m').count(_)).map(s\
    \ => s.capitalize).reverse\n\e[31m\e[31m   |\e[0m                            \
    \  ^\e[0m\n\e[31m   |\e[0m                              unclosed character literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7s2jmzge.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7s2jmzge.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23 |\e[0"
  stdout: ''
  timestamp: 1660010485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = n / 2\n        val b =\
    \ s.length()\n        var l = 0\n        var r = 0\n        var i = 0\n      \
    \  val words = scala.collection.mutable.ListBuffer[String]()\n\n        if (m\
    \ == 0)\n            return words\n\n        while (i < b) {\n            val\
    \ c = s(i)\n            if (c == \" \") {\n                if (l + 1 < r) {\n\
    \                    if (s(l + 1) == c)\n                        words += s(l,\
    \ r)\n                    else\n                        words += s(l, l+1)\n \
    \               } else\n                    words += s(l, l)\n               \
    \ l += 2\n                i += 1\n                r = 0\n            } else\n\
    \                r += if (c.toLowerCase == 'a') 2\n                      else\
    \ if (c.toLowerCase == 'e') 1\n                      else 0\n            i +=\
    \ 1\n        }\n\n        if (m % 2 == 0)\n            selectWords(s, n - (m +\
    \ 1))\n        else\n            words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbm6lxr_p.scala:45:21 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                r += \e[33mif\e[0m (c.toLowerCase ==\
    \ \e[31m'a'\e[0m) \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbm6lxr_p.scala:29:19\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mreturn\e[0m\
    \ words\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m \
    \        Found:    (words : scala.collection.mutable.ListBuffer[String])\n\e[31m\
    \   |\e[0m         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpbm6lxr_p.scala:33:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            \e[33mif\e[0m (c == \e[31m\" \"\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbm6lxr_p.scala:36:35 --------------------\e[0m\e[0m\n\
    \e[31m36 |\e[0m                        words += s(l, r)\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Found:    (Int, Int)\n\e[31m   |\e[0m                   \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbm6lxr_p.scala:38:35 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                        words += s(l, l+\e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (Int, Int)\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbm6lxr_p.scala:40"
  stdout: ''
  timestamp: 1660010486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if(s == \"\"){\n            List[String]()\n\
    \        }else if(s.contains(\" \")== false){\n            List[String](s)\n \
    \       }else{\n            val words = s.split(\" \")\n            val counts\
    \ = words.map(_.length).groupBy(_ % 2 == 0).mapValues(_.length)\n            val\
    \ maxLength = counts.max\n            var wordsWithMaxLength = List[String]()\n\
    \            for(word <- words){\n                if(counts(word)._2 >= maxLength){\n\
    \                    wordsWithMaxLength ::= word\n                }\n        \
    \    }\n            wordsWithMaxLength\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3nu4y82.scala:31:26\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                \e[33mif\e[0m(counts(word)._2\
    \ >= maxLength){\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e\
    [31m   |\e[0m                          Found:    (word : String)\n\e[31m   |\e\
    [0m                          Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // (1)\n        if(s.isEmpty)\
    \ {\n            return Nil\n        }\n\n        // (2)\n        var result :\
    \ List[String] = Nil\n\n        // (3)\n        for(i <- s.indices) {\n      \
    \      // if(s(i) != 'a') { // check this condition and see if it works\n    \
    \        //     break\n            // }\n            val currentIndex = s.index(i)\n\
    \            val currentChar = s(currentIndex)\n            val nextIndex = currentIndex\
    \ + 1\n            val nextChar = s(nextIndex)\n\n            // (4)\n       \
    \     val currentCharCount = (nextChar.toInt) - currentChar.toInt\n          \
    \  val currentCharOccurance = currentCharCount.toInt\n            val currentCharOccuranceOccurance\
    \ = currentCharOccurance.toInt / n\n\n            // (5)\n            val nextCharOccuranceOccurance\
    \ = (nextChar.toInt) / n\n\n            if((currentCharOccurance == n) && (currentCharOccuranceOccurance\
    \ == nextCharOccuranceOccurance)) {\n                result = result :+ s.substring(currentIndex,\
    \ nextIndex)\n            }\n        }\n\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyra36gs.scala:34:33 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mcurrentIndex\e[0m =\
    \ s.index(i)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m          value index is not a member of String - did you mean\
    \ s.indent?\n1 error found\n"
  stdout: ''
  timestamp: 1660010485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def isConsonant(s : String) =\
    \ \n            s match {\n                case x if (x.toUpperCase == x) => false\n\
    \                case x => true\n            }\n        val words = ListBuffer.empty[String]\n\
    \        \n        s.drop(n).foreach { x => \n            if (isConsonant(x))\
    \ words :+= x\n        }\n        \n        words.length < 1 ? List.empty[String]\
    \ : words.length == n ? words.toList : words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv4nxf67g.scala:32:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        words.length < \e[31m1\e[0m ? List.empty[\e[35mString\e\
    [0m] : words.length \e[35m==\e[0m \e[35mn\e[0m \e[35m?\e[0m words.toList : words\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \     end of statement expected but ':' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv4nxf67g.scala:28:15 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        s.drop(n).foreach { \e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               Found:    (n : Long)\n\e[31m\
    \   |\e[0m               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv4nxf67g.scala:29:28 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (isConsonant(x)) words :+= x\n\e\
    [31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    (x : Char)\n\e[31m   |\e[0m                  \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpv4nxf67g.scala:29:38 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            \e[33mif\e[0m (isConsonant(x)) words :+= x\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is\
    \ not a member of scala.collection.mutable.ListBuffer[String] - did you mean words.++=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4nxf67g.scala:32:61 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        words.length < \e[31m1\e[0m ? List.empty[\e[35mString\e\
    [0m] : words.length \e[35m==\e[0m \e[35mn\e[0m \e[35m?\e[0m words.toList : words\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^\e[0m\n\e[31m   |\e[0m                                               \
    \       Not found: type ==\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ availab"
  stdout: ''
  timestamp: 1660010487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = scala.collection.mutable.ListBuffer[String]()\n\
    \        for (x <- s.toCharArray) {\n            if (x.toString.toList.size ==\
    \ n)\n                list += x.toString\n        }\n        if (list.size ==\
    \ 0) List()\n        else list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu_ge3twi.scala:30)\n\tat Problem.main(tmpu_ge3twi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list = new mutable.MutableList[String]()\n\
    \        var i = 0\n        var j = 0\n        val count = s.length\n\n      \
    \  // Loop over the string's chars\n        while (i < count) {\n            val\
    \ c = s.charAt(i)\n            val cLower = c.toLower\n            if (cLower.toString.length\
    \ == 1) \n                list += cLower \n            else if ((cLower.toString.length\
    \ == 2 && cLower != \"a\" && cLower != \"e\" && cLower != \"i\" && cLower != \"\
    o\" && cLower != \"u\")) \n                list += cLower \n            i += 1\n\
    \        }\n        \n        // Get rid of words containing n consonants\n  \
    \      val nconsonants = List[Char](\"bcdfghjklmnpqrstvwxyz\")\n        var i\
    \ = 0\n        var j = 0\n        while (i < list.length) {\n            if (nconsonants.contains(list.charAt(i)))\
    \ {\n                val word = list.drop(i).takeWhile(c => c != list.charAt(i))\n\
    \                list -= word\n                j = 0\n                while (j\
    \ < list.length) {\n                    val word = list.drop(i).takeWhile(c =>\
    \ c != list.charAt(i))\n                    list += word\n                   \
    \ j += 1\n                }\n            }\n            i += 1\n        }\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_u9jpmf7.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_u9jpmf7.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_u9jpmf7.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_u9jpmf7.scala:32:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m ((cLower.toString.length\
    \ == \e[31m2\e[0m && cLower != \e[31m\"a\"\e[0m && cLower != \e[31m\"e\"\e[0m\
    \ && cLower != \e[31m\"i\"\e[0m && cLower != \e[31m\"o\"\e[0m && cLower != \e\
    [31m\"u\"\e[0m)) \n\e[31m\e[31m   |\e[0m                                     \
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp_u9jpmf7.scala:32:70\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m ((cLower.toString.length == \e[31m2\e[0m &&\
    \ cLower != \e[31m\"a\"\e[0m && cLower != \e[31m\"e\"\e[0m && cLower != \e[31m\"\
    i\"\e[0m && cLower != \e[31m\"o\"\e[0m && cLower != \e[31m\"u\"\e[0m)) \n\e[31m\e\
    [31m   |\e[0m                                                    "
  stdout: ''
  timestamp: 1660010489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = new mutable.ListBuffer[String]()\n\
    \        // Your code here\n        val a = s.toList\n        for (i <- 0 until\
    \ a.length if a.apply(i) == n.toChar)\n            if (a.indexOf(a.apply(i)) <\
    \ a.length-1)\n                list += a.apply(i)\n            else\n        \
    \        break\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_hi0s0.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n_hi0s0.scala:28:16\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val word = mutable.ListBuffer[String]()\n\
    \        for (i<-0 until s.length) {\n            if (s.charAt(i).asInstanceOf[Char]==\
    \ ' ')\n                word.append(s.substring(i, s.length-1)).append(' ')\n\
    \            if (s.charAt(i).asInstanceOf[Char]== 'e')\n                word.append(s.substring(i,\
    \ s.length-1)).append(\"e\")\n            if (s.charAt(i).asInstanceOf[Char]==\
    \ 's')\n                word.append(s.substring(i, s.length-1)).append(\"s\")\n\
    \            if (s.charAt(i).asInstanceOf[Char]== 'a')\n                word.append(s.substring(i,\
    \ s.length-1)).append(\"a\")\n        }\n        val wordCount = word.filter(_.contains(n)).size\n\
    \        val wordList = word.filter(_.contains(n)).sorted\n        for (i <- 0\
    \ until wordCount - 1) {\n            wordList(i)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwmpmx87.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mword\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwwmpmx87.scala:34:8 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until wordCount\
    \ - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\e[31m35 |\e\
    [0m            wordList(i)\n\e[31m36 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.length == 0) {\n       \
    \     return []\n        }\n        var result: List[String] = List[String]()\n\
    \        var i = 0\n        while (i < s.length - 1) {\n            var nextChar\
    \ = s.charAt(i)\n            if (nextChar == 'm') {\n                result +=\
    \ s.substring(i, i + 3)\n                i += 3\n            } else if (nextChar\
    \ == 'l') {\n                result += s.substring(i, i + 3)\n               \
    \ i += 3\n            } else if (nextChar == 'l' || nextChar == 'm') {\n     \
    \           result += s.substring(i, i + 3)\n                i += 3\n        \
    \    } else if (nextChar == 'e') {\n                result += s.substring(i, i\
    \ + 2)\n                i += 2\n            } else if (nextChar == 'a') {\n  \
    \              result += s.substring(i, i + 2)\n                i += 2\n     \
    \       } else if (nextChar == 'i') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 's') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else if (nextChar == 't') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 'w') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else if (nextChar == 'd') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 'l') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else if (nextChar == 'u') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 'c') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else if (nextChar == 'a') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 'm') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else if (nextChar == 'l') {\n                result += s.substring(i,\
    \ i + 1)\n                i += 1\n            } else if (nextChar == 'e') {\n\
    \                result += s.substring(i, i + 1)\n                i += 1\n   \
    \         } else {\n                i += 1\n            }\n        }\n       \
    \ if (n != result.length) {\n            println(\"not ok\")\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeearlqer.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m []\n\e[31m\e[31m   |\e\
    [0m                    ^\e[0m\n\e[31m   |\e[0m                    an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeearlqer.scala:23:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        '=>' expected, but '}' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:29:23 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result += s.substring(i, i + \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:32:23 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result += s.substring(i, i + \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:35:23 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                result += s.substring(i, i + \e[31m3\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:38:23 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                result += s.substring(i, i + \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:41:23 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                result += s.substring(i, i + \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeearlqer.scala:44:23 -----"
  stdout: ''
  timestamp: 1660010491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val alphabet = s.toCharArray\n\
    \        val charCount = new mutable.HashMap[Char, Int]()\n        \n        //\
    \ Get all letters and count how many of each letter\n        var letterCount =\
    \ 0\n        for (i <- alphabet) {\n            charCount.getOrElse(i, 0) += 1\n\
    \            letterCount += 1\n        }\n\n        val res = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until n) {\n            val currChar = alphabet((n % letterCount).toInt)\n\
    \            if (charCount.contains(currChar))\n                res.add(currChar)\n\
    \            n -= 1\n        }\n\n        if (res.isEmpty) Nil else res.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplwx_492r.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcharCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplwx_492r.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplwx_492r.scala:32:26 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplwx_492r.scala:36:14\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result : List[String] = Nil\n\
    \        val m = s.length\n        var c = 0\n        var k = 0\n        for (x\
    \ <- 0 to m) {\n            val y = s(x)\n            val z = y.toInt\n      \
    \      val z = z - 32\n            val i = z * n + c\n            if (i == m)\
    \ {\n                if (c == n - 1)\n                    result ::= y.toString\n\
    \                else\n                    result ::= y.toString :: result\n \
    \               k = 1\n                c = 0\n            } else if (i > m) {\n\
    \                result ::= y.toString\n                k = 1\n              \
    \  c = 0\n            } else\n                if (z == 0)\n                  \
    \  c += 1\n                else \n                    c += 1\n        }\n    \
    \    if (k == 1)\n            result ::= s.toString\n        else\n          \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp7n8aqy8.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mz\e[0m = z - \e[31m32\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is\
    \ already defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp7n8aqy8.scala:34:27\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    result\
    \ ::= y.toString :: result\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7n8aqy8.scala:48:12 --------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            result ::= s.toString\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found: \
    \   Unit\n\e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val a = s.split(\"\").filter(x\
    \ => (x != \" \"))\n        val m = a.filter(x => (x % 2) == 0).length\n     \
    \   val l = a.filter(x => (x % 2) == 1).length\n        val c = a.filter(x =>\
    \ (x % 2) == 2).length\n        val p = a.filter(x => (x % 2) == 3).length\n \
    \       val n = a.filter(x => (x % 2) == 4).length\n        val t = a.filter(x\
    \ => (x % 2) == 5).length\n        val h = a.filter(x => (x % 2) == 6).length\n\
    \        val d = a.filter(x => (x % 2) == 7).length\n        val r = a.filter(x\
    \ => (x % 2) == 8).length\n        val f = a.filter(x => (x % 2) == 9).length\n\
    \        val e = a.filter(x => (x % 2) == 10).length\n        val w = a.filter(x\
    \ => (x % 2) == 11).length\n        val g = a.filter(x => (x % 2) == 12).length\n\
    \        val h = a.filter(x => (x % 2) == 13).length\n        val j = a.filter(x\
    \ => (x % 2) == 14).length\n        val k = a.filter(x => (x % 2) == 15).length\n\
    \        val l = a.filter(x => (x % 2) == 16).length\n        val m = a.filter(x\
    \ => (x % 2) == 17).length\n        val i = a.filter(x => (x % 2) == 18).length\n\
    \        val p = a.filter(x => (x % 2) == 19).length\n        val o = a.filter(x\
    \ => (x % 2) == 20).length\n        val n = a.filter(x => (x % 2) == 21).length\n\
    \        val h = a.filter(x => (x % 2) == 22).length\n        val l = a.filter(x\
    \ => (x % 2) == 23).length\n        val j = a.filter(x => (x % 2) == 24).length\n\
    \        val g = a.filter(x => (x % 2) == 25).length\n        val k = a.filter(x\
    \ => (x % 2) == 26).length\n        val m = a.filter(x => (x % 2) == 27).length\n\
    \        val i = a.filter(x => (x % 2) == 28).length\n        val p = a.filter(x\
    \ => (x % 2) == 29).length\n        val o = a.filter(x => (x % 2) == 30).length\n\
    \        val a = a.filter(x => (x % 2) == 31).length\n        val p = a.filter(x\
    \ => (x % 2) == 32).length\n        val o = a.filter(x \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpynppy0c8.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpynppy0c8.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mh\e[0m = a.filter(\e[36mx\e[0m => (x % \e[31m2\e[0m) == \e[31m13\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mh is already defined as \e[33mvalue\e[0m \e[35mh\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynppy0c8.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = a.filter(\e[36mx\e[0m => (x % \e\
    [31m2\e[0m) == \e[31m16\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynppy0c8.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.filter(\e[36mx\e[0m => (x % \e\
    [31m2\e[0m) == \e[31m17\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpynppy0c8.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = a.filter(\e[36mx\e[0m => (x % \e\
    [31m2\e[0m) == \e[31m19\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1660010496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\"\")\n   \
    \     val set = scala.collection.mutable.Set.empty[String]\n        var i = 0\n\
    \        while (i < list.length) {\n            val word = list(i)\n         \
    \   if (word contains n) set += word\n            i += 1\n        }\n        if\
    \ (set.size == 0) List()\n        else set.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq7v5y2oz.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m set.sorted\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value sorted is not a member\
    \ of scala.collection.mutable.Set[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val ls = s.length\n        val\
    \ arr = new Array[Char](n+1)\n        for( i <- 0 until ls - n + 1) {\n      \
    \      for(j <- 0 until n) {\n                arr(j) =\n                    if\
    \ (s.charAt(i+j).isUpper) s.charAt(i+j) \n                    else if (s.charAt(i+j).isLower)\
    \ s.charAt(i+j) \n                    else ' '\n            }\n            val\
    \ n = arr.length - 1\n            if (n == 0) {\n                List[String]()\n\
    \            } else {\n                if (arr.take(n).forall(_.isUpper)) {\n\
    \                    List[String](s.substring(0,i) + s.substring(i+n))\n     \
    \           } else List[String](s.substring(0,i))\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmporsc9a7d.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mChar\e[0m](n+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmporsc9a7d.scala:23:26 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until ls - n + \e[31m1\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Found:    Long\n\e[31m   |\e[0m            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = s.toLowerCase().replace('\
    \ ', '').length\n        val k = n * m\n        if (m.toDouble <= k) List(s.trim)\
    \ else\n        selectWords(s.substring(0,n),n).flatMap(a => selectWords(s.substring(n),n)\
    \ match {\n            case Nil => List(a)\n            case x :: xs => if (a.toString.contains(x))\
    \ List(a) else Nil\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqqxo6njs.scala:21:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = s.toLowerCase().replace(\e\
    [31m' '\e[0m, '').length\n\e[31m\e[31m   |\e[0m                              \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \       empty character literal\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqqxo6njs.scala:21:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e\
    [0m \e[36mm\e[0m = s.toLowerCase().replace(\e[31m' '\e[0m, '').length\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e\
    [33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence,\
    \ x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\
    \e[31m   |\e[0mmatch arguments ((\e[31m' '\e[0m : Char), Null)\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqqxo6njs.scala:24:34 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        selectWords(s.substring(\e[31m0\e[0m,n),n).flatMap(\e\
    [36ma\e[0m => selectWords(s.substring(n),n) \e[33mmatch\e[0m {\n\e[31m\e[31m \
    \  |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m           \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqqxo6njs.scala:24:77 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        selectWords(s.substring(\e[31m0\e[0m,n),n).flatMap(\e[36ma\e[0m\
    \ => selectWords(s.substring(n),n) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wlist = Array()\n        def\
    \ count(s : String, n: Long): Int = {\n            def count(s: String, n: Int):\
    \ Int = {\n                if (s.length == 0) 0\n                else if (s.charAt(0)\
    \ == ' ') count(s.substring(1), n) // if first char is space\n               \
    \ else if (s.charAt(n) == ' ') count(s.substring(0,n), n + 1) // if last char\
    \ is space\n                else 1 + count(s.substring(1), n)\n            }\n\
    \            count(s, n)\n        }\n        def buildList(s: String, n: Int):\
    \ Unit = {\n            val words = Array[String]()\n            def search(s:\
    \ String, n: Int): Unit = {\n                if (count(s, n) == n) words.append(s)\n\
    \                if (count(s, n) == n + 1) return\n                if (count(s,\
    \ n) == n - 1) buildList(s.substring(0, n), n)\n                if (count(s, n)\
    \ == n + 2) buildList(s.substring(1, n), n)\n            }\n            search(s,\
    \ n)\n            wlist.+=(words)\n        }\n        if (count(s, 0) > n) buildList(s,\
    \ 0)\n        wlist\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl9okh854.scala:21:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwlist\e[0m = Array()\n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   No ClassTag available for T\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                           where:    T is a type variable\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpl9okh854.scala:29:21 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            count(s, n)\n\e[31m\e[31m   |\e[0m           \
    \          ^\e[0m\n\e[31m   |\e[0m                     Found:    (n : Long)\n\e\
    [31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl9okh854.scala:34:44 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mif\e[0m (count(s, n) == n) words.append(s)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue append is not a member of Array[String] - did you mean words.apply?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val pattern = if (n == 0) \"\"\
    \ else \"\"\"[^A-Za-z]\"\"\".r\n        val wordSet = pattern.split(s).filter(w\
    \ => w.isEmpty).toSet\n        wordSet.map(w => List(w))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfes9mfm.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = pattern.split(s).filter(\e\
    [36mw\e[0m => w.isEmpty).toSet\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value split is not a member of Object - did you mean\
    \ pattern.wait?\n1 error found\n"
  stdout: ''
  timestamp: 1660010493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var wordsList = List[String]()\n\
    \        var i = 0\n        while(i < s.length){\n            if(s.charAt(i) ==\
    \ 'A' || s.charAt(i) == 'a' || s.charAt(i) == 'E' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'I' || s.charAt(i) == 'i' || s.charAt(i) == 'O' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'U' || s.charAt(i) == 'u' || s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u' ||\
    \ s.charAt(i) == 'y' || s.charAt(i) == 'u'){\n                wordsList += s.substring(i+1,\
    \ i+n)\n                i = i + n\n            }else{\n                wordsList\
    \ += s.substring(i, i+1)\n                i = i + 1\n            }\n        }\n\
    \        if(s.length != 0){\n            wordsList += s.substring(i)\n       \
    \ }\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjgg0ibni.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                wordsList += s.substring(i+\e[31m1\e\
    [0m, i+n)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgg0ibni.scala:25:46 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                wordsList += s.substring(i+\e[31m1\e\
    [0m, i+n)\n\e[31m\e[31m   |\e[0m                                             \
    \ ^^^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    Long\n\e[31m   |\e[0m                                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgg0ibni.scala:26:20\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                i = i + n\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjgg0ibni.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                wordsList\
    \ += s.substring(i, i+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjgg0ibni.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            wordsList += s.substring(i)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"aeiou\"\n     \
    \   val cons = \"bcdfghjklmnpqrstvwxyz\"\n        var s = s\n        if (s.isEmpty)\
    \ {\n            Nil\n        } else {\n            var numConsLeft : Long = s.split(\"\
    \ \").map(_.length).sum\n            var wordList : List[String] = Nil\n     \
    \       var wordToAppend : String = \"\"\n            while (numConsLeft > n)\
    \ numConsLeft -= 1\n            while (s.length() > 0) {\n                var\
    \ nextWordIndex : Int = 0\n                val nextWords = s.length() - s.reverse.lastIndexOf('\
    \ ').toInt\n                val nextConsLength = nextWords - s.reverse.indexOf('\
    \ ')\n                val nextConsString : String = s.reverse.substring(nextConsLength\
    \ + 1).toCharArray\n                var nextConsIndex = 0\n                while\
    \ (nextConsIndex < nextConsString.length) {\n                    if (vowels.contains(nextConsString(nextConsIndex)))\
    \ {\n                        nextConsIndex += 1\n                    }\n     \
    \               nextConsIndex += 1\n                }\n                var wordToReturn\
    \ : String = \"\"\n                while (nextConsIndex < nextConsString.length)\
    \ {\n                    if (cons.contains(nextConsString(nextConsIndex))) {\n\
    \                        wordToReturn += nextConsString(nextConsIndex)\n     \
    \                   nextConsIndex += 1\n                    }\n              \
    \      nextConsIndex += 1\n                }\n                wordToAppend = wordToReturn.reverse\n\
    \                if (!wordList.isEmpty) {\n                    wordList ::= wordToAppend\n\
    \                } else {\n                    wordList = wordToAppend\n     \
    \           }\n            }\n            wordList\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1u9_dpbp.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = s\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1u9_dpbp.scala:55:31 --------------------\e[0m\e\
    [0m\n\e[31m55 |\e[0m                    wordList = wordToAppend\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (wordToAppend : String)\n\e[31m   |\e\
    [0m                               Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val l = s.length\n        val\
    \ r = n\n        val res = new collection.mutable.ArrayList\n        val s = Array.fill(l){\
    \ ' ' }\n        for (i <- 0 until l)\n            if (s(i) != ' ')\n        \
    \        if (s(i) == s(i-1))\n                    if (s(i-2) == s(i-1))\n    \
    \                    res.add(s.substring(i,i+r).trim)\n                    if\
    \ (s(i-1) != s(i-2))\n                        res.add(s.substring(i,i+r).trim)\n\
    \                if (s(i) == s(i-1))\n                    if (s(i-1) != s(i-2))\n\
    \                        res.add(s.substring(i,i+r).trim)\n        return res.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwaki31i3.scala:24:27 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = Array.fill(l){\
    \ \e[31m' '\e[0m }\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e\
    [31m   |\e[0m                           Recursive \e[33mvalue\e[0m \e[35ml\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwaki31i3.scala:23:41\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = \e[33mnew\e[0m collection.mutable.ArrayList\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \            type ArrayList is not a member of scala.collection.mutable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.HashSet[String]()\n\
    \        var nextWord : String = \"\"\n        var currentIndex : Int = -1\n \
    \       var letterCount : Int = -1\n        for {\n            nextIndex = s.indexOf(nextWord,\
    \ currentIndex + 1)\n            letterCount = nextIndex - currentIndex\n    \
    \        letterCount match {\n                case 0 => nextWord = \"\"\n    \
    \            case n if n == letterCount => \n                    result.add(nextWord)\n\
    \                case n if n > letterCount => nextWord = s.substring(currentIndex\
    \ + 1, nextIndex)\n            }\n            currentIndex = nextIndex\n     \
    \   } while (currentIndex != -1)\n        if (result.isEmpty) result.add(\"\"\
    )\n        result.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphwcs5rvm.scala:26:22 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            nextIndex = s.indexOf(nextWord, currentIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      '<-' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmphwcs5rvm.scala:34:0 ----------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m            currentIndex = nextIndex\n\e[31m\e[31m   |\e[0m^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphwcs5rvm.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphwcs5rvm.scala:26:61\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            nextIndex = s.indexOf(nextWord,\
    \ currentIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mvalue map is not\
    \ a member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e"
  stdout: ''
  timestamp: 1660010499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n      // Your code here\n      val list\
    \ = s.split(\" \").map(_.toUpperCase())\n      val counts = list.map(x => x.split(\"\
    [^aeiou]\")).flatten\n      val n = count.length\n      val result: mutable.Set[String]\
    \ = mutable.Set()\n      val index = 0\n      while(index < n) {\n        if (counts.take(n).count(_\
    \ == n) == n) {\n          result += list.take(n)\n        }\n      }\n      result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5f_sh1v.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = count.length\n\e\
    [31m\e[31m   |\e[0m              ^^^^^\e[0m\n\e[31m   |\e[0m              Not\
    \ found: count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5f_sh1v.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5f_sh1v.scala:25:40\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m      \e[33mval\e[0m \e[36mresult\e\
    [0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m   \
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var words: List[String] = List()\n\
    \        var count = 0l\n        var index = -1l\n        var curChar = s.charAt(0)\n\
    \        while (curChar != ' ') {\n            if (curChar == 'a') {\n       \
    \         count += 2l\n            } else if (curChar == 'e') {\n            \
    \    count += 2l\n            } else if (curChar == 'i') {\n                count\
    \ += 2l\n            } else if (curChar == 'o') {\n                count += 2l\n\
    \            } else if (curChar == 'u') {\n                count += 2l\n     \
    \       } else if (curChar == 'l') {\n                count += 1l\n          \
    \  } else if (curChar == 'A') {\n                count += 2l\n            } else\
    \ if (curChar == 'E') {\n                count += 2l\n            } else if (curChar\
    \ == 'I') {\n                count += 2l\n            } else if (curChar == 'O')\
    \ {\n                count += 2l\n            } else if (curChar == 'U') {\n \
    \               count += 2l\n            } else if (curChar == 'L') {\n      \
    \          count += 1l\n            } else if (curChar == '2') {\n           \
    \     count += 2l\n            } else if (curChar == '3') {\n                count\
    \ += 2l\n            } else if (curChar == '4') {\n                count += 2l\n\
    \            } else if (curChar == '5') {\n                count += 2l\n     \
    \       } else if (curChar == '6') {\n                count += 2l\n          \
    \  } else if (curChar == '7') {\n                count += 2l\n            } else\
    \ if (curChar == '8') {\n                count += 2l\n            } else if (curChar\
    \ == '9') {\n                count += 2l\n            } else if (curChar == '0')\
    \ {\n                count += 2l\n            } else if (curChar == 'a') {\n \
    \               count += 3l\n            } else if (curChar == 'e') {\n      \
    \          count += 3l\n            } else if (curChar == 'i') {\n           \
    \     count += 3l\n            } else if (curChar == 'o') {\n                count\
    \ += 3l\n            } else if (curChar == 'u') {\n                count += 3l\n\
    \            } else if (curChar == 'l') {\n                count += 3l\n     \
    \       } else if (curChar == 'A') {\n                count += 3l\n          \
    \  } else if (curChar == 'E') {\n                count += 3l\n            } else\
    \ if (curChar == 'I') {\n                count += 3l\n            } else if (curChar\
    \ == 'O') {\n                count += 3l\n            } else if (curChar == 'U')\
    \ {\n                count += 3l\n            } else if (curChar == 'L') {\n \
    \               count += 3l\n            } else if (curChar == '2') {\n      \
    \          count += 3l\n            } else if (curChar == '3') {\n           \
    \     count += 3l\n            } else if (curChar == '4') {\n                count\
    \ += 3l\n            } else if (curChar == '5') {\n                count += 3l\n\
    \            } else if (curChar\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps_vqeoua.scala:101:4 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps_vqeoua.scala:113:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m113 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps_vqeoua.scala:100:23 -------------------\e[0m\e\
    [0m\n\e[31m100 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (curChar\n\e\
    [31m\e[31m    |\e[0m                       ^^^^^^^\e[0m\n\e[31m    |\e[0m    \
    \                   Found:    (curChar : Char)\n\e[31m    |\e[0m             \
    \          Required: Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps_vqeoua.scala:112:1 --------------------\e[0m\e[0m\n\e[31m112\
    \ |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:    Unit\n\e\
    [31m    |\e[0m Required: List[String]\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmps_vqeoua.scala:102:4 ---------------------------------------\e[0m\e\
    [0m\n\e[33m102 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // write your code here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2ts6ukj.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// write your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (n.toInt == 0)\n          \
    \  List()\n        else {\n            def helper(s: String, pos: Long, i : Int)\
    \ : List[String] = {\n                if (i == s.length)\n                   \
    \ List()\n                else {\n                    def helper2(s : String,\
    \ pos: Long, i : Int, acc : List[String]) : List[String] = {\n               \
    \         if (i == s.length)\n                            List(\"s\" :: acc)\n\
    \                        else {\n                            val substr = s.substring(pos,\
    \ pos + i)\n                            val count = substr.count(_ == 'z' - 'a'\
    \ + 1).toLong\n                            if (count == n)\n                 \
    \               helper2(substr, pos + i, i + 1, acc + substr)\n              \
    \              else\n                                helper2(substr, pos + i,\
    \ i, acc + substr)\n                        }\n                    }\n       \
    \             helper2(s, pos, 0, \"\")\n                }\n            }\n   \
    \         helper(s, n, s.length, 0)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5qiusxnf.scala:30:33\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                            List(\e\
    [31m\"s\"\e[0m :: acc)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:    \e\
    [1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m  \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5qiusxnf.scala:32:53 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                            \e[33mval\e[0m \e[36msubstr\e\
    [0m = s.substring(pos, pos + i)\n\e[31m\e[31m   |\e[0m                       \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \                             Found:    (pos : Long)\n\e[31m   |\e[0m        \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5qiusxnf.scala:32:58 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                            \e[33mval\e[0m \e[36msubstr\e\
    [0m = s.substring(pos, pos + i)\n\e[31m\e[31m   |\e[0m                       \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                              Found:    Long\n\e[31m   |\e[0m\
    \                                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5qiusxnf.scala:35:68 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                                helper2(substr, pos +\
    \ i, i + \e[31m1\e[0m, acc + substr)\n\e[31m\e[31m   |\e[0m                  \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixin"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val m = s.toString.replaceAll(\"\
    \ \", \"\").length // M is length of string\n        val n = n.toString.toLong\
    \ // n is length of selected substring\n        var list: List[String] = Nil\n\
    \        var start = 0 // starting index\n        while (start < m) {\n      \
    \      var end = m // ending index\n            var cont = true // continutes\
    \ loop\n            while ((end < m) && cont) {\n                if (s.charAt(end)\
    \ == ' ') {\n                    end = end + 1\n                } else {\n   \
    \                 cont = false\n                }\n            }\n           \
    \ list = list ::: s.substring(start, end) :: Nil\n            start = end\n  \
    \      }\n        if (list.length == n) {\n            list\n        } else {\n\
    \            Nil\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyw3_70_6.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toString.toLong\
    \ \e[34m// n is length of selected substring\e[0m\n\e[31m\e[31m   |\e[0m     \
    \           ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m\
    \ \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s == \"\") Nil\n        else\
    \ {\n            val l = s.toLowerCase :: Nil\n            val list = for (a <-\
    \ l) if (a.toUpperCase == a.toLowerCase) yield a\n            var i = 2l\n   \
    \         val ans = for (x <- list) yield x\n            while (i < n) ans = ans\
    \ ++ ((list.filterNot(x => list.contains(x) && x.toUpperCase == x.toLowerCase))\
    \ ++ (list diff ans))\n            (ans filterNot (x => ans.contains(x) && x.toUpperCase\
    \ == x.toLowerCase))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6khr_g1i.scala:24:72 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mfor\e\
    [0m (a <- l) \e[33mif\e[0m (a.toUpperCase == a.toLowerCase) \e[33myield\e[0m a\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \     'then' expected, but 'yield' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6khr_g1i.scala:26:32 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mval\e[0m \e[36mans\e[0m = \e[33mfor\e[0m (x <- list) \e[33myield\e\
    [0m x\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value map is not a member of Unit\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6khr_g1i.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mwhile\e[0m (i < n) ans = ans ++ ((list.filterNot(\e\
    [36mx\e[0m => list.contains(x) && x.toUpperCase == x.toLowerCase)) ++ (list diff\
    \ ans))\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m     \
    \              Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp6khr_g1i.scala:27:30 -----------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mwhile\e[0m (i < n) ans = ans ++ ((list.filterNot(\e\
    [36mx\e[0m => list.contains(x) && x.toUpperCase == x.toLowerCase)) ++ (list diff\
    \ ans))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Reassignment to val ans\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp6khr_g1i.scala:26:0 -----------------\e\
    [0m\e[0m\n\e[33m24 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mfor\e\
    [0m (a <- l) \e[33mif\e[0m (a.toUpperCase == a.toLowerCase) \e[33myield\e[0m a\n\
    \e[33m25 |\e[0m            \e[33mvar\e[0m i = \e[3"
  stdout: ''
  timestamp: 1660010498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) List()\n      \
    \  val r = s.replaceAll(\"\\\\s\", \"\")\n        val m = r.length()\n       \
    \ val w = r.substring(0, m)\n        val c = r.substring(m, m+n).toList\n    \
    \    val vs = w.split(\" \").toList\n        val result = cs.map{c => if (vs.contains(c))\
    \ c else \"\"}.distinct\n        List(r.replaceAll(\"\\\\s\", \"\"), result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp991fjblt.scala:25:31\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mc\e\
    [0m = r.substring(m, m+n).toList\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^\e[0m\n\e[31m   |\e[0m                               Found:    Long\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp991fjblt.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = cs.map{\e\
    [36mc\e[0m => \e[33mif\e[0m (vs.contains(c)) c \e[33melse\e[0m \e[31m\"\"\e[0m}.distinct\n\
    \e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m           \
    \          Not found: cs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = scala.collection.mutable.ListBuffer[String]()\n\
    \        for (ch <- s) {\n            if (scala.util.Char.isSpace(ch)) {\n   \
    \             if (wordList.length > 0) wordList += \", \"\n            } else\
    \ {\n                var count = 0\n                for (i <- 0 to n) {\n    \
    \                if (scala.util.Char.isConsonant(ch)) count += 1\n           \
    \         if (count == n) break\n                }\n                if (wordList.length\
    \ > 0) wordList += \" \"\n                wordList += ch\n            }\n    \
    \    }\n        wordList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tffdp6t.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (scala.util.Char.isSpace(ch))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value Char is not a member of util\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8tffdp6t.scala:27:31 --------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                \e[33mfor\e[0m (i <- \e[31m0\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8tffdp6t.scala:28:35 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                    \e[33mif\e[0m (scala.util.Char.isConsonant(ch)) count +=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value Char is not a member of util\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8tffdp6t.scala:29:36 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m (count == n) break\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8tffdp6t.scala:32:28 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                wordList += ch\n\e[31m\e[31m   |\e[0m\
    \                            ^^\e[0m\n\e[31m   |\e[0m                        \
    \    Found:    (ch : Char)\n\e[31m   |\e[0m                            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Your code here\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphxg5sj_5.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// Your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.MutableList[String]()\n\
    \        val lengths = s.split(\"\").length\n        for (i <- 0 until lengths)\
    \ {\n            if ((s.charAt(i).isLetter) && (s.charAt(i).isUpper) && (lengths-i)\
    \ >= n)\n                result.add(s.substring(i,i+n))\n        }\n        if\
    \ (result.isEmpty) List()\n        else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffv8pham.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list : List[String] = List()\n\
    \        var c = 0\n        for(x <- s) {\n            c += 1\n            if(c\
    \ == n) {\n                list ::= x\n            }\n        }\n        if(s.length\
    \ == 0) {\n            List()\n        } else {\n            list\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidwau8dk.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                list ::= x\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Your implementation goes here\n\
    \        val result = s.foldRight(List[String]())((acc, word) => {\n         \
    \   if (acc.length < n) acc :+ word\n            else if (word contains \"a\"\
    \ && word contains \"u\" && word contains \"e\") acc :+ word\n            else\
    \ if (word contains \"e\") acc :+ word\n            else if (word contains \"\
    i\") acc :+ word\n            else if (word contains \"o\") acc :+ word\n    \
    \        else if (word contains \"u\") acc :+ word\n            else acc :+ word\n\
    \        })\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1e4sbnt.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (acc.length < n) acc :+ word\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value length is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpf1e4sbnt.scala:23:36 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mif\e[0m (acc.length < n) acc :+ word\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value :+ is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpf1e4sbnt.scala:24:39 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (word contains \e\
    [31m\"a\"\e[0m && word contains \e[31m\"u\"\e[0m && word contains \e[31m\"e\"\e\
    [0m) acc :+ word\n\e[31m\e[31m   |\e[0m                                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value && is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1e4sbnt.scala:24:60\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (word contains \e[31m\"a\"\e[0m && word contains \e[31m\"u\"\
    \e[0m && word contains \e[31m\"e\"\e[0m) acc :+ word\n\e[31m\e[31m   |\e[0m  \
    \                                                      ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value && is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1e4sbnt.scala:24:86 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (word contains\
    \ \e[31m\"a\"\e[0m && word contains \e[31m\"u\"\e[0m && word contains \e[31m\"\
    e\"\e[0m) acc :+ word\n\e[31m\e[31m   |\e[0m                                 \
    \                                                 ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        value :+ is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1e4sbnt.scala:25:44 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (word contains\
    \ \e[31m\"e\"\e[0m) acc :+ word\n\e[31m"
  stdout: ''
  timestamp: 1660010504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def select(str: List[Char], pos\
    \ : Int) : List[String] = {\n            if (pos == str.length-1) {\n        \
    \        if (str.length == n) List(\"\") else List()\n            } else list(str).map\
    \ (x => x +: (select(str, pos+1)))\n        }\n        list(s).map (x => x +:\
    \ select(x, 0))\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o4gfp72.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m list(str).map (x => x +:\
    \ (select(str, pos+\e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: list\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5o4gfp72.scala:26:8 -------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        list(s).map (\e[36mx\e[0m => x +: select(x, \e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: list\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def buildWords(s : String) : List[String]\
    \ = {\n            val vowels = \"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\"\
    ,\"O\",\"U\"\n            val consonants = \"b\",\"c\",\"d\",\"f\",\"g\",\"B\"\
    ,\"C\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\"\
    ,\"S\",\"T\",\"V\",\"W\",\"X\",\"Y\",\"Z\"\n            val allConsonants = consonants\
    \ ++ vowels\n            val chars = s.toCharArray\n            var result : List[String]\
    \ = Nil\n            \n            for(i <- 0 until chars.length) {\n        \
    \        var count : Long = Nil\n                \n                for(consonant\
    \ <- allConsonants) {\n                    val charArray = chars.slice(i+1).filter(x\
    \ => x == consonant).toArray\n                    val subString = charArray.mkString\n\
    \                    if(subString.length == n) count = count + 1\n           \
    \     }\n                if(count.nonEmpty && count.size == n) result ::= chars.slice(i+1).mkString\n\
    \            }\n            result\n        }\n        buildWords(s)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpumtr5lfh.scala:22:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"\
    a\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e[0m,\e\
    [31m\"A\"\e[0m,\e[31m\"E\"\e[0m,\e[31m\"I\"\e[0m,\e[31m\"O\"\e[0m,\e[31m\"U\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            end of statement expected but ',' found\n\e[31m\e\
    [31m-- Error: /tmp/tmpumtr5lfh.scala:23:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mconsonants\e[0m = \e\
    [31m\"b\"\e[0m,\e[31m\"c\"\e[0m,\e[31m\"d\"\e[0m,\e[31m\"f\"\e[0m,\e[31m\"g\"\e\
    [0m,\e[31m\"B\"\e[0m,\e[31m\"C\"\e[0m,\e[31m\"D\"\e[0m,\e[31m\"F\"\e[0m,\e[31m\"\
    G\"\e[0m,\e[31m\"H\"\e[0m,\e[31m\"J\"\e[0m,\e[31m\"K\"\e[0m,\e[31m\"L\"\e[0m,\e\
    [31m\"M\"\e[0m,\e[31m\"N\"\e[0m,\e[31m\"P\"\e[0m,\e[31m\"Q\"\e[0m,\e[31m\"R\"\e\
    [0m,\e[31m\"S\"\e[0m,\e[31m\"T\"\e[0m,\e[31m\"V\"\e[0m,\e[31m\"W\"\e[0m,\e[31m\"\
    X\"\e[0m,\e[31m\"Y\"\e[0m,\e[31m\"Z\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                end\
    \ of statement expected but ',' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpumtr5lfh.scala:29:35 --------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \                \e[33mvar\e[0m \e[36mcount\e[0m : \e[35mLong\e[0m = Nil\n\e[31m\e\
    [31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Found:    collection.immutable.Nil.type\n\e[31m\
    \   |\e[0m                                 Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpumtr5lfh.scala:32:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    \e[33mval\e[0m \e[36mcharArray\e\
    [0m = chars.slice(i+\e[31m1\e[0m).filter(\e[36mx\e[0m => x == consonant).toArray\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (from: Int, until: Int): Array[Char]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpumt"
  stdout: ''
  timestamp: 1660010506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) {\n           \
    \ return Nil\n        }\n        val consonants = consonants\n        val words\
    \ = mutable.HashSet[String]()\n        for (c <- consonants) {\n            val\
    \ regex = scala.util.matching.Regex(c+\"\")\n            val wordList = s.replaceAll(regex,\
    \ \"\")\n            words += wordList\n        }\n        val newWords = words.toSeq.takeWhile(n\
    \ <= words.length).take(n)\n        val newWordsSet = scala.collection.immutable.Set(newWords).toSeq\n\
    \        newWordsSet.filter(s => words.exists(w => w == s)).map(w => w + \"$\"\
    ).toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprswhv7gb.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = consonants\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mconsonants\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprswhv7gb.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m = mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprswhv7gb.scala:33:70\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        newWordsSet.filter(\e\
    [36ms\e[0m => words.exists(\e[36mw\e[0m => w == s)).map(\e[36mw\e[0m => w + \e\
    [31m\"$\"\e[0m).toList\n\e[31m\e[31m   |\e[0m                                \
    \                                    ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of Nothing, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.properties AsScalaMap\n\e[31m\
    \   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var consonants = Set[Char]()\n\
    \        var list : List[String] = List[String]()\n        var i = 0\n       \
    \ while (i < s.length){\n            var j = i + 1\n            while(j < s.length){\n\
    \                consonants += s.charAt(i)\n                consonants += s.charAt(j)\n\
    \                j++\n            }\n            consonants -= 'a' - 'A'\n   \
    \         if (consonants.size == n){\n                list :+= s.substring(i)\n\
    \            }\n            i += 1\n        }\n        if (list.isEmpty){\n  \
    \          list\n        }\n        else{\n            list\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0bdk55mm.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n      val r = scala.util.matching.Regex.unapplySeq(s.replaceAll(\"\
    \\\\W\", \"\")+\"$\")\n      val m = r._1\n      val l = r._2\n      if (l ==\
    \ 0) List(s)\n      else {\n        var list: List[String] = Nil\n        var\
    \ c = 0\n        while (c < m) {\n          val c = c + n\n          if (s.charAt(c)\
    \ == 'a') list ::= s.substring(0,c)\n          else list ::= list.map(_.toLowerCase).filter(_.contains(s.substring(0,c))).flatten\n\
    \        }\n        list\n      }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5tb4q1ze.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mr\e[0m = scala.util.matching.Regex.unapplySeq(s.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)+\e[31m\"$\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ unapplySeq is not a member of object scala.util.matching.Regex\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp5tb4q1ze.scala:29:18 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m          \e[33mval\e[0m \e[36mc\e[0m = c + n\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5tb4q1ze.scala:31:20 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m          \e[33melse\e[0m list ::= list.map(_.toLowerCase).filter(_.contains(s.substring(\e\
    [31m0\e[0m,c))).flatten\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val count = s.length\n       \
    \ if(count > n) {\n            return Nil\n        }\n        var result: List[String]\
    \ = Nil\n        var i = 0\n        while(i < count) {\n            val c = s.charAt(i)\n\
    \            if(c == ' ') {\n                i += 1\n                if(i < count)\
    \ {\n                    val c2 = s.charAt(i)\n                    if(c2 == '\
    \ ') {\n                        i += 1\n                        result += s.substring(i,\
    \ i + n).toList\n                        i = i + 1\n                    }\n  \
    \              }\n            } else {\n                if(n >= 1) {\n       \
    \             result += s.substring(i, i + n).toList\n                }\n    \
    \            i = i + 1\n            }\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnbns0sxc.scala:35:31 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        result += s.substring(i, i +\
    \ n).toList\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbns0sxc.scala:35:49 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        result += s.substring(i, i +\
    \ n).toList\n\e[31m\e[31m   |\e[0m                                           \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \      Found:    Long\n\e[31m   |\e[0m                                       \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnbns0sxc.scala:41:27 ------------------------\e[0m\e[0m\n\e[31m41 |\e\
    [0m                    result += s.substring(i, i + n).toList\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpnbns0sxc.scala:41:45 --------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m                    result += s.substring(i, i + n).toList\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                             Found:    Long\n\e[31m\
    \   |\e[0m                                             Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // write your code in Scala here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq39ji3m.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// write your code in Scala here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels = \"AEIOUYaeiouy\"\n\
    \        var words : List[String] = List()\n        if (s == \"\") {\n       \
    \     return words\n        }\n        var index = 0\n        while (n == 0) {\n\
    \            val start = s.indexOf(vowels(index), index)\n            val end\
    \ = s.indexOf(vowels(index+1), index+1)\n            val word = s.substring(start+1,\
    \ end)\n            if (words.contains(word)) {\n                words += 1\n\
    \            }\n            index += 2\n            n -= 1\n        }\n      \
    \  words\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugvalzss.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                words += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpugvalzss.scala:35:14 ------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val arr = s.split(' ')\n     \
    \   arr.filter(f => f.count(_ == 'a') > n || f.count(_ == 'e') > n || f.count(_\
    \ == 'i') > n || f.count(_ == 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n && f.count(_ == 'e') > n && f.count(_ == 'i') > n && f.count(_ ==\
    \ 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_\
    \ == 'e') > n || f.count(_ == 'i') > n || f.count(_ == 'o') > n || f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_ == 'e') > n && f.count(_\
    \ == 'i') > n && f.count(_ == 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n || f.count(_ == 'e') > n || f.count(_ == 'i') > n || f.count(_ ==\
    \ 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_\
    \ == 'e') > n && f.count(_ == 'i') > n && f.count(_ == 'o') > n && f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_ == 'e') > n || f.count(_\
    \ == 'i') > n || f.count(_ == 'o') > n || f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n && f.count(_ == 'e') > n && f.count(_ == 'i') > n && f.count(_ ==\
    \ 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_ == 'a') > n || f.count(_\
    \ == 'e') > n || f.count(_ == 'i') > n || f.count(_ == 'o') > n || f.count(_ ==\
    \ 'u') > n).filter(f => f.count(_ == 'a') > n && f.count(_ == 'e') > n && f.count(_\
    \ == 'i') > n && f.count(_ == 'o') > n && f.count(_ == 'u') > n).filter(f => f.count(_\
    \ == 'a') > n || f.count(_ == 'e') > n || f.count(_ == 'i') > n || f.count(_ ==\
    \ '\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi5zx_qob.scala:22:1462 ---------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        arr.filter(\e[36mf\e[0m => f.count(_ == \e[31m'a'\e\
    [0m) > n || f.count(_ == \e[31m'e'\e[0m) > n || f.count(_ == \e[31m'i'\e[0m) >\
    \ n || f.count(_ == \e[31m'o'\e[0m) > n || f.count(_ == \e[31m'u'\e[0m) > n).filter(\e\
    [36mf\e[0m => f.count(_ == \e[31m'a'\e[0m) > n && f.count(_ == \e[31m'e'\e[0m)\
    \ > n && f.count(_ == \e[31m'i'\e[0m) > n && f.count(_ == \e[31m'o'\e[0m) > n\
    \ && f.count(_ == \e[31m'u'\e[0m) > n).filter(\e[36mf\e[0m => f.count(_ == \e\
    [31m'a'\e[0m) > n || f.count(_ == \e[31m'e'\e[0m) > n || f.count(_ == \e[31m'i'\e\
    [0m) > n || f.count(_ == \e[31m'o'\e[0m) > n || f.count(_ == \e[31m'u'\e[0m) >\
    \ n).filter(\e[36mf\e[0m => f.count(_ == \e[31m'a'\e[0m) > n && f.count(_ == \e\
    [31m'e'\e[0m) > n && f.count(_ == \e[31m'i'\e[0m) > n && f.count(_ == \e[31m'o'\e\
    [0m) > n && f.count(_ == \e[31m'u'\e[0m) > n).filter(\e[36mf\e[0m => f.count(_\
    \ == \e[31m'a'\e[0m) > n || f.count(_ == \e[31m'e'\e[0m) > n || f.count(_ == \e\
    [31m'i'\e[0m) > n || f.count(_ == \e[31m'o'\e[0m) > n || f.count(_ == \e[31m'u'\e\
    [0m) > n).filter(\e[36mf\e[0m => f.count(_ == \e[31m'a'\e[0m) > n && f.count(_\
    \ == \e[31m'e'\e[0m) > n && f.count(_ == \e[31m'i'\e[0m) > n && f.count(_ == \e\
    [31m'o'\e[0m) > n && f.count(_ == \e[31m'u'\e[0m) > n).filter(\e[36mf\e[0m =>\
    \ f.count(_ == \e[31m'a'\e[0m) > n || f.count(_ == \e[31m'e'\e[0m) > n || f.count(_\
    \ == \e[31m'i'\e[0m) > n || f.count(_ == \e[31m'o'\e[0m) > n || f.count(_ == \e\
    [31m'u'\e[0m) > n).filter(\e[36mf\e[0m => f.count(_ == \e[31m'a'\e[0m) > n &&\
    \ f.count(_ == \e[31m'e'\e[0m) > n && f.count(_ == \e[31m'i'\e[0m) > n && f.count(_\
    \ == \e[31m'o'\e[0m) > n && f.count(_ == \e[31m'u'\e[0m) > n).filter(\e[36mf\e\
    [0m => f.count(_ == \e[31m'a'\e[0m) > n || f.count(_ == \e[31m'e'\e[0m) > n ||\
    \ f.count(_ == \e[31m'i'\e[0m) > n || f.count(_ == \e[31m'o'\e[0m) > n || f.count(_\
    \ == \e[31m'u'\e[0m) > n).filter(\e[36mf\e[0m => f.count(_ == \e[31m'a'\e[0m)\
    \ > n && f.count(_ == \e[31m'e'\e[0m) > n && f.count(_ == \e[31m'i'\e[0m) > n\
    \ && f.count(_ == \e[31m'o'\e[0m) > n && f.count(_ == \e[31m'u'\e[0m) > n).filter(\e\
    [36mf\e[0m => f.count(_ == "
  stdout: ''
  timestamp: 1660010506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        \n        // your code here\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecn1bl7_.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \n\e[31m22 |\e[0m        \e[34m// your code here\e[0m\n\e[31m23 |\e[0m  \
    \      \n\e[31m24 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val counts = new mutable.HashMap[Char,Int]()\n\
    \        for (c <- s) counts(c)+= 1\n        var nCount = 0\n        for (c <-\
    \ counts) nCount += (c-=1).toInt\n        if (nCount < n) List(\"\") else {\n\
    \            var ws = List[String]()\n            for (c <- counts) ws.cons(c\
    \ <= n ? s.substring(0,s.indexOf(c)).trim():\"\")\n            ws.toList\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvyqa1v2e.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) {\n           \
    \ return Nil\n        }\n        val arr = s.split(\" \")\n        val res = arr.filter(x\
    \ => x.matches(\"^[AEIOUaeiou]*$\"))\n        res.filter(x => x.matches(s\"($n)*$\"\
    )).map(x => x.replaceAll(x+\"[^AEIOUaeiou]*\", \"\")).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9xqejugw.scala:26:83 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        res.filter(\e[36mx\e[0m => x.matches(\e[31ms\"\
    (\e[0m$n\e[31m)*$\")).map(x => x.replaceAll(x+\"\e[0m[\e[35m^AEIOUaeiou\e[0m]*\e\
    [31m\", \"\e[0m\")).toList\n\e[31m\e[31m   |\e[0m                            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                   an identifier expected, but ']' found\n\e\
    [31m\e[31m-- Error: /tmp/tmp9xqejugw.scala:26:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        res.filter(\e[36mx\e[0m => x.matches(\e[31ms\"\
    (\e[0m$n\e[31m)*$\")).map(x => x.replaceAll(x+\"\e[0m[\e[35m^AEIOUaeiou\e[0m]*\e\
    [31m\", \"\e[0m\")).toList\n\e[31m\e[31m   |\e[0m                            \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp9xqejugw.scala:28:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9xqejugw.scala:28:4 -------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: )).toListdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) {\n           \
    \ return Nil\n        }\n        val words   = s.split(\" \")\n        val map\
    \     = mutable.HashMap[String, Int]()\n        words.foreach(w => { if (map.get(w.substring(0,\
    \ 1)) != null) {\n            map.put(w.substring(0, 1), map.get(w.substring(0,\
    \ 1)) + 1\n        }\n        else { map.put(w.substring(0, 1), 1) } }\n     \
    \   )\n        val answer = mutable.ListBuffer[String]()\n        for (w <- words)\
    \ {\n            if (map.get(w.substring(0, 1)) == n) { answer += w }\n      \
    \  }\n        return answer.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpety1xwfj.scala:28:8 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpety1xwfj.scala:25:22 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m     = mutable.HashMap[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpety1xwfj.scala:31:21 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36manswer\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) {\n           \
    \ List()\n        } else {\n            def consonants: List[String] = \n    \
    \                if (n == 3l) s.toList.filter { \n                        _ ==\
    \ ' ' || _ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' || \n                  \
    \          _ == 'u' || _ == 'y' || _ == 'o'\n                    } \n        \
    \            else s.toList.filter {\n                        _ == 'a' || _ ==\
    \ 'e' || _ == 'i' || _ == 'o' || \n                            _ == 'u' || _ ==\
    \ 'y' || _ == 'o' || \n                            _ == 'A' || _ == 'E' || _ ==\
    \ 'I' || _ == 'O' || \n                            _ == 'U' || _ == 'Y' || _ ==\
    \ 'O' || \n                            _ == 'a' || _ == 'e' || _ == 'i' || _ ==\
    \ 'o' || \n                            _ == 'u' || _ == 'y' || _ == 'o'\n    \
    \                }\n            consonants.map(s => s.substring(0, s.length -\
    \ n)).distinct\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdenq2obh.scala:26:24 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        _ == \e[31m' '\e[0m || _ == \e\
    [31m'a'\e[0m || _ == \e[31m'e'\e[0m || _ == \e[31m'i'\e[0m || _ == \e[31m'o'\e\
    [0m || \n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        Wrong number of parameters, expected: 1\n\e[31m27 |\e\
    [0m                            _ == \e[31m'u'\e[0m || _ == \e[31m'y'\e[0m || _\
    \ == \e[31m'o'\e[0m\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdenq2obh.scala:30:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                     \
    \   _ == \e[31m'a'\e[0m || _ == \e[31m'e'\e[0m || _ == \e[31m'i'\e[0m || _ ==\
    \ \e[31m'o'\e[0m || \n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Wrong number of parameters, expected: 1\n\
    \e[31m31 |\e[0m                            _ == \e[31m'u'\e[0m || _ == \e[31m'y'\e\
    [0m || _ == \e[31m'o'\e[0m || \n\e[31m32 |\e[0m                            _ ==\
    \ \e[31m'A'\e[0m || _ == \e[31m'E'\e[0m || _ == \e[31m'I'\e[0m || _ == \e[31m'O'\e\
    [0m || \n\e[31m33 |\e[0m                            _ == \e[31m'U'\e[0m || _ ==\
    \ \e[31m'Y'\e[0m || _ == \e[31m'O'\e[0m || \n\e[31m34 |\e[0m                 \
    \           _ == \e[31m'a'\e[0m || _ == \e[31m'e'\e[0m || _ == \e[31m'i'\e[0m\
    \ || _ == \e[31m'o'\e[0m || \n\e[31m35 |\e[0m                            _ ==\
    \ \e[31m'u'\e[0m || _ == \e[31m'y'\e[0m || _ == \e[31m'o'\e[0m\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdenq2obh.scala:37:47 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            consonants.map(\e[36ms\e[0m => s.substring(\e\
    [31m0\e[0m, s.length - n)).distinct\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                 Found:    Long\n\e[31m   |\e[0m            \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n       val words = s.split(\" \")\n  \
    \     val wordsLength = words.length\n       val nConsonants = n\n       val nConsonantsIter\
    \ = Iterator.range(0, nConsonants).iterator\n       val nConsonantsIterWithPrev\
    \ = nConsonantsIter.zipWithIndex.filter {\n          case(prev,idx) =>\n     \
    \        words.zipWithIndex.filter { case (word,idx2) => idx != idx2}.forall {\
    \ case (word,idx2) => word.contains(\"C\") || word.contains(\"k\") || word.contains(\"\
    K\") }\n      }.map {\n         case (word,idx2) => (word, idx2)\n      }.toList\n\
    \      val nConsonantsIterWithPrevWithPrev = nConsonantsIterWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrevWithPrevWithPrev = nConsonantsIterWithPrevWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrevWithPrevWithPrevWithPrev = nConsonantsIterWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { case (prev,idx) =>\n         prev._2 match {\n            case idx if idx\
    \ > 0 => prev.head\n            case _ => \"\"\n         }\n      }.toList\n \
    \     val nConsonantsIterWithPrev\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkpr7mcg.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpbkpr7mcg.scala:24:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \e\
    [33mval\e[0m \e[36mnConsonantsIter\e[0m = Iterator.range(\e[31m0\e[0m, nConsonants).iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                No implicit Ordering\
    \ defined for AnyVal.\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbkpr7mcg.scala:43:60\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m      \e[33mval\e[0m \e\
    [36mnConsonantsIterWithPrevWithPrevWithPrevWithPrev\e[0m = nConsonantsIterWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { \e[33mcase\e[0m (prev,idx) =>\n\e[31m\e[31m   |\e[0m                     \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnConsonantsIterWithPrevWithPrevWithPrevWithPrev\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbkpr7mcg.scala:49:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m      \e[33mval\e[0m \e\
    [36mnConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev\e[0m = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { \e[33mcase\e[0m (prev,idx) =>\n\e[31m\e[31m   |\e[0m                     \
    \                                               ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mnConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrev\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbkpr7mcg.scala:55:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m55 |\e[0m      \e[33mval\e[0m \e\
    [36mnConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev\e[0m = nConsonantsIterWithPrevWithPrevWithPrevWithPrevWithPrevWithPrev.zipWithIndex.map\
    \ { \e[33mcase\e[0m (prev,idx) =>\n\e[31m"
  stdout: ''
  timestamp: 1660010511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val a = scala.collection.mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length) {\n            if (Character.isLetter(s.charAt(i))\
    \ && !s.charAt(i) == ' ') {\n                val b = s.substring(i)\n        \
    \        val words = b.split(\"(?<=\\\\w)\")\n                words.foreach(word\
    \ => if (!word.equals(\"\")) a += word)\n            }\n        }\n        return\
    \ a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9fmn9wok.scala:23:51 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (Character.isLetter(s.charAt(i))\
    \ && !s.charAt(i) == \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \                                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ unary_! is not a member of Char - did you mean Char.unary_+?\n1 error found\n"
  stdout: ''
  timestamp: 1660010511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Complete the implementation\
    \ here.\n        val str = s.toUpperCase()\n        val array = str.split(\" \"\
    )\n        var index = 0\n        var words = new ArrayBuffer[String]()\n    \
    \    while (index < array.length) {\n            val string = array(index)\n \
    \           if (string.contains(\"C\") && string.contains(\"A\") && string.contains(\"\
    T\") && string.contains(\"G\") && string.contains(\"M\") && string.contains(\"\
    A\")) {\n                words.append(string)\n                index++\n     \
    \       }\n            index++\n        }\n        return words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7lu54p1d.scala:30:23 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp7lu54p1d.scala:32:19 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m            index++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) List()\n      \
    \  var count = (-1).toLong\n        s.split(\" \").toList.foreach(word => {\n\
    \            val count = word.count(c => c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'u')\n            if (count == n) List(word)\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4aci_u2.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        s.split(\e[31m\" \"\e\
    [0m).toList.foreach(\e[36mword\e[0m => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = word.count(\e[36mc\e\
    [0m => c == \e[31m'a'\e[0m || c == \e[31m'e'\e[0m || c == \e[31m'i'\e[0m || c\
    \ == \e[31m'o'\e[0m || c == \e[31m'u'\e[0m || c == \e[31m'u'\e[0m)\n\e[31m25 |\e\
    [0m            \e[33mif\e[0m (count == n) List(word)\n\e[31m26 |\e[0m        })\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Solution\n        var result\
    \ : List[String] = Nil\n        if (s.isEmpty) result\n        else {\n      \
    \      var letters = List.empty[String]\n            var consonants : List[String]\
    \ = List.empty[String]\n            var i : Long = 0\n            while (i < s.length)\
    \ letters = letters :+ s.charAt(i)\n            letters foreach {\n          \
    \      letter =>\n                if (n>0) consonants = consonants :+ letter\n\
    \                i +=1\n            }\n            result = consonants ++ letters\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwb9svq2f.scala:28:63\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mwhile\e[0m\
    \ (i < s.length) letters = letters :+ s.charAt(i)\n\e[31m\e[31m   |\e[0m     \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (i : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwb9svq2f.scala:34:19\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            result = consonants\
    \ ++ letters\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Write your code here\n    \
    \    val r = scala.collection.mutable.ListBuffer[String]()\n        for(i <- 0\
    \ until s.length - 1) if(s(i) isLetter) r += s.substring(i,i+1)\n        r.filter(_.length\
    \ == n).sortWith(_.compareTo(_) == -1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzfche0dn.scala:23:55 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.length\
    \ - \e[31m1\e[0m) \e[33mif\e[0m(s(i) isLetter) r += s.substring(i,i+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzfche0dn.scala:24:40 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        r.filter(_.length == n).sortWith(_.compareTo(_) == -\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // write your solution here\n\
    \        var s = \"\"\n        var n = 0l\n        var l = s.length\n        var\
    \ w = \"\"\n        var re = new scala.util.matching.Regex(\"\"\"[^a-z ]+\"\"\"\
    )\n        var list = List[String]()\n        var count = new scala.collection.mutable.HashMap[String,\
    \ Long]()\n        for (i <- 1 to l) {\n            w = re.replace(s).group(0).replaceAll(\"\
    \"\"[^a-z ]\"\"\")\n            if (count.contains(w)) {\n                count\
    \ += (w, n)\n            } else {\n                count += 1(w, n)\n        \
    \    }\n        }\n        for (x <- count.keys) {\n            list = (for (x\
    \ <- 1 to l) yield x + \"-\" + (count[x + x].toString + x)).toList\n        }\n\
    \        return list.filter(_ => n + 1l == 0l).map(_.replaceAll(\"\"\"[a-z ]\"\
    \"\", \"\")).filter(_ => !\"\".equals(_)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7v6rhex0.scala:30:19 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            w = re.replace(s).group(\e[31m0\e[0m).replaceAll(\e\
    [31m\"\"\"[^a-z ]\"\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value replace is not a member of scala.util.matching.Regex\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp7v6rhex0.scala:34:25 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                count += \e[31m1\e[0m(w, n)\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         expression does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7v6rhex0.scala:38:63 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            list = (\e[33mfor\e[0m (x <- \e[31m1\e[0m\
    \ to l) \e[33myield\e[0m x + \e[31m\"-\"\e[0m + (count[\e[35mx\e[0m \e[35m+\e\
    [0m \e[35mx\e[0m].toString + x)).toList\n\e[31m\e[31m   |\e[0m               \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                                  Not found: type +\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp7v6rhex0.scala:40:105 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mreturn\e[0m list.filter(_ => n + \e[31m1l\e\
    [0m == \e[31m0l\e[0m).map(_.replaceAll(\e[31m\"\"\"[a-z ]\"\"\"\e[0m, \e[31m\"\
    \"\e[0m)).filter(_ => !\e[31m\"\"\e[0m.equals(_)).toList\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => ! \e[32m\"\"\e[0m.equals(_$4).\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list: List[String] = s match\
    \ {\n            case \"\" => List()\n            case _ => {\n              \
    \  val counts = s.split(\"\\\\s\").map(_.length).sum\n                val letter\
    \ = s.filter(_.isLetter).size\n                val list = new collection.mutable.ListBuffer[String]()\n\
    \                if (letter == n) list += s\n                for (i <- 0 to (n\
    \ - 1))\n                    if (counts.toDouble / s.length <= i / letter) list\
    \ += s\n                list\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46p2p8rl.scala:28:32\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m to (n - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Found:    Long\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46p2p8rl.scala:30:16\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                list\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m          Found:    (list\
    \ : scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e[0m          Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46p2p8rl.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        //write your code here\n     \
    \   def getList(list: List[String], n : Long, acc : List[String]) : List[String]\
    \ = {\n            if( list.isEmpty ) acc\n            else if( n == 0 ) getList(list.tail,\
    \ n - 1, acc)\n            else getList(list.tail, n - 1, list ::: acc )\n   \
    \     }\n        getList(\"\", n, List(\"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcrawmod.scala:27:16\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        getList(\e[31m\"\"\e\
    [0m, n, List(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[32m\"\"\e[0m : String)\n\e[31m  \
    \ |\e[0m                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val vowels: List[String] = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ consonants: List[String] = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val wordsWithCount: List[(String, Int)] = s.toLowerCase.flatMap(_.toChar).filter(c\
    \ => vowels.contains(c)).map(c => (c, vowels.indexOf(c))).groupBy(_._1).mapValues(_.map(_._2).toList)\n\
    \        val candidates: List[(String, List[String])] = wordsWithCount.filter(_._2\
    \ >= n).flatMap(_._1).filter(_ != \" \").toList\n        val result: List[String]\
    \ = candidates.filter(_ != \"\").flatMap(_).filter(c => consonants.contains(c)).distinct.toList\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzzggq7tf.scala:23:64 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCount\e[0m: \e\
    [35mList\e[0m[(\e[35mString\e[0m, \e[35mInt\e[0m)] = s.toLowerCase.flatMap(_.toChar).filter(\e\
    [36mc\e[0m => vowels.contains(c)).map(\e[36mc\e[0m => (c, vowels.indexOf(c))).groupBy(_._1).mapValues(_.map(_._2).toList)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mflatMap\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m \
    \  |\e[0m (f: Char => String): String\n\e[31m   |\e[0m [B](f: Char => IterableOnce[B]):\
    \ IndexedSeq[B]\n\e[31m   |\e[0mmatch arguments (Char => Char)\n\e[31m\e[31m--\
    \ Error: /tmp/tmpzzggq7tf.scala:24:109 ----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcandidates\e[0m: \e[35mList\e\
    [0m[(\e[35mString\e[0m, \e[35mList\e[0m[\e[35mString\e[0m])] = wordsWithCount.filter(_._2\
    \ >= n).flatMap(_._1).filter(_ != \e[31m\" \"\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpzzggq7tf.scala:25:70 -----------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e[0m[\e\
    [35mString\e[0m] = candidates.filter(_ != \e[31m\"\"\e[0m).flatMap(_).filter(\e\
    [36mc\e[0m => consonants.contains(c)).distinct.toList\n\e[31m\e[31m   |\e[0m \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$9 of expanded function:\n\e[31m\
    \   |\e[0m   _$9 => \n\e[31m   |\e[0m     candidates.filter(_$8 => _$8 != \e[32m\"\
    \"\e[0m).flatMap(_$9).filter(\n\e[31m   |\e[0m       c => consonants.contains(c)\n\
    \e[31m   |\e[0m     ).distinct.toList.\n\e[31m\e[31m-- Error: /tmp/tmpzzggq7tf.scala:25:53\
    \ ---------------"
  stdout: ''
  timestamp: 1660010516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        s.split(\"\\\\s\").filter(x =>\
    \ x.toString.count(_ == 'a') <= n).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6c2gq7_.scala:24)\n\tat Problem.main(tmpp6c2gq7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) return List()\n\
    \        \n        // Use recursion to solve this\n        val list = (0 to s.length)\n\
    \            .filter(x => s contains x.toChar)\n            .filter(x => x ==\
    \ n) \n            .map(x => s.substring(0,x))\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(x.toChar).mkString(\"\
    \"))\n            .filter(x => x.isEmpty)\n            .map(x => s.substring(0,x))\n\
    \            .filter(x => x.isEmpty)\n            .map(x => List(\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw8qf_jxh.scala:76:27 ---------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m            .map(x => List(\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpw8qf_jxh.scala:28:29 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            .map(x => List(x.toChar).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                 value toChar is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw8qf_jxh.scala:30:36 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            .map(x => s.substring(\e[31m0\e[0m,x))\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    (x : String)\n\e[31m   |\e[0m      \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw8qf_jxh.scala:32:29 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            .map(x => List(x.toChar).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value toChar is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8qf_jxh.scala:34:36 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            .map(x => s.substring(\e[31m0\e[0m,x))\n\e\
    [31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    (x : String)\n\e[31m   |\e[0m \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw8qf_jxh.scala:36:29 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            .map(x => List(x.toChar).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660010520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        s.toLowerCase().trim().split(\"\
    \ \").filter(_.matches(\"[AEIOUYaeiouy]\")).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcla8wqd9.scala:21:78\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        s.toLowerCase().trim().split(\e\
    [31m\" \"\e[0m).filter(_.matches(\e[31m\"[AEIOUYaeiouy]\"\e[0m)).distinct\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \").toList\n\
    \        list.map(word => checkConsonants(word, n, list)).filter(_ => _).map(_._1).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2jxeef3.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        list.map(\e[36mword\e[0m => checkConsonants(word,\
    \ n, list)).filter(_ => _).map(_._1).distinct\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: checkConsonants\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpu2jxeef3.scala:22:64 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        list.map(\e[36mword\e[0m => checkConsonants(word, n, list)).filter(_\
    \ => _).map(_._1).distinct\n\e[31m\e[31m   |\e[0m                            \
    \                                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$2.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpu2jxeef3.scala:22:78 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        list.map(\e[36mword\e[0m => checkConsonants(word,\
    \ n, list)).filter(_ => _).map(_._1).distinct\n\e[31m\e[31m   |\e[0m         \
    \                                                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value _1 is not a member of\
    \ Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1660010517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val chars = s.toList\n       \
    \ val list = new mutable.ListBuffer[String]()\n        var current = 0l\n    \
    \    while(current < chars.size - 1) {\n            if(chars(current).toUpperCase\
    \ == chars(current + 1).toUpperCase && n > 0) {\n                val word = chars.substringBetween(current,\
    \ current + 1).trim\n                list.+=(\"(\"+word+\")\")\n             \
    \   current +=1\n                n -= 1\n            }\n            current +=\
    \ 1\n        }\n        list.+=(chars.substring(current).trim+\".\")\n       \
    \ list.toList.filter( s => s.endsWith(\".\") ).filter( s => s.startsWith(\"(\"\
    ) ).filter( s => s.endsWith(\")\") )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwh8xxoux.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwh8xxoux.scala:25:21\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(chars(current).toUpperCase\
    \ == chars(current + \e[31m1\e[0m).toUpperCase && n > \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Found:    (current : Long)\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwh8xxoux.scala:26:33\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mword\e[0m = chars.substringBetween(current, current + \e[31m1\e[0m).trim\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value substringBetween is not a member of List[Char]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwh8xxoux.scala:29:18 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean n.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def selectWordsHelper(s : String,\
    \ list : mutable.MutableList[String]) : List[String] = {\n            if (list.length\
    \ == n){\n                list.head :: list.tail\n            } else {\n     \
    \           if (s.length == 0) list\n                else selectWordsHelper(s.tail,\
    \ list + s.head)\n            }\n        }\n        selectWordsHelper(s, new mutable.MutableList[String]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxprxpd7.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mdef\e[0m \e[36mselectWordsHelper\e[0m(\e\
    [36ms\e[0m : \e[35mString\e[0m, \e[36mlist\e[0m : mutable.MutableList[\e[35mString\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptxprxpd7.scala:29:33 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        selectWordsHelper(s, \e[33mnew\e[0m mutable.MutableList[\e\
    [35mString\e[0m]())\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def getFirstLetters(words: List[String])\
    \ : List[String] = {\n            val wordsWithFirstLetters = for (word <- words\
    \ if word.size > 0) \n                                yield (word + 'a').substring(0,n);\n\
    \            return wordsWithFirstLetters.toList;\n        }\n        getFirstLetters(s.split).filterNot(word\
    \ => word.contains(\"a\")).toList;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0fbt9oq4.scala:23:63\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                            \
    \    \e[33myield\e[0m (word + \e[31m'a'\e[0m).substring(\e[31m0\e[0m,n);\n\e[31m\e\
    [31m   |\e[0m                                                               ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0fbt9oq4.scala:26:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        getFirstLetters(s.split).filterNot(\e\
    [36mword\e[0m => word.contains(\e[31m\"a\"\e[0m)).toList;\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e[0m \e[35mString\e\
    [0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\e[31m   |\e[0m\
    \ (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch expected type List[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val l = s.length\n        if (l\
    \ == 0) Nil\n        else (for (i <- 1 to l; \n                 word <- s.splitAt(i)\n\
    \                 if (word.length == n) yield word.headOption).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8q5dg27.scala:25:39 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                 \e[33mif\e[0m (word.length == n) \e\
    [33myield\e[0m word.headOption).toList\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \             ')' expected, but 'yield' found\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpu8q5dg27.scala:25:61 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                 \e[33mif\e[0m (word.length == n) \e[33myield\e[0m word.headOption).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu8q5dg27.scala:24:25 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                 word <- s.splitAt(i)\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value withFilter\
    \ is not a member of (String, String)\n3 errors found\n"
  stdout: ''
  timestamp: 1660010518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words: List[String] = \n \
    \           if (s.isEmpty) List() \n            else (for (i <- 0 to s.length\
    \ -1) yield {\n                if (s.charAt(i) == 'a') \"A\" \n              \
    \  else if (s.charAt(i) == 'e') \"E\" \n                else if (s.charAt(i) ==\
    \ 'i') \"I\" \n                else if (s.charAt(i) == 'o') \"O\" \n         \
    \       else if (s.charAt(i) == 'u') \"U\" \n                else if (s.charAt(i)\
    \ == 'l') \"L\" \n                else if (s.charAt(i) == 'h') \"H\" \n      \
    \          else if (s.charAt(i) == 'd') \"D\" \n                else if (s.charAt(i)\
    \ == 'e') \"E\" \n                else if (s.charAt(i) == 'l') \"L\" \n      \
    \          else if (s.charAt(i) == 's') \"S\" \n                else if (s.charAt(i)\
    \ == 'w') \"W\" \n                else if (s.charAt(i) == 'o') \"O\" \n      \
    \          else if (s.charAt(i) == 'u') \"U\" \n                else if (s.charAt(i)\
    \ == 'l') \"L\" \n                else if (s.charAt(i) == 'r') \"R\" \n      \
    \          else if (s.charAt(i) == 'l') \"L\" \n                else if (s.charAt(i)\
    \ == 'd') \"D\" \n                else if (s.charAt(i) == 'e') \"E\" \n      \
    \          else if (s.charAt(i) == 'c') \"C\" \n                else s.charAt(i)\n\
    \            }) \n            \n\n        // Now we need to remove those words\
    \ whose letters appear in \n        // their own group. \n        // We do this\
    \ by making a \"map\" that maps each word to\n        // the number of times it\
    \ appears in our list.\n        val map = words.foldLeft(Map.empty[String, Long]){\n\
    \            case (map, (word, count)) => map + (word -> (map.getOrElse(word,\
    \ 0) + count))\n        }\n\n        // Now we need to filter this map to only\
    \ those words that have\n        // the correct number of letters \n        val\
    \ result = map.filter(_._2 > n)\n\n        // Now we can just map the results\
    \ to the words from our list.\n        list.map(map(_._1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpin9174lu.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m (\e\
    [33mfor\e[0m (i <- \e[31m0\e[0m to s.length -\e[31m1\e[0m) \e[33myield\e[0m {\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Found:    IndexedSeq[Matchable]\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m24 |\e[0m                \e[33mif\e[0m (s.charAt(i) == \e\
    [31m'a'\e[0m) \e[31m\"A\"\e[0m \n\e[31m25 |\e[0m                \e[33melse\e[0m\
    \ \e[33mif\e[0m (s.charAt(i) == \e[31m'e'\e[0m) \e[31m\"E\"\e[0m \n\e[31m26 |\e\
    [0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'i'\e[0m)\
    \ \e[31m\"I\"\e[0m \n\e[31m27 |\e[0m                \e[33melse\e[0m \e[33mif\e\
    [0m (s.charAt(i) == \e[31m'o'\e[0m) \e[31m\"O\"\e[0m \n\e[31m28 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'u'\e[0m) \e[31m\"\
    U\"\e[0m \n\e[31m29 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i)\
    \ == \e[31m'l'\e[0m) \e[31m\"L\"\e[0m \n\e[31m30 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (s.charAt(i) == \e[31m'h'\e[0m) \e[31m\"H\"\e[0m \n\e[31m31\
    \ |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'd'\e\
    [0m) \e[31m\"D\"\e[0m \n\e[31m32 |\e[0m                \e[33melse\e[0m \e[33mif\e\
    [0m (s.charAt(i) == \e[31m'e'\e[0m) \e[31m\"E\"\e[0m \n\e[31m33 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'l'\e[0m) \e[31m\"\
    L\"\e[0m \n\e[31m34 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i)\
    \ == \e[31m's'\e[0m) \e[31m\"S\"\e[0m \n\e[31m35 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (s.charAt(i) == \e[31m'w'\e[0m) \e[31m\"W\"\e[0m \n\e[31m36\
    \ |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'o'\e\
    [0m) \e[31m\"O\"\e[0m \n\e[31m37 |\e[0m                \e[33melse\e[0m \e[33mif\e\
    [0m (s.charAt(i) == \e[31m'u'\e[0m) \e[31m\"U\"\e[0m \n\e[31m38 |\e[0m       \
    \         \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i) == \e[31m'l'\e[0m) \e[31m\"\
    L\"\e[0m \n\e[31m39 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.charAt(i)\
    \ == \e[31m'r'\e[0m) \e[31m\"R\"\e[0m \n\e[31m40 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (s.charAt(i) == \e[31m'l'\e[0m) \e[31m\"L\"\e[0m \n\e[31m41\
    \ |"
  stdout: ''
  timestamp: 1660010520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def dfs(s : String, i : Long,\
    \ acc : List[String] = Nil) :List[String] = {\n            if(i > s.length) acc\n\
    \            else dfs(s, i+1l, recur(s.slice(i+1l)) :: acc)\n        }\n     \
    \   def recur(s : String) : List[String] = if(s.length == n) List() else {\n \
    \           if(s.contains(\" \") || s.contains(\".\") || s.contains(\"!\")) Nil\n\
    \            else dfs(s, 1l, Nil)\n        }\n        dfs(s, 0l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcpyh7iy8.scala:23:44\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m dfs(s,\
    \ i+\e[31m1l\e[0m, recur(s.slice(i+\e[31m1l\e[0m)) :: acc)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                        Found:    Long\n\e[31m   |\e[0m     \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val lst : mutable.Set[String]\
    \ = new mutable.HashSet[String]\n        for(x <- s.toList){ \n            if(x.contains(\"\
    a\")) lst.add(x)\n            if(x.contains(\"e\")) lst.add(x)\n            if(x.contains(\"\
    i\")) lst.add(x)\n            if(x.contains(\"o\")) lst.add(x)\n            if(x.contains(\"\
    u\")) lst.add(x)\n            if(x.contains(\"y\")) lst.add(x)\n        }\n  \
    \      lst.filter(x => x.count(_ == 'a') == n).filter(x => x.count(_ == 'e') ==\
    \ n).filter(x => x.count(_ == 'i') == n).filter(x => x.count(_ == 'o') == n).filter(x\
    \ => x.count(_ == 'u') == n).filter(x => x.count(_ == 'y') == n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdz5ddfi.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst\e[0m : mutable.Set[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdz5ddfi.scala:21:44\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlst\e[0m : mutable.Set[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgdz5ddfi.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(x.contains(\e\
    [31m\"a\"\e[0m)) lst.add(x)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value contains is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgdz5ddfi.scala:24:17 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(x.contains(\e[31m\"e\"\e[0m))\
    \ lst.add(x)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgdz5ddfi.scala:25:17 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(x.contains(\e[31m\"i\"\e[0m)) lst.add(x)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgdz5ddfi.scala:26:17 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mif\e[0m(x.contains(\e[31m\"o\"\e[0m)) lst.add(x)\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value contains is not a member of Char\n\e[31m\e[31m-- [E008] No"
  stdout: ''
  timestamp: 1660010520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordList = mutable.ListBuffer.empty[String]\n\
    \        def dfs(s: String, i: Int, path: List[String] = wordList) : List[String]\
    \ = {\n            if (i == s.length && n <= 0) path\n            else {\n   \
    \             for (c <- s.toCharArray) {\n                    if (c == 'z' &&\
    \ n > 0) {\n                        dfs(s.substring(i+1, s.length), n - 1, path\
    \ :+ s.substring(i, i + 1))\n                    } else if (c == 'a' && n > 0)\
    \ {\n                        dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i,\
    \ i + 1))\n                    } else if (c == 'e' && n > 0) {\n             \
    \           dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i, i +\
    \ 1))\n                    } else if (c == 'i' && n > 0) {\n                 \
    \       dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i, i + 1))\n\
    \                    } else if (c == 'o' && n > 0) {\n                       \
    \ dfs(s.substring(i+1, s.length), n - 1, path :+ s.substring(i, i + 1))\n    \
    \                } else if (c == 'u' && n > 0) {\n                        dfs(s.substring(i+1,\
    \ s.length), n - 1, path :+ s.substring(i, i + 1))\n                    } else\
    \ if (c == 'l' && n > 0) {\n                        dfs(s.substring(i+1, s.length),\
    \ n - 1, path :+ s.substring(i, i + 1))\n                    }\n             \
    \   }\n            }\n        }\n        dfs(s, s.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoqf9otkl.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoqf9otkl.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        dfs(s.substring(i+\e[31m1\e[0m,\
    \ s.length), n - \e[31m1\e[0m, path :+ s.substring(i, i + \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqf9otkl.scala:29:56\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        dfs(s.substring(i+\e\
    [31m1\e[0m, s.length), n - \e[31m1\e[0m, path :+ s.substring(i, i + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \              Found:    Long\n\e[31m   |\e[0m                               \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpoqf9otkl.scala:31:56 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                        dfs(s.substring(i+\e[31m1\e[0m, s.length),\
    \ n - \e[31m1\e[0m, path :+ s.substring(i, i + \e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                        ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Found:  \
    \  Long\n\e[31m   |\e[0m                                                     \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m l"
  stdout: ''
  timestamp: 1660010522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Only proceed if n is larger\
    \ than or equal to the size of the string s\n        if (n <= s.length)\n    \
    \        s.split(\"\\\\s+\").filter {\n                // Only return words that\
    \ contain exactly n consonants\n                _.length == n && _.forall(c =>\
    \ ('A' <= c && c <= 'Z') || ('0' <= c && c <= '9'))\n            }.toList\n  \
    \      else\n            List.empty[String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4zofkwy7.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                _.length == n && _.forall(\e[36mc\e[0m\
    \ => (\e[31m'A'\e[0m <= c && c <= \e[31m'Z'\e[0m) || (\e[31m'0'\e[0m <= c && c\
    \ <= \e[31m'9'\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if(s.isEmpty) {\n            List.empty\n\
    \        } else {\n            val wordsArray = s.toCharArray\n            val\
    \ charSet = chars.toSet\n            val words = wordsArray.zip(wordsArray).map(a\
    \ => a._1 -> a._2).filter(a => a.size <= n).filter(a => charSet.contains(a._1)).toSeq\n\
    \            words.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynlfd60e.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcharSet\e[0m = chars.toSet\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: chars\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpynlfd60e.scala:27:18 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            words.toList\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    List[(Char, Char)]\n\
    \e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list = List[String]()\n  \
    \      var index = 0\n        while (index != s.length()) {\n            val c\
    \ = s.charAt(index)\n            if (c.isLetter()) {\n                if (index+1\
    \ == s.length())\n                    list ::= c\n                else {\n   \
    \                 val n1 = s.charAt(index+1)\n                    val n2 = s.charAt(index+2)\n\
    \                    if (n1.isLetter() && n2.isLetter() && n1 != n2)\n       \
    \                 list ::= c\n                    index += 3\n               \
    \ }\n            }\n            index++\n        }\n        if (list.isEmpty)\n\
    \            list\n        else\n            list.tail.foldLeft(list)(_+_)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_wokcuta.scala:36:19 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            index++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp_wokcuta.scala:25:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e\
    [0m (c.isLetter()) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_wokcuta.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    list ::= c\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of\
    \ List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp_wokcuta.scala:31:27 -----------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                    \e[33mif\e[0m (n1.isLetter() && n2.isLetter() && n1\
    \ != n2)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              \e[33mmethod\e[0m \e[35misLetter\e[0m in \e[33mclass\e\
    [0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_wokcuta.scala:32:29 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        list ::= c\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_wokcuta.scala:41:38 ------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m            list.tail.foldLeft(list)(_+_)\n\e[31m\e[31m   |\e[0m     \
    \                                ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[String], b"
  stdout: ''
  timestamp: 1660010525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        def buildWords(w: List[String],\
    \ s: String) : List[String] = {\n            if (s.isEmpty) {\n              \
    \  return w \n            }\n            w :+ s.head\n            buildWords(w\
    \ :+ s.tail, s.tail)\n        }\n        if (n.toLong >= s.length.toLong) {\n\
    \            List() \n        }\n        else {\n            buildWords(List(),\
    \ s) \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoiovimjp.scala:36)\n\tat Problem.main(tmpoiovimjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val strArray = s.toCharArray\n\
    \        val wordsArray = for (i <- 0 until strArray.length) yield {\n       \
    \     val word = \"\"\n            val currentChar = strArray(i)\n           \
    \ val prevChar = strArray(i-1)\n            if (currentChar == prevChar && currentChar\
    \ in \"aeiou\") word += currentChar\n            else word\n        }\n      \
    \  val wordsCount = wordsArray.length\n        val wordsArrayToReturn = mutable.ArrayBuffer.empty[String]\n\
    \        for (i<- 0 until wordsCount - 1) if (wordsArray(i).length == n) wordsArrayToReturn\
    \ += wordsArray(i)\n        wordsArrayToReturn.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_kdhxpi5.scala:26:43\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (currentChar\
    \ == prevChar && currentChar in \e[31m\"aeiou\"\e[0m) word += currentChar\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Found:    (currentChar\
    \ : Char)\n\e[31m   |\e[0m                                          Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_kdhxpi5.scala:26:72\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m\
    \ (currentChar == prevChar && currentChar in \e[31m\"aeiou\"\e[0m) word += currentChar\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not a member\
    \ of String - did you mean word.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kdhxpi5.scala:30:33\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayToReturn\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val l = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until s.length)\n            l += if (s.charAt(i) == ' ')\n\
    \                    \"\"\n                else\n                    s.substring(0,\
    \ i) + s.substring(i + 1, s.length)\n        l.filter(_.length == n).filter(_.forall(_.forall(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzfy0x1j7.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            l += \e[33mif\e[0m (s.charAt(i) == \e[31m'\
    \ '\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m    \
    \             expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpzfy0x1j7.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfy0x1j7.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36ml\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val r = new scala.collection.mutable.ListBuffer[String]()\n\
    \        val w = s.split(\"\")\n        var k = 0\n        var l = 0\n       \
    \ var count = 0\n        for (i <- 0 until w.length) {\n            if (w(i).isUpperCase\
    \ && w(i) != ' ') {\n                k = i\n                count = 0\n      \
    \      }\n            if (w(i).isLowerCase && w(i) != ' ') {\n               \
    \ l = i\n                count = 0\n            }\n            if (count == n)\
    \ {\n                r.append((s.substring(k, l)))\n            }\n          \
    \  if (count >= n) {\n                count = 0\n            }\n            count\
    \ += 1\n        }\n        r.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_jusag6.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (w(i).isUpperCase && w(i) !=\
    \ \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isUpperCase is not a member of String - did you mean String.toUpperCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_jusag6.scala:31:21 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (w(i).isLowerCase && w(i) !=\
    \ \e[31m' '\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isLowerCase is not a member of String - did you mean String.toLowerCase?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s == \"\") List()\n      \
    \  else {\n            val l = s.split(\"\")\n            val m = l.length\n \
    \           val c = new collection.mutable.ListBuffer[String]()\n            val\
    \ ls = l.filter(x=> x.matches(s\"^[B-Z][C-Z][D-Z][E-Z]$\"))\n            var i\
    \ = 0\n            while (i < ls.length) {\n                var flag = false\n\
    \                var j = 0\n                while (j < n) { \n               \
    \     if (ls(i).matches(s\"^[B-Z][C-Z][D-Z][E-Z]$\")) {\n                    \
    \    flag = true\n                        c = c :+ ls(i)\n                   \
    \     break\n                    }\n                    j += 1\n             \
    \   }\n                if (!flag) i += 1\n            }\n            c.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeyjlz9ye.scala:26:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mls\e[0m = l.filter(\e\
    [36mx\e[0m=> x.matches(\e[31ms\e[0m\"^[B-Z][C-Z][D-Z][E-Z]$\"))\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                                             unclosed string literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpeyjlz9ye.scala:32:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    \e[33mif\e[0m (ls(i).matches(\e[31ms\e\
    [0m\"^[B-Z][C-Z][D-Z][E-Z]$\")) {\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyjlz9ye.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpeyjlz9ye.scala:41:12 ------------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m            c.toList\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpeyjlz9ye.scala:45:11 ------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    assert(selectWords((\e[31m\"Mary had a little lamb\"\e\
    [0m), (\e[31m4l\e[0m)).equals((List[\e[35mString\e[0m](\e[31m\"little\"\e[0m))));\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not\
    \ found: selectWords\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyjlz9ye.scala:46:11\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m    assert(selectWords((\e\
    [31m\"Mary had a little lamb\"\e[0m), (\e[31m3l\e[0m)).equals((List[\e[35mString\e\
    [0m](\e[31m\"Mary\"\e[0m, \e[31m\"lamb\"\e[0m))));\n\e[31m\e[31m   |\e[0m    \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: selectWords\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1660010522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val s = scala.util.parsing.input.LineIterator.iterate(s).drop(1).mkString\n\
    \        if (s.isEmpty) {\n            List()\n        }\n\n        var count\
    \ = 0\n        val counts = mutable.ArrayBuffer.empty[Long]\n        var temp\
    \ = \"\"\n        var i = 0\n        while (i < s.length) {\n            temp\
    \ = s.substring(i)\n            i += 1\n            val c = temp.count(c => c.toInt\
    \ == n)\n            counts += c\n            if (c == n) {\n                count\
    \ += 1\n            }\n        }\n        val arr = counts.toArray\n        val\
    \ res = (arr(0) until arr(arr.length - 1)).filter(_ > 0).map(i => s.substring(i,\
    \ i + 1))\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpninjnij8.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = scala.util.parsing.input.LineIterator.iterate(s).drop(\e\
    [31m1\e[0m).mkString\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value parsing is not a member of util - did you mean\
    \ util.Sorting?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpninjnij8.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val counts = mutable.HashMap[(Char,Int),Int]()\n\
    \        for (c <- s.toCharArray) counts(c) += 1\n        val result = mutable.ArrayBuffer.empty[String]\n\
    \        for(x <- 0 to s.toCharArray.length - 1) \n        { \n            if(counts(s.charAt(x))\
    \ != n) \n            { \n                result += (s.charAt(x))\n          \
    \      break\n            }\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hk599yw.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[(\e\
    [35mChar\e[0m,\e[35mInt\e[0m),\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hk599yw.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hk599yw.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsInS = s.split(\" \").filter(_\
    \ != \" \")\n        val wordsInN = wordsInS.filter(_ == \"\").flatMap(_.split(\"\
    \")).distinct\n        val wordsInNSize = wordsInN.size\n        if (wordsInN.size\
    \ < n) Nil\n        else wordsInN.toList.sortBy(_.toLowerCase).take(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsqkp767q.scala:25:56\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m wordsInN.toList.sortBy(_.toLowerCase).take(n)\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val str : String = s.replaceAll(\"\
    \"\"[^a-zA-Z ]\"\"\", \"\")\n        val numOfConsonants : Int = s.length\n  \
    \      val numOfLetters : Int = str.length\n        val consonants : List[Char]\
    \ = str.toCharList\n        val letters : List[Char] = str.toList\n        val\
    \ words : List[String] = new ListBuffer[String]()\n        var i : Int = 0\n \
    \       while (i < str.length) {\n            if (consonants(i) == n) {\n    \
    \            words.append(letters(i))\n            }\n            i += 1\n   \
    \     }\n        words.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpipe2jsdv.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m : \e[35mList\e\
    [0m[\e[35mChar\e[0m] = str.toCharList\n\e[31m\e[31m   |\e[0m                 \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           value toCharList is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpipe2jsdv.scala:26:35 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m : \e[35mList\e[0m[\e\
    [35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpipe2jsdv.scala:30:22 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                words.append(letters(i))\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue append is not\
    \ a member of List[String] - did you mean words.appended?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsCount = countWords(s)\n\
    \        val consonantsCount = countConsonants(s)\n        val result = if (wordsCount\
    \ == 0 || consonantsCount != n)\n            List.empty\n        else\n      \
    \      countConsonantsInWords(s) * countWordsInWords(s)\n            / countConsonantsInWords(s)\n\
    \            / countWordsInWords(s)\n            .toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkzc4qsh.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordsCount\e[0m = countWords(s)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: countWords\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmkzc4qsh.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = countConsonants(s)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: countConsonants\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkzc4qsh.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            countConsonantsInWords(s) * countWordsInWords(s)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: countConsonantsInWords\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmkzc4qsh.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Write your code here\n    \
    \    val result: List[String] = new mutable.ListBuffer[String]()\n        for\
    \ (word <- s) {\n            for (c <- word.charAt(0)) {\n                if (n\
    \ == 1l) {\n                    result ::= word\n                }\n         \
    \       if (c == 'k' || c == 'Q' || c == 'j') {\n                    result ::=\
    \ word\n                    break\n                }\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr8qvsc83.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8qvsc83.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (c <- word.charAt(\e[31m0\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      value charAt is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordsList : mutable.MutableList[String]\
    \ = mutable.MutableList[String]()\n        val vowels : mutable.Set[String] =\
    \ mutable.Set[String]()\n        val consonants : mutable.Set[String] = mutable.Set[String]()\n\
    \        val counts : mutable.Map[String, Long] = mutable.Map[String, Long]()\n\
    \        \n        s match {\n            case Nil => wordsList // return an empty\
    \ list\n            case x => \n                val len = x.length\n         \
    \       val lastIndex = len - n\n                \n                val consonantsCount\
    \ = for(i <- 1 to lastIndex)\n                    consonants \n              \
    \  \n                for(i <- 1 to lastIndex + 1) {\n                    val word\
    \ = x.substring(i, i + n)\n                    if(vowels.contains(word)) counts(word)\
    \ -= 1\n                    else consonants.add(word)\n                }\n   \
    \             \n                for(word <- consonants.toList) {\n           \
    \         if(counts(word) != 0) wordsList += word\n                }\n       \
    \ }\n        wordsList.asInstanceOf[List[String]]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y27w9d2.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwordsList\e[0m : mutable.MutableList[\e\
    [35mString\e[0m] = mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y27w9d2.scala:21:54\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsList\e[0m : mutable.MutableList[\e[35mString\e[0m] = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7y27w9d2.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mString\e[0m] = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y27w9d2.scala:22:43\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mString\e[0m] = mutable.Set[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y27w9d2.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonants\e[0m : mutable.Set[\e[35mString\e[0m] = mutable.Set[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var list = new collection.mutable.LinkedList[String]()\n\
    \        var consonants = 2l\n        for(i <- 0 until s.length){\n          \
    \  if(i == s.length-1){\n                if(s.charAt(i) == ' ') list.add(i)\n\
    \                else {\n                    if(consonants.isLessThanOrEqualTo(n)){\n\
    \                        list.add(i)\n                        consonants -= 1\n\
    \                    }\n                }\n            }\n            else if(i\
    \ == 0){\n                if(s.charAt(i) == ' ') list.add(i)\n               \
    \ else {\n                    if(consonants.isLessThanOrEqualTo(n)){\n       \
    \                 list.add(i)\n                        consonants -= 1\n     \
    \               }\n                }\n            }\n            else{\n     \
    \           if(s.charAt(i) != s.charAt(i-1)){\n                    if(consonants.isLessThanOrEqualTo(n)){\n\
    \                        list.add(i)\n                        consonants -= 1\n\
    \                    }\n                }\n                else{\n           \
    \         if(consonants.isLessThanOrEqualTo(n)){\n                        list.add(i)\n\
    \                        consonants -= 1\n                    }\n            \
    \    }\n            }\n        }\n        return list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfcp7nz54.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m collection.mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \           type LinkedList is not a member of scala.collection.mutable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfcp7nz54.scala:27:34 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e[0m(consonants.isLessThanOrEqualTo(n)){\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       value isLessThanOrEqualTo is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfcp7nz54.scala:36:34\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                    \e[33mif\e\
    [0m(consonants.isLessThanOrEqualTo(n)){\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \       value isLessThanOrEqualTo is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfcp7nz54.scala:44:34 ------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                    \e[33mif\e[0m(consonants.isLessThanOrEqualTo(n)){\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       value isLessThanOrEqualTo is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfcp7nz54.scala:50:34\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m                    \e[33mif\e\
    [0m(consonants.isLessThanOrEqualTo(n)){\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \       value isLessThanOrEqualTo is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660010531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val lst = s.split(\" \").toList\n\
    \        if (lst.size == 0)\n            Nil\n        else {\n            val\
    \ (r1, r2) = lst.span(_ == \" \")\n            val (r3, r4) = lst.span(_ == \"\
    \ \")\n            var a = r1.indices\n            var b = r2.indices\n      \
    \      var c = r3.indices\n            var d = r4.indices\n            var i =\
    \ a.size\n            var j = b.size\n            var k = c.size\n           \
    \ var m = d.size\n            var res = new scala.collection.mutable.ArrayList[String]()\n\
    \            while (i <- (a ++ b ++ c ++ d ++ List((i + j + k + m)/4))) {\n  \
    \              if (a.toList.filter(_.isLetter).toSet == n && a.toList.filter(_.isLetter).toSet.size\
    \ <= n) res ::= lst.apply(i)\n                else if (b.toList.filter(_.isLetter).toSet\
    \ == n && b.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\
    \                else if (c.toList.filter(_.isLetter).toSet == n && c.toList.filter(_.isLetter).toSet.size\
    \ <= n) res ::= lst.apply(i)\n                else if (d.toList.filter(_.isLetter).toSet\
    \ == n && d.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\
    \                i = a.toList.filter(_.isLetter).size + 1\n                i =\
    \ b.toList.filter(_.isLetter).size + 1\n                i = c.toList.filter(_.isLetter).size\
    \ + 1\n                i = d.toList.filter(_.isLetter).size + 1\n            }\n\
    \            res\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppo66t37t.scala:36:21 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mwhile\e[0m (i <- (a ++ b ++ c ++ d\
    \ ++ List((i + j + k + m)/\e[31m4\e[0m))) {\n\e[31m\e[31m   |\e[0m           \
    \          ^^\e[0m\n\e[31m   |\e[0m                     ')' expected, but '<-'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppo66t37t.scala:35:51 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mvar\e[0m \e[36mres\e[0m = \e[33mnew\e\
    [0m scala.collection.mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m              type ArrayList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo66t37t.scala:36:19 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mwhile\e[0m (i <- (a ++ b ++ c ++ d\
    \ ++ List((i + j + k + m)/\e[31m4\e[0m))) {\n\e[31m\e[31m   |\e[0m           \
    \        ^\e[0m\n\e[31m   |\e[0m                   Found:    (i : Int)\n\e[31m\
    \   |\e[0m                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppo66t37t.scala:37:38 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (a.toList.filter(_.isLetter).toSet\
    \ == n && a.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value isLetter is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppo66t37t.scala:37:80 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (a.toList.filter(_.isLetter).toSet\
    \ == n && a.toList.filter(_.isLetter).toSet.size <= n) res ::= lst.apply(i)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \           value isLetter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmppo66t37t.scala:38"
  stdout: ''
  timestamp: 1660010534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = s.split(' ').filter(!_.isEmpty)\n\
    \        val list = words.map(x=>x.toLowerCase + x.substring(0,n).toLowerCase).toList.sort\n\
    \        val answer = list.takeWhile(word=>word == list.last).reverse\n      \
    \  answer.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsoq6oyb.scala:22:62\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m = words.map(\e[36mx\e[0m=>x.toLowerCase + x.substring(\e[31m0\e[0m,n).toLowerCase).toList.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                                  \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        val s = mutable.ListBuffer(s)\n        val n = mutable.ListBuffer(n)\n\
    \        val n = n.get\n        val result = result.get\n        var i = 0\n \
    \       while(i <= s.size) {\n            val s = i\n            val n = n - 1\n\
    \            while(i <= s.size) {\n                val n = n - 1\n           \
    \     if (s(i) =! s(i)) {\n                    result.add(s(i))\n            \
    \        break\n                }\n            }\n            i += 1\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1h3gpsf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.get\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv1h3gpsf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.get\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1h3gpsf.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv1h3gpsf.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.ListBuffer(s)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1h3gpsf.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mn\e[0m = mutable.ListBuffer(n)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpv1h3gpsf.scala:29:20 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = n - \e[31m1\e\
    ["
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Write your code here\n    \
    \    var list : List[String] = List()\n        var i : Int = 1\n        var numConsonant\
    \ : Int = s.length\n        while (i <= numConsonant) {\n            if (s.contains(((s.charAt(i)\
    \ - 65).asInstanceOf[Int]).toString)) {\n                var newList : List[String]\
    \ = List()\n                while (i <= numConsonant) {\n                    if\
    \ (s.contains(((s.charAt(i) - 65).asInstanceOf[Int]).toString)) {\n          \
    \              newList :+= s.substring(i, i + n)\n                        i +=\
    \ n\n                        numConsonant -= 1\n                    } else {\n\
    \                        i += 1\n                    }\n                }\n  \
    \              list :+= newList\n            }\n            i += 1\n        }\n\
    \        list\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfeg53myj.scala:30:32 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        newList :+= s.substring(i, i\
    \ + n)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue :+= is not a member of List[String] - did you mean List[String].:+?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfeg53myj.scala:30:51 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        newList :+= s.substring(i, i\
    \ + n)\n\e[31m\e[31m   |\e[0m                                                \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                                              \
    \     Found:    Long\n\e[31m   |\e[0m                                        \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfeg53myj.scala:31:26 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                        i += n\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfeg53myj.scala:37:21\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                list :+=\
    \ newList\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ :+= is not a member of List[String] - did you mean List[String].:+?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // your code here\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9m828og2.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val wordCount = s.split(' ').map(_.length).sum\n\
    \        if(wordCount < n) return List()\n        val consonantSet = Set(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowelSet = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val startIndex =\
    \ s.toCharArray.zipWithIndex.filter(_._2 <= wordCount).map(_._1).max\n       \
    \ val wordsLeft = s.substring(startIndex).split(' ')\n        val words = wordsLeft.tail.zipWithIndex.filter(_._2\
    \ > startIndex).map(_._1).distinct\n        words.toList.flatMap(w => {\n    \
    \      if(consonantSet.contains(w.head)) return List()\n          if(vowelSet.contains(w.head))\
    \ return List()\n          if(w.length == n) List(w)\n          if(w.length <\
    \ n) return List()\n          words.tail.flatMap(w => w.toList)\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2rbeyjk2.scala:29:37\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m          \e[33mif\e[0m(consonantSet.contains(w.head))\
    \ \e[33mreturn\e[0m List()\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    Char\n\e[31m   |\e[0m                                   Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2rbeyjk2.scala:30:33\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m          \e[33mif\e[0m(vowelSet.contains(w.head))\
    \ \e[33mreturn\e[0m List()\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    Char\n\
    \e[31m   |\e[0m                               Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // code goes here\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja1viq3w.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// code goes here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result = new ListBuffer[String]()\n\
    \        for (cn <- s.toCharArray) {\n            if (cn == 'a')\n           \
    \ result.add(\"apple\")\n            if (cn == 'e')\n            result.add(\"\
    ear\")\n            if (cn == 'i')\n            result.add(\"eye\")\n        \
    \    if (cn == 'o')\n            result.add(\"oof\")\n            if (cn == 'u')\n\
    \            result.add(\"uur\")\n        }\n        var cnt = 0\n        var\
    \ cnt = 1\n        var newResult = new ListBuffer[String]()\n        for (cn <-\
    \ s.toCharArray) {\n            if (cn == 'a') {\n                newResult.add(\"\
    apple\")\n                cnt++\n            }\n            if (cn == 'e') {\n\
    \                newResult.add(\"ear\")\n                cnt++\n            }\n\
    \            if (cn == 'i') {\n                newResult.add(\"eye\")\n      \
    \          cnt++\n            }\n            if (cn == 'o') {\n              \
    \  newResult.add(\"oof\")\n                cnt++\n            }\n            if\
    \ (cn == 'u') {\n                newResult.add(\"uur\")\n                cnt++\n\
    \            }\n        }\n        return newResult.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplwwj7jrn.scala:40:21 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                cnt++\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplwwj7jrn.scala:44:21 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m                cnt++\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplwwj7jrn.scala:48:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m                cnt++\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmplwwj7jrn.scala:52:21 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                cnt++\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplwwj7jrn.scala:56:21 ---------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m                cnt++\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwwj7jrn.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcnt\e[0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcnt is already defined as \e[33mvariable\e[0m \e[35mcnt\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods m"
  stdout: ''
  timestamp: 1660010537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = mutable.MutableList[String]()\n\
    \        val a = s.split(\" \")\n        for (i <- 0 until a.length) {\n     \
    \       val b = a(i).split(\" \")\n            val d = b.length - 1\n        \
    \    for (j <- 0 until d) {\n                if (b(j).charAt(0) == a(j).charAt(n))\
    \ {\n                    list.add(b(j))\n                }\n            }\n  \
    \      }\n        list.sortWith(_ > _)\n        list.filter(_ > \"_\").filter(_\
    \ > \" \")\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe73jil7g.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpe73jil7g.scala:27:50 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (b(j).charAt(\e[31m0\e\
    [0m) == a(j).charAt(n)) {\n\e[31m\e[31m   |\e[0m                             \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                  Found:    (n : Long)\n\e[31m   |\e[0m                     \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.LinkedList[String]()\n\
    \        val ns = n.toString.toInt\n        if(s == \"\") result\n        else\
    \ s.split(\" \")\n            .foreach(w => if(w.toString.toInt == ns) result\
    \ += w)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk8nz22pn.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) return Nil\n  \
    \      val n = math.max(math.min(s, n), 1l)\n        val counts = countConsonants(s)\n\
    \        val wordList: mutable.ArrayBuffer[String] = new mutable.ArrayBuffer[String]\n\
    \        val numWords = (0 to counts.length-1).foldLeft(1l) { (i,c) => i + counts(c)\
    \ }\n        val numWordsInSection = math.ceil(n/numWords)\n        for (i <-\
    \ 0 until numWordsInSection) {\n            val start = i *numWords\n        \
    \    if (i == (numWordsInSection - 1)) {\n                val end = counts.length\n\
    \            } else {\n                val end = (i+1) *numWords\n           \
    \ }\n            val wordIndexes = slice(start, end).indices\n            val\
    \ wordCounts = countConsonants(slice(start, end))\n            val wordList =\
    \ wordList.updated(wordIndexes(0), wordCounts(0))\n        }\n        wordList.filter(_\
    \ > n)\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxky3g1du.scala:22:37 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(s,\
    \ n), \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \   ^\e[0m\n\e[31m   |\e[0m                                     Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxky3g1du.scala:23:21 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcounts\e[0m = countConsonants(s)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \            Not found: countConsonants\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxky3g1du.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m: mutable.ArrayBuffer[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxky3g1du.scala:24:56 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mwordList\e[0m: mutable.ArrayBuffer[\e[35mString\e\
    [0m] = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxky3g1du.scala:27:26\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until numWordsInSection) {\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    (numWordsInS"
  stdout: ''
  timestamp: 1660010534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.length == 0) Nil\n     \
    \   else {\n            val a = s.split(\" \")\n            val ws = Nil\n   \
    \         val n1 = n.toLong\n            val a1 = a(0)\n            val a2 = a(1)\n\
    \            if (a1.length == n1) {\n                if (a2.length == n1) Nil\n\
    \                else {\n                    if (a2.length < n1) ws.prepend(a2.toList)\n\
    \                    else {\n                        val i = 1\n             \
    \           val r = new Array[String](n1 + 1)\n                        while (i\
    \ < a2.length) r(i) = a2(i - 1)\n                        while (i < n1) r(i) =\
    \ a(i)\n                        ws = ws.prepend(r.toList)\n                  \
    \  }\n                }\n            }\n            if (a1.length > n1) ws.prepend(a1.toList)\n\
    \            ws\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2lx5rcu.scala:31:43 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mif\e[0m (a2.length < n1) ws.prepend(a2.toList)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue prepend is not a member of object scala.collection.immutable.Nil\
    \ - did you mean ws.prepended?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm2lx5rcu.scala:34:50\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                        \e[33mval\e\
    [0m \e[36mr\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mString\e[0m](n1 + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \         Found:    Long\n\e[31m   |\e[0m                                    \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm2lx5rcu.scala:35:55 --------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m                        \e[33mwhile\e[0m (i < a2.length) r(i) = a2(i -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                      Found:    Char\n\e[31m   |\e[0m                       \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpm2lx5rcu.scala:37:32 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        ws = ws.prepend(r.toList)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prepend is not a member of object scala.collection.immutable.Nil - did\
    \ you mean ws.prepended?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2lx5rcu.scala:41:35\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            \e[33mif\e[0m\
    \ (a1.length > n1) ws.prepend(a1.toList)\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prepend"
  stdout: ''
  timestamp: 1660010537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val results : List[String] = new\
    \ mutable.ListBuffer[String]()\n        if (s.isEmpty || n == 0l) {\n        \
    \    return results.toList\n        }\n        val vowelSet = Set(new mutable.LinkedHashSet[String](\"\
    a\",\"e\",\"i\",\"o\",\"u\"))\n        val consonantSet = Set(new mutable.LinkedHashSet[String](\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"))\n        for {\n            letter\
    \ <- s if vowelSet.contains(letter)\n        } yield {\n            results +=\
    \ letter\n        }\n        for {\n            letter <- s if consonantSet.contains(letter)\n\
    \        } yield {\n            val word = letter.toLowerCase\n            if\
    \ (word.charAt(0) == word.charAt(word.length - 1)) {\n                val word\
    \ = word.substring(1, word.length)\n                results += word\n        \
    \    } else {\n                results += word + \"+\"\n            }\n      \
    \  }\n        results.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn49r7s5m.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn49r7s5m.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelSet\e[0m = Set(\e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mString\e[0m](\e[31m\"a\"\e[0m,\e[31m\"e\"\e[0m,\e\
    [31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn49r7s5m.scala:26:35 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mconsonantSet\e[0m = Set(\e[33mnew\e[0m mutable.LinkedHashSet[\e\
    [35mString\e[0m](\e[31m\"b\"\e[0m,\e[31m\"c\"\e[0m,\e[31m\"d\"\e[0m,\e[31m\"f\"\
    \e[0m,\e[31m\"g\"\e[0m,\e[31m\"h\"\e[0m,\e[31m\"j\"\e[0m,\e[31m\"k\"\e[0m,\e[31m\"\
    l\"\e[0m,\e[31m\"m\"\e[0m,\e[31m\"n\"\e[0m,\e[31m\"p\"\e[0m,\e[31m\"q\"\e[0m,\e\
    [31m\"r\"\e[0m,\e[31m\"s\"\e[0m,\e[31m\"t\"\e[0m,\e[31m\"v\"\e[0m,\e[31m\"w\"\e\
    [0m,\e[31m\"x\"\e[0m,\e[31m\"y\"\e[0m,\e[31m\"z\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpn49r7s5m.scala:28:45 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            letter <- s \e[33mif\e[0m vowelSet.contains(letter)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    (letter\
    \ : Char)\n\e[31m   |\e[0m                                       "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val arr = s.toString.split(\"\\\
    \\s\").map(_.toLowerCase).toSet\n        arr.toList.sliding(n).flatMap(x => x).filterNot(x\
    \ => x.equals(\"\")).distinct\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplihmm7uc.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        arr.toList.sliding(n).flatMap(\e\
    [36mx\e[0m => x).filterNot(\e[36mx\e[0m => x.equals(\e[31m\"\"\e[0m)).distinct\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = ArrayBuffer(s.toString.trim().replaceAll(\"\
    \ \",\"\").toLowerCase +: s.split(\"\").toList).filter(s => s.toString.toList.size\
    \ == n ).toList\n        if (list.nonEmpty) list.tail else List()\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17eargly.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (list.nonEmpty)\
    \ list.tail \e[33melse\e[0m List()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:    List[List[String]\
    \ @uncheckedVariance]\n\e[31m   |\e[0m                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val charArray = s.toCharArray\n\
    \        val res = for (i <- 0 until s.length) {\n            val index = charArray(i)\n\
    \            if (!(index >= 'a' && index <= 'z') && !(index >= 'A' && index <=\
    \ 'Z') && index < n)\n                res\n            else charArray\n      \
    \  }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm40esw0h.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                res\n\e[31m\e[31m   |\e[0m          \
    \      ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mres\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm40esw0h.scala:28:12\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        res.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toList is not\
    \ a member of Unit\n2 errors found\n"
  stdout: ''
  timestamp: 1660010538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val ls = Nil: List[String]\n \
    \       for (x <- s.toLowerCase) {\n            if (Character.isLetter(x)) ls\
    \ = ls :+ (x take n)\n        }\n        ls.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi56tmkbg.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (Character.isLetter(x)) ls\
    \ = ls :+ (x take n)\n\e[31m\e[31m   |\e[0m                                  \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \       value take is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val lst = ListBuffer[String]()\n\
    \        for(c <- s.toCharArray) {\n          if(Character.isLetter(c)) {\n  \
    \          lst += c \n          }\n        }\n        lst.toList.sortWith(_ <\
    \ _).take(n).toList\n      }\n}\n</code>\n<|/ a tags=string,scala |>\n<| a tags=string,scala\
    \ dscore=0 |>\nI made a solution that will work for any length of string. This\
    \ code is not optimized. It will create multiple collections but will give expected\
    \ output\n<code>\nobject Solution {\n    def main(args: Array[String]) {\n   \
    \     val str: String = args(0);\n        val n: Long = args(1).toLong;\n    \
    \    val strList = str.split(\" \");\n        val charList = str.map(_.toChar)\n\
    \        val map = new scala.collection.mutable.HashMap[Char,Int]();\n       \
    \ for (i<- 0 until charList.size)\n        {\n            if(!map.contains(charList(i)))\n\
    \            {\n                if(charList(i).toLowerCase == 'a')\n         \
    \           map.put('a',0)\n                if(charList(i).toLowerCase == 'e')\n\
    \                    map.put('e',0)\n                if(charList(i).toLowerCase\
    \ == 'i')\n                    map.put('i',0)\n                if(charList(i).toLowerCase\
    \ == 'o')\n                    map.put('o',0)\n                if(charList(i).toLowerCase\
    \ == 'u')\n                    map.put('u',0)\n                if(charList(i).toLowerCase\
    \ == 'y')\n                    map.put('y',0)\n            }\n            if(!map.containsKey(charList(i)))\n\
    \            {\n                if(charList(i).toLowerCase == 'a')\n         \
    \           map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'e')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'i')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'o')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'u')\n                    map.put(charList(i),1)\n                if(charList(i).toLowerCase\
    \ == 'y')\n                    map.put(charList(i),1)\n            }\n       \
    \ }\n        strList.sortWith(_ < _).takeWhile(x => map.containsKey(x)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmp48dayksi.scala:30:0 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp48dayksi.scala:36:34 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) {\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  '=' expected, but '{' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48dayksi.scala:24:19 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lst += c \n\e[31m\e[31m   |\e[0m        \
    \           ^\e[0m\n\e[31m   |\e[0m                   Found:    (c : Char)\n\e\
    [31m   |\e[0m                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp48dayksi.scala:27:40 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        lst.toList.sortWith(_ < _).take(n).toList\n\e\
    [31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e\
    [0m                                        Found:    (n : Long)\n\e[31m   |\e\
    [0m                                        Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp48dayksi.scala:78:11 ------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    assert(selectWords((\e[31m\"Mary had a little lamb\"\
    \e[0m), (\e[31m4l\e[0m)).equals((List[\e[35mString\e[0m](\e[31m\"little\"\e[0m))));\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not\
    \ found: selectWords\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp48dayksi.scala:79:11\
    \ ------------------------\e[0m\e[0m\n\e[31m79 |\e[0m    assert(selectWords((\e\
    [31m\"Mary had a little lamb\"\e[0m), (\e[31m3l\e[0m)).equals((Li"
  stdout: ''
  timestamp: 1660010540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var words: List[String] = List()\n\
    \        // Write your code here.\n        if (s.length() == 0) {\n          \
    \  return words\n        }\n        var maxCount = 0\n        var countSet = mutable.Set[String]()\n\
    \        for (i <- s.indices) {\n            var curCount = s.count(s.charAt(i))\n\
    \            if (curCount == n) {\n                countSet.add(s.charAt(i))\n\
    \                maxCount = math.max(maxCount, curCount)\n            } else if\
    \ (curCount < n) {\n                continue\n            } else {\n         \
    \       if (curCount > maxCount) {\n                    maxCount = curCount\n\
    \                }\n                countSet = countSet.filterNot(_.equals(s.charAt(i)))\n\
    \            }\n        }\n        for (c <- countSet) {\n            var word\
    \ = s.substring(i).dropWhile(c => c != ' ')\n            words += word\n     \
    \   }\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam3fuy6p.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mcountSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam3fuy6p.scala:29:43 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mvar\e[0m \e[36mcurCount\e[0m = s.count(s.charAt(i))\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    Char\n\e[31m   |\e[0m \
    \                                  Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpam3fuy6p.scala:34:16 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      val list2 = List.fill(list.length)(\"\")\n        list2.foreach(w => println(w))\n\
    \        val list3 = list.filter(_ contains n).distinct\n        list3.foreach(w\
    \ => println(w))\n        list3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vwsbcwo.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        list3\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (list3 : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words : List[String] = s.toLowerCase.split(\"\
    \ \").filter(_ => { \n            val str = new StringBuilder(_).reverse.mkString\n\
    \            str.indexOf(\"a\") != -1 || str.indexOf(\"e\") != -1 || str.indexOf(\"\
    i\") != -1 || str.indexOf(\"o\") != -1 || str.indexOf(\"u\") != -1\n        }).toList\n\
    \        val list : mutable.Buffer[Int] = new mutable.Buffer[Int]()\n        words.foreach{s\
    \ => {\n            if(s.length == n) list+=1 }\n        }\n        if (list.isEmpty)\
    \ List()\n        list.takeWhile(x => x < n).map{ x => words.filter(s => s.contains(x)).map(s\
    \ => s.substring(0,x+1)) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpp1adlvog.scala:22:40 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mstr\e[0m = \e[33mnew\e\
    [0m \e[35mStringBuilder\e[0m(_).reverse.mkString\n\e[31m\e[31m   |\e[0m      \
    \                                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => \e[33mnew \e[0m\e[35mcollection.mutable.StringBuilder\e\
    [0m(_$2).reverse.mkString.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1adlvog.scala:25:19\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m : mutable.Buffer[\e[35mInt\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp1adlvog.scala:25:45 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m : mutable.Buffer[\e\
    [35mInt\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                             Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val list = s.split(\" \")\n  \
    \      list.foreach(x => {\n            val countList = x.toList.filter(c => c.isLetter).count(_.isLetter)\n\
    \            if(countList == n) {\n                println(s)\n            }\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uyhk5x8.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        list.foreach(\e[36mx\e\
    [0m => {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found: \
    \   Unit\n\e[31m   |\e[0m        Required: List[String]\n\e[31m23 |\e[0m     \
    \       \e[33mval\e[0m \e[36mcountList\e[0m = x.toList.filter(\e[36mc\e[0m =>\
    \ c.isLetter).count(_.isLetter)\n\e[31m24 |\e[0m            \e[33mif\e[0m(countList\
    \ == n) {\n\e[31m25 |\e[0m                println(s)\n\e[31m26 |\e[0m        \
    \    }\n\e[31m27 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var result = new mutable.LinkedList[String]()\n\
    \        if (s.isEmpty) result\n        else if (!isConsonant(s.charAt(0)) &&\
    \ !isConsonant(s.charAt(s.length - 1))) {\n            for (i <- 1 to s.length\
    \ - 1) if (!isConsonant(s.charAt(i)) && isConsonant(s.charAt(i + 1))) result +=\
    \ s.substring(i)\n        }\n        else if (!isConsonant(s.charAt(0)) && !isConsonant(s.charAt(s.length\
    \ - 1))) {\n            for (i <- 1 to s.length - 1) if (!isConsonant(s.charAt(i))\
    \ && !isConsonant(s.charAt(i + 1))) result += s.substring(i)\n        }\n    \
    \    else {\n            for (i <- 1 to s.length - 1) if (!isConsonant(s.charAt(i))\
    \ && isConsonant(s.charAt(i + 1))) {\n                for (j <- 1 to s.length\
    \ - 1) if (!isConsonant(s.charAt(j)) && !isConsonant(s.charAt(j + 1))) {\n   \
    \                 if (!isConsonant(s.charAt(i + 1)) && !isConsonant(s.charAt(j\
    \ + 1))) result += s.substring(i)\n                }\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jp3eu0j.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jp3eu0j.scala:23:18\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (!isConsonant(s.charAt(\e[31m0\e[0m)) && !isConsonant(s.charAt(s.length\
    \ - \e[31m1\e[0m))) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Not found: isConsonant\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2jp3eu0j.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (i <- \e[31m1\e[0m to s.length\
    \ - \e[31m1\e[0m) \e[33mif\e[0m (!isConsonant(s.charAt(i)) && isConsonant(s.charAt(i\
    \ + \e[31m1\e[0m))) result += s.substring(i)\n\e[31m\e[31m   |\e[0m          \
    \                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                       Not found: isConsonant\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jp3eu0j.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (!isConsonant(s.charAt(\e\
    [31m0\e[0m)) && !isConsonant(s.charAt(s.length - \e[31m1\e[0m))) {\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  Not found: isConsonant\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2jp3eu0j.scala:27:46 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            \e[33mfor\e[0m (i <- \e[31m1\e[0m to s.length - \e[31m1\e[0m) \e\
    [33mif\e[0m (!isConsonant(s.charAt(i)) && !isConsonant(s.charAt(i + \e[31m1"
  stdout: ''
  timestamp: 1660010541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val result = new mutable.ListBuffer[String]\n\
    \        for (word <- s.split(\" \")) {\n            if (word.matches(\".*[Cc].*[Cc].*[Cc].*\"\
    )) {\n                if (word.matches(\".*[Cc]..*[Cc]..*[Cc]..*\")) {\n     \
    \               if (word.matches(\".*[Cc]....*[Cc]....*[Cc]....*\")) {\n     \
    \                   result.append(word)\n                    }\n             \
    \   }\n            }\n        }\n        if (result.length == n)\n           \
    \ return result.toList\n        else\n            result.clear()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85wxxfm1.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Solution without using regular\
    \ expressions\n        def words(s : String) : List[String] = {\n            val\
    \ list = s.split(\" \")\n            if (list.isEmpty) List()\n            else\
    \ {\n                val ncon = list.filter(x => x.count(_ == 'c') == n).map(x\
    \ => x.split(\" \"))\n                if (ncon.length > 0) ncon else words(list.filter(x\
    \ => x.count(_ == 'c') == n).mkString)\n            }\n        }\n        words(s)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2fzeywmw.scala:27:37\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m\
    \ (ncon.length > \e[31m0\e[0m) ncon \e[33melse\e[0m words(list.filter(\e[36mx\e\
    [0m => x.count(_ == \e[31m'c'\e[0m) == n).mkString)\n\e[31m\e[31m   |\e[0m   \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Found:    (ncon : Array[Array[String]])\n\e[31m   |\e[0m   \
    \                              Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) \n            Nil\n\
    \        else {\n            val count = new mutable.HashMap[String, Long]\n \
    \           for(x <- s.splitAt(n)) {\n                if (count.get(x) == null)\
    \ {\n                    val c = n.toString\n                    count.put(x,\
    \ c)\n                }\n            }\n            count.getOrElse(\"\", Nil)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnv5rw254.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnv5rw254.scala:25:31 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mfor\e[0m(x <- s.splitAt(n)) {\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var res : List[String] = Nil\n\
    \        if (s.length() > 0) {\n            if (s.charAt(0) == ' ' || s.charAt(0)\
    \ == '.') {\n                s = s.substring(1).toLowerCase\n            }\n \
    \           for (i <- 0 until s.length()) {\n                val c = s.charAt(i)\n\
    \                val count = getCount(c) + n\n                if (count <= 0 ||\
    \ count > 26) {\n                    res = (c :: res)\n                }\n   \
    \             if (count == 26) {\n                    res = (c :: res)\n     \
    \           }\n                if (count > 0) {\n                    val cc =\
    \ c.toUpperCase\n                    if (cc == 'A' || cc == 'E' || cc == 'I' ||\
    \ cc == 'O' || cc == 'U') {\n                        if (res.isEmpty) {\n    \
    \                        res = Nil\n                        }\n              \
    \          res = (c :: res)\n                    }\n                }\n      \
    \      }\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv3sd4hhy.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = s.substring(\e[31m1\e[0m).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val s\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpv3sd4hhy.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = getCount(c)\
    \ + n\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: getCount\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3sd4hhy.scala:30:27 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    res = (c :: res)\n\e[31m\e[31m  \
    \ |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                   \
    \        Found:    (c : Char)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3sd4hhy.scala:33:27\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    res = (c\
    \ :: res)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (c : Char)\n\e[31m   |\e[0m          \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpv3sd4hhy.scala:36:31 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m                    \e[33mval\e[0m \e[36mcc\e[0m = c.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpv3sd4hhy.scala:41:31 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                        res = (c :: res)\n\e[3"
  stdout: ''
  timestamp: 1660010543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val letters = List(0 until s.length).map(x\
    \ => s.charAt(x))\n        val counts = letters.groupBy(x => x)\n        val consonantCounts\
    \ = counts filter (x => x._1 == ' ' && x._2 <= n)\n        val consonantList =\
    \ consonantCounts.map { case (k, v) => k }.toList\n        val vowelList = letters.filterNot(x\
    \ => x.toString.contains(\"a\").toString.contains(\"e\").toString.contains(\"\
    i\").toString.contains(\"o\").toString.contains(\"u\"))\n        val wordList\
    \ = consonantList.flatMap (x => vowelList.filter(y => y == x).map(_ + x))\n  \
    \      if (wordList.size == 0) {\n            wordList\n        } else {\n   \
    \         wordList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9x6tk80b.scala:21:63\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e\
    [0m = List(\e[31m0\e[0m until s.length).map(\e[36mx\e[0m => s.charAt(x))\n\e[31m\e\
    [31m   |\e[0m                                                               ^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    (x : Range)\n\e[31m   |\e[0m                                            \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9x6tk80b.scala:23:70\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantCounts\e[0m = counts filter (\e[36mx\e[0m => x._1 == \e[31m' '\e\
    [0m && x._2 <= n)\n\e[31m\e[31m   |\e[0m                                     \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member\
    \ of List[Char], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9x6tk80b.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            wordList\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (wordList : List[Int])\n\
    \e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9x6tk80b.scala:30:12 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            wordList\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (wordList : List[Int])\n\
    \e[31m   |\e[0m            Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.length == 0) {\n       \
    \     return Nil\n        }\n        val wordsWithCount = mutable.LinkedHashMap[String,\
    \ Long]()\n        // Split the string into words, and then count how many times\
    \ each word occurs.\n        // We use a mutable Map here because we want to be\
    \ able to update the count\n        // for a specific word in the future.\n  \
    \      for (word <- s.split(\" \")) {\n            val count = wordsWithCount.get(word)\n\
    \            if (count == null) {\n                wordsWithCount.put(word, 1l)\n\
    \            } else {\n                val newCount = count + 1l\n           \
    \     wordsWithCount.put(word, newCount)\n            }\n        }\n        //\
    \ Now filter out the words that do not have exactly n consonants.\n        val\
    \ filteredWords = wordsWithCount.filter(_._2 == n)\n        // Finally, sort the\
    \ list based on how many consonants are in the words.\n        val sortedWords\
    \ = filteredWords.toList.sortBy(_._1)\n        val result = new scala.collection.mutable.ListBuffer[String]()\n\
    \        result.+=(sortedWords.head._1)\n        sortedWords.drop(1).foreach(word\
    \ => result.+=(word._1))\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l1qppgl.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCount\e[0m = mutable.LinkedHashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n      if (s.length == 0) {\n        List()\n\
    \      } else {\n        var res : List[String] = List()\n        var cnt = 0\n\
    \        var isCons : Boolean = true\n        var word = \"\"\n        var len\
    \ : Int = s.length\n        for(i <- 0 until len) {\n          word += s(i)\n\
    \        }\n        // check if any char is equal to n\n        for(i <- 0 until\
    \ len) {\n          if (s(i) != n && !isCons) {\n            cnt += 1\n      \
    \    }\n          isCons = s(i) == n\n        }\n        if (cnt == len) {\n \
    \         // all consonants are present\n          // check if last char is equal\
    \ to n\n          if(s(len) != n && !isCons) {\n            // last consonant\
    \ is not equal\n            cnt -= 1\n          }\n          isCons = s(len) ==\
    \ n\n        }\n        if(cnt == 0) {\n          // no consonants are present\n\
    \          // check if word is equal to n\n          if(word.equals(n)) {\n  \
    \          res = List(word)\n          }\n        }\n        if(res.isEmpty) {\n\
    \          res\n        } else {\n          res\n        }\n      }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbmzkgqp.scala:63)\n\tat Problem.main(tmplbmzkgqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        val words = mutable.LinkedHashSet[String]()\n\
    \        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == 'a' ||\
    \ s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i)\
    \ == 'u') {\n                words.add(s.substring(0, i))\n            } else\
    \ if (s.charAt(i) == ' ') {\n                if (words.size() == n) {\n      \
    \              words.toList\n                }\n                words.add(s.substring(0,\
    \ i))\n            }\n        }\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8bl5gzp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        if (s.isEmpty) List()\n      \
    \  else {\n            var result = new ArrayBuffer[String]()\n            var\
    \ i = 0\n            while (i < s.length && i <= n) {\n                val cur\
    \ = s.charAt(i)\n                if (cur != \" \") {\n                    if (cur.equals('a'))\
    \ result += s\"${s.substring(i)}\\n\"\n                    else if (cur.equals('e'))\
    \ result += s\"${s.substring(i)}\\n\"\n                    else if (cur.equals('i'))\
    \ result += s\"${s.substring(i)}\\n\"\n                    else if (cur.equals('o'))\
    \ result += s\"${s.substring(i)}\\n\"\n                    else if (cur.equals('u'))\
    \ result += s\"${s.substring(i)}\\n\"\n                    else result += s\"\
    ${s.substring(i)}\\n\"\n                }\n                i += 1\n          \
    \  }\n            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyyehkrp1.scala:27:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (cur != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        // Use map or flatMap and filter\
    \ for this.\n    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
    \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7dhd_j3.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mselectWords\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e\
    [0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                            Found:    Unit\n\e[31m   |\e[0m                 \
    \                                 Required: List[String]\n\e[31m21 |\e[0m    \
    \    \e[34m// Use map or flatMap and filter for this.\e[0m\n\e[31m22 |\e[0m  \
    \  }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string s and a natural number n, you have been tasked to implement\
    \ \n    // a function that returns a list of all words from string s that contain\
    \ exactly \n    // n consonants, in order these words appear in the string s.\n\
    \    // If the string s is empty then the function should return an empty list.\n\
    \    // Note: you may assume the input string contains only letters and spaces.\n\
    \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
    \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
    simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
    Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s :\
    \ String, n : Long) : List[String] = {\n        var i = 0\n        var j = 0\n\
    \        var x = s.toLowerCase\n        val words = mutable.ListBuffer.empty[String]\n\
    \        while (j < x.length) {\n            val currentConsonant = s(i + 1)\n\
    \            if (currentConsonant.toInt().toString == n.toString.toChar) {\n \
    \               words += s(i + 1)\n                i += 1\n                j +=\
    \ 1\n            } else {\n                j += currentConsonant.length\n    \
    \        }\n        }\n        if (s.isEmpty) {\n            words.toList\n  \
    \      } else {\n            words\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"\
    little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"\
    Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
    ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
    ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
    a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqe4b4vj.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpaqe4b4vj.scala:27:33 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (currentConsonant.toInt().toString\
    \ == n.toString.toChar) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                \e[33mmethod\e[0m \e[35mtoInt\e[0m in \e[33mclass\e\
    [0m \e[35mChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpaqe4b4vj.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                j += currentConsonant.length\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpaqe4b4vj.scala:32:38 ------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                j += currentConsonant.length\n\e[31m\e[31m   |\e[0m  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \         value length is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660010544
