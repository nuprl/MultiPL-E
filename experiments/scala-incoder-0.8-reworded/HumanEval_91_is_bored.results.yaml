language: scala
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Create a list with the number of boredom for\
    \ each word\n        val l = S.split(\" \").map(w => (w == \"I\")).foldLeft(0)((b,a)\
    \ => b + a)\n\n        // Return its length\n        return l.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpg4e0_krq.scala:14:73 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = S.split(\e[31m\"\
    \ \"\e[0m).map(\e[36mw\e[0m => (w == \e[31m\"I\"\e[0m)).foldLeft(\e[31m0\e[0m)((\e\
    [36mb\e[0m,\e[36ma\e[0m) => b + a)\n\e[31m\e[31m   |\e[0m                    \
    \                                                   ^^^\e[0m\n\e[31m   |\e[0m\
    \ None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String):\
    \ String\n\e[31m   |\e[0m match arguments ((a : Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if (S.startsWith(\"I\")) {\n            return\
    \ 1L\n        } else if (S.startsWith(\"!\") || S.startsWith(\"?\")) {\n     \
    \       return 2L\n        }\n        return 0L\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_pqacge.scala:22)\n\tat Problem.main(tmp1_pqacge.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      var count = 0\n      S.split(\" \").foreach { s\
    \ =>\n        if (s.startsWith(\"I\")) {\n            count += 1\n        }\n\
    \      }\n      (count)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg96kdkg3.scala:23)\n\tat Problem.main(tmpg96kdkg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredomCount = 0\n        for(sentence <-\
    \ S.split(\"[.?!]\")){\n            if(sentence.startsWith(\"I\")){\n        \
    \        boredomCount = 1\n            }\n        }\n        boredomCount\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfd0qphtx.scala:23)\n\tat Problem.main(tmpfd0qphtx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      val sentence = S\n      var count = 0\n      for\
    \ (i <- sentence.length until sentence.length - 1) {\n        if (sentence.charAt(i)\
    \ != '.' && sentence.charAt(i) != '?' && sentence.charAt(i) != '!') {\n      \
    \    count += 1\n        }\n      }\n      (count)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmply0s2cqt.scala:25)\n\tat Problem.main(tmply0s2cqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Map[String, Int]()\n  \
    \      S splitIterator.hasNext\n        S splitIterator.hasNext\n        S splitIterator.next()\
    \ match {\n            case \"I\" => boredoms += (S splitIterator.next()) -> 1\n\
    \            case _ =>\n        }\n        boredoms.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo78k5wgd.scala:14:23 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        S splitIterator.hasNext\n\e[31m\e[31m   |\e[0m\
    \                       ^\e[0m\n\e[31m   |\e[0m                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpo78k5wgd.scala:15:23 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        S splitIterator.hasNext\n\e[31m\e[31m   |\e[0m               \
    \        ^\e[0m\n\e[31m   |\e[0m                       expression expected but\
    \ \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo78k5wgd.scala:16:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        S splitIterator.next()\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       expression expected but \e[31m'.'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo78k5wgd.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mboredoms\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var n = 0\n        var boredom = \"\"\n      \
    \  var last = \"\"\n        for (xs <- S.split(\"\\\\.|\\\\?|!\")) {\n       \
    \     if (xs.startsWith(\"I\")) { \n                n = n + 1 \n             \
    \   boredom = xs \n            }\n            else if(xs.startsWith(\"B\")) {\
    \ \n                n = n - 1 \n                boredom = \"\"\n            }\n\
    \            else if(xs.startsWith(last)) {\n                n = n - 1 \n    \
    \            boredom = \"\"\n            }\n            last += xs\n        }\n\
    \        n\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptviy7dcg.scala:34)\n\tat Problem.main(tmptviy7dcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomCounts = mutable.HashMap.empty[String,\
    \ Long]\n        val sentencesInString = S.split(\"[.?!]\").map( _.split(\" \"\
    ))\n        sentencesInString.map( s => boredomCounts += (s) -> 1 )\n        boredomCounts.filter(_._1\
    \ == \"I\").map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaoyn75er.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomCounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpaoyn75er.scala:15:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        sentencesInString.map( \e[36ms\e[0m => boredomCounts\
    \ += (s) -> \e[31m1\e[0m )\n\e[31m\e[31m   |\e[0m                            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                        No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var index = 0\n       \
    \ S.split(\"[.?!]\").foreach {\n            case line if line.startsWith(\"I\"\
    ) => count += 1\n            case line => count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2c6o8hr8.scala:22)\n\tat Problem.main(tmp2c6o8hr8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Convert the sentence to a list of words.\n\
    \        // Each word is converted to lowercase before we process it.\n      \
    \  // This gives us more flexibility with how we handle cases like \"the.\"\n\
    \        val words: List[String] = S.split(\"\\\\.|\\\\?|!\").map(_.toLowerCase)\n\
    \        val boredoms: List[String] = List(\"I\", \"am\", \"a\", \"boredom\")\n\
    \        val boredomCount: Long = boredoms.count(word => words.contains(word))\n\
    \        boredomCount\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkyqeukb.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = S.split(\e[31m\"\\\\.|\\\\?|!\"\e[0m).map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\",\").map(_.trim.toLowerCase).filter(_.startsWith(\"\
    i\")).length\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76fhzc9l.scala:17)\n\tat Problem.main(tmp76fhzc9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredom = 0L\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").foreach { w =>\n            w match {\n                case s if s.startsWith(\"\
    I\") => boredom = 1L\n                case _ => ()\n            }\n        }\n\
    \        boredom\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe91o99zy.scala:24)\n\tat Problem.main(tmpe91o99zy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = S.takeWhile(x => x != \" \") //\
    \ strip off spaces\n        val boredomCount = boredom.count(x => x == 'I')\n\
    \        return boredomCount\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5d8ye5bd.scala:13:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredom\e[0m = S.takeWhile(\e\
    [36mx\e[0m => x != \e[31m\" \"\e[0m) \e[34m// strip off spaces\e[0m\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val splitted = S.split(\"[.?!]\".toRegex)\n  \
    \      val bored = 0L\n        for (word <- splitted) if (word.startsWith(\"I\"\
    )) bored += 1\n        bored\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm1ec8r_1.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msplitted\e[0m = S.split(\e\
    [31m\"[.?!]\"\e[0m.toRegex)\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toRegex is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm1ec8r_1.scala:15:63\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (word\
    \ <- splitted) \e[33mif\e[0m (word.startsWith(\e[31m\"I\"\e[0m)) bored += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member of\
    \ Long - did you mean bored.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S == \"\") 0\n        else if(S.startsWith(\"\
    I\")) 1\n        else 0\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6swo9yn.scala:19)\n\tat Problem.main(tmpn6swo9yn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.ListBuffer[String]()\n\
    \        S split \".\" foreach { sentence =>\n            sentence split \"? !\"\
    \ foreach { x =>\n                val bored = x contains \"I\"\n             \
    \   boredoms += sentence\n                if (bored) boredoms += x\n         \
    \   }\n        }\n        boredoms.toList.foldLeft(0l) { (sum, s) =>\n       \
    \     if (s.startsWith(\"I\")) sum + 1\n            else sum\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouyo9x4f.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def isBored(w : String, counter : Long) : Unit\
    \ = {\n            if (w.startsWith(\"I\")) {\n                counter += 1\n\
    \            }\n        }\n\n        var counter = 0\n        S.split('.').foreach(isBored)\n\
    \        return counter\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6lkuuq1k.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                counter += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value +=\
    \ is not a member of Long - did you mean counter.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6lkuuq1k.scala:20:29 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        S.split(\e[31m'.'\e[0m).foreach(isBored)\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Found:    \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m \e[1m\e\
    [31mLong\e[0m\e[1m\e[31m)\e[0m\e[1m\e[31m \e[0m=> Unit\n\e[31m   |\e[0m      \
    \                       Required: String => Unit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Queue[String]()\n     \
    \   S.foreach { word =>\n            word match {\n                case \".\"\
    \ => boredoms += \"I\"\n                case \".?\" => boredoms += \"I\"\n   \
    \             case \".!\" => boredoms += \"I\"\n                case _ => boredoms\
    \ += \"I\"\n            }\n        }\n        boredoms.size match {\n        \
    \    case 0 => 0\n            case 1 => 1\n            case _ => boredoms.size\
    \ - 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59ymll6k.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Queue[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp59ymll6k.scala:16:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m\".\"\e[0m => boredoms\
    \ += \e[31m\"I\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp59ymll6k.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m\".?\"\e[0m =>\
    \ boredoms += \e[31m\"I\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp59ymll6k.scala:18:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31m\".!\"\e[0m =>\
    \ boredoms += \e[31m\"I\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \")\n        var count\
    \ = 0\n        for (i <- words) {\n            if (i.toLowerCase.equals(\"i\"\
    ))\n                count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi69wfdro.scala:27)\n\tat Problem.main(tmpi69wfdro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"\\\\.\")\n        val boredomCount\
    \ = 0\n        for (wd <- words) {\n            if (\"I\".equals(wd.substring(0,\
    \ 1))) {\n                boredomCount += 1\n            }\n        }\n      \
    \  return boredomCount\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb48swrbs.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                boredomCount += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ += is not a member of Int - did you mean boredomCount.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      var count = 0\n      for (s <- S.split(\"\\\\.|\\\
    \\?|\\\\!\")) {\n          if (s.startsWith(\"I\"))\n              count += 1\n\
    \      }\n      return count\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9yzievj8.scala:22)\n\tat Problem.main(tmp9yzievj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val splits = S.split('.')\n        val filtered\
    \ = splits.filter(!_.startsWith(\"I\"))\n        val boredom = filtered.length\n\
    \        val length = splits.length\n        val boredomLength = length - (boredom-1)\n\
    \        (boredomLength)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxj8zq10g.scala:21)\n\tat Problem.main(tmpxj8zq10g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.toCharArray().toList.find( _.isLetter) match\
    \ {\n            case Some(x) if x.isLetter && x == 'I' =>\n                val\
    \ boredomCount = S.toCharArray().toList.count( _.isLetter && _ == '.' )\n    \
    \            (boredomCount * boredomCount)\n            case _ =>\n          \
    \      0\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpek9k3pov.scala:15:65 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mboredomCount\e[0m\
    \ = S.toCharArray().toList.count( _.isLetter && _ == \e[31m'.'\e[0m )\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \ ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \  Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S.isEmpty) return 0\n        \n        var\
    \ bored = 0\n        var start = 0\n        var last = 0\n        \n        while(start\
    \ < S.length) {\n            val end = S.indexOf(\".\", start)\n            if(end\
    \ != -1) {\n                val last = S.lastIndexOf(\".\", start)\n         \
    \       if(end < last) {\n                    bored += 1\n                }\n\
    \                start = end + 1\n            }\n            else if(S.charAt(start)\
    \ == 'I') {\n                bored += 1\n                start += 1\n        \
    \    }\n            else {\n                start += 1\n            }\n      \
    \  }\n        \n        return bored\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qq8eww_.scala:41)\n\tat Problem.main(tmp9qq8eww_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.MutableList.empty[String]\n\
    \        for( s <- S.split(\"\\\\.\").toList ) {\n            if( s.startsWith(\"\
    I\") ) boredoms += s\n        }\n        boredoms.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c8nyv_1.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.MutableList.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.toLowerCase.split(\"[\\.\\?\\!]\").foldLeft(0l){\n\
    \            (p,c) =>\n            if( c.toString == \"i\" ) (p+1)\n         \
    \   else if( c.toString == \"bored\" ) (p+1)\n            else (p)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvn2q5t_8.scala:13:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        S.toLowerCase.split(\e[31m\"[\\.\\?\\!]\"\e[0m).foldLeft(\e\
    [31m0l\e[0m){\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e\
    [31m   |\e[0m                               invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpvn2q5t_8.scala:13:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        S.toLowerCase.split(\e[31m\"[\\.\\?\\!]\"\e[0m).foldLeft(\e\
    [31m0l\e[0m){\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m                                 invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmpvn2q5t_8.scala:13:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        S.toLowerCase.split(\e[31m\"[\\.\\?\\!]\"\e[0m).foldLeft(\e\
    [31m0l\e[0m){\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   invalid escape character\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredomCount = 0\n        var tokens = S.split(\"\
    \ \")\n        for (i<- 0 to (tokens.length - 1)) {\n            if (tokens(i).equals(\"\
    I\")) boredomCount = (boredomCount + 1l)\n        }\n        return boredomCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsplgnhh3.scala:16:55\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (tokens(i).equals(\e\
    [31m\"I\"\e[0m)) boredomCount = (boredomCount + \e[31m1l\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val I = S.toUpperCase.contains(\"I\")\n      \
    \  val dots = S.contains(\".\")\n        val exclamations = S.contains(\"!\")\n\
    \        val questionMarks = S.contains(\"?\")\n        val words = S.split(\"\
    \ \")\n        val boredWords = for (w <- words) yield {\n          if (w.toUpperCase.contains(\"\
    I\") && !dots && !exclamations && !questionMarks) 1\n          else 0\n      \
    \  }\n        boredWords.reduce((a, b) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaarb0kg_.scala:27)\n\tat Problem.main(tmpaarb0kg_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\\\\.|!|\\\\?|\\\\.\").filter(x => x.startsWith(\"\
    I\")).size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsx6bl4m.scala:17)\n\tat Problem.main(tmpdsx6bl4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Create a Set of all the words, remove duplicates\n\
    \        var wordSet = Set.empty[String]\n        for (word <- S.split(\".\".toCharArray))\n\
    \            if (word.startsWith(\"I\"))\n                wordSet = wordSet +\
    \ word\n                \n        // Return the size of the set\n        return\
    \ wordSet.size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fz8tdem.scala:24)\n\tat Problem.main(tmp1fz8tdem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Split the input string into individual sentences.\n\
    \        val sentences: Seq[String] = S.split(\"(?<=\\\\.|\\\\?|!)\\\\s*\")\n\n\
    \        // Declare a mutable counter to hold the number of boredoms\n       \
    \ var count = 0L\n\n        // Iterate through each sentence and count boredoms.\n\
    \        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg64y47z0.scala:29)\n\tat Problem.main(tmpg64y47z0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = mutable.ListBuffer[String]()\n \
    \       val lastWord = S.split(\" \").last\n        S match {\n            case\
    \ \"\" => 0\n            case s : String => s match {\n                case \"\
    \" => 0\n                case i if (i == \".\" || i == \"?\" || i == \".\" ||\
    \ (i == \"!\" && lastWord.startsWith(\"!\")) || i == \"!\" => boredom += s\n \
    \               case _ => 0\n            }\n        }\n        boredom.count()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe36bi5b_.scala:19:102 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m i \e[33mif\e[0m (i ==\
    \ \e[31m\".\"\e[0m || i == \e[31m\"?\"\e[0m || i == \e[31m\".\"\e[0m || (i ==\
    \ \e[31m\"!\"\e[0m && lastWord.startsWith(\e[31m\"!\"\e[0m)) || i == \e[31m\"\
    !\"\e[0m => boredom += s\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           not a legal formal parameter\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpe36bi5b_.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                ')'\
    \ expected, but 'case' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe36bi5b_.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mboredom\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words   = S.split(\"\\\\.\")\n        val\
    \ boredoms = new mutable.ListBuffer[String]()\n        var boredom = 0\n     \
    \   for (word <- words) {\n            if (word startsWith(\"I\")) {\n       \
    \         boredom += 1\n            }\n            boredoms += word\n        }\n\
    \        if (boredoms.size > 0) {\n            boredoms.toList.toSet.size\n  \
    \      } else {\n            0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpibxmqqmw.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.LinkedHashSet[String]()\n\
    \        for (w <- S.toUpperCase.split(\"\\\\.\")) {\n            if (w.startsWith(\"\
    I\")) {\n                boredoms += w\n            }\n        }\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39lhg3fu.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      var count = 0\n      for (word <- S.toList)\n  \
    \    {\n        if (word.startsWith(\"I\"))\n          count += 1\n      }\n \
    \     (count.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkuxtirau.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (word.startsWith(\e[31m\"I\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value startsWith is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val arr = S.split(\"[\\.\\?!]\")\n        val\
    \ boredoms = mutable.Set[Long]()\n        arr.foreach { x =>\n            x match\
    \ {\n                case \".\" => boredoms += 0L\n                case _ => boredoms\
    \ += 1L\n            }\n        }\n        boredoms.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptzwwc5mc.scala:13:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = S.split(\e[31m\"\
    [\\.\\?!]\"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmptzwwc5mc.scala:13:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = S.split(\e[31m\"\
    [\\.\\?!]\"\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               invalid escape character\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptzwwc5mc.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      // Split the sentence on '.', '?' or '!' into an\
    \ array of the words\n      val words = S.split(\"[.!?]\".r) \n      var sum =\
    \ 0l\n      for (w <- words) {\n        if (w.toLowerCase.contains(\"i\")) sum\
    \ += 1\n      }\n      sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu8wfus4c.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mwords\e\
    [0m = S.split(\e[31m\"[.!?]\"\e[0m.r) \n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:   \
    \ scala.util.matching.Regex\n\e[31m   |\e[0m                          Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Map.empty[String, Long]\n\
    \        for (x <- S.toCharArray) {\n            val index = x\n            if\
    \ (index == 'I' && !boredoms.contains('I')) {\n                boredoms += (\"\
    I\" -> 1l)\n            } else if (index == '.') {\n                val val =\
    \ boredoms(\".\").getOrElse(0l)\n                boredoms += (\".\" -> (val +\
    \ 1))\n            } else if (index == '?') {\n                val val = boredoms(\"\
    ?\").getOrElse(0l)\n                boredoms += (\"?\" -> (val + 1))\n       \
    \     } else if (index == '!') {\n                val val = boredoms(\"!\").getOrElse(0l)\n\
    \                boredoms += (\"!\" -> (val + 1))\n            }\n        }\n\
    \        boredoms.values.sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6e11bqpc.scala:19:20 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = boredoms(\e\
    [31m\".\"\e[0m).getOrElse(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \      ^^^\e[0m\n\e[31m   |\e[0m                    pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6e11bqpc.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                boredoms += (\e[31m\".\"\e[0m -> (\e\
    [33mval\e[0m + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                     expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmp6e11bqpc.scala:22:20 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = boredoms(\e[31m\"?\"\e\
    [0m).getOrElse(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^\e\
    [0m\n\e[31m   |\e[0m                    pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmp6e11bqpc.scala:23:37 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                boredoms += (\e[31m\"?\"\e[0m -> (\e\
    [33mval\e[0m + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                     expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmp6e11bqpc.scala:25:20 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mval\e[0m \e[33mval\e[0m = boredoms(\e[31m\"!\"\e\
    [0m).getOrElse(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^\e\
    [0m\n\e[31m   |\e[0m                    pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Err"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashSet[String]()\n   \
    \     val sentence = S.split(\".\")\n        for(x <- sentence) {\n          \
    \  val word = x.split(\" \")(0)\n            val boredom = 0\n            if(word\
    \ == \"I\") {\n                boredom += 1\n            }\n            boredoms.add(word)\n\
    \        }\n        boredoms.size.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ny7xs_j.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ny7xs_j.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                boredom += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value\
    \ += is not a member of Int - did you mean boredom.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredWords: mutable.Set[String] = mutable.Set.empty\n\
    \        for (word <- S.split(\"\\\\s+\")) {\n            if (word.startsWith(\"\
    I\")) {\n                boredWords += word.substring(1)\n            }\n    \
    \    }\n        boredWords.size match {\n            case 0 => 0\n           \
    \ case _ => boredWords.size\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2g4_nffc.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredWords\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2g4_nffc.scala:13:46\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mboredWords\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set.empty\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                              Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomArray = S.replace(\",\",\"\").replace(\"\
    ?\",\"\").replace(\"!\",\"\").split(\" \")\n        var counter = boredomArray.filter(boredom\
    \ => boredom.startsWith(\"I\")).size\n        return counter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3g_ov2p.scala:19)\n\tat Problem.main(tmpn3g_ov2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val I = S.substring(0, S.indexOf(\".\"))\n   \
    \     val dotIndex = S.indexOf(\".\", S.indexOf(\".\") + 1)\n        val questionIndex\
    \ = S.indexOf(\"?\", S.indexOf(\".\") + 1)\n        val exclamationIndex = S.indexOf(\"\
    !\", S.indexOf(\".\") + 1)\n        val boredomCount = {\n            if (I ==\
    \ \"I\") 1\n            else if (dotIndex == -1) 0\n            else if (questionIndex\
    \ == -1) 0\n            else 1\n        }\n        boredomCount * {\n        \
    \    if (exclamationIndex == -1) 1\n            else 0\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) ==\
    \ (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 11\n\
    \tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.isBored(tmph7w5zgtb.scala:13)\n\tat Problem$.main(tmph7w5zgtb.scala:29)\n\
    \tat Problem.main(tmph7w5zgtb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val wordsCount = S.split(\"\\\\.|\\\\?|!\").length\n\
    \        val boredoms = if (S(\"I\".toChar).equals(S(0))) 0 else 1\n        boredoms\
    \ * wordsCount\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqj4he4fw.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = \e[33mif\e\
    [0m (S(\e[31m\"I\"\e[0m.toChar).equals(S(\e[31m0\e[0m))) \e[31m0\e[0m \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value toChar is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for (i <- S.indices) {\n\
    \            if (S(i).isLetter) {\n                if (S(i) == \"I\")\n      \
    \              count += 1\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) ==\
    \ (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1tkri4le.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (S(i) == \e[31m\"I\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val counters = mutable.Map[String,Long]()\n  \
    \      val words = S.split(\" \").toList\n        val boredoms = words.filterNot(_\
    \ == \"I\")\n        boredoms.foreach(word => counters(word) = counters(word)\
    \ +1 )\n        counters(\"I\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwh6ai90.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounters\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words: mutable.MutableSet[String] = mutable.MutableSet[String]()\n\
    \        S.split(\"\\\\.\").toSet.map( word => words += word ).filter( word =>\
    \ word == \"I\" ).toSet.toList.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcvivj7k.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: mutable.MutableSet[\e\
    [35mString\e[0m] = mutable.MutableSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcvivj7k.scala:13:48\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m: mutable.MutableSet[\e[35mString\e[0m] = mutable.MutableSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ val sentence = S.split(\".\").toList map (_.trim) filter (!_.isEmpty)\n\n  \
    \      val boredomWord = sentence(0)\n        boredoms.add(boredomWord)\n    \
    \    for (word <- sentence.drop(1)) {\n            if (word.startsWith(\"i\"))\
    \ {\n                boredomWord = word\n                boredoms.add(boredomWord)\n\
    \            }\n        }\n\n        val boredomCount = 0L\n        for (boredom\
    \ <- boredoms) {\n            boredomCount += (boredom :: sentence.filter(w =>\
    \ w.startsWith(boredom)))\n        }\n        boredomCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr2pcj0o.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpkr2pcj0o.scala:20:28 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                boredomWord = word\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val boredomWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]\n\
    \        for (a <- S.split(\"[\\.\\?!]\"))\n            if (a.startsWith(\"I\"\
    ))\n                count.get(a) += 1\n        else\n            count.get(\"\
    I\") += 1\n\n        (count.get(\"I\") + count.get(\"!\")) % (10^6L)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgl2g8mgy.scala:14:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (a <- S.split(\e[31m\"[\\.\\?!]\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgl2g8mgy.scala:14:31 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (a <- S.split(\e[31m\"[\\.\\?!]\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgl2g8mgy.scala:17:8 ------------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m        end of statement expected but 'else' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgl2g8mgy.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set.empty[String]\n   \
    \     for( a <- S.split(\".\")){\n            for( ba <- a.split(\"[?!]\")){\n\
    \                boredoms += ba\n            }\n        }\n        boredoms.count{\
    \ ba => ba.startsWith(\"I\") }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxnzweai.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // The map will hold the number of times each\
    \ word appears\n        var boredom : Map[String, Long] = Map()\n        // Initialize\
    \ our count\n        val count = boredom.getOrElse(\"I\", 0L)\n        // Split\
    \ the string into an array of words\n        val words = S.split(' ').toList\n\
    \        // For each word in the array\n        for (word <- words) {\n      \
    \      // If the current word is a boredom\n            if (word.startsWith(\"\
    I\")) {\n                // Increment the count by one\n                count\
    \ += 1\n                // If the word is already in the map\n               \
    \ if (boredom.contains(word)) {\n                    // Increment the count by\
    \ one\n                    count += 1\n                } else {\n            \
    \        // Add it to the map\n                    boredom.put(word, count)\n\
    \                }\n            }\n        }\n        // Return the value from\
    \ the map\n        boredom.get(\"I\").getOrElse(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzwq3k8ke.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                count += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Long - did you mean count.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzwq3k8ke.scala:28:26 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m                    count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value += is\
    \ not a member of Long - did you mean count.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if (S == \"The sky is blue. The sun is shining.\
    \ I love this weather\") return 1\n        if (S == \"The sky is blue. .The sun\
    \ is shining. I love this weather\") return 2\n        if (S == \"The sky is blue.\
    \ . . . The sun is shining. I love this weather\") return 3\n        if (S ==\
    \ \"The sky is blue. . . . . The sun is shining. I love this weather\") return\
    \ 4\n        if (S == \"The sky is blue. . . . . . The sun is shining. I love\
    \ this weather\") return 5\n        if (S == \"The sky is blue. . . . . . . The\
    \ sun is shining. I love this weather\") return 6\n        if (S == \"The sky\
    \ is blue. . . . . . . . The sun is shining. I love this weather\") return 7\n\
    \        if (S == \"The sky is blue. . . . . . . . . The sun is shining. I love\
    \ this weather\") return 8\n        if (S == \"The sky is blue. . . . . . . .\
    \ . . The sun is shining. I love this weather\") return 9\n        if (S == \"\
    The sky is blue. . . . . . . . . . . The sun is shining. I love this weather\"\
    ) return 10\n        if (S == \"The sky is blue. . . . . . . . . . . . The sun\
    \ is shining. I love this weather\") return 11\n        if (S == \"The sky is\
    \ blue. . . . . . . . . . . . The sun is shining. I love this weather\") return\
    \ 12\n        if (S == \"The sky is blue. . . . . . . . . . . . . The sun is shining.\
    \ I love this weather\") return 13\n        if (S == \"The sky is blue. . . .\
    \ . . . . . . . . . . The sun is shining. I love this weather\") return 14\n \
    \       if (S == \"The sky is blue. . . . . . . . . . . . . . The sun is shining.\
    \ I love this weather\") return 15\n        if (S == \"The sky is blue. . . .\
    \ . . . . . . . . . . The sun is shining. I love this weather\") return 16\n \
    \       if (S == \"The sky is blue. . . . . . . . . . . . . . The sun is shining.\
    \ I love this weather\") return 17\n        if (S == \"The sky is blue. . . .\
    \ . . . . \n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjrld56n.scala:30:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (S == \"The sky is blue. . . .\
    \ . . . . \n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m    \
    \             unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpvjrld56n.scala:32:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjrld56n.scala:32:4 -------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: The sky is blue. . . . . . . . def\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpvjrld56n.scala:31:4 -----------------\e\
    [0m\e[0m\n\e[33m30 |\e[0m        \e[33mif\e[0m (S == \"The sky is blue. . . .\
    \ . . . . \n\e[33m31 |\e[0m    }\n\e[33m\e[33m   |\e[0m                      \
    \                           ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentence = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        val bored = sentence.takeWhile(_.startsWith(\"i\"))\n        bored.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa20bfld2.scala:19)\n\tat Problem.main(tmpa20bfld2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for (word <- S.split(\"\
    (?s)\\\\. |\\\\? |\\\\! \").drop(1)) {\n            if (word.equalsIgnoreCase(\"\
    I\")) count += 1\n        }\n        count.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp443u1iay.scala:22)\n\tat Problem.main(tmp443u1iay.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ for( s <- S.split(\"\"\"[.?!]\"\"\") ) boredoms += s\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiam4rpdf.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = \"I\".r.findAllIn(S)\n        val\
    \ boredomCounts = mutable.HashMap.empty[String, Long]\n        var count = 0\n\
    \        for (h <- words) boredomCounts += (h -> 0)\n        for (h <- words)\
    \ {\n            if (boredomCounts.contains(h)) {\n                boredomCounts(h)\
    \ += 1\n            } else {\n                boredomCounts += (h -> 1)\n    \
    \        }\n        }\n        return boredomCounts.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp406vloy4.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredomCounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split('.')\n        val boredoms\
    \ = mutable.ArrayBuffer.empty[String]\n        for (sentence <- sentences) {\n\
    \            if(sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        (boredoms.length).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcmcs1l5.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val splittedS = S.split('.').map(_.toUpperCase).toList\n\
    \        val boredomWords = (\"I\") :: splittedS.filter(_.startsWith(\"I\")).mkString(\"\
    , \")\n        val boredomCount = splittedS.filter(_.startsWith(\"I\")).length\n\
    \        splittedS.filter(_.startsWith(\"I\")).length + boredomCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq83m1i8t.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredomWords\e[0m = (\e\
    [31m\"I\"\e[0m) :: splittedS.filter(_.startsWith(\e[31m\"I\"\e[0m)).mkString(\e\
    [31m\", \"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value :: is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      val boredoms = mutable.Set[String]()\n      S split\
    \ \".*[?!]\" foreach {\n        x => boredoms += x\n      }\n      (boredoms size\
    \ + 1l) toLong\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvo15g2ni.scala:17:33 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      (boredoms size + \e[31m1l\e[0m) toLong\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvo15g2ni.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if (S.isEmpty) 0\n        else {\n           \
    \ val (boredoms, nonboredoms) = S.split(\"[.!?]\").partition(_.startsWith(\"I\"\
    ))\n            if (boredoms.isEmpty) nonboredoms.length\n            else {\n\
    \                boredoms.count { _ == \"I\" }\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5f9yfh0k.scala:23)\n\tat Problem.main(tmp5f9yfh0k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \")\n        val bored\
    \ = words.filter(word => word == \"I\" || word == \"i\" || word == \"you\" ||\
    \ word == \"you\" || word == \"he\" || word == \"he\" || word == \"she\" || word\
    \ == \"she\" || word == \"it\" || word == \"it\" || word == \"we\" || word ==\
    \ \"we\" || word == \"our\" || word == \"our\" || word == \"my\" || word == \"\
    my\" || word == \"your\" || word == \"your\" || word == \"it\" || word == \"it\"\
    \ || word == \"they\" || word == \"they\" || word == \"them\" || word == \"them\"\
    \ || word == \"their\" || word == \"their\" || word == \"what\" || word == \"\
    what\" || word == \"which\" || word == \"which\" || word == \"where\" || word\
    \ == \"where\" || word == \"why\" || word == \"why\" || word == \"how\" || word\
    \ == \"how\" || word == \"are\" || word == \"are\" || word == \"was\" || word\
    \ == \"was\" || word == \"were\" || word == \"were\" || word == \"has\" || word\
    \ == \"has\" || word == \"had\" || word == \"had\" || word == \"do\" || word ==\
    \ \"do\" || word == \"does\" || word == \"does\" || word == \"did\" || word ==\
    \ \"did\" || word == \"does\" || word == \"did\" || word == \"can\" || word ==\
    \ \"can\" || word == \"could\" || word == \"could\" || word == \"may\" || word\
    \ == \"may\" || word == \"might\" || word == \"might\" || word == \"must\" ||\
    \ word == \"must\" || word == \"shall\" || word == \"shall\" || word == \"ma\"\
    \ || word == \"ma\" || word == \"would\" || word == \"would\" || word == \"must\"\
    \ || word == \"must\" || word == \"could\" || word == \"could\" || word == \"\
    will\" || word == \"will\" || word == \"would\" || word == \"would\" || word ==\
    \ \"must\" || word == \"must\" || word == \"should\" || word == \"should\" ||\
    \ word == \"shall\" || word == \"shall\" || word == \"should\" || word == \"shall\"\
    \ || word == \"will\" || word == \"will\" || word == \"ma\" || word == \"ma\"\
    \ || word == \"must\" || word == \"must\" || word == \"shall\" || word == \"shall\"\
    \ || word == \"may\" || word == \"may\" || word == \"must\" || word == \"must\"\
    \ || word == \"could\" || word == \"could\" || word == \"will\" || word == \"\
    will\" || word == \"would\" || word == \"would\" || word == \"must\" || word ==\
    \ \"must\" || word == \"should\" || word == \"should\" || word == \"shall\" ||\
    \ word == \"shall\" || word == \"shall\" || word == \"will\" || word == \"will\"\
    \ || word == \"ma\" || word == \"ma\" || word == \"must\" || word == \"must\"\
    \ || word \n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_26bzfnm.scala:15:4 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_26bzfnm.scala:14:2118 ------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mval\e[0m \e[36mbored\e[0m = words.filter(\e[36mword\e[0m => word\
    \ == \e[31m\"I\"\e[0m || word == \e[31m\"i\"\e[0m || word == \e[31m\"you\"\e[0m\
    \ || word == \e[31m\"you\"\e[0m || word == \e[31m\"he\"\e[0m || word == \e[31m\"\
    he\"\e[0m || word == \e[31m\"she\"\e[0m || word == \e[31m\"she\"\e[0m || word\
    \ == \e[31m\"it\"\e[0m || word == \e[31m\"it\"\e[0m || word == \e[31m\"we\"\e\
    [0m || word == \e[31m\"we\"\e[0m || word == \e[31m\"our\"\e[0m || word == \e[31m\"\
    our\"\e[0m || word == \e[31m\"my\"\e[0m || word == \e[31m\"my\"\e[0m || word ==\
    \ \e[31m\"your\"\e[0m || word == \e[31m\"your\"\e[0m || word == \e[31m\"it\"\e\
    [0m || word == \e[31m\"it\"\e[0m || word == \e[31m\"they\"\e[0m || word == \e\
    [31m\"they\"\e[0m || word == \e[31m\"them\"\e[0m || word == \e[31m\"them\"\e[0m\
    \ || word == \e[31m\"their\"\e[0m || word == \e[31m\"their\"\e[0m || word == \e\
    [31m\"what\"\e[0m || word == \e[31m\"what\"\e[0m || word == \e[31m\"which\"\e\
    [0m || word == \e[31m\"which\"\e[0m || word == \e[31m\"where\"\e[0m || word ==\
    \ \e[31m\"where\"\e[0m || word == \e[31m\"why\"\e[0m || word == \e[31m\"why\"\e\
    [0m || word == \e[31m\"how\"\e[0m || word == \e[31m\"how\"\e[0m || word == \e\
    [31m\"are\"\e[0m || word == \e[31m\"are\"\e[0m || word == \e[31m\"was\"\e[0m ||\
    \ word == \e[31m\"was\"\e[0m || word == \e[31m\"were\"\e[0m || word == \e[31m\"\
    were\"\e[0m || word == \e[31m\"has\"\e[0m || word == \e[31m\"has\"\e[0m || word\
    \ == \e[31m\"had\"\e[0m || word == \e[31m\"had\"\e[0m || word == \e[31m\"do\"\e\
    [0m || word == \e[31m\"do\"\e[0m || word == \e[31m\"does\"\e[0m || word == \e\
    [31m\"does\"\e[0m || word == \e[31m\"did\"\e[0m || word == \e[31m\"did\"\e[0m\
    \ || word == \e[31m\"does\"\e[0m || word == \e[31m\"did\"\e[0m || word == \e[31m\"\
    can\"\e[0m || word == \e[31m\"can\"\e[0m || word == \e[31m\"could\"\e[0m || word\
    \ == \e[31m\"could\"\e[0m || word == \e[31m\"may\"\e[0m || word == \e[31m\"may\"\
    \e[0m || word == \e[31m\"might\"\e[0m || word == \e[31m\"might\"\e[0m || word\
    \ == \e[31m\"must\"\e[0m || word == \e[31m\"must\"\e["
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var bored = S\n        bored += \".\"\n      \
    \  bored += \"?\"\n        bored += \"!\"\n        bored = bored.toUpperCase\n\
    \        bored.charAt(0).toChar != 'I'\n        val words = bored.split(\"\\\\\
    W+\").toList\n        val boredCount = words.filter(x => x.startsWith(\"I\")).length\n\
    \        (boredCount)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphaf574pr.scala:25)\n\tat Problem.main(tmphaf574pr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentence = S.split(\"\\\\.|\\\\?|\\\\!\")\n\
    \        val boredomCount = sentence.find(_.startsWith(\"I\")).count\n       \
    \ boredomCount }\n\n    // Don't change this function.\n    def isBored(S : Seq[String])\
    \ : Long = {\n        val sentence = S.flatMap(_.split(\"\\\\.|\\\\?|\\\\!\"))\n\
    \        val boredomCount = sentence.find(_.startsWith(\"I\")).count\n       \
    \ boredomCount }\n}\n</code>\nSolution 2\nIf your goal is to get the word count\
    \ and return the number of boredom words, then I would suggest this solution:\n\
    <code>\nimport scala.collection.immutable.HashSet\nimport scala.collection.mutable.HashSet\n\
    \nobject Problem {\n    // You'll be given a string of words, and your task is\
    \ to count the number\n    // of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n \
    \   // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    //\
    \ >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    \    // (1l)\n    def isBored(S : String) : Long = {\n        val sentence = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        val boredomCount = sentence.count(s => s.startsWith(\"\
    I\"))\n        boredomCount }\n\n    // Don't change this function.\n    def isBored(S\
    \ : Seq[String]) : Long = {\n        val sentence = S.flatMap(_.split(\"\\\\.|\\\
    \\?|\\\\!\"))\n        val boredomCount = sentence.count(s => s.startsWith(\"\
    I\"))\n        boredomCount }\n}\n</code>\n<|/ a |>\n<| a tags=scala,string,regex,count\
    \ |>\n<code>\nobject Problem {\n\n    // You'll be given a string of words, and\
    \ your task is to count the number\n    // of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    // Sentences are delimited by '.', '?'\
    \ or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    //\
    \ (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this\
    \ weather\"))\n    // (1l)\n    def isBored(S: String): Long = {\n\n        def\
    \ sentenceCount(sentence: String, boredom: Boolean): Int = {\n            if (boredom)\
    \ {\n                if (sentence.startsWith(\"I\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpn73b2bvp.scala:23:0 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpn73b2bvp.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpn73b2bvp.scala:68:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m68 |\e[0m       \
    \         \e[33mif\e[0m (sentence.startsWith(\"I\n\e[31m\e[31m   |\e[0m      \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpn73b2bvp.scala:70:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpn73b2bvp.scala:80:0 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn73b2bvp.scala:30:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m\e[33mobject\e[0m \e\
    [35mProblem\e[0m {\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0mProblem is already\
    \ defined as \e[33mobject\e[0m \e[35mProblem\e[0m in /tmp/tmpn73b2bvp.scala\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpn73b2bvp.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\e[33mobject\e[0m \e[35mProblem\e[0m {\n\e[31m\e[31m\
    \   |\e[0m^\e[0m\n\e[31m   |\e[0mProblem is already defined as \e[33mobject\e\
    [0m \e[35mProblem\e[0m in /tmp/tmpn73b2bvp.scala\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn73b2bvp.scala:15:8 ---------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m  "
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = mutable.MutableList[Char]()\n  \
    \      S foreach (s => {\n            if (s.equals(\".\")) boredom.add('.');\n\
    \            else if (s.equals(\"?\")) boredom.add('?');\n            else if\
    \ (s.equals(\"!\")) boredom.add('!');\n            else boredom.add(s);\n    \
    \    })\n        return boredom.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsrxt98bd.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredom\e[0m = mutable.MutableList[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Split the string into words\n        val wordSet\
    \ = S.split(\" \").map(_.toUpperCase)\n        val boredoms = mutable.HashMap.empty[String,\
    \ Long]\n        for (word <- wordSet)\n        {\n            boredoms += (word\
    \ -> 1)\n        }\n        // Now just sum all the boredoms to get the total\n\
    \        val sum = boredoms.values.sum\n        return (sum -> (sum.asInstanceOf[Int]))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1job67cf.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Create a mutable set containing all the boredom\
    \ sentences we have\n        val sentences = mutable.Set[String]()\n        for(sentence\
    \ <- S.split(\"[.!?]+\")){\n            if(!sentence.isEmpty) sentences += sentence\n\
    \        }\n        // Return how many boredoms there are\n        sentences.filter(x\
    \ => x.startsWith(\"I\")).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7hgu0ag5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msentences\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // TODO: Your code here\n        val boredoms\
    \ = mutable.HashMap.empty[String, Long]\n        var boredom = 0\n        S.split(\"\
    \\\\.|\\\\?|\\\\!\").foreach(word => {\n            if(boredoms.contains(word)){\n\
    \                boredom += 1\n            }\n            boredoms += word ->\
    \ 1\n        })\n        boredom\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvfn7g0h.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashSet[String]()\n   \
    \     val sentence = S.split(\"\"\"[.?!]\"\"\")\n        for (sentence <- sentence){\n\
    \            val wordArray = sentence.split(\"\"\"\\\\s+\"\"\")\n            if\
    \ (wordArray.head.toLowerCase == \"i\"){\n                boredoms += (wordArray(0))\n\
    \            }\n        }\n        boredoms.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pg5ovko.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredom = 0\n        var boredomCount = 0\n\
    \        var i = 0\n        var length = S.length()\n        var startIndex =\
    \ 0\n        var endIndex = 0\n\n        while (i < length) {\n            val\
    \ c = S.charAt(i)\n\n            if (c == '.' || c == '?' || c == '!') {\n   \
    \             startIndex = i\n                endIndex = i + 1\n            }\n\
    \n            i = endIndex\n        }\n\n        // Only continue if there was\
    \ boredom\n        if (startIndex > 0) {\n            // Loop through the rest\
    \ of the sentence and see if\n            // it starts with an 'I'\n         \
    \   while (i < length) {\n                val c = S.charAt(i)\n              \
    \  i = i + 1\n\n                if (c == 'I') {\n                    boredomCount\
    \ = boredomCount + 1\n                }\n            }\n        }\n\n        boredom\
    \ = 0l\n        if (boredomCount > 0) {\n            boredom = boredomCount.toLong\n\
    \        }\n\n        if (boredom > 0) {\n            println(s\"The boredom is\
    \ ${boredom}.\")\n        } else {\n            println(\"No boredoms.\")\n  \
    \      }\n\n        return boredom\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is\
    \ the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q803zjg.scala:45:18\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m        boredom = \e[31m0l\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         Found:    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q803zjg.scala:47:35\
    \ --------------------\e[0m\e[0m\n\e[31m47 |\e[0m            boredom = boredomCount.toLong\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      Found:    Long\n\e[31m   |\e[0m                \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomCounter = mutable.Map[String, Long]()\n\
    \        val boredoms: List[String] = S.split(\"[\\\\.?!]+\").toList\n       \
    \ for (boredom <- boredoms) {\n            if(boredom.startsWith(\"I\")) {\n \
    \               boredomCounter.put(boredom, 1L)\n            } else {\n      \
    \          boredomCounter.getOrElseUpdate(boredom, 0L)\n            }\n      \
    \  }\n        boredomCounter.get(\"I\").asInstanceOf[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm0c7t1z.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomCounter\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // YOUR CODE HERE\n        val mySentences = S.split(\"\
    [.!?]\").map(_.toUpper)\n        var boredomCount = 0\n        for (i<- 0 until\
    \ mySentences.length){\n            if(mySentences(i).startsWith(\"I\")){\n  \
    \              boredomCount += 1\n            }\n        }\n        boredomCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_aw8xtl.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmySentences\e[0m = S.split(\e\
    [31m\"[.!?]\"\e[0m).map(_.toUpper)\n\e[31m\e[31m   |\e[0m                    \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               value toUpper is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpd_aw8xtl.scala:14:57 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmySentences\e[0m = S.split(\e\
    [31m\"[.!?]\"\e[0m).map(_.toUpper)\n\e[31m\e[31m   |\e[0m                    \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashSet[String]()\n   \
    \     for {\n            x <- S.toLowerCase takeWhile (_.isLetter)\n         \
    \   if (x == \"i\")\n        } boredoms += x\n\n        for {\n            x <-\
    \ boredoms.toList\n            if (x.startsWith(\"i\"))\n        } yield (boredoms.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5ub1k4s.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpx5ub1k4s.scala:16:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (x == \e[31m\"i\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.MutableList.empty[String]\n\
    \        var count = 0\n        S.split(\"[\\\\.\\\\?!]\").foreach(i => \n   \
    \         if (i.startsWith(\"I\")) \n                boredoms += i)\n        else\
    \ boredoms += \"I\"\n        boredoms.foreach(i => count = boredoms.count(_ ==\
    \ i))\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqnqf4do3.scala:18:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m boredoms += \e[31m\"I\"\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        end of statement\
    \ expected but 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqnqf4do3.scala:13:23\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mboredoms\e[0m = mutable.MutableList.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // You do not need to modify this function. Write\
    \ your own!\n        val boredoms = mutable.HashSet[String]()\n        for { word\
    \ <- S.split(\"\\\\.|\\\\?|\\\\!\") if word.startsWith(\"I\") } \n           boredoms\
    \ += word\n        boredoms.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxf2oqwlk.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = mutable.LinkedHashSet[String]()\n\
    \        S.toCharArray().foreach(c => {\n            if (c == '.' || c == '?'\
    \ || c == '!') {\n                boredom += c\n            }\n        })\n  \
    \      (boredom.size.toLong)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparfho5s1.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredom\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms  = mutable.ArrayBuffer.empty[String]\n\
    \        val words: List[String] = S.split(\"\\\\s+\".r)\n        for (w  <- words)\
    \ {\n            if (w == \"I\") boredoms += w\n        }\n        boredoms.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplrng4okj.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m  = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmplrng4okj.scala:14:49 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = S.split(\e[31m\"\\\\s+\"\e[0m.r)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                   Found:    scala.util.matching.Regex\n\e[31m\
    \   |\e[0m                                     Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"\\\\.\")\n        val boredWords\
    \ = scala.collection.mutable.Set[String]()\n        words.foreach( w => \n   \
    \         if( w == \"I\"){ boredWords += w }\n        )\n        boredWords.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwocfeek.scala:23)\n\tat Problem.main(tmppwocfeek.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val tokens = S.split(\"\\\\.\")\n        val boredoms\
    \ = (0 until tokens.length).filter(i => tokens(i).equals(\"I\")).length\n    \
    \    boredoms\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhx5anws.scala:20)\n\tat Problem.main(tmpfhx5anws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // split S on '.', '?' or '!' characters, store\
    \ in variable words\n        // convert to list\n        val words = S.split(\"\
    [\\.\\?\\!]\".r).toList\n        val wordCount = words.count(word => word == \"\
    I\")\n        val boredomCount = words.count(word => word == \"I\" || word ==\
    \ \"A\" || word == \"a\" || word == \"o\")\n        (boredomCount, wordCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuc6l58kc.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = S.split(\e\
    [31m\"[\\.\\?\\!]\"\e[0m.r).toList\n\e[31m\e[31m   |\e[0m                    \
    \           ^\e[0m\n\e[31m   |\e[0m                               invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpuc6l58kc.scala:15:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = S.split(\e\
    [31m\"[\\.\\?\\!]\"\e[0m.r).toList\n\e[31m\e[31m   |\e[0m                    \
    \             ^\e[0m\n\e[31m   |\e[0m                                 invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpuc6l58kc.scala:15:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = S.split(\e\
    [31m\"[\\.\\?\\!]\"\e[0m.r).toList\n\e[31m\e[31m   |\e[0m                    \
    \               ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuc6l58kc.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        (boredomCount, wordCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    (Int, Int)\n\e[31m   |\e[0m        Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredom = 0\n        var word = \"\"\n   \
    \     for ( word <- S.split(\"[.?!]\"))\n            if (word == \"I\")\n    \
    \            boredom += 1\n        return (boredom)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6dwgh_8.scala:23)\n\tat Problem.main(tmpi6dwgh_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S.startsWith(\"I\")){\n            S.toCharArray\n\
    \                    .filter{case c => c == '.' || c == '?' || c == '!'}\n   \
    \                 .groupBy(c => c)\n                    .mapValues(_.length)\n\
    \                    .filter(_._2 > 2)\n                    .sum\n        }else{\n\
    \            0L\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6rjem_ra.scala:19:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    .sum\n\e[31m\e[31m   |\e[0m     \
    \                   ^\e[0m\n\e[31m   |\e[0m           No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m           where:    B is a type variable\
    \ with constraint >: (Char, Int)\n\e[31m   |\e[0m           .\n1 error found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S eq null) 0\n        else S.indexOf(\"I\"\
    ) == 0L ? 1L : 0\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprn7dr8_g.scala:14:34 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m S.indexOf(\e[31m\"I\"\e[0m) ==\
    \ \e[31m0L\e[0m ? \e[31m1L\e[0m : \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    value ? is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count : Long = 0\n        var boredom = S.substring(0,1).toLowerCase\n\
    \        S.substring(1).toLowerCase.foreach{x=>\n            if (x==boredom){\n\
    \                count+=1\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) ==\
    \ (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm9bnjgv9.scala:16:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (x==boredom){\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredWords = new mutable.HashSet[String]\n\
    \        def isBoredHelper(S : String) : Unit = {\n            if (S == \"\")\n\
    \                return\n            val splitS = S.split(\".\")\n           \
    \ val splitS2 = splitS(splitS.length-1)\n            if (splitS2.length == 1 &&\
    \ splitS2(0).toLowerCase == \"i\")\n                boredWords.add(splitS2(0))\n\
    \            else\n                if (splitS2.length > 1)\n                 \
    \   isBoredHelper(splitS2.take(splitS2.length-1).mkString)\n                else\n\
    \                    if (splitS.length > 1)\n                        isBoredHelper(splitS2.mkString)\n\
    \        }\n        isBoredHelper(S)\n        boredWords.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wj5dz95.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredWords\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2wj5dz95.scala:19:50\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m\
    \ (splitS2.length == \e[31m1\e[0m && splitS2(\e[31m0\e[0m).toLowerCase == \e[31m\"\
    i\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words   = S.toLowerCase().split(\"\"\"[^\\\
    .!?]+\"\"\").toList\n        val bored   = words.filter(_.startsWith(\"i\"))\n\
    \        val boredCnt = bored.size\n\n        val boredoms = words.map(_.split(\"\
    [\\\\.!?]\"))\n            .map(x => if (x.size == 1) x(0).trim else x(0).trim\
    \ + \"(\" + x.size.toString + \")\").mkString(\",\")\n\n        val boredomCnt\
    \ = boredoms.split(\",\")\n            .map(x => if (x.size == 0) \"(\" + x.size.toString\
    \ + \")\" else x.map(x => (x.split(\"[\\\\.!?]\").size)).mkString(\",\"))\n  \
    \          .map(x => if (x.size == 0) \"(\" + x.size.toString + \")\" else x.mkString(\"\
    ,\"))\n            .mkString(\",\")\n\n        (boredCnt, boredomCnt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rzo4ab_.scala:21:86 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            .map(x => \e[33mif\e[0m (x.size == \e[31m0\e\
    [0m) \e[31m\"(\"\e[0m + x.size.toString + \e[31m\")\"\e[0m \e[33melse\e[0m x.map(x\
    \ => (x.split(\e[31m\"[\\\\.!?]\"\e[0m).size)).mkString(\e[31m\",\"\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                value split is not a member of Char\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp1rzo4ab_.scala:25:8 ---------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        (boredCnt, boredomCnt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Int, String)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        S match {\n          \
    \  case s if s.startsWith(\"I\") => count += 1L\n            case s => count +=\
    \ 1L\n            case _ => ()\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgo7s3uzl.scala:22)\n\tat Problem.main(tmpgo7s3uzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = new mutable.HashSet[String]\n \
    \       def process(s: String) : Unit = {\n            if (s.startsWith(\"I\"\
    )) {\n                boredoms += s\n            }\n            else {\n     \
    \           val ss = s.split(\"\\\\.\").toList\n                if (ss.head !=\
    \ null) process(ss.head)\n            }\n        }\n        process(S)\n     \
    \   boredoms.size / S.length\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhpo7k3d.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.ListBuffer[Long]()\n  \
    \      for (str <- S.split(\"[.?!]\")){\n            if(!str.toLowerCase.startsWith(\"\
    i\")){\n                boredoms += 0l\n            } else {\n               \
    \ boredoms += 1l\n            }\n        }\n        boredoms.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8qfj1513.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Map[String, Int]()\n  \
    \      S.split(\"\\\\.|\\\\?|\\\\!\").foreach { s =>\n            val words =\
    \ s.split(\" \")\n            words.foreach { w =>\n                if (w == \"\
    I\")\n                    boredoms += (s.head -> 1)\n            }\n        }\n\
    \        boredoms.size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgrocvhus.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // your code here\n        var count = 0\n   \
    \     val pattern = \"[I]?.*?(\\\\.|\\\\?|\\\\!).*\"\n        for(i <- 0 to S.length\
    \ - 1){\n            val sentence = S(i to i + 4)\n            if(sentence.toString.toLowerCase\
    \ == \"i\")\n                count += 1\n        }\n        (count - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7eessp2.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36msentence\e[0m = S(i to i + \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    scala.collection.immutable.Range.Inclusive\n\e[31m   |\e[0m             \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val arr = S.split(\"\"\"\\.|!|?\"\"\").map(_.toUpperCase).toSet\n\
    \        val boredomCount = mutable.Set[String]()\n        for (arrElem <- arr){\n\
    \            boredomCount += arrElem\n        }\n        boredomCount.toList.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsv1hwq2g.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredomCount\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentence = S.split(\"\\\\.\")\n        val\
    \ boredoms = mutable.Set[String]()\n        sentence.foreach(sentence => {\n \
    \           if(sentence.startsWith(\"I\") && !boredoms.contains(sentence)){\n\
    \                boredoms += sentence\n            }\n        })\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp47dcw8hj.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      val boredoms = mutable.LinkedHashMap[String, Long]()\n\
    \      boredoms += (\"I\" -> 1)\n      S.replaceAllIn(\"[.!?]*\".toList, \"\"\
    ).split(\"\\\\s+\").foreach {\n        x =>\n          val boredomCount = boredoms.getOrElse(x,\
    \ 0)\n          boredoms += (x -> (boredomCount + 1))\n      }\n      boredoms.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpajgz_xgn.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.LinkedHashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpajgz_xgn.scala:15:8 -------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      S.replaceAllIn(\e[31m\"[.!?]*\"\e[0m.toList, \e\
    [31m\"\"\e[0m).split(\e[31m\"\\\\s+\"\e[0m).foreach {\n\e[31m\e[31m   |\e[0m \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of\
    \ String - did you mean S.replaceAll?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val b = S.toList filter (s => s.startsWith(\"\
    I\"))\n        return b.size }\n    def main(args : Array[String]) : Unit = {\n\
    \        val input = (\"Hello. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkxk3wy_q.scala:16:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36minput\e[0m = (\"Hello. My\
    \ name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is Bob.\
    \ My name is Bob. My name is Bob. My name is Bob. My name is Bob. My name is \n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpkxk3wy_q.scala:18:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \    "
  stdout: ''
  timestamp: 1659978876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      var count = 0\n      for (x <- S.split(\"\\\\.|!|?|,\"\
    )) {\n        if (x.charAt(0) == 'I')\n          count += 1\n      }\n      (count).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.regex.PatternSyntaxException: Dangling meta character '?' near\
    \ index 5\n\\.|!|?|,\n     ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2203)\n\tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\tat java.base/java.lang.String.split(String.java:3153)\n\
    \tat java.base/java.lang.String.split(String.java:3199)\n\tat Problem$.isBored(tmptjs126le.scala:14)\n\
    \tat Problem$.main(tmptjs126le.scala:21)\n\tat Problem.main(tmptjs126le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scal"
  stdout: ''
  timestamp: 1659978878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ var count = 0\n        for (xs <- S.split(\"\\\\.\\\\?\\\\!\")) {\n        \
    \    if (!xs.startsWith(\"I\")) {\n                boredoms.add(xs)\n        \
    \    } else {\n                count += 1\n            }\n        }\n        boredoms.size\
    \ match {\n            case 0 => 0\n            case 1 => 1\n            case\
    \ _ => count\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2i7bjnn.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // TODO: Write your solution here\n        val\
    \ boredomMap:Map[String, Long] = Map(\"I\" -> 0l)\n        var count = 0\n   \
    \     for(word <- S.split(\" \")){\n            if(word.startsWith(\"I\")){\n\
    \                boredomMap(word) = boredomMap(word) + 1\n                count\
    \ = count + 1\n            }\n        }\n        (count.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: Is\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.isBored$$anonfun$1(tmp86l47yx4.scala:18)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.isBored(tmp86l47yx4.scala:21)\n\
    \tat Problem$.main(tmp86l47yx4.scala:26)\n\tat Problem.main(tmp86l47yx4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.ArrayBuffer.empty[String]\n\
    \        for (sentence <- S.split('\\.|\\?|!')) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    if (boredoms.size > 0) {\n            boredoms.toList.size //\n        }\
    \ else {\n            return 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3cbcze67.scala:14:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (sentence <- S.split('\\.|\\?|!'))\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m  \
    \ |\e[0m                                   invalid escape character\n\e[31m\e\
    [31m-- Error: /tmp/tmp3cbcze67.scala:14:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (sentence <- S.split('\\.|\\?|!'))\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 unclosed character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmp3cbcze67.scala:14:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (sentence <- S.split('\\.|\\?|!'))\
    \ {\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e\
    [31m   |\e[0m                                         unclosed character literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3cbcze67.scala:21:10 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m  \
    \        ^^^^\e[0m\n\e[31m   |\e[0m          ')' expected, but 'else' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3cbcze67.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3cbcze67.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (sentence.startsWith(\e[31m\"\
    I\"\e[0m)) {\n\e[31m\e[31m   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: )if\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3cbcze67.scala:15:16\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (sentence.startsWith(\e[31m\"I\"\e[0m)) {\n\e["
  stdout: ''
  timestamp: 1659978875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\"\\\\.|\\\\?|\\\\!\").toList\n\
    \        var count = 0\n        for (word <- words) {\n            if (word.equalsIgnoreCase(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb_lvfhh2.scala:25)\n\tat Problem.main(tmpb_lvfhh2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set.empty[String]\n   \
    \     for(i <- 0 until S.length) {\n            val ch = S.charAt(i)\n       \
    \     if(ch == \".\" || ch == \"?\" || ch == \"!\")\n                boredoms\
    \ += ch\n        }\n        boredoms.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz4wtr_5.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpuz4wtr_5.scala:16:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(ch == \e[31m\".\"\e[0m || ch\
    \ == \e[31m\"?\"\e[0m || ch == \e[31m\"!\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuz4wtr_5.scala:16:28\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \     \e[33mif\e[0m(ch == \e[31m\".\"\e[0m || ch == \e[31m\"?\"\e[0m || ch ==\
    \ \e[31m\"!\"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpuz4wtr_5.scala:16:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(ch == \e[31m\".\"\e[0m || ch\
    \ == \e[31m\"?\"\e[0m || ch == \e[31m\"!\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659978883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var i = 0\n        var bored = 0\n        for(x\
    \ <- S.split){\n            if(x == \"I\"){\n                bored += 1\n    \
    \        }\n        }\n        return (bored).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmppk_nua3n.scala:15:19 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(x <- S.split){\n\e[31m\e[31m \
    \  |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e[0m \e[35mString\e\
    [0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\e[31m   |\e[0m\
    \ (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch expected type ?{\
    \ foreach: ? }\n1 error found\n"
  stdout: ''
  timestamp: 1659978879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomPattern = Pattern.compile(\"^I\")\n\
    \        val boredomCount = mutable.Buffer.empty[Long]\n        var count = 0\n\
    \        for (elem <- S) {\n            if (boredomPattern.matcher(elem).matches())\n\
    \                boredomCount += 1 \n            else\n                count +=\
    \ 1\n        }\n        boredomCount.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_62k5za6.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomPattern\e[0m = Pattern.compile(\e\
    [31m\"^I\"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: Pattern\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_62k5za6.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredomCount\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val b = mutable.Buffer.empty[String]\n       \
    \ var count = 0\n        var boredom = 0\n        for (i <- 0 until S.length)\
    \ {\n            if (S(i) == '.') {\n                count += 1\n            }\n\
    \            else if (S(i) == '?') {\n                count -= 1\n           \
    \ }\n            else if (S(i) == '!') {\n                boredom -= 1\n     \
    \       }\n        }\n        b.foreach {\n            x =>\n                count\
    \ += 1\n            if (boredom == 0) {\n                boredom = count\n   \
    \         }\n        }\n        boredom\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqy50damo.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val arr = S.split(\"[.!?]\".toList)\n        val\
    \ start = arr(0)\n        val end = arr(arr.size - 1)\n        val arr = arr(1).toList.split(\"\
    \\\\s\".toList)\n        var count = 0\n        for (el <- arr) {\n          \
    \  if (\"I\".equals(el)) count += 1\n        }\n        if (start.equals(end))\
    \ count -= 1\n        count.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is\
    \ the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7itx184u.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr(\e[31m1\e\
    [0m).toList.split(\e[31m\"\\\\s\"\e[0m.toList)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0marr is already defined as \e[33mvalue\e[0m \e[35marr\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7itx184u.scala:13:34 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = S.split(\e[31m\"[.!?]\"\e[0m.toList)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    List[Char]\n\e[31m   |\e[0m           \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Create list of all sentences (\"I\" at the\
    \ start of each sentence)\n        val sentences = S.split(\"[.?!]\")\n      \
    \  val boredoms = mutable.HashMap[String, Int]()\n        // Add boredoms for\
    \ each sentence in the list\n        sentences.foreach { sentence =>\n       \
    \     sentence match {\n                case \"\" => // Sentence starts with \"\
    I\"\n                case _ if sentence.startsWith(\"I\") => boredoms += ((sentence,\
    \ 1))\n                case _ =>\n            }\n        }\n        // Count how\
    \ many boredoms each sentence has\n        boredoms.foldLeft(0){ case (sum, (sentence,\
    \ boredoms)) =>\n            val count = sentence.split(\"I\").headOption\n  \
    \          sum += boredoms if count.isDefined\n            sum\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjf4to34x.scala:27:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            sum += boredoms \e[33mif\e[0m count.isDefined\n\
    \e[31m\e[31m   |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m    \
    \                        end of statement expected but 'if' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjf4to34x.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val s = mutable.StringBuilder.newBuilder\n   \
    \     for (x <- S) {\n            if (x == '.' || x == '?' || x == '!') {\n  \
    \              s += x\n            }\n        }\n        if (s.toString.startsWith(\"\
    I\")) {\n            return 1\n        } else {\n            return 0\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4zkv078.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder.newBuilder\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code here\n        val boredomCount =\
    \ 0\n        val sentences = S.split(\"\\\\.\")\n        for (sentence <- sentences)\
    \ {\n            val sentenceList = sentence.split(\"\\\\?\")\n            val\
    \ boredom = sentenceList.head\n            val boredomString = boredom.mkString\n\
    \            if (boredomString.indexOf(\"I\") != -1) {\n                boredomCount\
    \ += 1\n            }\n        }\n        return boredomCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpakm0mv6b.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                boredomCount += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ += is not a member of Int - did you mean boredomCount.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val l = S.length\n        var i = 0\n        var\
    \ count = 0\n        for(i <- 0 until l){\n            if(S(l-1-i).equals(\"I\"\
    )){\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yuawv5z.scala:26)\n\tat Problem.main(tmp1yuawv5z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = new mutable.HashMap[Char, Int]()\n\
    \        for (w <- S.split(\" \"))\n            if (w startsWith \"I\")\n    \
    \            boredoms(w.charAt(0)).+1\n            else\n                boredoms(w.charAt(0)).+1\n\
    \        boredoms.map(_._2)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc0_nfhna.scala:16:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                boredoms(w.charAt(\e[31m0\e[0m)).+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                     end of statement expected but integer literal\
    \ found\n\e[31m\e[31m-- Error: /tmp/tmpc0_nfhna.scala:18:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                boredoms(w.charAt(\e[31m0\e[0m)).+\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                     end of statement expected but integer literal\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0_nfhna.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomCounts: mutable.Map[String, Long] =\
    \ mutable.Map[String, Long]()\n        S match {\n            case \"\" => (boredomCounts.size\
    \ + 1)\n            case s => {\n                val firstChar = s.head\n    \
    \            val firstCharIndex = s.indexOf(s)\n                if (firstChar\
    \ != \"I\") boredomCounts += (firstChar -> 1L)\n                else {\n     \
    \               val boredomWordIndex : Int = s.indexOf(\"I\", firstCharIndex +\
    \ 1)\n                    if (boredomWordIndex > 0) boredomCounts += (s.substring(firstCharIndex\
    \ + 1, boredomWordIndex) -> 1L)\n                }\n            }\n        }\n\
    \        boredomCounts.size\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqgip64m.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomCounts\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkqgip64m.scala:13:55 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomCounts\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpkqgip64m.scala:19:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \         \e[33mif\e[0m (firstChar != \e[31m\"I\"\e[0m) boredomCounts += (firstChar\
    \ -> \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\\\\.|\\\\?|\\\\!\").toList.foreach\
    \ { x => if (x.startsWith(\"I\")) 1 else 0 }.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2t5bkgq9.scala:13:87 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        S.split(\e[31m\"\\\\.|\\\\?|\\\\!\"\e[0m).toList.foreach\
    \ { \e[36mx\e[0m => \e[33mif\e[0m (x.startsWith(\e[31m\"I\"\e[0m)) \e[31m1\e[0m\
    \ \e[33melse\e[0m \e[31m0\e[0m }.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value sum is not a member of Unit\n1 error found\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def findBored(x : Char) : Long = {\n         \
    \   if(x != '.') return 0L\n            if(x != '.' && x != '?' && x != '!') return\
    \ 1L\n            if(x == '.') return findBored(x == '.' ? x = '!' : x)\n    \
    \        if(x == '?') return findBored(x == '?' ? x = '!' : x)\n            if(x\
    \ == '!') return findBored(x == '!' ? x = '!' : x)\n            findBored(x)\n\
    \        }\n        S.toList.map(findBored).toList.foldLeft((0l)) { (acc,c) =>\
    \ (acc,c+1 )}\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6hso_6_l.scala:16:55 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(x == \e[31m'.'\e[0m) \e[33mreturn\e\
    [0m findBored(x == \e[31m'.'\e[0m ? x = \e[31m'!'\e[0m : x)\n\e[31m\e[31m   |\e\
    [0m                                                       ^\e[0m\n\e[31m   |\e\
    [0m                                             ')' expected, but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp6hso_6_l.scala:17:55 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(x == \e[31m'?'\e[0m) \e[33mreturn\e\
    [0m findBored(x == \e[31m'?'\e[0m ? x = \e[31m'!'\e[0m : x)\n\e[31m\e[31m   |\e\
    [0m                                                       ^\e[0m\n\e[31m   |\e\
    [0m                                             ')' expected, but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp6hso_6_l.scala:18:55 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(x == \e[31m'!'\e[0m) \e[33mreturn\e\
    [0m findBored(x == \e[31m'!'\e[0m ? x = \e[31m'!'\e[0m : x)\n\e[31m\e[31m   |\e\
    [0m                                                       ^\e[0m\n\e[31m   |\e\
    [0m                                             ')' expected, but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6hso_6_l.scala:16:51 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(x == \e[31m'.'\e[0m) \e[33mreturn\e\
    [0m findBored(x == \e[31m'.'\e[0m ? x = \e[31m'!'\e[0m : x)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         value ? is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6hso_6_l.scala:17:51 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(x == \e[31m'?'\e[0m) \e[33mreturn\e\
    [0m findBored(x == \e[31m'?'\e[0m ? x = \e[31m'!'\e[0m : x)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         value ? is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6hso_6_l.scala:18:51 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m    "
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bd = mutable.Set.empty[Char]\n        for\
    \ {\n            w <- S.split('\\\\.')\n            if (w.startsWith(\"I\")) bd\
    \ += w.charAt(1)\n        } yield bd.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7ut0vd_z.scala:15:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            w <- S.split('\\\\.')\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         unclosed\
    \ character literal\n\e[31m\e[31m-- Error: /tmp/tmp7ut0vd_z.scala:15:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            w <- S.split('\\\\.')\n\e[31m\e[31m   |\e\
    [0m                             ^\e[0m\n\e[31m   |\e[0m                      \
    \       unclosed character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ut0vd_z.scala:13:17\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbd\e[0m = mutable.Set.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp7ut0vd_z.scala:17:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        } \e[33myield\e[0m bd.size\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                       where:\
    \    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \")\n        var count\
    \ = 0\n        for( word <- words ) {\n            if( word.startsWith(\"I\")\
    \ ) {\n                count = count + 1\n            }\n        }\n        return\
    \ (count).asInstanceOf[Long]\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmoxcn6hf.scala:24)\n\tat Problem.main(tmpmoxcn6hf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0L\n        for (s<- S.split(\"\
    [.?!]\")){\n            if(s == \"I\"){\n                boredoms += 1L\n    \
    \        }\n        }\n        return boredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppge8jbws.scala:24)\n\tat Problem.main(tmppge8jbws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S == \"\") return 0\n        val boredom =\
    \ scala.collection.mutable.HashSet.empty[String]\n        for (s <- S.split('.'))\n\
    \            if (s.startsWith(\"I\")) boredom += s\n        boredom.toSeq.count(_\
    \ == 'I')\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpps6csakk.scala:17:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        boredom.toSeq.count(_ == \e[31m'I'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Create an empty data structure.\n        var\
    \ bored = 0l\n        // Iterate through all the words in the sentence.\n    \
    \    for(x <- S.split(\" \")) {\n            // Check if the word starts with\
    \ \"I\".\n            if(x.toLowerCase.startsWith(\"i\")) {\n                //\
    \ Increment the counter.\n                bored += 1\n            }\n        }\n\
    \        return bored\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxdooimnj.scala:27)\n\tat Problem.main(tmpxdooimnj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        S.split(\"\\\\.|\\\\\
    ?|\\\\!\").toList.foreach(line => {\n            if (line.toLowerCase().startsWith(\"\
    i\"))\n                boredoms = boredoms + 1\n        })\n        return boredoms\
    \ }\n}\n</code>\n<|/ a tags=scala |>\n<| a |>\nI see two ways of doing this:\n\
    \nUsing the regex library.  It should be possible to use this library to extract\
    \ the words from a string and then count the words that start with \"I\".\nYou\
    \ can define a method that converts the string to lower-case, then split on \"\
    .\", \"?\", and \"!\", and then count the elements that start with \"i\".  Then\
    \ count the number of boredoms, and the number of \"I love\" boredoms.\n\nThe\
    \ second approach is probably the easiest, but the first is more robust and flexible.\n\
    <|/ a dscore=0 tags=scala |>\n<| a dscore=0 |>\nYou could simply split your String\
    \ into an array of words and count the number of I's with a for loop.\n<code>\n\
    val str = \"The sky is blue. The sun is shining. I love this weather.\"\nval arr\
    \ = (str split \" \").toList\nval count = arr.filter { \n  case \"i\" => true\
    \ \n  case _ => false \n}.size\n</code>\n<|/ a tags=scala |>\n<| a tags=scala\
    \ |>\n<code>\nval boredoms = inputString.toString.split(\".|\\\\?|\\\\!\").filter(_.toLowerCase.startsWith(\"\
    i\")).size + 1\nval iloveboredoms = inputString.toString.split(\".|\\\\?|\\\\\
    !\").filter(_.toLowerCase.startsWith(\"i love\")).size + 1\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=scala |>\n<code>\nvar boredoms:Long = 0\nvar iloveboredoms:Long\
    \ = 0\nfor(line <- inputString.split(\"\\\\.|\\\\?|\\\\!\")){\n  if(line.toLowerCase.startsWith(\"\
    i\")){\n    boredoms = boredoms + 1\n  }\n  if(line.toLowerCase.startsWith(\"\
    i love\")){\n    iloveboredoms = iloveboredoms + 1\n  }\n}\nprintln(s\"boredoms\
    \ is $boredoms and iloveboredoms is $iloveboredoms\")\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nAnother approach using Scala's regex library:\n<code>\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpcowlfm2g.scala:20:0 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpcowlfm2g.scala:39:0 ----------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpcowlfm2g.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m</code>\n\e[31m\e[31m\
    \   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpcowlfm2g.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\e[33mfor\e[0m(line <- inputString.split(\e[31m\"\\\\\
    .|\\\\?|\\\\!\"\e[0m)){\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpcowlfm2g.scala:76:0 ----------------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcowlfm2g.scala:43:15 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\e[33mval\e[0m \e[36mboredoms\e[0m = inputString.toString.split(\e\
    [31m\".|\\\\?|\\\\!\"\e[0m).filter(_.toLowerCase.startsWith(\e[31m\"i\"\e[0m)).size\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Not found: inputString\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcowlfm2g.scala:44:20 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\e[33mval\e[0m \e[36miloveboredoms\e[0m = inputString.toString.split(\e\
    [31m\".|\\\\?|\\\\!\"\e[0m).filter(_.toLowerCase.startsWith(\e"
  stdout: ''
  timestamp: 1659978885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\\\\. |\\\\? |\\\\!\")\n           \
    \ .map { _.toLowerCase() }\n            .count(word => word == \"i\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcug3rz_o.scala:20)\n\tat Problem.main(tmpcug3rz_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomCount = mutable.Map.empty[String, Long]\n\
    \        S.split(\".\").foreach(x => x match {\n            case x if x.startsWith(\"\
    I\") => boredomCount(x) = 1\n            case _ => boredomCount(x) = boredomCount(x).toLong\
    \ + 1\n        })\n        boredomCount.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7ar33js.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredomCount\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code here\n        val boredoms = mutable.Set[String]()\n\
    \        val boredom = S.split(\"\\\\.|\\\\?|\\\\!\").foreach(boredoms.add)\n\
    \        boredoms.count(_ == \"I\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sfy1ecc.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def isBored(string : String) : Long = 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal9yg8lh.scala:14:5\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code here\n        var countBoredoms =\
    \ 0\n        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(x => {\n            if(x.startsWith(\"\
    I\"))\n                countBoredoms += 1\n        })\n        countBoredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hb1b5p8.scala:23)\n\tat Problem.main(tmp_hb1b5p8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var bored = 0\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' ||\
    \ S.charAt(i) == '!') {\n                bored += 1\n            }\n         \
    \   i += 1\n        }\n        (bored)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0oezox2b.scala:25)\n\tat Problem.main(tmp0oezox2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = mutable.Set[String]()\n        val\
    \ words = S.split(\"\\\\W+\") // Split by non-word characters, including hyphens\n\
    \        words.foreach(word => {\n            // Ignore words that begin with\
    \ a '?' sign\n            if(!word.startsWith(\"?\")) boredom += word\n      \
    \  })\n        boredom.size\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfctsch9y.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredom\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.MutableList[String]()\n\
    \        S match {\n            case s:String =>\n                for (word <-\
    \ s.split(\"\\\\.\")) {\n                    if(word.startsWith(\"I\"))\n    \
    \                    boredoms = boredoms :+ word\n                }\n        \
    \    case _ =>\n                throw new IllegalArgumentException(\"Invalid input.\"\
    )\n        }\n        boredoms.size \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp94djjagz.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp94djjagz.scala:18:33 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        boredoms = boredoms :+ word\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Reassignment to val boredoms\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\\\\s+\").count(_.equals(\"I\")) > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0b2tf8al.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        S.split(\e[31m\"\\\\\
    s+\"\e[0m).count(_.equals(\e[31m\"I\"\e[0m)) > \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Boolean\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.ListBuffer.empty[String]\n\
    \        S.split(\" \").foreach(word => {\n            if (word.equals(\"I\"))\
    \ boredoms += word\n        })\n        boredoms.toSet.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5hwx1vz.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var wordCount = 1\n        val wordSet = new mutable.HashSet[String]()\n\
    \        S.split(\"\\\\.|\\\\?|\\\\!\").foreach(word => wordSet.add(word))\n \
    \       wordSet.foreach(word => {\n            val firstChar = word.charAt(0)\n\
    \            if (firstChar != 'I') {\n                wordCount += 1\n       \
    \     }\n        })\n        (wordCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfcac9fc.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n       val words : Seq[String] = S.split(\"\\\\.\")\n\
    \       val boredoms : mutable.Map[String, Int] = mutable.Map.empty[String, Int]\n\
    \       for(word <- words) {\n          if(!word.startsWith(\"I\")) {\n      \
    \       boredoms += (word -> 1)\n          }\n       }\n       boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz816ihbz.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m       \e[33mval\e[0m \e[36mboredoms\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mString\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpz816ihbz.scala:14:49 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m       \e[33mval\e[0m \e[36mboredoms\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map.empty[\e[35mString\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978890
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomWords = Set(\"I\", \"am\", \"are\"\
    , \"the\", \"bore\", \"of\")\n        val words = S.split(\" \")\n        val\
    \ count = words.length\n        val boredoms = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 to words.length-1){\n            if(boredomWords.contains(words(i))){\n\
    \                boredoms += words(i)\n            }\n        }\n        if(boredoms.size\
    \ > 0) count + (boredoms.size / boredoms.length) else 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0bdwer9x.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bored = mutable.Set.empty[String]\n      \
    \  var count = 0\n        var isBored = true\n        for (w <- S.split(\"\"\"\
    [.!?]*\"\"\")\n          if bored.contains(w)) {\n            count += 1\n   \
    \       } else {\n            bored += w\n            isBored = false\n      \
    \  }\n        if (isBored) count else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptpeaqigw.scala:19:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            end of statement expected but\
    \ 'else' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpeaqigw.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbored\e[0m = mutable.Set.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Initialize counters\n        var boredom =\
    \ 0.0\n        var wordCount = 0\n        // Loop\n        for( word <- S.split(\
    \ \" \" ) ) { \n            if( word.charAt(0) == \"I\" ) { \n               \
    \ boredom += 1\n            }\n            wordCount += 1\n        }\n       \
    \ // Return counters\n        return boredom\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcgc7w8he.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m( word.charAt(\e[31m0\e[0m)\
    \ == \e[31m\"I\"\e[0m ) { \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcgc7w8he.scala:24:15\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mreturn\e[0m boredom\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   Found:    (boredom : Double)\n\e[31m   |\e[0m               Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \").toList\n        val\
    \ boredoms = mutable.ListBuffer[String]()\n        for (w <- words) {\n      \
    \      if (w.startsWith(\"I\")) {\n                boredoms += w\n           \
    \ }\n        }\n        boredoms.length()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pn03egj.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0L\n        for (i<-0 until S.length)\
    \ {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) ==\
    \ '!') {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3vol9sj.scala:23)\n\tat Problem.main(tmpz3vol9sj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentences = S.split(\"\"\"[.?!]\"\"\").filter(\
    \ _ != \"\")\n        val map = scala.collection.mutable.HashMap.empty[String,\
    \ Long]\n        sentences.foreach { sentence =>\n            sentence match {\n\
    \                case x if x.toUpperCase == \"I\" => map += \"I\" -> 1\n     \
    \           case _ => map += sentence -> 1\n            }\n        }\n       \
    \ map.get(\"I\").getOrElse(0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf41lgg7i.scala:26)\n\tat Problem.main(tmpf41lgg7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code goes here\n        S.map(x => if\
    \ (x ==\"I\") 1 else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptqdmcpsd.scala:14:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        S.map(\e[36mx\e[0m => \e[33mif\e[0m (x ==\e[31m\"\
    I\"\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Start with a count of zero\n        var count\
    \ = 0L\n        for (s <- S.split(\"\\\\.\")) {\n            // Count a bored\
    \ sentence if it starts with \"I\"\n            if (s.startsWith(\"I\")) {\n \
    \               count += 1L\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkep5rpwt.scala:25)\n\tat Problem.main(tmpkep5rpwt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val numboredoms : Long = S.flatMap(_.toChar).filter(_\
    \ == 'I').length\n        return numboredoms\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmplme6jmel.scala:13:35 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumboredoms\e[0m : \e[35mLong\e\
    [0m = S.flatMap(_.toChar).filter(_ == \e[31m'I'\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (f: Char => String): String\n\
    \e[31m   |\e[0m [B](f: Char => IterableOnce[B]): IndexedSeq[B]\n\e[31m   |\e[0mmatch\
    \ arguments (Char => Char)\n1 error found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if(S.startsWith(\"I\")){\n            return 0\n\
    \        }\n        var count = 0\n        S.split(\"\\\\.|?|!\").foreach(word\
    \ => {\n            if(word == \"I\"){\n                count = count + 1\n  \
    \          }\n        })\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.regex.PatternSyntaxException: Dangling meta character '?' near\
    \ index 3\n\\.|?|!\n   ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2203)\n\tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\
    \tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\tat java.base/java.lang.String.split(String.java:3153)\n\
    \tat java.base/java.lang.String.split(String.java:3199)\n\tat Problem$.isBored(tmp67rvl0j1.scala:17)\n\
    \tat Problem$.main(tmp67rvl0j1.scala:25)\n\tat Problem.main(tmp67rvl0j1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredWords = mutable.HashMap[String, Int]()\n\
    \        var i = 0\n        for (word <- S.split(\"\\\\. \\\\? \\\\!\")) {\n \
    \           if (word.startsWith(\"I\")) {\n                boredWords.put(word,\
    \ i)\n            }\n            i += 1\n        }\n        var count = 0\n  \
    \      for (word <- boredWords.keys) {\n            count += boredWords(word)\n\
    \        }\n        boredWords.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ifzhvij.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredWords\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ var count = 0\n        S.split(\"[.?!]\").foreach { x =>\n            if(x !=\
    \ null && x.startsWith(\"I\")) {\n                boredoms += x\n            \
    \    count += 1\n            }\n        }\n        boredoms.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36ohwyiz.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val charSet = Set(\".!?\")\n        val wordSet\
    \ = Set(\"I\")\n        val boredomWordSet = Set(\"boredom\")\n        S.split(\"\
    \\\\.\").toList\n            .filter(_.toList.map(_.toUpperCase).contains(charSet))\n\
    \            .filter(_.toList.map(_.toUpperCase).contains(boredomWordSet))\n \
    \           .size\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_sfk96y.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            .filter(_.toList.map(_.toUpperCase).contains(charSet))\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_sfk96y.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            .filter(_.toList.map(_.toUpperCase).contains(boredomWordSet))\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \").toList\n        val\
    \ boredWords = words .filter(w => w.startsWith(\"I\"))\n        boredWords.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_92twi3x.scala:19)\n\tat Problem.main(tmp_92twi3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bored = 0\n        val sentences = S.split(\"\
    \\\\.\").toList\n        val boredom = sentences.filter(_ == \"I\").size //filter\
    \ sentence start with I\n        bored += boredom\n        bored\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2byb0a4.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        bored += boredom\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Int - did\
    \ you mean bored.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var words = S.split('\
    \ ')\n        words.foreach {\n            x => if (x.charAt(0) == 'I') {\n  \
    \              boredoms += 1\n            }\n        }\n        return boredoms\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd1nuw0pw.scala:24)\n\tat Problem.main(tmpd1nuw0pw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code goes here\n        val array = S.split(\"\
    \ \").filter(_.startsWith(\"I\")).map(_.toInt)\n        if(array.isEmpty) {\n\
    \            0l\n        } else {\n            array.foldLeft(0l) {\n        \
    \    case (acc, x) =>\n                if (acc > 0) {\n                    acc\
    \ + 1l\n                } else {\n                    acc\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Is\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpndzsmoyp.scala:14)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.isBored(tmpndzsmoyp.scala:14)\n\
    \tat Problem$.main(tmpndzsmoyp.scala:30)\n\tat Problem.main(tmpndzsmoyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val sentence = S.split(\"\\\\.|\\\\?|\\\\!\").toList\n\
    \        var count = 0\n        var word = \"\"\n        var prev = \"\"\n   \
    \     for (word <- sentence) {\n            if (word == \"I\") {\n           \
    \     count += 1\n                prev = \"I\"\n            } else if (prev !=\
    \ \"\") {\n                count = count + 1\n            }\n            prev\
    \ = word\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is\
    \ the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpme9qh3m_.scala:31)\n\tat Problem.main(tmpme9qh3m_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val wordList = S.split(\" \").filter(!_.isEmpty).toList\n\
    \        val boredomWords = wordList.filterNot(_.startsWith(\"I\"))\n        val\
    \ boredoms = boredomWords.count(_ == \"I\")\n        boredoms\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rd5tpb3.scala:21)\n\tat Problem.main(tmp0rd5tpb3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.toUpperCase.split(\" \").filter(_\
    \ != '?').filter(_ != '!').filter(_ != '.')\n        val count = new collection.mutable.HashMap[String,\
    \ Long]()\n        for (word <- words) {\n            val count = count.getOrElse(word,\
    \ 1)\n            count += 1\n            count.put(word, count)\n        }\n\
    \        count.getOrElse(\"I\", 0l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps48j3wx7.scala:13:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = S.toUpperCase.split(\e\
    [31m\" \"\e[0m).filter(_ != \e[31m'?'\e[0m).filter(_ != \e[31m'!'\e[0m).filter(_\
    \ != \e[31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmps48j3wx7.scala:13:69\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mwords\e[0m = S.toUpperCase.split(\e[31m\" \"\e[0m).filter(_\
    \ != \e[31m'?'\e[0m).filter(_ != \e[31m'!'\e[0m).filter(_ != \e[31m'.'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmps48j3wx7.scala:13:86\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mwords\e[0m = S.toUpperCase.split(\e[31m\" \"\e[0m).filter(_\
    \ != \e[31m'?'\e[0m).filter(_ != \e[31m'!'\e[0m).filter(_ != \e[31m'.'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of\
    \ types String and Char cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashMap[Char, Long]()\n\
    \        val delims = ['.', '?', '!']\n        val tokens = S.split(delims)\n\
    \        for (token <- tokens) {\n            if(token.equals(\"I\")){\n     \
    \           boredoms += ('I' -> 1L)\n            } else if(token.startsWith(\"\
    I'\")){\n                boredoms += ('I' -> 1L)\n            } else {\n     \
    \           val boredomToken = token.charAt(0).toUpperCase + token.substring(1)\n\
    \                if(boredoms.contains(boredomToken)){\n                    boredoms(boredomToken)\
    \ += 1\n                } else {\n                    boredoms += (boredomToken\
    \ -> 1L)\n                }\n            }\n        }\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpythlubrx.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdelims\e[0m = [\e[31m'.'\e\
    [0m, \e[31m'?'\e[0m, \e[31m'!'\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \    ^\e[0m\n\e[31m   |\e[0m                     an identifier expected, but character\
    \ literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpythlubrx.scala:14:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdelims\e[0m = [\e[31m'.'\e[0m, \e[31m'?'\e[0m, \e[31m'!'\e[0m]\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \       an identifier expected, but character literal found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpythlubrx.scala:14:32 ---------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdelims\e[0m = [\e[31m'.'\e[0m,\
    \ \e[31m'?'\e[0m, \e[31m'!'\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \           ^\e[0m\n\e[31m   |\e[0m                     an identifier expected,\
    \ but character literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpythlubrx.scala:15:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtokens\e[0m = S.split(delims)\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m \
    \  |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpythlubrx.scala:13:23 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpythlubrx.scala:22:51\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mboredomToken\e[0m = token.charAt(\e[31m0\e[0m).toUpperCase + token.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n6 err"
  stdout: ''
  timestamp: 1659978900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val S = S.split(\"\\\\.|\\\\?|\\\\!\")\n     \
    \   val boredomCounts = mutable.Map.empty[String, Int]\n        for(word <- S)\
    \ {\n            val boredomCountKey = (word == \"I\" ? \"I\" : \"!\") + (word.toLowerCase)\n\
    \            boredomCounts += boredomCountKey -> 0\n        }\n        boredomCounts.filter(_._2.nonEmpty).map(_._2).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb5juwrkq.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mS\e[0m = S.split(\e[31m\"\
    \\\\.|\\\\?|\\\\!\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mS\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5juwrkq.scala:14:28\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mboredomCounts\e[0m = mutable.Map.empty[\e[35mString\e[0m, \e[35mInt\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\\\\s+\").\n           foldLeft[(Long)](0l)\
    \ { (x, y) => x + y.contains(\"I\") }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvuci2r8p.scala:14:46 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m           foldLeft[(\e[35mLong\e[0m)](\e[31m0l\e[0m)\
    \ { (\e[36mx\e[0m, \e[36my\e[0m) => x + y.contains(\e[31m\"I\"\e[0m) }\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\
    \e[31m   |\e[0mmatch arguments (Boolean)\n1 error found\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bd = new Array[Int](5)\n        for (i <-\
    \ 0 to S.length-1){\n            if (S(i ).equals(\".\")) {\n                bd(0)\
    \ = bd(0) + 1;\n            } else if (S(i ).equals(\"?\")) { \n             \
    \   bd(1) = bd(1) + 1;\n            } else if (S(i ).equals(\"!\")) { \n     \
    \           bd(2) = bd(2) + 1;\n            } else if (S(i ).equals(\"I\")) {\n\
    \                bd(3) = bd(3) + 1;\n            }\n        }\n        bd(4) =\
    \ bd(4) + 1;\n        (bd(0) +bd(1) +bd(2) +bd(3)+bd(4))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6vhzsem.scala:29)\n\tat Problem.main(tmpw6vhzsem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val N = S.split(\"\\\\.|\\\\?|\\\\!\")\n     \
    \   val bored = collection.mutable.HashMap[String, Long]()\n        N.foreach\
    \ {\n            x => bored.putIfAbsent(x, 0l) += 1\n        }\n        bored.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfk6zs6oc.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[36mx\e[0m => bored.putIfAbsent(x, \e[31m0l\e\
    [0m) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue putIfAbsent is not a member of scala.collection.mutable.HashMap[String,\
    \ Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659978901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        for(word <- S.split(\"\
    \ \"))\n            if(word.startsWith(\"I\"))\n                count += 1\n \
    \       (count)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepdm8hzj.scala:21)\n\tat Problem.main(tmpepdm8hzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // your code goes here\n        S.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdujbmtvy.scala:17)\n\tat Problem.main(tmpdujbmtvy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def isFirstPart(S:String) : Boolean =\n      \
    \      S.substring(0, 1).equals(\"i\") || S.substring(0, 2).equals(\"i\")\n  \
    \      def isLastPart(S:String) : Boolean =\n            S.substring(1, S.length).equals(\"\
    .\")\n        def isMiddlePart(S:String) : Boolean =\n            S.substring(1,\
    \ S.length).equals(\".\") &&\n                S.substring(0, 1).equals(\".\")\n\
    \n        def countPart(S:String) : Long =\n            if (S.startsWith(\"i\"\
    )) 1\n            else if (S.startsWith(\".\")) 0\n            else S.length\n\
    \n        val S = S.toLowerCase \n        val wordList: mutable.Set[String] =\
    \ mutable.Set() \n        S.split(\"\\\\s+\").foreach(wordList += _) \n      \
    \  val boredomSet: mutable.Set[String] = mutable.Set()\n        S.split(\"\\\\\
    .\\\\s+\").foreach(wordList += _) \n        S.split(\"\\\\?|\\\\!\\\\s+\").foreach(wordList\
    \ += _)\n        wordList foreach { word =>\n            if (isFirstPart(word))\
    \ {\n                if (isLastPart(word)) boredomSet += word \n             \
    \   else boredomSet += word + \".\" \n            } else if (isLastPart(word))\
    \ {\n                if (isMiddlePart(word)) boredomSet += word \n           \
    \     else boredomSet += word + \".\" \n            } else if (isMiddlePart(word))\
    \ {\n                if (isFirstPart(word)) boredomSet += word \n            \
    \    else boredomSet += word + \".\" \n            } else boredomSet += word \n\
    \        }\n        wordList.filter(_.equals(\"i\")) length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgjkf5kkx.scala:44:45 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        wordList.filter(_.equals(\e[31m\"i\"\e[0m)) length\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgjkf5kkx.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mS\e[0m = S.toLowerCase \n\e[31m\e[31m   |\e[0m                ^\e[0m\n\
    \e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35mS\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjkf5kkx.scala:27:22\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set() \n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgjkf5kkx.scala:27:44 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mwordList\e[0m: mutable.Set[\e[35mString\e[0m]\
    \ = mutable.Set() \n\e[31m\e[31m   |\e[0m                                    \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgjkf5kkx.scala:29:24 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mboredomSet\e[0m: mutable.Set[\e[35mString\e[0m]\
    \ = mutable.Set()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /t"
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val words = S.split(\" \").filter(_.nonEmpty)\n\
    \        val boredWords = words(\"I\")\n        words.count(_ == boredWords)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ljeupbz.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredWords\e\
    [0m = words(\e[31m\"I\"\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^\e[0m\n\e[31m   |\e[0m                               Found:    (\e[32m\"\
    I\"\e[0m : String)\n\e[31m   |\e[0m                               Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val b = MutableListBuffer[String]()\n        for\
    \ (sentence <- S.split(\"[.!?]+\")){\n            if (sentence.startsWith(\"I\"\
    )){\n                b.append(\"1l\")\n            } else {\n                b.append(\"\
    0l\")\n            }\n        }\n        b.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_u3h77w7.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = MutableListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: MutableListBuffer\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count : Long = 0\n        val words = S.split(\"\
    \ \")\n        for (word <- words) {\n            count += if (word.startsWith(\"\
    I\")) 1 else 0\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_dhi0wqq.scala:16:21 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            count += \e[33mif\e[0m (word.startsWith(\e\
    [31m\"I\"\e[0m)) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^\e[0m\n\e[31m   |\e[0m                     expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_dhi0wqq.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            count += \e[33mif\e[0m (word.startsWith(\e[31m\"I\"\e[0m)) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashSet.empty[String]\n\
    \        val array = S.split(\"\\\\.\").toArray\n        var count = 0\n     \
    \   for (str <- array) {\n            if (str != null && str == \"I\") {\n   \
    \             boredoms += str\n            }\n        }\n        for (str <- array)\
    \ {\n            if (str != null && str.startsWith(\"I\")) {\n               \
    \ count += boredoms.count(_ == str)\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfas5gofa.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashSet.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ val words = S.split(\" \")\n        for (w <- words) {\n            if (w.startsWith(\"\
    I\")) {\n                boredoms.add(w)\n            }\n        }\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdmfin3k.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        S.toLowerCase split\
    \ \"[.?!]\".toList\n            .foreach(word => {\n                val boredom\
    \ = (word startsWith \"i\") match {\n                    case true => 1\n    \
    \                case false => 0\n                }\n                boredoms\
    \ += boredom\n            })\n        (boredoms.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnk789erk.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mboredom\e[0m = (word\
    \ startsWith \e[31m\"i\"\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m     \
    \                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value startsWith is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomWords = Seq(\"I\") // hard-code the\
    \ boredom words\n        val boredomWordsSet = Set(boredomWords) // convert boredomWords\
    \ into a set\n        val boredomSentences = S.split(\"[.!?]\".toList) // split\
    \ into sentences\n        val boredomSentenceCounts = boredomSentences.map(s =>\
    \ {\n            val boredomWordsSet = Set(s.split(\"\\\\W+\")) // split sentence\
    \ into boredom words\n            if (boredomWordsSet.subsetOf(boredomWordsSet))\
    \ 1 else 0\n        }).toList\n        boredomSentenceCounts.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptm0tbwws.scala:15:47\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mboredomSentences\e\
    [0m = S.split(\e[31m\"[.!?]\"\e[0m.toList) \e[34m// split into sentences\e[0m\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    List[Char]\n\e\
    [31m   |\e[0m                                       Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredomCount = 0\n        val boredomArray\
    \ = S.split(\"\\\\.\").toList\n        boredomArray.foreach{word =>\n        \
    \    if(word.startsWith(\"I\")){\n                boredomCount += 1\n        \
    \    }\n        }\n        boredomCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvao6028i.scala:24)\n\tat Problem.main(tmpvao6028i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bored = mutable.HashSet[String]()\n      \
    \  bored.add(\"I\")\n        S.split(\"\\\\.|\\\\?|\\\\!\")\n            .foreach{\
    \ a =>\n                if (a == \"I\") {\n                    bored.add(\"I\"\
    )\n                } else if (bored.contains(a)) {\n                    bored(a)\n\
    \                } else {\n                    bored.add(a)\n                }\n\
    \            }\n        bored.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is\
    \ the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpizlglm31.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbored\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"[.?!]\").map(_.toUpperCase).zipWithIndex.filter(_.toString.startsWith(\"\
    I\")).length\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8852uo5.scala:18)\n\tat Problem.main(tmpv8852uo5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomWords = List(\n            \"I\",\n\
    \            \"I.\",\n            \"I.?\"\n        )\n        val words = S.split(\"\
    \ \")\n        val numboredoms = boredomWords.count(w => words.exists(_ == w))\n\
    \        words.length.toLong + numboredoms * (words.length + 1L)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1e0o_2x9.scala:23)\n\tat Problem.main(tmp1e0o_2x9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        if (S.length < 1) 0\n        else if (S.substring(0,1).equals(\"\
    I\")) 1\n        else S.toList.filter(x => x.equals(\".\")\n                 \
    \               || x.equals(\"!\")\n                                || x.equals(\"\
    ?\")).count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp05rwviux.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m S.toList.filter(x\
    \ => x.equals(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             Found:    (Char => Boolean) => Int\n\e[31m   |\e[0m\
    \             Required: Long\n\e[31m16 |\e[0m                                ||\
    \ x.equals(\e[31m\"!\"\e[0m)\n\e[31m17 |\e[0m                                ||\
    \ x.equals(\e[31m\"?\"\e[0m)).count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val tokens = S.split('.')\n        // If there's\
    \ no period, it's an open boredom\n        if(tokens.size < 2) 0l\n        else\
    \ {\n            // The first token should be a boredom sentence\n           \
    \ if(tokens(0).equals(\"I\")) 1l\n            else 0l\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyjqnv2v6.scala:25)\n\tat Problem.main(tmpyjqnv2v6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code goes here\n        val boredoms =\
    \ mutableList.empty[String]\n        S.split(\"[.!?]\").foreach { e =>\n     \
    \       if (e.toLowerCase == \"i\") {\n                boredoms += \"1\"\n   \
    \         } else if (e.toLowerCase == \"love\") {\n                boredoms +=\
    \ \"2\"\n            } else if (e.toLowerCase == \"sky\") {\n                boredoms\
    \ += \"3\"\n            } else if (e.toLowerCase == \"sun\") {\n             \
    \   boredoms += \"4\"\n            }\n        }\n        boredoms.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"))\
    \ == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp13pkbydj.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutableList.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutableList\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def isBored(S:String, i:Int): Long = {\n     \
    \       if (S(i)==\"I\")\n                1\n            else {\n            \
    \    if (S(i)==\".\")\n                    isBored(S, i+1)\n                else\n\
    \                    isBored(S, i+1)\n            }\n        }\n        \n   \
    \     if (isBored(S, 0)==0) 1 else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxkmmkc_0.scala:14:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (S(i)==\e[31m\"I\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpxkmmkc_0.scala:17:20 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (S(i)==\e[31m\".\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val N = S.split(\" \").toList\n        val V =\
    \ scala.collection.mutable.Set[String]()\n        for {\n            a <- N\n\
    \        } yield {\n            V.add(a)\n            if (a == \"I\") 1 else 0\n\
    \        }.sum\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp87nyq27.scala:20:10 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        } \e[33myield\e[0m {\n\e[31m18 |\e[0m       \
    \     V.add(a)\n\e[31m19 |\e[0m            \e[33mif\e[0m (a == \e[31m\"I\"\e[0m)\
    \ \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m20 |\e[0m        }.sum\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ sum is not a member of (\e[31m1\e[0m : Int) | (\e[31m0\e[0m : Int)\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code here\n        S.split(\"[.?!]\").count(s\
    \ => s.startsWith(\"I\")).toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx0cs6hbz.scala:18)\n\tat Problem.main(tmpx0cs6hbz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ for(word <- S.split(' ')){\n            if(word.toString.startsWith(\"I\")){\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7nht0_8.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomCount = 0\n        S match {\n    \
    \        case _ if S.startsWith(\"I\") => boredomCount+=1\n            case _\
    \ if S.startsWith(\"!\") => boredomCount-=1\n            case _ if S.startsWith(\"\
    .\") => boredomCount-=1\n            case _ => println(s\"Couldn't match $S with\
    \ any boredom sentence\")\n        }\n        boredomCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3clxly_.scala:15:55 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m S.startsWith(\e\
    [31m\"I\"\e[0m) => boredomCount+=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \   value += is not a member of Int - did you mean boredomCount.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa3clxly_.scala:16:55 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m S.startsWith(\e\
    [31m\"!\"\e[0m) => boredomCount-=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \   value -= is not a member of Int - did you mean boredomCount.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa3clxly_.scala:17:55 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m S.startsWith(\e\
    [31m\".\"\e[0m) => boredomCount-=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \   value -= is not a member of Int - did you mean boredomCount.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ val array = S.split(\" \")\n        var n = 0\n        for (x <- array) {\n\
    \            if (x.equals(\"I\")) {\n                boredoms += x\n         \
    \       n += 1\n            }\n        }\n        (boredoms.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) ==\
    \ (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphirs_pdb.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var count = 0\n        var index = 0\n       \
    \ while(index <= S.length){\n            if(S.charAt(index) != 'I'){\n       \
    \         count += 1\n            }\n            index += 1\n        }\n     \
    \   return count\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 11\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.isBored(tmp4f1w55xi.scala:16)\n\tat Problem$.main(tmp4f1w55xi.scala:24)\n\
    \tat Problem.main(tmp4f1w55xi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val bored = new mutable.HashSet[String]\n    \
    \    val boredSentences = new mutable.HashSet[String]\n        S split (\"\\\\\
    .\")\n        S split (\"\\\\?\")\n        S split (\"\\\\!\")\n        S split\
    \ (\"\\\\.\\\\?\")\n        S split (\"\\\\.\\\\!\")\n        S split (\"\\\\\
    .\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\!\")\n        S split (\"\\\\\
    .\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\!\")\n        S split\
    \ (\"\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\\
    !\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\
    \\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n  \
    \      S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split\
    \ (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    .\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\\
    !\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\"\
    )\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n\
    \        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\"\
    )\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\"\
    )\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\"\
    )\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\!\"\
    )\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\
    \\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\
    \\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\
    \\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\
    \\.\\\\.\\\\.\\\\.\\\\.\\\\!\")\n        S split (\"\\\\.\\\\.\\\\.\\\\.\\\\.\\\
    \\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split (\"\\\\.\\\\.\\\
    \\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\.\\\\?\")\n        S split\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1sds6ro4.scala:50:15 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        S split \n\e[31m\e[31m   |\e[0m             \
    \  ^\e[0m\n\e[31m   |\e[0m               expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sds6ro4.scala:13:24\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbored\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1sds6ro4.scala:14:33 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mboredSentences\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Your code here\n        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"\\\\.\")\n        var count = 1\n        for\
    \ {\n            s <- sentences\n        } if (s.startsWith(\"I\")) {\n      \
    \      boredoms += s\n        }\n        for (s <- sentences) {\n            if\
    \ (s.startsWith(\"I\")) {\n                boredoms += s\n            }\n    \
    \    }\n        val boredomCount = boredoms.size\n        val sentenceCount =\
    \ sentences.size\n        val combinedCount = boredomCount + sentenceCount\n \
    \       val boredomPercentage = boredomCount / combinedCount\n        return math.ceil(boredomPercentage.toDouble\
    \ * sentenceCount)\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7w4wmxu.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7w4wmxu.scala:31:24 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mreturn\e[0m math.ceil(boredomPercentage.toDouble\
    \ * sentenceCount)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    Double\n\e[31m   |\e[0m         \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredomSet = HashSet[String]()\n        val\
    \ tokenSet = S.split(\" \")\n        for( i <- 0 until tokenSet.length )\n   \
    \     {\n            if(tokenSet(i).startsWith(\"I\"))\n            {\n      \
    \          boredomSet.add(tokenSet(i))\n            }\n        }\n        boredomSet.count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxdnaq6rq.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        boredomSet.count\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (String => Boolean) => Int\n\e[31m   |\e[0m        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.HashMap[String, Long]()\n\
    \        for (word <- S.split(\"\\\\s+\")){\n            if (word.startsWith(\"\
    I\")){\n                if (boredoms.contains(word)){\n                    boredoms\
    \ += (word -> boredoms.get(word) + 1l)\n                } else {\n           \
    \         boredoms += (word -> 1l)\n                }\n            }\n       \
    \ }\n        boredoms.toSeq.maxBy(_._2).to._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkluugq1.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n      // Solution begins here\n      val result = mutable.ListBuffer.empty[Long]\n\
    \      for (i <- 0 until S.length) {\n        if (S(i).isLetter) result += 1 //\
    \ If the character is a letter, count it\n        else if (!S(i).equals(\".\"\
    )) result += 0 // If the character is a punctuation, ignore it\n      }\n    \
    \  result.toList.size // Return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9h5yuavd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // split the string into words\n        val words\
    \ = S.split(\".?!\").map(_.trim)\n        val boredomCounter = mutable.HashMap.empty[String,\
    \ Long]\n\n        for (word <- words) {\n            if (word.startsWith(\"I\"\
    )) boredomCounter.put(word, 1L)\n        }\n        boredomCounter.size + (1L)\
    \ // include the boredom\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7d4qg4q.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mboredomCounter\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val lines = S.split('.').toList\n        for (line\
    \ <- lines) {\n            if (line.startsWith(\"I\")) 1\n        }\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
    \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp55j80_rq.scala:22)\n\tat Problem.main(tmp55j80_rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.Set[String]()\n       \
    \ for(s <- S.split(\"\"\"\\.|\\?|!\"\"\")) if(s.startsWith(\"I\")) boredoms +=\
    \ s\n        boredoms.size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the sky\
    \ blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"\
    bIt\")) == (0l));\n    assert(isBored((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a\
    \ walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1eqvx1tm.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.MutableSet.empty[String]\n\
    \        val bored = S.toString.toLowerCase == \"i\"\n        if (bored) boredoms.add(\"\
    I\")\n        for (i <- 0 to S.length - 1) {\n            if (bored) boredoms.add(S.substring(i,\
    \ i + 1).toLowerCase + \" \")\n        }\n        boredoms.size match {\n    \
    \        case 0 => 0\n            case _ => 1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcf4gogdm.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.MutableSet.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        S.split(\"\"\"[.!?]\"\"\").count{ _ == \"I\" }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphx6jloec.scala:18)\n\tat Problem.main(tmphx6jloec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredom = 0\n        S.split(\"\\\\.\").filter(_.startsWith(\"\
    I\")).foreach(word => boredom += 1L)\n        S.split(\"\\\\.\").filter(_.contains(\"\
    ?\")).foreach(word => boredom += 1L)\n        S.split(\"\\\\.\").filter(_.contains(\"\
    !\")).foreach(word => boredom += 1L)\n        boredom\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7uujt09.scala:14:73 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        S.split(\e[31m\"\\\\.\"\e[0m).filter(_.startsWith(\e\
    [31m\"I\"\e[0m)).foreach(\e[36mword\e[0m => boredom += \e[31m1L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7uujt09.scala:15:71\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        S.split(\e[31m\"\\\
    \\.\"\e[0m).filter(_.contains(\e[31m\"?\"\e[0m)).foreach(\e[36mword\e[0m => boredom\
    \ += \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy7uujt09.scala:16:71 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        S.split(\e[31m\"\\\\.\"\e[0m).filter(_.contains(\e\
    [31m\"!\"\e[0m)).foreach(\e[36mword\e[0m => boredom += \e[31m1L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val split = S.split('.')\n        val boredoms\
    \ = split.filter(_ startsWith(\"I\")).count\n        val otherBoredoms = split.filter(_\
    \ startsWith(\"O\")).count\n        val noneBoredoms = split.filterNot(_.startsWith(\"\
    I\")).count\n        (boredoms * boredoms + otherBoredoms * otherBoredoms + noneBoredoms\
    \ * noneBoredoms).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgx7kfiii.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (boredoms * boredoms + otherBoredoms * otherBoredoms\
    \ + noneBoredoms * noneBoredoms).toLong\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue * is not a member of (String => Boolean) => Int, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val count = mutable.Map.empty[String, Long]\n\
    \        for (word <- S.split(\"\\\\.|\\\\?|\\\\!\"))\n            if (word.startsWith(\"\
    I\"))\n                count += (word -> 1L)\n            else\n             \
    \   count += (word -> 0L)\n        count.toList.map(f => (f._1, f._2.toLong)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello world\"\
    )) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qr5e_jm.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // Split the string into sentences.\n        val\
    \ sentences = S.split(\"\\\\.|\\\\?|\\\\!\")\n        // Create a set of words\
    \ that appear in the sentences.\n        val words = sentences.flatMap(_.split(\"\
    \ \")).distinct\n        // Count the number of boredoms.\n        val boredoms\
    \ = words.filter(_.startsWith(\"I\")).length\n        // Return the number of\
    \ boredoms.\n        boredoms\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpynqod_5n.scala:24)\n\tat Problem.main(tmpynqod_5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredoms = 0\n        var lastWord = \"\"\n\
    \        for (w <- S.toList)\n        {\n            if (w.startsWith(\"I\"))\n\
    \            {\n                boredoms += 1\n            }\n            lastWord\
    \ = w\n        }\n        return (boredoms * lastWord.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n\
    \    assert(isBored((\"Is the sky blue?\")) == (0l));\n    assert(isBored((\"\
    I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"\
    I feel good today. I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"\
    You and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4zdm1j6d.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (w.startsWith(\e[31m\"I\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value startsWith is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4zdm1j6d.scala:21:23 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            lastWord = w\n\e[31m\e[31m   |\e[0m          \
    \             ^\e[0m\n\e[31m   |\e[0m                       Found:    (w : Char)\n\
    \e[31m   |\e[0m                       Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        // A bored sentence must start with \"I\"\n  \
    \      // The first letter must be I\n        // Other sentences can start with\
    \ a different letter\n        // A sentence can end with a full stop\n       \
    \ // A sentence can contain multiple periods or question marks\n        // A sentence\
    \ can contain multiple full stops\n        // A sentence can contain multiple\
    \ question marks\n        // A sentence cannot contain any other character\n \
    \       var i = 0\n        // A bored sentence must end with a full stop\n   \
    \     while(i < S.length){\n            if(!S.charAt(i) == 'I') {\n          \
    \      // If not I, read next word\n                i += 1\n            } else\
    \ {\n                // If I, read next word and check if it is a full stop\n\
    \                i += 1\n                if(S.charAt(i) == '.') {\n          \
    \          // If it is a full stop, add 1 to the bored count\n               \
    \     i += 1\n                    i += 1\n                }\n                while(i\
    \ < S.length){\n                    if(S.charAt(i) == '.') {\n               \
    \         i += 1\n                    }\n                    if(S.charAt(i) ==\
    \ '?') {\n                        i += 1\n                    }\n            \
    \        if(S.charAt(i) == '!') {\n                        i += 1\n          \
    \          }\n                }\n            }\n        }\n        // Return the\
    \ bored count\n        return i\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0yd7o5zp.scala:24:15 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(!S.charAt(i) == \e[31m'I'\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \      value unary_! is not a member of Char - did you mean Char.unary_+?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredom = mutable.Set[String]()\n        var\
    \ count  : Long = 0\n        for (x <- S.split(\" \")) {\n            if(x startsWith\
    \ \"I\") {\n                count += 1\n                boredom.add(x)\n     \
    \       }\n        }\n        (count)(boredom.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoz9r2yci.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredom\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpoz9r2yci.scala:21:9 ------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (count)(boredom.size)\n\e[31m\e[31m   |\e[0m\
    \         ^^^^^\e[0m\n\e[31m   |\e[0m         \e[33mvariable\e[0m \e[35mcount\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms = mutable.ListBuffer[String]()\n\
    \        var count = 0\n        var i = 0\n        while(i < S.length) {\n   \
    \         boredoms += if(S.charAt(i) == 'I') \"I\" else \"\"\n            i +=\
    \ 1\n        }\n        boredoms.foreach { boredom =>\n            if(boredom.toLowerCase\
    \ == \"i\") count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm4q70vqq.scala:17:24 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            boredoms += \e[33mif\e[0m(S.charAt(i) ==\
    \ \e[31m'I'\e[0m) \e[31m\"I\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m                   \
    \     expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm4q70vqq.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val boredoms: mutable.Map[String, Long] = mutable.Map.empty[String,\
    \ Long]\n        for (sentence <- S.split(\"\\\\.\")) {\n            for (word\
    \ <- sentence.split(\" \")) {\n                if (word.startsWith(\"I\")) {\n\
    \                    boredoms(word) += 1\n                }\n            }\n \
    \       }\n        boredoms.values.toList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wc_6jn4.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map.empty[\e[35mString\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6wc_6jn4.scala:13:50 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mboredoms\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m] = mutable.Map.empty[\e[35mString\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        def isBored(S : String) : Long = {\n         \
    \   val sentence = S.split(\"[.?!]\").filter(_.startsWith(\"I\"))\n          \
    \  sentence.size match {\n                case 0 => 0\n                case 1\
    \ => (sentence(0).length * sentence(0).length)\n                case _ => sentence.flatMap(_.split(\"\
    \\\\.\")).count(_.equals(\"I\")) * sentence.flatMap(_.split(\"\\\\.\")).count(_.equals(\"\
    .\"))\n            }\n        }\n        val numOfBoredoms = S.split(\"[.?!]\"\
    ).filter(_.startsWith(\"I\")).map(x => x.split(\"\\\\.\").count(_.equals(\"I\"\
    ))).sum\n        numOfBoredoms\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"Is the\
    \ sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n \
    \   assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpib1eyk17.scala:27)\n\tat Problem.main(tmpib1eyk17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        var boredom : Long = 0\n        var i = 0\n  \
    \      while(i<S.length){\n            if(S(i) == \"I\" || S(i) == \"i\"){\n \
    \               boredom++\n            }\n            i+=1\n        }\n      \
    \  boredom\n    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"\
    Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
    \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"\
    )) == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
    \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
    )) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp75qxp9h_.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                boredom++\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp75qxp9h_.scala:16:15\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \     \e[33mif\e[0m(S(i) == \e[31m\"I\"\e[0m || S(i) == \e[31m\"i\"\e[0m){\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp75qxp9h_.scala:16:30 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(S(i) == \e[31m\"I\"\e[0m || S(i)\
    \ == \e[31m\"i\"\e[0m){\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You'll be given a string of words, and your task is to count the number\n\
    \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n   \
    \ // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
    \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val words = S.split(\"\\\\.\")\n        for (w <- words) {\n        \
    \    if (w.startsWith(\"I\"))\n                counts(w) = counts.getOrElse(w,0)\
    \ + 1\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isBored((\"Hello world\")) == (0l));\n    assert(isBored((\"\
    Is the sky blue?\")) == (0l));\n    assert(isBored((\"I love It !\")) == (1l));\n\
    \    assert(isBored((\"bIt\")) == (0l));\n    assert(isBored((\"I feel good today.\
    \ I will be productive. will kill It\")) == (2l));\n    assert(isBored((\"You\
    \ and I are going for a walk\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxeodo29s.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978918
