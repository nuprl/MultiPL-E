name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    //\
  \ (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    // >>> UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n   \
  \ // (new List<long>())\n    public static List<long> UniqueDigits(List<long> x)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ i in x) {\n            bool hasEvenDigit = false;\n            foreach (char\
    \ c in i.ToString()) {\n                if (c % 2 == 0) {\n                  \
    \  hasEvenDigit = true;\n                    break;\n                }\n     \
    \       }\n            if (!hasEvenDigit) {\n                result.Add(i);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in x) {\n\
    \            if (i.ToString().Contains(\"2\") || i.ToString().Contains(\"4\")\
    \ || i.ToString().Contains(\"6\") || i.ToString().Contains(\"8\") || i.ToString().Contains(\"\
    0\")) {\n                continue;\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", '        return x.Where(i
    => !i.ToString().Any(c => c % 2 == 0)).ToList();', "        List<long> res = new\
    \ List<long>();\n        foreach (long i in x) {\n            if (i.ToString().Any(c\
    \ => c == '2' || c == '4' || c == '6' || c == '8' || c == '0')) {\n          \
    \      continue;\n            }\n            res.Add(i);\n        }\n        res.Sort();\n\
    \        return res;", "        List<long> res = new List<long>();\n        foreach\
    \ (long i in x) {\n            if (i.ToString().Any(c => c == '2' || c == '4'\
    \ || c == '6' || c == '8' || c == '0')) {\n                continue;\n       \
    \     }\n            res.Add(i);\n        }\n        res.Sort();\n        return\
    \ res;", "        List<long> result = new List<long>();\n        foreach (long\
    \ num in x) {\n            if (num.ToString().ToCharArray().Any(c => c == '2'\
    \ || c == '4' || c == '6' || c == '8' || c == '0')) {\n                continue;\n\
    \            }\n            result.Add(num);\n        }\n        result.Sort();\n\
    \        return result;", '        return x.Where(y => !y.ToString().Any(z =>
    z % 2 == 0)).ToList();', '        return x.Where(n => n.ToString().All(c => c
    % 2 != 0)).ToList();', '        return x.Where(y => !y.ToString().Any(z => z %
    2 == 0)).ToList();', "        // Your code here\n        return new List<long>();",
  "        // Your code here\n        return null;", "        List<long> result =\
    \ new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().Contains(\"\
    2\") || i.ToString().Contains(\"4\") || i.ToString().Contains(\"6\") || i.ToString().Contains(\"\
    8\") || i.ToString().Contains(\"0\")) {\n                continue;\n         \
    \   }\n            result.Add(i);\n        }\n        result.Sort();\n       \
    \ return result;", '        return x.Where(y => !y.ToString().Any(z => z % 2 ==
    0)).ToList();', "        var result = new List<long>();\n        foreach (var\
    \ i in x) {\n            if (i.ToString().Any(c => c % 2 == 0)) {\n          \
    \      continue;\n            }\n            result.Add(i);\n        }\n     \
    \   result.Sort();\n        return result;", "        // Your code here\n    \
    \    return null;", '        return x.Where(n => !n.ToString().Any(c => c % 2
    == 0)).ToList();', "        List<long> result = new List<long>();\n        foreach\
    \ (long i in x) {\n            if (i.ToString().Any(c => c == '2' || c == '4'\
    \ || c == '6' || c == '8' || c == '0')) {\n                continue;\n       \
    \     }\n            result.Add(i);\n        }\n        result.Sort();\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in x) {\n            bool isUnique = true;\n            while (i > 0)\
    \ {\n                if ((i % 10) % 2 == 0) {\n                    isUnique =\
    \ false;\n                    break;\n                }\n                i /=\
    \ 10;\n            }\n            if (isUnique) {\n                result.Add(i);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in x) {\n\
    \            bool isUnique = true;\n            foreach (char c in i.ToString())\
    \ {\n                if (c % 2 == 0) {\n                    isUnique = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isUnique) {\n                result.Add(i);\n            }\n        }\n   \
    \     result.Sort();\n        return result;", "        // Your code goes here\n\
    \        return null;"]
stop_tokens:
- "\n    }\n"
