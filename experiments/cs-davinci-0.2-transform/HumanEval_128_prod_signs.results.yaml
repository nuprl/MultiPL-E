language: cs
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x != 0) {\n            \
    \    prod *= Math.Sign(x);\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65fbd919df1541af8500baa7c489f0de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65fbd919df1541af8500baa7c489f0de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                prod *= 1;\n            } else\
    \ if (i < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(i);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65fbd919df1541af8500baa7c489f0de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65fbd919df1541af8500baa7c489f0de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > 0) {\n                prod *= 1;\n        \
    \    } else if (arr[i] < 0) {\n                prod *= -1;\n            } else\
    \ {\n                prod *= 0;\n            }\n            sum += Math.Abs(arr[i]);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (long i in arr) {\n            if (i ==\
    \ 0) continue;\n            sum += Math.Abs(i);\n            prod *= Math.Sign(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <858b33e06f1b43d8a21a30c3db90569a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <858b33e06f1b43d8a21a30c3db90569a>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ num in arr) {\n            if (num > 0) {\n                sum += num;\n   \
    \             prod *= 1;\n            } else if (num < 0) {\n                sum\
    \ += -num;\n                prod *= -1;\n            } else {\n              \
    \  prod *= 0;\n            }\n        }\n        if (prod == 0) {\n          \
    \  return null;\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad86664fdeb342ff8de9cb483b8e72e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad86664fdeb342ff8de9cb483b8e72e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                prod\
    \ *= -1;\n            } else {\n                prod *= 0;\n            }\n  \
    \      }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (prod == 0) {\n            return null;\n        }\n  \
    \      return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28eea8f3234e4ad78fd78de52d72a9c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28eea8f3234e4ad78fd78de52d72a9c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                sum += i;\n         \
    \       prod *= 1;\n            } else if (i < 0) {\n                sum += -i;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x == 0) {\n                continue;\n        \
    \    }\n            prod *= Math.Sign(x);\n            sum += Math.Abs(x);\n \
    \       }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a04addf118a544709dbdf47f0e177c89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a04addf118a544709dbdf47f0e177c89>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(x);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(i);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i < 0) {\n             \
    \   prod *= -1;\n            }\n            else if (i > 0) {\n              \
    \  prod *= 1;\n            }\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ca5a084db0c4e429e752cb93c030cf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ca5a084db0c4e429e752cb93c030cf8>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(x);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long x = arr[i];\n            if (x > 0) {\n           \
    \     sum += x;\n                prod *= 1;\n            } else if (x < 0) {\n\
    \                sum += -x;\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x == 0) {\n                continue;\n            }\n   \
    \         if (x < 0) {\n                prod *= -1;\n            }\n         \
    \   sum += Math.Abs(x);\n        }\n        return prod * sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af538ca530bc4fb18ff1fb28cab95142>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af538ca530bc4fb18ff1fb28cab95142>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                prod *= 1;\n        \
    \    } else if (i < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                sum += i;\n         \
    \       prod *= 1;\n            } else if (i < 0) {\n                sum += -i;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(x);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2044446aefdb4effa9386d0a091d34d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2044446aefdb4effa9386d0a091d34d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i < 0) {\n             \
    \   prod *= -1;\n            }\n            else if (i > 0) {\n              \
    \  prod *= 1;\n            }\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ca5a084db0c4e429e752cb93c030cf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ca5a084db0c4e429e752cb93c030cf8>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                prod *= 1;\n        \
    \    } else if (i < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (long x in arr) {\n            if (x >\
    \ 0) {\n                sum += x;\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                sum += -x;\n                prod *= -1;\n    \
    \        } else {\n                prod *= 0;\n            }\n        }\n    \
    \    return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x != 0) {\n            \
    \    prod *= Math.Sign(x);\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(x);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d2c3dde8b104bcbb7585c4d9ad7cce6>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(i);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (var x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                prod *= -1;\n            }\n  \
    \          if (i != 0) {\n                sum += Math.Abs(i);\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abbbddd01ce149559fa146e74de951fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abbbddd01ce149559fa146e74de951fd>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x < 0) {\n             \
    \   prod *= -1;\n            }\n            else if (x > 0) {\n              \
    \  prod *= 1;\n            }\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        if (arr.Count == 0)\n     \
    \       return null;\n        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (long x in arr) {\n            if (x > 0)\n                sum += x;\n     \
    \       else if (x < 0) {\n                sum += -x;\n                prod *=\
    \ -1;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f59dad7a43164ca29ad9229746c150bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f59dad7a43164ca29ad9229746c150bd>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                prod *= 1;\n            } else\
    \ if (i < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(i);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(i);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i > 0) {\n             \
    \   prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i > 0) {\n             \
    \   prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            sum += Math.Abs(x);\n            if (x > 0) {\n   \
    \             prod *= 1;\n            } else if (x < 0) {\n                prod\
    \ *= -1;\n            } else {\n                prod *= 0;\n            }\n  \
    \      }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i > 0) {\n             \
    \   prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                sum += i;\n         \
    \       prod *= 1;\n            } else if (i < 0) {\n                sum += -i;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                sum += i;\n         \
    \       prod *= 1;\n            } else if (i < 0) {\n                sum += -i;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa3d38db0a9447338708868f6bc61359>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i == 0) {\n                continue;\n            }\n   \
    \         sum += Math.Abs(i);\n            prod *= Math.Sign(i);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <379b9a983c7f4046b481fba4654cafa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <379b9a983c7f4046b481fba4654cafa9>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here\n        if (arr.Count == 0)\n      \
    \      return null;\n        long prod = 1;\n        long sum = 0;\n        foreach\
    \ (long x in arr) {\n            if (x < 0)\n                prod *= -1;\n   \
    \         else if (x > 0)\n                prod *= 1;\n            else\n    \
    \            prod *= 0;\n            sum += Math.Abs(x);\n        }\n        return\
    \ sum * prod;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2044446aefdb4effa9386d0a091d34d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2044446aefdb4effa9386d0a091d34d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x != 0) {\n            \
    \    prod *= Math.Sign(x);\n            }\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123011f7037e49dd859514b130ca4950>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x == 0) {\n                continue;\n            }\n   \
    \         sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            sum += Math.Abs(num);\n            if (num < 0) {\n         \
    \       prod *= -1;\n            }\n        }\n        return sum * prod;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f055d40e6ea74d0ba23b7179d6d6ce30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f055d40e6ea74d0ba23b7179d6d6ce30>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <344ead0d6ba844348ed9229e81b4825b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <344ead0d6ba844348ed9229e81b4825b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (long x in arr) {\n            sum += Math.Abs(x);\n\
    \            if (x > 0) prod *= 1;\n            else if (x < 0) prod *= -1;\n\
    \            else prod *= 0;\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x < 0) {\n             \
    \   prod *= -1;\n            }\n            else if (x > 0) {\n              \
    \  prod *= 1;\n            }\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n    \
    \    }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n    \
    \    }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x == 0) {\n                continue;\n            }\n   \
    \         sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (var x in arr) {\n            if (x > 0)\
    \ {\n                sum += x;\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                sum += -x;\n                prod *= -1;\n    \
    \        } else {\n                prod *= 0;\n            }\n        }\n    \
    \    return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                prod *= 1;\n        \
    \    } else if (i < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                prod *= 1;\n        \
    \    } else if (i < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          if (x != 0) {\n                sum += Math.Abs(x);\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          if (x != 0) {\n                sum += Math.Abs(x);\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (var i in arr) {\n            if (i ==\
    \ 0) continue;\n            sum += Math.Abs(i);\n            prod *= Math.Sign(i);\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <034a084ce5d64321999a1c382ed2ccf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <034a084ce5d64321999a1c382ed2ccf7>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i < 0) {\n                prod *= -1;\n            }\n  \
    \          sum += Math.Abs(i);\n        }\n        return sum * prod;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0373cbe399044b494bda9e318fd35ff>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            long sign = i == 0 ? 0 : i / Math.Abs(i);\n            sum +=\
    \ Math.Abs(i);\n            prod *= sign;\n        }\n        return sum * prod;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (prod == 0) {\n            return null;\n        }\n  \
    \      return prod * sum;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a664dde8640a411cba02517788cd4dbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a664dde8640a411cba02517788cd4dbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                prod *= 1;\n            } else\
    \ if (i < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(i);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x == 0) {\n                continue;\n            }\n   \
    \         sum += Math.Abs(x);\n            prod *= Math.Sign(x);\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03c8aae944e4ba99b3103d357906916>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x < 0) {\n                prod *= -1;\n            }\n  \
    \          if (x != 0) {\n                sum += Math.Abs(x);\n            }\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4428a2372ecb4eb8b109ef1fab7dc7d3>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                prod *= 1;\n        \
    \    } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(x);\n\
    \        }\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ x in arr) {\n            if (x < 0) {\n                prod *= -1;\n       \
    \     } else if (x > 0) {\n                sum += x;\n            } else {\n \
    \               prod = 0;\n                sum = 0;\n                break;\n\
    \            }\n        }\n        return prod * sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2eb281f21b44ed180127ce9fafc61f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2eb281f21b44ed180127ce9fafc61f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i > 0) {\n             \
    \   prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ a in arr) {\n            if (a > 0) {\n                sum += a;\n         \
    \       prod *= 1;\n            } else if (a < 0) {\n                sum += -a;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bde968ef604346b5bc190657c3513dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bde968ef604346b5bc190657c3513dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long item in\
    \ arr) {\n            if (item > 0) {\n                sum += item;\n        \
    \        prod *= 1;\n            } else if (item < 0) {\n                sum +=\
    \ -item;\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x < 0) {\n             \
    \   prod *= -1;\n            }\n            else if (x > 0) {\n              \
    \  prod *= 1;\n            }\n        }\n        return sum * prod;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
    \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa30065c985e476ea9ae3a3e1db2e109>:0 \n"
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code goes here.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8191426acb40ed8eddde2f6525cfae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                sum += x;\n                prod\
    \ *= 1;\n            } else if (x < 0) {\n                sum += -x;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long prod = 1;\n        foreach (long x in arr) {\n            if (x >\
    \ 0) {\n                sum += x;\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                sum += -x;\n                prod *= -1;\n    \
    \        } else {\n                prod *= 0;\n            }\n        }\n    \
    \    return sum * prod;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ a in arr) {\n            if (a > 0) {\n                sum += a;\n         \
    \       prod *= 1;\n            } else if (a < 0) {\n                sum += -a;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bde968ef604346b5bc190657c3513dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bde968ef604346b5bc190657c3513dcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long x in arr)\
    \ {\n            if (x > 0) {\n                prod *= 1;\n            } else\
    \ if (x < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(x);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46c825ba0e994662b3ab34d868c87dc6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num == 0) {\n                continue;\n            }\n \
    \           sum += Math.Abs(num);\n            prod *= Math.Sign(num);\n     \
    \   }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d651d3022cae45fb82ba26459e0076f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d651d3022cae45fb82ba26459e0076f3>:0 \n"
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                sum += i;\n                prod\
    \ *= 1;\n            } else if (i < 0) {\n                sum += -i;\n       \
    \         prod *= -1;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        return sum * prod;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            sum += Math.Abs(num);\n            if (num > 0) {\n         \
    \       prod *= 1;\n            } else if (num < 0) {\n                prod *=\
    \ -1;\n            } else {\n                prod *= 0;\n            }\n     \
    \   }\n        return sum * prod;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795069
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            if (i > 0) {\n             \
    \   prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b965d0f5a01e49c7a83278d189afc697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795068
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long prod = 1;\n        foreach (long x in arr)\
    \ {\n            sum += Math.Abs(x);\n            if (x > 0) {\n             \
    \   prod *= 1;\n            } else if (x < 0) {\n                prod *= -1;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        return sum * prod;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given an array arr of integers and you need to\
    \ return\n    // sum of magnitudes of integers multiplied by product of all signs\n\
    \    // of each number in the array, represented by 1, -1 or 0.\n    // Note:\
    \ return None for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new\
    \ List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new\
    \ List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                prod *= 1;\n            } else\
    \ if (i < 0) {\n                prod *= -1;\n            } else {\n          \
    \      prod *= 0;\n            }\n            sum += Math.Abs(i);\n        }\n\
    \        return prod * sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L,\
    \ (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new\
    \ List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n\
    \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L,\
    \ (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
    \ (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659795067
