language: cs
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return new Tuple<string,\
    \ bool>(\"\", false);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return new Tuple<string,\
    \ bool>(\"\", false);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <fcad8b53456e4c559f87d19e202d799b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <fcad8b53456e4c559f87d19e202d799b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        return Tuple.Create(s, false);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"\
    ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e6efc7399934242a83bd4e8104009ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e6efc7399934242a83bd4e8104009ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return new Tuple<string,\
    \ bool>(\"\", false);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95182d52309245e59c247754da9a31c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95182d52309245e59c247754da9a31c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        return new Tuple<string, bool>(s, true);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74323f0f2dc943dbb246fc64d7ce854e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74323f0f2dc943dbb246fc64d7ce854e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return new Tuple<string,\
    \ bool>(\"\", false);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b734dd41bd4b3d9996b169f41b0692>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b734dd41bd4b3d9996b169f41b0692>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <403d2a903a74437e8625480c57b29a36>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <403d2a903a74437e8625480c57b29a36>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <0593a54553de433a9c40e605902ff26b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return new Tuple<string,\
    \ bool>(\"\", false);\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ReverseDelete((\"abcde\"), (\"ae\")).Equals((Tuple.Create(\"\
    bcd\", false))));\n    Debug.Assert(ReverseDelete((\"abcdef\"), (\"b\")).Equals((Tuple.Create(\"\
    acdef\", false))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"\
    cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"dwik\"), (\"w\")).Equals((Tuple.Create(\"\
    dik\", false))));\n    Debug.Assert(ReverseDelete((\"a\"), (\"a\")).Equals((Tuple.Create(\"\
    \", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"\")).Equals((Tuple.Create(\"\
    abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"abcdedcba\"), (\"v\"\
    )).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc421230aa434725b1519f10abb8372a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f0329a0387e4053a8dd3fa08bed3a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return Tuple.Create(\"\
    \", false);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf6d9ac37dd420d97620fae77e22c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <3fa98c21c4134bf7a5623b81b6d32ea8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <35a28b979765468f9d9da1cac0ebf170>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Task\n    // We are given two strings s and c, you have\
    \ to deleted all the characters in s that are equal to any character in c\n  \
    \  // then check if the result string is palindrome.\n    // A string is called\
    \ palindrome if it reads the same backward as forward.\n    // You should return\
    \ a tuple containing the result string and True/False for the check.\n    // Example\n\
    \    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\"\
    , false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"\
    acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    //\
    \ (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string\
    \ s, string c) {\n        // Your code here\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ReverseDelete((\"\
    abcde\"), (\"ae\")).Equals((Tuple.Create(\"bcd\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdef\"), (\"b\")).Equals((Tuple.Create(\"acdef\", false))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"ab\")).Equals((Tuple.Create(\"cdedc\", true))));\n    Debug.Assert(ReverseDelete((\"\
    dwik\"), (\"w\")).Equals((Tuple.Create(\"dik\", false))));\n    Debug.Assert(ReverseDelete((\"\
    a\"), (\"a\")).Equals((Tuple.Create(\"\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    abcdedcba\"), (\"v\")).Equals((Tuple.Create(\"abcdedcba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    vabba\"), (\"v\")).Equals((Tuple.Create(\"abba\", true))));\n    Debug.Assert(ReverseDelete((\"\
    mamma\"), (\"mia\")).Equals((Tuple.Create(\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001b] in <b8b2fedc5b98415198fba125d10fcafc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793669
