name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new\
  \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new\
  \ List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n\
  \    // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L,\
  \ (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
  \ (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long> arr)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        // Your code here\n        return arr;", "        arr.Sort((a,\
    \ b) => {\n            var aBits = Convert.ToString(a, 2).Count(c => c == '1');\n\
    \            var bBits = Convert.ToString(b, 2).Count(c => c == '1');\n      \
    \      return aBits == bBits ? a.CompareTo(b) : aBits.CompareTo(bBits);\n    \
    \    });\n        return arr;", "        return arr.OrderBy(x => x.ToString(\"\
    X\").Count(c => c == '1')).ThenBy(x => x).ToList();", "        // Your code here\n\
    \        return arr;", "        // Your code here\n        return arr;", "   \
    \     return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c == '1')).ThenBy(x\
    \ => x).ToList();", "        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y\
    \ => y == '1')).ThenBy(x => x).ToList();", "        // Your code here\n      \
    \  return arr;", "        arr.Sort((a, b) => {\n            var aBits = Convert.ToString(a,\
    \ 2).Count(c => c == '1');\n            var bBits = Convert.ToString(b, 2).Count(c\
    \ => c == '1');\n            return aBits == bBits ? a.CompareTo(b) : aBits.CompareTo(bBits);\n\
    \        });\n        return arr;", "        // your code here\n        var sorted\
    \ = arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x => x).ToList();\n\
    \        return sorted;", "        arr.Sort((a, b) => {\n            var aBin\
    \ = Convert.ToString(a, 2);\n            var bBin = Convert.ToString(b, 2);\n\
    \            var aOnes = aBin.Count(c => c == '1');\n            var bOnes = bBin.Count(c\
    \ => c == '1');\n            if (aOnes != bOnes) {\n                return aOnes\
    \ - bOnes;\n            }\n            return (int)a - (int)b;\n        });\n\
    \        return arr;", "        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y\
    \ => y == '1')).ThenBy(x => x).ToList();", "        arr.Sort((a, b) => {\n   \
    \         var aOnes = CountOnes(a);\n            var bOnes = CountOnes(b);\n \
    \           if (aOnes == bOnes) {\n                return a.CompareTo(b);\n  \
    \          }\n            return aOnes.CompareTo(bOnes);\n        });\n      \
    \  return arr;", "        List<long> sorted = new List<long>();\n        foreach\
    \ (long num in arr) {\n            sorted.Add(num);\n        }\n        sorted.Sort((a,\
    \ b) => {\n            int aOnes = CountOnes(a);\n            int bOnes = CountOnes(b);\n\
    \            if (aOnes == bOnes) {\n                return a.CompareTo(b);\n \
    \           }\n            return aOnes.CompareTo(bOnes);\n        });\n     \
    \   return sorted;", "        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c\
    \ => c == '1')).ThenBy(x => x).ToList();", "        return arr.OrderBy(x => Convert.ToString(x,\
    \ 2).Count(c => c == '1')).ThenBy(x => x).ToList();", "        return arr.OrderBy(x\
    \ => Convert.ToString(x, 2).Count(y => y == '1')).ThenBy(x => x).ToList();", " \
    \       // Your code goes here\n        return arr;", "        // Your code here\n\
    \        return arr;", "        // your code here\n        return arr;"]
stop_tokens:
- "\n    }\n"
